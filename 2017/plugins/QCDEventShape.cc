// -*- C++ -*-
//
// Package:    Test/QCDEventShape
// Class:      QCDEventShape
// 
/**\class QCDEventShape QCDEventShape.cc Test/QCDEventShape/plugins/QCDEventShape.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Soumyadip Barman
//         Created:  Tue, 02 Feb 2021 10:24:21 GMT
//
//


// system include files

#define DIJETAVE 

////for data
//#define JETENERGY
//#define TRIGGER

////for Madgraph
#define LHAPDF
#define JETRESO
#define TRIGGER
#define MATCHING

////for Pythia8 & Herwig7
//#define JETRESO
//#define TRIGGER
//#define MATCHING

////MC Flavor Tagging 
#define FLAV

////For Flat
//#define FLAT

////For GenParticle only
//#define GENPART

//#define LUMIWEIGHT
//#define MERGE_BIN

//#define TRACKSYS

//For L1 PreFiring
#define PREFIRE

//For PileUp
#define PUNOMI
//#define PUUP
//#define PUDOWN

//For Hybrid JER
#define STOCHASTIC

//For Track Reconstruction Efficiency
#define TRACKEFF

//For Track pT Resolution
#define TRACKPTUP
#define TRACKPTDOWN

//Scale Variation for MG5 & PY8Flat
#define SCALEUNC


#include <memory>
#include <map>
#include <string>
#include <vector>
#include "TCanvas.h"
#include "TFormula.h"
#include "TFile.h"
#include "TH1F.h"
#include "TTree.h"
#include <cmath>
#include "TMath.h"
#include "CLHEP/Vector/LorentzVector.h"
#include "TRandom.h"
#include "TUnfoldBinning.h"
#include "TUnfoldDensity.h"
#include "TUnfoldBinningXML.h"
#include "TUnfold.h"
#include "TUnfoldSys.h"

#include "TH2F.h"
#include "TProfile.h"
#include <fstream>
#include <iostream>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include <time.h>
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "DataFormats/PatCandidates/interface/Electron.h"
#include "DataFormats/PatCandidates/interface/Photon.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/PatCandidates/interface/Tau.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/MET.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/PatCandidates/interface/PackedGenParticle.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "DataFormats/Math/interface/deltaR.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "L1Trigger/GlobalTriggerAnalyzer/interface/L1GtTrigReport.h"
#include "CondFormats/L1TObjects/interface/L1GtTriggerMenu.h"
#include "CondFormats/DataRecord/interface/L1GtTriggerMenuRcd.h"
#include "L1Trigger/GlobalTriggerAnalyzer/interface/L1GtTrigReportEntry.h"
#include "CondFormats/DataRecord/interface/L1GtStableParametersRcd.h"
#include "DataFormats/PatCandidates/interface/TriggerObjectStandAlone.h"
#include "DataFormats/PatCandidates/interface/PackedTriggerPrescales.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"

#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "SimDataFormats/GeneratorProducts/interface/PdfInfo.h"
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/LHERunInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h"

#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "DataFormats/HLTReco/interface/TriggerEvent.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
//#include "FWCore/Framework/interface/TriggerNames.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "DataFormats/Luminosity/interface/LumiDetails.h"

#include "Test/QCDEventShape/plugins/EventShape_vector.h" 


#include "DataFormats/Common/interface/View.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/TrackReco/interface/TrackBase.h"
#include "DataFormats/BeamSpot/interface/BeamSpot.h"
#include "CommonTools/Statistics/interface/ChiSquaredProbability.h"

#include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"

//#include "HLTrigger/HLTcore/interface/HLTPrescaleProvider.h"
#include "JetMETCorrections/Modules/interface/JetResolution.h"
#include "CondFormats/JetMETObjects/interface/JetResolutionObject.h"
#include <JetMETCorrections/Modules/interface/JetResolution.h>
#include <FWCore/Framework/interface/EventSetup.h>
#include <FWCore/Framework/interface/ESHandle.h>
#include <CondFormats/DataRecord/interface/JetResolutionRcd.h>
#include <CondFormats/DataRecord/interface/JetResolutionScaleFactorRcd.h>
#include "FWCore/Utilities/interface/typelookup.h"
#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
#include "CondFormats/JetMETObjects/interface/JetCorrectionUncertainty.h"
#include "HLTrigger/HLTcore/interface/HLTPrescaleProvider.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
#include "PhysicsTools/Utilities/interface/LumiReWeighting.h"
#include "CLHEP/Vector/ThreeVector.h"

using namespace edm;
using namespace reco;
using namespace std;
using namespace CLHEP;
using namespace trigger;
using namespace math;

static const int nhist=10; 
static const int nHLTmx=10; //10 triggers
static const int ngenPT=5;  // event PT bins : merged two trigger phase-space into one

const int ndef=3; // 3 JCO definition
const int njet=2; // 2 Jets 
const int nkappa=10; // 10 kappas
const int range=200; // bin-edge range

const char* jcodef[ndef]={"D","L","T"}; // 3 JCO definitions
double jetname[njet]={1,2};             // 2 Jets
double kappa[nkappa]={0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0}; // 10 kappa values

double recoJetpT, recojet1_pt, recojet2_pt, genrecojet1_pt, genrecojet2_pt;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Date_26Jul2023 : Fixed Binning
double recobins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};

double genbins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};

double recomin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double recomax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};

double genmin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double genmax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Date_02Jun2023 : Some bins and range modifed by hand as there are some bins with zero entries at reco level
double nrecobins[ndef][njet][nkappa]={{{40,32,24,20,16,16,24,20,20,16},{52,36,32,28,24,20,24,24,20,16}},{{24,24,20,20,20,20,20,16,16,16},{24,24,20,20,20,24,24,20,20,16}},{{24,24,20,16,20,20,16,16,16,16},{24,24,24,20,24,20,20,20,20,20}}};

double ngenbins[ndef][njet][nkappa]={{{20,16,12,10,8,8,12,10,10,8},{26,18,16,14,12,10,12,12,10,8}},{{12,12,10,10,10,10,10,8,8,8},{12,12,10,10,10,12,12,10,10,8}},{{12,12,10,8,10,10,8,8,8,8},{12,12,12,10,12,10,10,10,10,10}}};

double recorng[ndef][njet][nkappa][range]={{{{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//40
{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//32
{-4.00,-3.33,-2.67,-2.27,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.27,2.67,3.33,4.00},//24
{-2.93,-2.40,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.40,2.93},//20
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13},//16
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24 done
{-1.33,-1.20,-1.07,-0.94,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,0.94,1.07,1.20,1.33}, //20 done
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-3.73,-3.60,-3.47,-3.20,-2.93,-2.80,-2.67,-2.53,-2.40,-2.27,-2.13,-2.00,-1.87,-1.73,-1.60,-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47,1.60,1.73,1.87,2.00,2.13,2.27,2.40,2.53,2.67,2.80,2.93,3.20,3.47,3.60,3.73},//52
{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//36
{-3.60,-3.27,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.27,3.60},//32 done
{-2.67,-2.40,-2.13,-1.86,-1.60,-1.33,-1.07,-0.87,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.87,1.07,1.33,1.60,1.86,2.13,2.40,2.67},//28 done
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24 done
{-1.87,-1.60,-1.33,-1.06,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,1.06,1.33,1.60,1.87},//20 done
{-1.47,-1.33,-1.20,-1.06,-0.93,-0.80,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.80,0.93,1.06,1.20,1.33,1.47}, //24 done
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24
{-1.20,-1.13,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.13,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done 
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.67,0.80,0.93,1.07},//24
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done
{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80},//20 done
{-0.87,-0.77,-0.67,-0.54,-0.40,-0.30,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.30,0.40,0.54,0.67,0.77,0.87}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done
{-1.07,-0.87,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.87,1.07},//24
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.80,1.07},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00}},//16

{{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.67,0.80,0.93,1.07}, //24
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-0.87,-0.80,-0.73,-0.60,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.60,0.73,0.80,0.87}, //24 done
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.83,-0.67,-0.57,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.57,0.67,0.83,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00}}}};//20


double genrng[ndef][njet][nkappa][range]={{{{-3.73,-3.20,-2.67,-2.13,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.13,2.67,3.20,3.73},
{-3.73,-3.20,-2.67,-2.13,-1.60,-1.07,-0.53,-0.27,0.00,0.27,0.53,1.07,1.60,2.13,2.67,3.20,3.73},
{-4.00,-2.67,-1.87,-1.33,-0.80,-0.27,0.00,0.27,0.80,1.33,1.87,2.67,4.00},
{-2.93,-1.87,-1.33,-0.80,-0.27,0.00,0.27,0.80,1.33,1.87,2.93},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.13,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.13},
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47}, //12 done
{-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33},//10 done
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-3.73,-3.47,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.47,3.73},
{-3.73,-3.20,-2.67,-2.13,-1.60,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.60,2.13,2.67,3.20,3.73},
{-3.60,-2.93,-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40,2.93,3.60}, //16 done
{-2.67,-2.13,-1.60,-1.07,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,1.07,1.60,2.13,2.67},//14 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//12 done
{-1.87,-1.33,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.33,1.87},//10 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},//12 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},
{-1.20,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73},//12 done
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73}, //12 done
{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80},//10 done
{-0.87,-0.67,-0.40,-0.20,-0.07,0.00,0.07,0.20,0.40,0.67,0.87},//10 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //10 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73}, //12 done
{-1.07,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,1.07},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,1.07},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00}},

{{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80},//12 done
{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80}, //12 done
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-0.87,-0.73,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.73,0.87}, //12 done
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.67,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.67,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00}}}};
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Date_26Jul2023 : Some bins and range modifed by hand as there are some bins with zero entries at reco level : bins changed for lower kappa values
double nrecobins[ndef][njet][nkappa]={{{28,20,20,16,16,16,24,20,20,16},{28,24,24,24,24,20,24,24,20,16}},{{20,20,20,20,20,20,20,16,16,16},{20,20,20,20,20,24,24,20,20,16}},{{20,20,20,16,20,20,16,16,16,16},{20,20,20,20,24,20,20,20,20,20}}};

double ngenbins[ndef][njet][nkappa]={{{14,10,10,8,8,8,12,10,10,8},{14,12,12,12,12,10,12,12,10,8}},{{10,10,10,10,10,10,10,8,8,8},{10,10,10,10,10,12,12,10,10,8}},{{10,10,10,8,10,10,8,8,8,8},{10,10,10,10,12,10,10,10,10,10}}};

double recorng[ndef][njet][nkappa][range]={{{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},//28
{-3.33,-2.83,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,-0.17,0.00,0.17,0.33,0.67,1.00,1.33,1.67,2.00,2.33,2.83,3.33},//20
{-3.33,-2.83,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,-0.17,0.00,0.17,0.33,0.67,1.00,1.33,1.67,2.00,2.33,2.83,3.33},//20
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13},//16
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24 done
{-1.33,-1.20,-1.07,-0.94,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,0.94,1.07,1.20,1.33}, //20 done
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},//28
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24 done
{-1.87,-1.60,-1.33,-1.06,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,1.06,1.33,1.60,1.87},//20 done
{-1.47,-1.33,-1.20,-1.06,-0.93,-0.80,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.80,0.93,1.06,1.20,1.33,1.47}, //24 done
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24
{-1.20,-1.13,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.13,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20 done 
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80},//20 done
{-0.87,-0.77,-0.67,-0.54,-0.40,-0.30,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.30,0.40,0.54,0.67,0.77,0.87}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07}, //20 done
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.80,1.07},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00}},//16

{{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-0.87,-0.80,-0.73,-0.60,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.60,0.73,0.80,0.87}, //24 done
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.83,-0.67,-0.57,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.57,0.67,0.83,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00}}}};//20


double genrng[ndef][njet][nkappa][range]={{{{-3.67,-3.00,-2.33,-1.67,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.67,2.33,3.00,3.67},
{-3.33,-2.33,-1.67,-1.00,-0.33,0.00,0.33,1.00,1.67,2.33,3.33},
{-3.33,-2.33,-1.67,-1.00,-0.33,0.00,0.33,1.00,1.67,2.33,3.33},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.13,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.13},
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47}, //12 done
{-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33},//10 done
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-3.67,-3.00,-2.33,-1.67,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.67,2.33,3.00,3.67},
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40}, //16 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//14 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//12 done
{-1.87,-1.33,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.33,1.87},//10 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},//12 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},
{-1.20,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},//12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80},//10 done
{-0.87,-0.67,-0.40,-0.20,-0.07,0.00,0.07,0.20,0.40,0.67,0.87},//10 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //10 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07}, //12 done
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,1.07},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00}},

{{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},//12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-0.87,-0.73,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.73,0.87}, //12 done
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.67,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.67,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00}}}};

//----------------------------------------PT Binning For 2D unfold 
double recohtbins[nHLTmx+1] = {92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0}; // 10 trigger phase-space
double genhtbins[ngenPT+1] = {92, 185, 319, 467, 579, 3000.0};   // 5 PT binning
//double genhtbins[ngenPT+1] = {100, 400, 700, 1000, 1400, 3000.0};

/*
#ifdef MERGE_BIN
double recohtbins[nHLTmx+1] = {83, 109, 176, 247, 318, 387, 477, 573, 3000.0}; //For 2018
#else
double recohtbins[nHLTmx+1] = {66, 95, 155, 227, 286, 350, 444, 557, 3000.0}; // For 2016 Trigger
#endif
*/

//---------------------------------------------Lumi weight
/*
int iera = 2;// 0 for Run 2016, 1 for Run 2017 , 2 for Run 2018
double lumi[3] = {36330, 41480, 59830};
double total_lumi = lumi[0]+lumi[1]+lumi[2];
double lumiwtt = lumi[iera]/total_lumi;
*/
//-------------------------------------------

const int npileupmx=99; //49;
double rat_pileup[nHLTmx][npileupmx]={{0}};
//clock_t t1,t2;

//UL PU
double mcpileup[npileupmx] ={ 1.1840841518e-05, 3.46661037703e-05, 8.98772521472e-05, 7.47400487733e-05, 0.000123005176624,
    0.000156501700614, 0.000154660478659, 0.000177496185603, 0.000324149805611, 0.000737524009713,
    0.00140432980253, 0.00244424508696, 0.00380027898037, 0.00541093042612, 0.00768803501793,
    0.010828224552, 0.0146608623707, 0.01887739113, 0.0228418813823, 0.0264817796874,
    0.0294637401336, 0.0317960986171, 0.0336645950831, 0.0352638818387, 0.036869429333,
    0.0382797316998, 0.039386705577, 0.0398389681346, 0.039646211131, 0.0388392805703,
    0.0374195678161, 0.0355377892706, 0.0333383902828, 0.0308286549265, 0.0282914440969,
    0.0257860718304, 0.02341635055, 0.0213126338243, 0.0195035612803, 0.0181079838989,
    0.0171991315458, 0.0166377598339, 0.0166445341361, 0.0171943735369, 0.0181980997278,
    0.0191339792146, 0.0198518804356, 0.0199714909193, 0.0194616474094, 0.0178626975229,
    0.0153296785464, 0.0126789254325, 0.0100766041988, 0.00773867100481, 0.00592386091874,
    0.00434706240169, 0.00310217013427, 0.00213213401899, 0.0013996000761, 0.000879148859271,
    0.000540866009427, 0.000326115560156, 0.000193965828516, 0.000114607606623, 6.74262828734e-05,
    3.97805301078e-05, 2.19948704638e-05, 9.72007976207e-06, 4.26179259146e-06, 2.80015581327e-06,
    1.14675436465e-06, 2.52452411995e-07, 9.08394910044e-08, 1.14291987912e-08, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0};

//HLT Path PileUP
#ifdef PUNOMI
double datpileup[nHLTmx][npileupmx] ={{1.2261e-05, 3.25983e-05, 9.35687e-05, 0.0001699, 0.000139256, 0.000180311, 0.000187726, 0.000187903, 0.000305346, 0.00106055, 0.00224675, 0.0041572, 0.0056444, 0.00624168, 0.00810533, 0.0122968, 0.019227, 0.0280904, 0.0373568, 0.0467056, 0.0556469, 0.0618341, 0.0629647, 0.0592638, 0.0532431, 0.0475882, 0.043455, 0.0406739, 0.0386113, 0.0367205, 0.0347792, 0.0327671, 0.0306462, 0.0283367, 0.02581, 0.0231219, 0.0203712, 0.0176587, 0.0150804, 0.0127326, 0.0107031, 0.00904938, 0.00778586, 0.00688539, 0.00628898, 0.00591491, 0.00566643, 0.00544368, 0.00516112, 0.00476436, 0.00424043, 0.00361885, 0.00295392, 0.00230621, 0.00172573, 0.00124209, 0.000863727, 0.000583162, 0.000384216, 0.000248216, 0.000157935, 9.93742e-05, 6.20605e-05, 3.86037e-05, 2.39999e-05, 1.49631e-05, 9.38534e-06, 5.93849e-06, 3.79797e-06, 2.45746e-06, 1.60848e-06, 1.06377e-06, 7.09552e-07, 4.76282e-07, 3.20995e-07, 2.1675e-07, 1.46363e-07, 9.86812e-08, 6.63442e-08, 4.443e-08, 2.96124e-08, 1.96278e-08, 1.29301e-08, 8.46096e-09, 5.49688e-09, 3.54407e-09, 2.26679e-09, 1.43778e-09, 9.0409e-10, 5.63447e-10, 3.47948e-10, 2.12864e-10, 1.28986e-10, 7.74034e-11, 4.59938e-11, 2.70587e-11, 1.57592e-11, 9.08545e-12, 5.18446e-12},
{9.4803e-06, 2.43905e-05, 6.70879e-05, 0.000127414, 0.000117507, 0.000162817, 0.000201244, 0.000203821, 0.000302931, 0.000881722, 0.00181937, 0.00337518, 0.00470357, 0.00543067, 0.00697829, 0.00975552, 0.0137474, 0.0185058, 0.0233242, 0.028136, 0.0331135, 0.0378768, 0.0418185, 0.0447997, 0.0471482, 0.0491591, 0.0507096, 0.0514705, 0.05121, 0.0498862, 0.0476408, 0.0446857, 0.0411886, 0.0372795, 0.0331211, 0.0289208, 0.0248784, 0.0211437, 0.0178131, 0.0149509, 0.0125983, 0.0107695, 0.00944514, 0.00857149, 0.00806291, 0.00780614, 0.00766833, 0.00751382, 0.00722893, 0.00674512, 0.0060521, 0.00519882, 0.00426791, 0.00334978, 0.00251928, 0.00182181, 0.00127217, 0.000861816, 0.000569053, 0.000367888, 0.00023384, 0.0001467, 9.11635e-05, 5.63139e-05, 3.4702e-05, 2.14091e-05, 1.32703e-05, 8.29051e-06, 5.23356e-06, 3.34337e-06, 2.16219e-06, 1.41444e-06, 9.34406e-07, 6.21997e-07, 4.16207e-07, 2.79319e-07, 1.87618e-07, 1.25915e-07, 8.43107e-08, 5.62583e-08, 3.73741e-08, 2.46996e-08, 1.62275e-08, 1.05924e-08, 6.866e-09, 4.41749e-09, 2.8199e-09, 1.78534e-09, 1.12072e-09, 6.97335e-10, 4.29974e-10, 2.62666e-10, 1.58944e-10, 9.52561e-11, 5.65307e-11, 3.32173e-11, 1.93235e-11, 1.11277e-11, 6.34289e-12},
{1.30648e-05, 3.37663e-05, 9.12109e-05, 0.000170794, 0.000133763, 0.000188243, 0.000206265, 0.000198962, 0.000349243, 0.00119873, 0.00263237, 0.00502284, 0.00704542, 0.00811181, 0.0102334, 0.0138368, 0.0187139, 0.0241071, 0.0288303, 0.0325694, 0.0358095, 0.0387399, 0.0410596, 0.042627, 0.0437118, 0.0446279, 0.0453181, 0.0454978, 0.0449377, 0.0435849, 0.0415752, 0.0390991, 0.0362649, 0.0331213, 0.0297665, 0.0263672, 0.0230922, 0.0200491, 0.0172941, 0.0148753, 0.0128537, 0.0112901, 0.010217, 0.00961726, 0.00941714, 0.00948889, 0.00966428, 0.00976155, 0.00962373, 0.0091542, 0.00833831, 0.00724787, 0.00600549, 0.00474767, 0.00359006, 0.00260609, 0.00182396, 0.00123648, 0.000815649, 0.000525855, 0.000332673, 0.000207274, 0.000127623, 7.79163e-05, 4.73332e-05, 2.87189e-05, 1.74725e-05, 1.07015e-05, 6.62187e-06, 4.15074e-06, 2.63935e-06, 1.7025e-06, 1.11256e-06, 7.3488e-07, 4.89303e-07, 3.2748e-07, 2.19741e-07, 1.47498e-07, 9.88584e-08, 6.60615e-08, 4.39621e-08, 2.91067e-08, 1.91581e-08, 1.25279e-08, 8.13458e-09, 5.2422e-09, 3.35148e-09, 2.12495e-09, 1.33571e-09, 8.32159e-10, 5.1372e-10, 3.14182e-10, 1.90323e-10, 1.14179e-10, 6.78275e-11, 3.9893e-11, 2.32281e-11, 1.3388e-11, 7.63778e-12},
{1.28126e-05, 3.34441e-05, 8.92851e-05, 0.000170918, 0.000137532, 0.000210186, 0.00023046, 0.000215237, 0.000375096, 0.00120188, 0.00258399, 0.0048825, 0.00662783, 0.00716984, 0.00856015, 0.0111956, 0.0148646, 0.0190208, 0.022816, 0.0261005, 0.0294923, 0.0332697, 0.0369061, 0.0399426, 0.0425614, 0.0450982, 0.0474048, 0.0489871, 0.0494621, 0.0487723, 0.0471259, 0.0447763, 0.041865, 0.0384599, 0.0346883, 0.0307604, 0.0268976, 0.023252, 0.0199101, 0.0169348, 0.0143851, 0.0123128, 0.0107426, 0.00965859, 0.00899747, 0.00864905, 0.00846704, 0.00829293, 0.00798951, 0.00747089, 0.00671881, 0.00578429, 0.00475809, 0.00374104, 0.00281748, 0.00203933, 0.00142442, 0.000964327, 0.000635579, 0.000409543, 0.000258998, 0.00016132, 9.92926e-05, 6.05896e-05, 3.67804e-05, 2.22931e-05, 1.35443e-05, 8.2809e-06, 5.11303e-06, 3.19702e-06, 2.02737e-06, 1.30401e-06, 8.49702e-07, 5.59682e-07, 3.71656e-07, 2.4812e-07, 1.66104e-07, 1.11257e-07, 7.44217e-08, 4.96423e-08, 3.29811e-08, 2.18032e-08, 1.4331e-08, 9.35941e-09, 6.07006e-09, 3.90752e-09, 2.49568e-09, 1.58087e-09, 9.92849e-10, 6.18053e-10, 3.81255e-10, 2.33001e-10, 1.41049e-10, 8.45636e-11, 5.02034e-11, 2.95098e-11, 1.71725e-11, 9.89228e-12, 5.64048e-12},
{1.40344e-05, 3.64128e-05, 9.89987e-05, 0.000182249, 0.000136458, 0.000175894, 0.000187971, 0.00018103, 0.000327709, 0.0012372, 0.00274328, 0.00521054, 0.0073317, 0.00851708, 0.010838, 0.0148209, 0.0202994, 0.0263458, 0.0314896, 0.035271, 0.0381437, 0.0403982, 0.0420175, 0.0430443, 0.0436453, 0.0439649, 0.0439474, 0.0434663, 0.0424258, 0.0407842, 0.0386302, 0.036122, 0.0333579, 0.0303821, 0.0272792, 0.0241946, 0.021273, 0.0186067, 0.0162464, 0.0142361, 0.0126261, 0.011458, 0.0107435, 0.0104501, 0.0104952, 0.010745, 0.0110258, 0.0111518, 0.010967, 0.0103857, 0.00941182, 0.00814097, 0.006718, 0.00529534, 0.00399742, 0.0029002, 0.00203045, 0.00137756, 0.000909539, 0.000586819, 0.000371421, 0.000231511, 0.000142654, 8.72417e-05, 5.31722e-05, 3.24355e-05, 1.98865e-05, 1.23009e-05, 7.69906e-06, 4.8844e-06, 3.14202e-06, 2.04746e-06, 1.34893e-06, 8.96297e-07, 5.99031e-07, 4.01697e-07, 2.69677e-07, 1.80921e-07, 1.21111e-07, 8.07983e-08, 5.36685e-08, 3.54637e-08, 2.32968e-08, 1.52054e-08, 9.85528e-09, 6.34024e-09, 4.04699e-09, 2.56206e-09, 1.60819e-09, 1.00059e-09, 6.16922e-10, 3.7685e-10, 2.28027e-10, 1.36651e-10, 8.10928e-11, 4.76477e-11, 2.77168e-11, 1.59604e-11, 9.09719e-12},
{1.50897e-05, 3.93997e-05, 0.00010682, 0.000196268, 0.000143931, 0.000183437, 0.000195187, 0.000185572, 0.000341132, 0.00131967, 0.00293127, 0.00555634, 0.00776068, 0.0088927, 0.0111914, 0.0152094, 0.0207495, 0.026851, 0.032001, 0.0357213, 0.0385119, 0.0407166, 0.042307, 0.0432853, 0.0437876, 0.0439548, 0.0437578, 0.0431164, 0.0419738, 0.040301, 0.0381741, 0.0357292, 0.0330441, 0.0301501, 0.0271253, 0.0241123, 0.0212519, 0.0186327, 0.0163021, 0.0143035, 0.0126882, 0.0114998, 0.0107508, 0.0104102, 0.0103979, 0.0105858, 0.0108087, 0.0108898, 0.0106804, 0.0100967, 0.00914045, 0.00790102, 0.00651628, 0.00513302, 0.00387185, 0.00280673, 0.00196362, 0.00133182, 0.000879676, 0.000568294, 0.000360544, 0.000225492, 0.000139532, 8.5738e-05, 5.2511e-05, 3.21793e-05, 1.98067e-05, 1.22881e-05, 7.70578e-06, 4.89312e-06, 3.14789e-06, 2.05028e-06, 1.34968e-06, 8.9595e-07, 5.98245e-07, 4.00832e-07, 2.68902e-07, 1.8029e-07, 1.20627e-07, 8.0441e-08, 5.34116e-08, 3.52827e-08, 2.31714e-08, 1.51199e-08, 9.79765e-09, 6.30189e-09, 4.02176e-09, 2.54565e-09, 1.59764e-09, 9.93873e-10, 6.12696e-10, 3.74219e-10, 2.26407e-10, 1.35664e-10, 8.04981e-11, 4.72931e-11, 2.75077e-11, 1.58384e-11, 9.02676e-12},
{1.3538e-05, 3.51595e-05, 9.54755e-05, 0.000176364, 0.00013294, 0.00017296, 0.000185989, 0.00018022, 0.000328806, 0.0012275, 0.00273387, 0.00520954, 0.00738149, 0.0086785, 0.011099, 0.0151369, 0.0206256, 0.0267004, 0.0319878, 0.0360219, 0.0391458, 0.0415667, 0.0432558, 0.0442686, 0.0447952, 0.0450095, 0.0448818, 0.0442959, 0.0431527, 0.0414022, 0.0391214, 0.0364629, 0.0335337, 0.0303975, 0.0271591, 0.023976, 0.0209928, 0.0182929, 0.0159137, 0.0138867, 0.0122515, 0.0110414, 0.0102615, 0.00987638, 0.00980622, 0.00992878, 0.0100896, 0.0101254, 0.00989974, 0.00933577, 0.00843501, 0.00727919, 0.00599442, 0.00471506, 0.00355142, 0.00257079, 0.00179617, 0.00121689, 0.000803132, 0.000518657, 0.000329085, 0.000205925, 0.000127535, 7.84492e-05, 4.80993e-05, 2.95043e-05, 1.81737e-05, 1.12801e-05, 7.07519e-06, 4.49287e-06, 2.89032e-06, 1.88256e-06, 1.23946e-06, 8.23038e-07, 5.49823e-07, 3.68617e-07, 2.47469e-07, 1.66052e-07, 1.11191e-07, 7.42096e-08, 4.93136e-08, 3.26007e-08, 2.14257e-08, 1.39903e-08, 9.07146e-09, 5.83827e-09, 3.72795e-09, 2.3609e-09, 1.4824e-09, 9.22599e-10, 5.68999e-10, 3.4767e-10, 2.10424e-10, 1.26133e-10, 7.48684e-11, 4.40002e-11, 2.56006e-11, 1.47448e-11, 8.40601e-12},
{8.21463e-06, 2.13834e-05, 5.97399e-05, 0.000113044, 9.91145e-05, 0.000143799, 0.000163109, 0.000174258, 0.000300787, 0.000951537, 0.00213666, 0.00412879, 0.00619767, 0.00798274, 0.0104905, 0.0141701, 0.0192486, 0.0251988, 0.0308561, 0.0356524, 0.0396484, 0.0428207, 0.0450378, 0.0464128, 0.0472937, 0.0479609, 0.0483734, 0.048296, 0.0474884, 0.045818, 0.0433431, 0.0402448, 0.0366963, 0.03284, 0.0288474, 0.0249247, 0.0212587, 0.0179685, 0.0151122, 0.0127183, 0.0108027, 0.00936726, 0.00838952, 0.00781723, 0.00756684, 0.007526, 0.00756181, 0.0075387, 0.00734445, 0.00691409, 0.00624294, 0.00538744, 0.0044382, 0.00349306, 0.00263292, 0.00190743, 0.00133378, 0.000904348, 0.000597316, 0.000386009, 0.000245065, 0.000153418, 9.50392e-05, 5.84592e-05, 3.58302e-05, 2.1962e-05, 1.35119e-05, 8.37307e-06, 5.24122e-06, 3.32051e-06, 2.13074e-06, 1.38421e-06, 9.09011e-07, 6.02127e-07, 4.01319e-07, 2.68484e-07, 1.79893e-07, 1.20492e-07, 8.05513e-08, 5.36795e-08, 3.56219e-08, 2.35194e-08, 1.54394e-08, 1.00707e-08, 6.52352e-09, 4.19465e-09, 2.67619e-09, 1.69351e-09, 1.06258e-09, 6.60873e-10, 4.07326e-10, 2.48736e-10, 1.50461e-10, 9.01409e-11, 5.34775e-11, 3.14134e-11, 1.82686e-11, 1.05172e-11, 5.9932e-12},
{4.24759e-06, 1.09596e-05, 3.12109e-05, 6.1272e-05, 6.43298e-05, 0.000106733, 0.000125148, 0.000138472, 0.000199589, 0.000507884, 0.00103917, 0.00198071, 0.00316141, 0.0045428, 0.00643408, 0.00907755, 0.0126714, 0.016877, 0.0210418, 0.0248802, 0.0282544, 0.0309868, 0.033079, 0.0347016, 0.0360907, 0.0374025, 0.0385229, 0.0392181, 0.0393333, 0.0388254, 0.0377583, 0.0362433, 0.0343571, 0.0321569, 0.0297518, 0.0273015, 0.0249464, 0.022769, 0.0208224, 0.0191734, 0.0179099, 0.0171132, 0.0168239, 0.0170182, 0.0175927, 0.0183597, 0.0190611, 0.0194126, 0.0191731, 0.0182099, 0.0165386, 0.0143293, 0.0118379, 0.00933643, 0.00704939, 0.00511515, 0.00358324, 0.00243512, 0.00161331, 0.00104688, 0.00066824, 0.000421236, 0.00026318, 0.000163541, 0.000101421, 6.2984e-05, 3.92956e-05, 2.47007e-05, 1.56773e-05, 1.00592e-05, 6.52612e-06, 4.27749e-06, 2.82796e-06, 1.88202e-06, 1.25805e-06, 8.42925e-07, 5.65057e-07, 3.78376e-07, 2.52763e-07, 1.68264e-07, 1.11524e-07, 7.35393e-08, 4.82121e-08, 3.14073e-08, 2.03198e-08, 1.30504e-08, 8.31695e-09, 5.25748e-09, 3.29549e-09, 2.0477e-09, 1.26095e-09, 7.69349e-10, 4.64998e-10, 2.78361e-10, 1.65016e-10, 9.68619e-11, 5.62905e-11, 3.2384e-11, 1.84417e-11},
{4.24759e-06, 1.09596e-05, 3.12109e-05, 6.1272e-05, 6.43298e-05, 0.000106733, 0.000125148, 0.000138472, 0.000199589, 0.000507884, 0.00103917, 0.00198071, 0.00316141, 0.0045428, 0.00643408, 0.00907755, 0.0126714, 0.016877, 0.0210418, 0.0248802, 0.0282544, 0.0309868, 0.033079, 0.0347016, 0.0360907, 0.0374025, 0.0385229, 0.0392181, 0.0393333, 0.0388254, 0.0377583, 0.0362433, 0.0343571, 0.0321569, 0.0297518, 0.0273015, 0.0249464, 0.022769, 0.0208224, 0.0191734, 0.0179099, 0.0171132, 0.0168239, 0.0170182, 0.0175927, 0.0183597, 0.0190611, 0.0194126, 0.0191731, 0.0182099, 0.0165386, 0.0143293, 0.0118379, 0.00933643, 0.00704939, 0.00511515, 0.00358324, 0.00243512, 0.00161331, 0.00104688, 0.00066824, 0.000421236, 0.00026318, 0.000163541, 0.000101421, 6.2984e-05, 3.92956e-05, 2.47007e-05, 1.56773e-05, 1.00592e-05, 6.52612e-06, 4.27749e-06, 2.82796e-06, 1.88202e-06, 1.25805e-06, 8.42925e-07, 5.65057e-07, 3.78376e-07, 2.52763e-07, 1.68264e-07, 1.11524e-07, 7.35393e-08, 4.82121e-08, 3.14073e-08, 2.03198e-08, 1.30504e-08, 8.31695e-09, 5.25748e-09, 3.29549e-09, 2.0477e-09, 1.26095e-09, 7.69349e-10, 4.64998e-10, 2.78361e-10, 1.65016e-10, 9.68619e-11, 5.62905e-11, 3.2384e-11, 1.84417e-11}};
#endif


//Scale Down
#ifdef PUDOWN
double datpileup[nHLTmx][npileupmx] ={{1.27971e-05, 3.73259e-05, 0.000125104, 0.000153774, 0.000158972, 0.000196566, 0.000191081, 0.000214163, 0.000537681, 0.00165756, 0.0032625, 0.00541376, 0.00625785, 0.00757769, 0.0112887, 0.0180738, 0.0274768, 0.037643, 0.0478978, 0.0578118, 0.0647473, 0.0659155, 0.0616245, 0.0549557, 0.0489776, 0.0447822, 0.0419905, 0.0398255, 0.037738, 0.0355741, 0.0333191, 0.030895, 0.0282253, 0.0253332, 0.0223233, 0.0193192, 0.0164379, 0.0137957, 0.0115022, 0.00963434, 0.00821593, 0.00721758, 0.006569, 0.00617105, 0.00590633, 0.00565551, 0.0053209, 0.00484688, 0.00423256, 0.00352513, 0.00279507, 0.00211211, 0.00152598, 0.00105905, 0.000709899, 0.000462285, 0.000294113, 0.000183777, 0.000113319, 6.92513e-05, 4.21146e-05, 2.55882e-05, 1.55934e-05, 9.56592e-06, 5.92583e-06, 3.7149e-06, 2.35897e-06, 1.51671e-06, 9.85904e-07, 6.46441e-07, 4.26438e-07, 2.82289e-07, 1.8708e-07, 1.23876e-07, 8.18206e-08, 5.38358e-08, 3.52486e-08, 2.29448e-08, 1.48378e-08, 9.52598e-09, 6.06818e-09, 3.83349e-09, 2.40061e-09, 1.48959e-09, 9.1554e-10, 5.5721e-10, 3.35717e-10, 2.00189e-10, 1.18121e-10, 6.89543e-11, 3.98176e-11, 2.2741e-11, 1.28445e-11, 7.17381e-12, 3.96161e-12, 2.16295e-12, 1.16747e-12, 6.22931e-13, 3.28552e-13},
{9.90119e-06, 2.77532e-05, 9.0269e-05, 0.000118194, 0.000132294, 0.000189324, 0.000207481, 0.000231412, 0.000483223, 0.00135054, 0.00264132, 0.00444251, 0.00536162, 0.00660808, 0.00922, 0.0132508, 0.0183578, 0.0236682, 0.0289421, 0.0343989, 0.0396475, 0.0439634, 0.047187, 0.0497208, 0.0518688, 0.0534198, 0.0539857, 0.053341, 0.0515082, 0.0487051, 0.0451745, 0.0410905, 0.0366219, 0.0319989, 0.0274739, 0.023252, 0.019468, 0.016208, 0.0135275, 0.0114497, 0.00995635, 0.00898537, 0.00843429, 0.00816577, 0.00801865, 0.00783118, 0.0074743, 0.0068795, 0.00605498, 0.00507569, 0.00404783, 0.0030754, 0.00223336, 0.00155722, 0.00104791, 0.000684287, 0.000435896, 0.000272208, 0.0001674, 0.000101805, 6.14763e-05, 3.70118e-05, 2.23081e-05, 1.35157e-05, 8.26133e-06, 5.10879e-06, 3.20129e-06, 2.03301e-06, 1.30695e-06, 8.48703e-07, 5.5525e-07, 3.6498e-07, 2.40434e-07, 1.58385e-07, 1.04145e-07, 6.82544e-08, 4.45317e-08, 2.88956e-08, 1.86322e-08, 1.19306e-08, 7.58161e-09, 4.77894e-09, 2.98651e-09, 1.84961e-09, 1.13478e-09, 6.89487e-10, 4.14757e-10, 2.4695e-10, 1.45505e-10, 8.48245e-11, 4.89179e-11, 2.79035e-11, 1.57413e-11, 8.78146e-12, 4.84394e-12, 2.6418e-12, 1.42443e-12, 7.59259e-13, 4.00058e-13},
{1.36482e-05, 3.83915e-05, 0.000122719, 0.000156065, 0.000149834, 0.000214936, 0.000202747, 0.000236956, 0.00060905, 0.00189697, 0.00389519, 0.0066417, 0.00802949, 0.00977072, 0.013223, 0.0182292, 0.0241365, 0.029518, 0.0337512, 0.0373409, 0.0405739, 0.0431107, 0.0447915, 0.0459548, 0.046936, 0.047603, 0.0476098, 0.0467266, 0.0449646, 0.0425318, 0.0396277, 0.0363377, 0.0327395, 0.0290017, 0.0253375, 0.0219065, 0.0187914, 0.0160494, 0.0137507, 0.0119704, 0.0107529, 0.0100822, 0.00987082, 0.00996323, 0.0101544, 0.0102266, 0.0100011, 0.00938094, 0.00837828, 0.00710343, 0.00571493, 0.00437109, 0.00318966, 0.00223092, 0.00150336, 0.00098131, 0.000623658, 0.000387747, 0.000236855, 0.000142716, 8.51526e-05, 5.05128e-05, 2.99191e-05, 1.77753e-05, 1.06409e-05, 6.44439e-06, 3.95995e-06, 2.47221e-06, 1.56748e-06, 1.00746e-06, 6.54533e-07, 4.28457e-07, 2.81697e-07, 1.85499e-07, 1.22058e-07, 8.01026e-08, 5.23522e-08, 3.40346e-08, 2.19884e-08, 1.41064e-08, 8.98058e-09, 5.67047e-09, 3.54937e-09, 2.20151e-09, 1.35259e-09, 8.22914e-10, 4.95637e-10, 2.95454e-10, 1.74279e-10, 1.01707e-10, 5.87137e-11, 3.35239e-11, 1.89297e-11, 1.05698e-11, 5.8355e-12, 3.18528e-12, 1.71887e-12, 9.16932e-13, 4.83508e-13},
{1.33833e-05, 3.7997e-05, 0.00012043, 0.000158368, 0.000153331, 0.000245872, 0.000219392, 0.000262036, 0.000628665, 0.001879, 0.00380674, 0.00636655, 0.0072861, 0.00830893, 0.0107871, 0.0145301, 0.0190544, 0.0233371, 0.0269968, 0.030692, 0.0348285, 0.0388129, 0.0421118, 0.044971, 0.0477427, 0.0501551, 0.051609, 0.0517342, 0.0505762, 0.0484329, 0.0455651, 0.0420875, 0.0381045, 0.0338297, 0.0295371, 0.0254451, 0.0216785, 0.0183175, 0.0154339, 0.0130925, 0.011328, 0.0101249, 0.00940796, 0.00904313, 0.00885198, 0.00864468, 0.00826469, 0.00762484, 0.00672714, 0.00565182, 0.00451631, 0.00343709, 0.0024991, 0.00174356, 0.00117299, 0.000764849, 0.000485775, 0.000301897, 0.000184354, 0.000111041, 6.62201e-05, 3.92524e-05, 2.32245e-05, 1.37777e-05, 8.23225e-06, 4.97417e-06, 3.04842e-06, 1.89763e-06, 1.19955e-06, 7.68674e-07, 4.97952e-07, 3.2507e-07, 2.13182e-07, 1.40054e-07, 9.19591e-08, 6.02318e-08, 3.92952e-08, 2.55045e-08, 1.64529e-08, 1.05408e-08, 6.70227e-09, 4.22707e-09, 2.6431e-09, 1.63779e-09, 1.00534e-09, 6.11129e-10, 3.67788e-10, 2.19079e-10, 1.29136e-10, 7.53116e-11, 4.34483e-11, 2.47925e-11, 1.39912e-11, 7.80779e-12, 4.30826e-12, 2.3504e-12, 1.26769e-12, 6.75916e-13, 3.56247e-13},
{1.4662e-05, 4.1421e-05, 0.000133133, 0.0001642, 0.000152809, 0.000195241, 0.000188269, 0.000211229, 0.000604685, 0.0019761, 0.0040471, 0.00689514, 0.00839947, 0.0103164, 0.0141106, 0.0197159, 0.0263539, 0.0322594, 0.0365972, 0.0398203, 0.0423209, 0.0440915, 0.0451865, 0.0458101, 0.046111, 0.0459961, 0.0453193, 0.0439756, 0.0419575, 0.0394176, 0.0365289, 0.0333701, 0.0300089, 0.0265917, 0.0233029, 0.0202788, 0.0175927, 0.0152968, 0.0134509, 0.0121083, 0.0112882, 0.0109555, 0.0110116, 0.0112939, 0.0115907, 0.01168, 0.0113861, 0.0106274, 0.00944071, 0.00796524, 0.00638388, 0.00487062, 0.00355011, 0.00248294, 0.00167434, 0.00109395, 0.000695835, 0.000432868, 0.000264529, 0.000159503, 9.53257e-05, 5.67355e-05, 3.37937e-05, 2.02419e-05, 1.22456e-05, 7.50665e-06, 4.6712e-06, 2.95106e-06, 1.89012e-06, 1.22433e-06, 7.99684e-07, 5.25096e-07, 3.45675e-07, 2.2761e-07, 1.49617e-07, 9.80334e-08, 6.39495e-08, 4.14895e-08, 2.67497e-08, 1.71266e-08, 1.08826e-08, 6.85905e-09, 4.28611e-09, 2.65428e-09, 1.62836e-09, 9.89319e-10, 5.95083e-10, 3.54297e-10, 2.08744e-10, 1.21684e-10, 7.01711e-11, 4.00247e-11, 2.25782e-11, 1.25949e-11, 6.94719e-12, 3.78872e-12, 2.04274e-12, 1.08879e-12, 5.73669e-13},
{1.57666e-05, 4.48165e-05, 0.000143718, 0.000176346, 0.000160672, 0.000203428, 0.000194711, 0.00021661, 0.000638342, 0.0021122, 0.00432088, 0.00732961, 0.00881981, 0.0106867, 0.0145028, 0.0201703, 0.0268742, 0.032799, 0.0370784, 0.0402109, 0.0426551, 0.0443937, 0.0454324, 0.0459407, 0.0460669, 0.0457553, 0.0449159, 0.0434835, 0.0414558, 0.0389644, 0.0361552, 0.033086, 0.0298128, 0.0264775, 0.0232606, 0.0202936, 0.0176452, 0.0153664, 0.0135177, 0.0121546, 0.0112978, 0.0109135, 0.0109064, 0.0111208, 0.0113553, 0.0113987, 0.011083, 0.010328, 0.00916623, 0.00772878, 0.00619055, 0.00471961, 0.00343705, 0.00240187, 0.00161883, 0.00105781, 0.000673557, 0.000419927, 0.000257475, 0.000155918, 9.36435e-05, 5.60198e-05, 3.35281e-05, 2.01647e-05, 1.22359e-05, 7.51472e-06, 4.67989e-06, 2.95633e-06, 1.8923e-06, 1.22461e-06, 7.99075e-07, 5.24204e-07, 3.44803e-07, 2.26878e-07, 1.4905e-07, 9.76144e-08, 6.36503e-08, 4.12811e-08, 2.66073e-08, 1.70309e-08, 1.08192e-08, 6.81765e-09, 4.25941e-09, 2.63727e-09, 1.61766e-09, 9.82663e-10, 5.90994e-10, 3.51815e-10, 2.07254e-10, 1.20801e-10, 6.96538e-11, 3.97251e-11, 2.24068e-11, 1.2498e-11, 6.89304e-12, 3.75883e-12, 2.02644e-12, 1.08e-12, 5.68988e-13},
{1.41438e-05, 3.99809e-05, 0.000128471, 0.000159141, 0.000148897, 0.000192653, 0.000186313, 0.000211544, 0.000602894, 0.00196266, 0.00404161, 0.00691352, 0.00851965, 0.010558, 0.0144298, 0.0200575, 0.0267127, 0.0327493, 0.0373535, 0.0408568, 0.043544, 0.0453901, 0.046465, 0.0470018, 0.0471847, 0.0469498, 0.0461591, 0.0447016, 0.0425583, 0.0398686, 0.0368055, 0.0334651, 0.0299403, 0.0263975, 0.0230271, 0.0199579, 0.017248, 0.0149343, 0.0130629, 0.0116766, 0.0107866, 0.0103538, 0.0102828, 0.0104253, 0.0105931, 0.0105915, 0.0102663, 0.00954382, 0.00845388, 0.0071163, 0.00569116, 0.00433228, 0.00315021, 0.00219823, 0.0014797, 0.000965973, 0.000614761, 0.000383262, 0.000235104, 0.000142494, 8.56746e-05, 5.13112e-05, 3.07413e-05, 1.85027e-05, 1.12326e-05, 6.89986e-06, 4.29706e-06, 2.71443e-06, 1.73755e-06, 1.12471e-06, 7.34172e-07, 4.819e-07, 3.17201e-07, 2.08883e-07, 1.37344e-07, 9.0026e-08, 5.87521e-08, 3.81355e-08, 2.45989e-08, 1.57568e-08, 1.00165e-08, 6.31583e-09, 3.94818e-09, 2.44589e-09, 1.50102e-09, 9.12241e-10, 5.48883e-10, 3.26882e-10, 1.92642e-10, 1.12326e-10, 6.47903e-11, 3.6964e-11, 2.08563e-11, 1.16369e-11, 6.42005e-12, 3.50194e-12, 1.88849e-12, 1.00676e-12, 5.30543e-13},
{8.58429e-06, 2.43262e-05, 8.03565e-05, 0.000104264, 0.000113364, 0.000163531, 0.000167473, 0.00020783, 0.000502785, 0.00151195, 0.00318468, 0.00560803, 0.00758685, 0.00995961, 0.0135514, 0.0187089, 0.0251281, 0.031471, 0.0368698, 0.0413305, 0.0448498, 0.0472735, 0.0487424, 0.0496777, 0.0503773, 0.0507409, 0.0504724, 0.0493041, 0.0471427, 0.0441261, 0.0404817, 0.0363963, 0.0320527, 0.0276854, 0.0235375, 0.0197848, 0.0165171, 0.0137755, 0.0115822, 0.00994263, 0.00883375, 0.00819501, 0.00792643, 0.00789174, 0.00792971, 0.00787883, 0.00761223, 0.00706625, 0.00625655, 0.00526746, 0.00421468, 0.00321058, 0.00233645, 0.00163177, 0.00109933, 0.000718251, 0.00045745, 0.000285375, 0.000175145, 0.000106184, 6.38441e-05, 3.82235e-05, 2.28825e-05, 1.37554e-05, 8.33611e-06, 5.10956e-06, 3.1742e-06, 1.99976e-06, 1.27659e-06, 8.24132e-07, 5.36612e-07, 3.51401e-07, 2.30807e-07, 1.51693e-07, 9.95627e-08, 6.51548e-08, 4.24576e-08, 2.75214e-08, 1.77303e-08, 1.13442e-08, 7.20398e-09, 4.53805e-09, 2.83435e-09, 1.75445e-09, 1.07588e-09, 6.53403e-10, 3.92885e-10, 2.33835e-10, 1.37726e-10, 8.02611e-11, 4.62706e-11, 2.63849e-11, 1.48799e-11, 8.29848e-12, 4.5762e-12, 2.49509e-12, 1.34496e-12, 7.16712e-13, 3.77544e-13},
{4.44953e-06, 1.24027e-05, 4.21673e-05, 5.77757e-05, 7.6623e-05, 0.000121611, 0.000132746, 0.000157362, 0.000299966, 0.000764843, 0.00152449, 0.00275763, 0.00413773, 0.00598121, 0.00858548, 0.0122475, 0.0167761, 0.0213937, 0.0256648, 0.0294213, 0.0324502, 0.0347427, 0.0365042, 0.0380189, 0.039441, 0.0405936, 0.0412056, 0.0411245, 0.0403392, 0.0389575, 0.0371038, 0.0348511, 0.0322927, 0.0296005, 0.0269623, 0.0245027, 0.0222914, 0.0204022, 0.018937, 0.0179974, 0.0176398, 0.0178414, 0.0184793, 0.0193247, 0.0200624, 0.0203521, 0.0199216, 0.0186466, 0.0165997, 0.0140269, 0.0112526, 0.00858867, 0.0062609, 0.0043803, 0.0029574, 0.00193782, 0.00123907, 0.000777091, 0.000480232, 0.00029368, 0.000178439, 0.000108145, 6.56334e-05, 4.00373e-05, 2.4629e-05, 1.5315e-05, 9.63889e-06, 6.13991e-06, 3.95376e-06, 2.56863e-06, 1.6795e-06, 1.10248e-06, 7.24885e-07, 4.76448e-07, 3.12529e-07, 2.04317e-07, 1.32978e-07, 8.60822e-08, 5.53816e-08, 3.53867e-08, 2.24426e-08, 1.412e-08, 8.80871e-09, 5.44653e-09, 3.3365e-09, 2.02433e-09, 1.21607e-09, 7.23129e-10, 4.25552e-10, 2.47792e-10, 1.4274e-10, 8.13328e-11, 4.58347e-11, 2.55436e-11, 1.40764e-11, 7.66975e-12, 4.13164e-12, 2.20031e-12, 1.15836e-12},
{4.44953e-06, 1.24027e-05, 4.21673e-05, 5.77757e-05, 7.6623e-05, 0.000121611, 0.000132746, 0.000157362, 0.000299966, 0.000764843, 0.00152449, 0.00275763, 0.00413773, 0.00598121, 0.00858548, 0.0122475, 0.0167761, 0.0213937, 0.0256648, 0.0294213, 0.0324502, 0.0347427, 0.0365042, 0.0380189, 0.039441, 0.0405936, 0.0412056, 0.0411245, 0.0403392, 0.0389575, 0.0371038, 0.0348511, 0.0322927, 0.0296005, 0.0269623, 0.0245027, 0.0222914, 0.0204022, 0.018937, 0.0179974, 0.0176398, 0.0178414, 0.0184793, 0.0193247, 0.0200624, 0.0203521, 0.0199216, 0.0186466, 0.0165997, 0.0140269, 0.0112526, 0.00858867, 0.0062609, 0.0043803, 0.0029574, 0.00193782, 0.00123907, 0.000777091, 0.000480232, 0.00029368, 0.000178439, 0.000108145, 6.56334e-05, 4.00373e-05, 2.4629e-05, 1.5315e-05, 9.63889e-06, 6.13991e-06, 3.95376e-06, 2.56863e-06, 1.6795e-06, 1.10248e-06, 7.24885e-07, 4.76448e-07, 3.12529e-07, 2.04317e-07, 1.32978e-07, 8.60822e-08, 5.53816e-08, 3.53867e-08, 2.24426e-08, 1.412e-08, 8.80871e-09, 5.44653e-09, 3.3365e-09, 2.02433e-09, 1.21607e-09, 7.23129e-10, 4.25552e-10, 2.47792e-10, 1.4274e-10, 8.13328e-11, 4.58347e-11, 2.55436e-11, 1.40764e-11, 7.66975e-12, 4.13164e-12, 2.20031e-12, 1.15836e-12}};
#endif

//Scale Up
#ifdef PUUP
double datpileup[nHLTmx][npileupmx] ={{1.18925e-05, 2.81629e-05, 7.27629e-05, 0.000178105, 0.000119669, 0.00016591, 0.000184168, 0.000172988, 0.000216189, 0.000609776, 0.00159999, 0.00294406, 0.00479999, 0.00561468, 0.00638555, 0.00874899, 0.0133037, 0.0202258, 0.028505, 0.0369784, 0.0455354, 0.0536264, 0.0591723, 0.060261, 0.0570574, 0.051621, 0.0462927, 0.0422423, 0.0394651, 0.0374631, 0.0357239, 0.0339732, 0.0321609, 0.0302764, 0.0282593, 0.0260551, 0.023674, 0.021184, 0.0186709, 0.0162172, 0.0139027, 0.0118079, 0.0100027, 0.00853015, 0.00739825, 0.00658214, 0.006032, 0.00567981, 0.00544523, 0.00524425, 0.00500226, 0.00466785, 0.00422085, 0.00367719, 0.00307735, 0.00247197, 0.00190813, 0.00141902, 0.0010203, 0.000712234, 0.00048482, 0.000323217, 0.000211912, 0.000137153, 8.79295e-05, 5.60181e-05, 3.55723e-05, 2.25834e-05, 1.4376e-05, 9.20177e-06, 5.93646e-06, 3.86703e-06, 2.54584e-06, 1.69393e-06, 1.13818e-06, 7.71138e-07, 5.25835e-07, 3.60158e-07, 2.47299e-07, 1.69935e-07, 1.16687e-07, 7.99645e-08, 5.46331e-08, 3.71814e-08, 2.51881e-08, 1.69745e-08, 1.13737e-08, 7.57368e-09, 5.0099e-09, 3.29085e-09, 2.14584e-09, 1.38857e-09, 8.91463e-10, 5.67675e-10, 3.58482e-10, 2.24453e-10, 1.39316e-10, 8.57109e-11, 5.22605e-11},
{9.18596e-06, 2.11954e-05, 5.19332e-05, 0.000131846, 0.000102048, 0.000141352, 0.000192141, 0.000188055, 0.000230153, 0.000531784, 0.00130108, 0.00238326, 0.00392664, 0.00476637, 0.0055897, 0.00738517, 0.0102588, 0.0141531, 0.018559, 0.0229483, 0.0273605, 0.0319177, 0.0362589, 0.0398729, 0.0426384, 0.0448229, 0.0467034, 0.0482242, 0.0491127, 0.049144, 0.0482364, 0.0464667, 0.0440065, 0.0410175, 0.0376148, 0.033914, 0.030072, 0.0262662, 0.0226507, 0.0193346, 0.0163888, 0.013862, 0.0117849, 0.0101652, 0.00898381, 0.00819384, 0.0077232, 0.00747767, 0.00734682, 0.00721635, 0.00698664, 0.0065919, 0.00601049, 0.00527118, 0.00443651, 0.00358234, 0.0027789, 0.00207628, 0.00149933, 0.00105052, 0.00071713, 0.000478895, 0.000314056, 0.000202977, 0.000129717, 8.22264e-05, 5.18592e-05, 3.26428e-05, 2.05713e-05, 1.30192e-05, 8.2981e-06, 5.33851e-06, 3.47164e-06, 2.28312e-06, 1.5177e-06, 1.01847e-06, 6.88683e-07, 4.6828e-07, 3.1953e-07, 2.18382e-07, 1.49247e-07, 1.01853e-07, 6.93307e-08, 4.70275e-08, 3.17624e-08, 2.13462e-08, 1.42669e-08, 9.47816e-09, 6.25621e-09, 4.1013e-09, 2.66932e-09, 1.7243e-09, 1.10519e-09, 7.02687e-10, 4.43091e-10, 2.77042e-10, 1.7173e-10, 1.05518e-10, 6.42592e-11},
{1.2656e-05, 2.93574e-05, 7.06733e-05, 0.000177668, 0.000118513, 0.000163981, 0.000206765, 0.000179312, 0.000245517, 0.000688755, 0.00183538, 0.00351368, 0.00586683, 0.00714223, 0.00831109, 0.0107314, 0.0143951, 0.0190795, 0.0239658, 0.0281259, 0.0314567, 0.0343977, 0.0370656, 0.0391948, 0.0406599, 0.0416761, 0.0425301, 0.0432196, 0.0435166, 0.0432044, 0.042192, 0.0405508, 0.0384426, 0.0359931, 0.0332529, 0.030274, 0.0271692, 0.024088, 0.0211561, 0.0184453, 0.0159965, 0.0138522, 0.0120649, 0.0106838, 0.0097323, 0.00919327, 0.00900399, 0.00905856, 0.00921783, 0.00932928, 0.00925582, 0.00890501, 0.00824594, 0.00732069, 0.00622162, 0.00506245, 0.00395048, 0.00296473, 0.0021473, 0.00150688, 0.00102876, 0.000685993, 0.000448458, 0.000288404, 0.000183028, 0.000114962, 7.16789e-05, 4.45004e-05, 2.75995e-05, 1.71596e-05, 1.07322e-05, 6.77345e-06, 4.32456e-06, 2.7971e-06, 1.83322e-06, 1.21639e-06, 8.15655e-07, 5.5146e-07, 3.74991e-07, 2.55856e-07, 1.74792e-07, 1.19351e-07, 8.13343e-08, 5.52525e-08, 3.73806e-08, 2.51663e-08, 1.68496e-08, 1.12131e-08, 7.4135e-09, 4.8675e-09, 3.17263e-09, 2.05224e-09, 1.31708e-09, 8.38433e-10, 5.29299e-10, 3.31306e-10, 2.05581e-10, 1.26444e-10, 7.70759e-11},
{1.24146e-05, 2.90817e-05, 6.90723e-05, 0.000176086, 0.000123338, 0.000176586, 0.000236803, 0.000190481, 0.000271985, 0.000703134, 0.00181512, 0.00343456, 0.00564543, 0.00656498, 0.00718128, 0.00886462, 0.0115735, 0.0151167, 0.0189066, 0.0222828, 0.0252559, 0.0283833, 0.031846, 0.0351779, 0.0379827, 0.0403935, 0.0427194, 0.0449015, 0.0465439, 0.0472765, 0.0469721, 0.0457538, 0.043844, 0.0414055, 0.0385074, 0.0352196, 0.0316853, 0.028095, 0.0246172, 0.0213574, 0.0183783, 0.0157309, 0.0134643, 0.0116197, 0.0102145, 0.00923308, 0.00862169, 0.00828901, 0.00811404, 0.00796383, 0.00771862, 0.00729678, 0.00666789, 0.00586037, 0.00494227, 0.00399785, 0.00310588, 0.00232322, 0.00167869, 0.0011761, 0.000802051, 0.000534447, 0.000349229, 0.000224518, 0.000142442, 8.94378e-05, 5.57366e-05, 3.45782e-05, 2.14244e-05, 1.33029e-05, 8.3062e-06, 5.23177e-06, 3.3325e-06, 2.14992e-06, 1.40525e-06, 9.29849e-07, 6.21822e-07, 4.19314e-07, 2.84429e-07, 1.9362e-07, 1.31993e-07, 8.99495e-08, 6.11869e-08, 4.14964e-08, 2.80309e-08, 1.88449e-08, 1.26008e-08, 8.37554e-09, 5.53129e-09, 3.62796e-09, 2.36244e-09, 1.52681e-09, 9.79057e-10, 6.22766e-10, 3.92861e-10, 2.45734e-10, 1.52381e-10, 9.36641e-11, 5.70602e-11},
{1.35952e-05, 3.16467e-05, 7.67198e-05, 0.000191347, 0.000120205, 0.000158866, 0.000185578, 0.000167133, 0.000219745, 0.000694407, 0.00191352, 0.00365094, 0.00608815, 0.00745739, 0.00875379, 0.0114011, 0.0154741, 0.0207453, 0.0262054, 0.0306989, 0.0340236, 0.0366009, 0.0386436, 0.0401299, 0.0410941, 0.0416726, 0.042001, 0.042053, 0.0417206, 0.0409181, 0.0395902, 0.0377743, 0.035597, 0.0331698, 0.0305398, 0.027752, 0.0249041, 0.0221262, 0.0195254, 0.017164, 0.0150796, 0.0133103, 0.0118983, 0.010876, 0.0102496, 0.0099895, 0.0100257, 0.0102473, 0.0105106, 0.0106592, 0.0105561, 0.0101159, 0.00932235, 0.00823637, 0.00697012, 0.00565284, 0.00440164, 0.00329983, 0.00238974, 0.00167792, 0.0011465, 0.000765147, 0.000500522, 0.000322022, 0.000204448, 0.000128521, 8.02729e-05, 4.99972e-05, 3.11692e-05, 1.95211e-05, 1.23233e-05, 7.86213e-06, 5.07765e-06, 3.32133e-06, 2.19897e-06, 1.47139e-06, 9.92958e-07, 6.74265e-07, 4.59669e-07, 3.13969e-07, 2.14484e-07, 1.4633e-07, 9.95844e-08, 6.75374e-08, 4.56084e-08, 3.0648e-08, 2.04817e-08, 1.36057e-08, 8.97991e-09, 5.88639e-09, 3.83088e-09, 2.47447e-09, 1.58591e-09, 1.00827e-09, 6.35748e-10, 3.9748e-10, 2.46373e-10, 1.51375e-10, 9.21808e-11},
{1.46161e-05, 3.42395e-05, 8.27648e-05, 0.00020638, 0.000127166, 0.000165947, 0.000193131, 0.000171907, 0.000226114, 0.000736001, 0.0020456, 0.00389809, 0.00647741, 0.00785288, 0.00909688, 0.0117452, 0.0158602, 0.0211898, 0.0266944, 0.0311834, 0.0344461, 0.0369492, 0.0389475, 0.0404078, 0.0413298, 0.0418233, 0.0420183, 0.0419076, 0.0414206, 0.0405077, 0.039131, 0.0373227, 0.0351926, 0.0328332, 0.0302778, 0.0275636, 0.024785, 0.0220694, 0.0195207, 0.017198, 0.0151367, 0.0133749, 0.011956, 0.0109136, 0.0102549, 0.00995142, 0.00993528, 0.0101004, 0.0103098, 0.010415, 0.0102853, 0.0098382, 0.00905593, 0.00799528, 0.00676237, 0.0054812, 0.00426505, 0.00319489, 0.00231195, 0.0016224, 0.00110847, 0.000740234, 0.000484962, 0.000312788, 0.000199262, 0.000125779, 7.89199e-05, 4.93839e-05, 3.09219e-05, 1.94393e-05, 1.23075e-05, 7.8674e-06, 5.08623e-06, 3.32769e-06, 2.20239e-06, 1.47262e-06, 9.92916e-07, 6.73628e-07, 4.58847e-07, 3.13174e-07, 2.13804e-07, 1.45788e-07, 9.91699e-08, 6.72301e-08, 4.53857e-08, 3.04894e-08, 2.03705e-08, 1.35287e-08, 8.92719e-09, 5.8507e-09, 3.80698e-09, 2.45863e-09, 1.57552e-09, 1.00152e-09, 6.31407e-10, 3.94715e-10, 2.4463e-10, 1.50287e-10, 9.15081e-11},
{1.31146e-05, 3.05655e-05, 7.39405e-05, 0.000185011, 0.000117146, 0.000155558, 0.000183615, 0.000165685, 0.000220779, 0.000690903, 0.00190108, 0.00364594, 0.00609929, 0.00754508, 0.00894679, 0.0116726, 0.0157824, 0.0210579, 0.0265595, 0.0312047, 0.0347672, 0.0375703, 0.0397622, 0.0413132, 0.0422682, 0.0427828, 0.0430171, 0.0429679, 0.0425386, 0.0416424, 0.040218, 0.0382933, 0.0359872, 0.0334133, 0.0306319, 0.0277058, 0.0247475, 0.0218927, 0.0192453, 0.0168583, 0.0147582, 0.0129729, 0.0115361, 0.0104733, 0.00978559, 0.00944114, 0.00937236, 0.00947779, 0.00962943, 0.00969, 0.00953943, 0.00910212, 0.0083617, 0.00737014, 0.00622443, 0.00503811, 0.00391483, 0.0029285, 0.00211635, 0.00148336, 0.0010125, 0.000675717, 0.000442594, 0.000285518, 0.000181994, 0.000114978, 7.2217e-05, 4.52366e-05, 2.83513e-05, 1.7836e-05, 1.12976e-05, 7.22347e-06, 4.67018e-06, 3.05542e-06, 2.0222e-06, 1.35227e-06, 9.11991e-07, 6.18972e-07, 4.21845e-07, 2.88107e-07, 1.96833e-07, 1.3432e-07, 9.14408e-08, 6.20388e-08, 4.19129e-08, 2.81769e-08, 1.88384e-08, 1.25192e-08, 8.26609e-09, 5.42049e-09, 3.5289e-09, 2.28016e-09, 1.46183e-09, 9.29656e-10, 5.86339e-10, 3.66683e-10, 2.2734e-10, 1.39714e-10, 8.50989e-11},
{7.95688e-06, 1.85901e-05, 4.61551e-05, 0.000117193, 8.57361e-05, 0.000125811, 0.0001589, 0.00015486, 0.000215005, 0.000559872, 0.00146532, 0.00287289, 0.00491261, 0.00659166, 0.0083847, 0.0110097, 0.0147414, 0.0196774, 0.0251508, 0.0302081, 0.0344956, 0.038095, 0.0409684, 0.0430039, 0.0442936, 0.0451261, 0.0457593, 0.0461955, 0.0462511, 0.0457162, 0.044444, 0.0424319, 0.0398093, 0.036734, 0.0333309, 0.0297255, 0.0260782, 0.0225622, 0.0193151, 0.016417, 0.0139063, 0.0118035, 0.0101202, 0.00885545, 0.00798808, 0.00747268, 0.00723889, 0.0071933, 0.00722542, 0.00722097, 0.0070813, 0.00674323, 0.00618938, 0.00545447, 0.00460767, 0.00373133, 0.00290128, 0.00217191, 0.0015708, 0.00110184, 0.000752654, 0.000502662, 0.000329453, 0.000212644, 0.000135596, 8.56829e-05, 5.38142e-05, 3.36971e-05, 2.11039e-05, 1.32618e-05, 8.38752e-06, 5.3527e-06, 3.45312e-06, 2.25378e-06, 1.48794e-06, 9.92543e-07, 6.67786e-07, 4.52204e-07, 3.0754e-07, 2.09631e-07, 1.42962e-07, 9.73974e-08, 6.62049e-08, 4.48547e-08, 3.02646e-08, 2.0322e-08, 1.3572e-08, 9.01032e-09, 5.94373e-09, 3.89425e-09, 2.53326e-09, 1.63562e-09, 1.04788e-09, 6.65975e-10, 4.19778e-10, 2.62369e-10, 1.62578e-10, 9.98617e-11, 6.0795e-11},
{4.11131e-06, 9.59546e-06, 2.39406e-05, 6.27654e-05, 5.38044e-05, 9.21552e-05, 0.000118942, 0.000125317, 0.000155545, 0.000322093, 0.000736164, 0.0013749, 0.00239761, 0.00351329, 0.00492984, 0.0068615, 0.0095278, 0.0130122, 0.0168947, 0.0206621, 0.0241282, 0.0271736, 0.0296505, 0.0315676, 0.0330675, 0.0343473, 0.0355576, 0.0366327, 0.0373755, 0.0376355, 0.0373508, 0.036549, 0.035319, 0.0337419, 0.0318642, 0.0297496, 0.0275148, 0.0252948, 0.0231892, 0.0212539, 0.0195333, 0.0180884, 0.0169941, 0.0163154, 0.0160813, 0.0162682, 0.0167882, 0.0174859, 0.0181484, 0.0185371, 0.01844, 0.0177249, 0.0163713, 0.0144897, 0.0122776, 0.0099648, 0.00776176, 0.00581946, 0.00421551, 0.00296253, 0.00202857, 0.00135915, 0.000894609, 0.000580601, 0.000372788, 0.000237546, 0.000150677, 9.54244e-05, 6.05157e-05, 3.85394e-05, 2.47094e-05, 1.59805e-05, 1.04376e-05, 6.8869e-06, 4.58792e-06, 3.082e-06, 2.08419e-06, 1.41616e-06, 9.6503e-07, 6.58387e-07, 4.49038e-07, 3.05772e-07, 2.07668e-07, 1.40547e-07, 9.47172e-08, 6.35215e-08, 4.237e-08, 2.80949e-08, 1.85114e-08, 1.21149e-08, 7.87253e-09, 5.07788e-09, 3.25011e-09, 2.06371e-09, 1.29968e-09, 8.11651e-10, 5.02543e-10, 3.08447e-10, 1.87642e-10},
{4.11131e-06, 9.59546e-06, 2.39406e-05, 6.27654e-05, 5.38044e-05, 9.21552e-05, 0.000118942, 0.000125317, 0.000155545, 0.000322093, 0.000736164, 0.0013749, 0.00239761, 0.00351329, 0.00492984, 0.0068615, 0.0095278, 0.0130122, 0.0168947, 0.0206621, 0.0241282, 0.0271736, 0.0296505, 0.0315676, 0.0330675, 0.0343473, 0.0355576, 0.0366327, 0.0373755, 0.0376355, 0.0373508, 0.036549, 0.035319, 0.0337419, 0.0318642, 0.0297496, 0.0275148, 0.0252948, 0.0231892, 0.0212539, 0.0195333, 0.0180884, 0.0169941, 0.0163154, 0.0160813, 0.0162682, 0.0167882, 0.0174859, 0.0181484, 0.0185371, 0.01844, 0.0177249, 0.0163713, 0.0144897, 0.0122776, 0.0099648, 0.00776176, 0.00581946, 0.00421551, 0.00296253, 0.00202857, 0.00135915, 0.000894609, 0.000580601, 0.000372788, 0.000237546, 0.000150677, 9.54244e-05, 6.05157e-05, 3.85394e-05, 2.47094e-05, 1.59805e-05, 1.04376e-05, 6.8869e-06, 4.58792e-06, 3.082e-06, 2.08419e-06, 1.41616e-06, 9.6503e-07, 6.58387e-07, 4.49038e-07, 3.05772e-07, 2.07668e-07, 1.40547e-07, 9.47172e-08, 6.35215e-08, 4.237e-08, 2.80949e-08, 1.85114e-08, 1.21149e-08, 7.87253e-09, 5.07788e-09, 3.25011e-09, 2.06371e-09, 1.29968e-09, 8.11651e-10, 5.02543e-10, 3.08447e-10, 1.87642e-10}};
#endif

//-------------------------------------------
static const int nsrc = 27;   // Change form 26 as for 2015 data .  See JEC for 2017 94X
const char* srcnames[nsrc] = {"AbsoluteStat", "AbsoluteScale", "AbsoluteMPFBias", "Fragmentation", "SinglePionECAL", "SinglePionHCAL", "FlavorQCD", "TimePtEta", "RelativeJEREC1", "RelativeJEREC2", "RelativeJERHF","RelativePtBB", "RelativePtEC1", "RelativePtEC2","RelativePtHF","RelativeBal", "RelativeSample", "RelativeFSR", "RelativeStatFSR", "RelativeStatEC", "RelativeStatHF", "PileUpDataMC", "PileUpPtRef", "PileUpPtBB", "PileUpPtEC1", "PileUpPtEC2", "PileUpPtHF"};
//-------------------------------------------
double intlumi[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1,1};
double lumiwt[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1,1};
//unsigned int l1trg[4], hlttr[8], tetrg[2];
unsigned int mypow_2[32];

//std::ofstream myfile;
//myfile.open("txt.log");

//const bool m_trigeff = true;
const int njetptmn=nHLTmx; // 8; //10
//const int njetptmn=ngenPT; //5
const int njetptbin=120;

#ifdef DIJETAVE
const char* jethlt_name[nHLTmx]={"HLT_PFJet60_v","HLT_PFJet80_v","HLT_PFJet140_v","HLT_PFJet200_v","HLT_PFJet260_v","HLT_PFJet320_v","HLT_PFJet400_v","HLT_PFJet450_v","HLT_PFJet500_v","HLT_PFJet550_v"};
const char* jethlt_lowest={"HLT_PFJet40_v"};

double leadingPtThreshold[njetptmn+1] ={92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0}; //trigger turn on for 2017 UL JetHT sample

/*
#ifdef MERGE_BIN
double leadingPtThreshold[njetptmn+1] ={83, 109, 176, 247, 318, 387, 477, 573, 3000.0}; //Fit Value dijet trigger 2018
#else
double leadingPtThreshold[njetptmn+1] ={66, 95, 155, 227, 286, 350, 444, 557, 3000.0}; //Fit Value dijet trigger 2016
#endif
//double leadingPtThreshold[njetptmn+1] ={83, 109, 172, 241, 309, 377, 462, 570, 3000.0}; //Fit Value dijet trigger 2017
*/

//double compres[njetptmn] = {1630, 5320, 62.1, 38.9, 27.0, 4.33, 1.23, 1.0};
//double compres[njetptmn] = {1630, 5320, 62.1, 38.9, 27.0, 4.33, 1.23, 1.0};

//#else

#endif

#ifdef DIJETAVE
double jethlt_thr[nHLTmx]={60,80,140,200,260,320,400,450,500,550};
//#else

#endif
double prescl[nHLTmx];

#ifdef TRACKSYS
const int ntype=3; 
#else
const int ntype=2;
#endif

const int njetetamn=1; // GMA 4; eta

#ifdef  LHAPDF
const int nnnmx=101;
double pdfwt[nnnmx];
//TH1F* h_genvarpdf[ndef][njet][nkappa][njetetamn][njetptmn][nnnmx];
TH1F* h_genvarpdf[ndef][njet][nkappa][njetetamn][ngenPT][nnnmx];
TH1* h_genvarpdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
#endif

#ifdef SCALEUNC
const int nscale=46;
double scalewt[nscale];
TH1F* h_genvarscaleunc[ndef][njet][nkappa][njetetamn][ngenPT][nscale];
TH1* h_genvarscaleunc2D[ndef][njet][nkappa][njetetamn][nscale];
#endif

#ifdef  JETENERGY
//const int nsrc = 26;
const int njecmx=2*nsrc+1;
//TH1F* h_recovarjec[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
TH1F* h_recovarjec[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1* h_recovarjec2D[ndef][njet][nkappa][njetetamn][njecmx];
#elif defined(JETRESO)
const int njecmx = 3;
//TH1F* h_recovarres[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH2F* h_RM_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH1F* h_genmiss_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH1F* h_recofake_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];

TH1F* h_recovarres[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH2F* h_RM_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1F* h_genmiss_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1F* h_recofake_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];

TH2* h_RM_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recovarres2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_genmiss_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recofake_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
#else
const int njecmx=1;
#endif

const int nGenReso=1;
double etarange[njetetamn] ={2.1}; //2.5
double resetarange[njetetamn+4] ={0, 0.5, 1.0, 1.5}; //, 2.0, 2.5, 3.0, 3.5};
double par0[njetetamn+4]={1.02, 1.02, 1.022, 1.017, 0.98}; //, 0.9327};
double par1[njetetamn+4]={7.3e-6, -7.3e-6, -5.66e-6, -9.9e-6, 1.41e-4}; //, 4.6e-4};
double par2[njetetamn+4]={-8.2e-9, -8.2e-9, -3.58e-9, -4.18e-9, -6.104e-8}; //, -4.041e-7};
double particlept[4]={0.0, 0.25, 0.50, 1.00};

#ifdef TRACKSYS
const char* typname[ntype]={"Jets", "Charged Particles"};
#else
const char* typname[ntype]={"Jets", "Charged Particles"};
#endif
static const int njetmx =30;

int getbinid(double val, int nbmx, double* array) {
  if (val<array[0]) return -2;
  for (int ix=0; ix<=nbmx; ix++) {
    if (val < array[ix]) return ix-1;
  }
  return -3;
}

double Phi_0_2pi(double x) {
  while (x >= 2*M_PI) x -= 2*M_PI;
  while (x <     0.)  x += 2*M_PI;
  return x;
}

double Phi_mpi_pi(double x) {
  while (x >= M_PI) x -= 2*M_PI;
  while (x < -M_PI) x += 2*M_PI;
  return x;
}

double dPhi(double phi1,double phi2){
  phi1=Phi_0_2pi(phi1);
  phi2=Phi_0_2pi(phi2);
  return Phi_mpi_pi(phi1-phi2);
}

double dPT(double pt1, double pt2){
	return ((pt1 - pt2) / (pt1 + pt2));
}

 int sbitx(unsigned ival, int ibit) {
 unsigned den = mypow_2[ibit]; // unsigned(pow(2., double(ibit)));
 int isel = unsigned(ival/den)%2;
 //  int isel = unsigned(ival/den);
 //cout <<"iv "<< ival<<" "<<ibit<<" "<<den<<" "<<ival/den<<" "<<unsigned(ival/den)<<" "<<isel<<endl;

 return isel;
}

double respfun(double a, double b, double c, double x){
  double func=a+b*x+c*x*x;
  return func;
}

double JetCharge1(int charge, double candspt, double jpt, double k);

double candsmom(int charge, double candspt, double k);
double candsmom2(double p, double k);

double dotproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k);
double crossproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k);

double dotProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k);
double crossProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k);

struct triggervar{
  HepLorentzVector trg4v;
  bool		  both;
  bool            level1;
  bool            highl;
  int             ihlt;
  int             prescl;
};

//
// class declaration
//

class QCDEventShape : public edm::EDAnalyzer {
   public:
      explicit QCDEventShape(const edm::ParameterSet&);
      ~QCDEventShape();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() override;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
      virtual void endJob() override;

      virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
 
  // int sbitx(unsigned ival, int ibit);

  bool isHistFill;
  bool isTrigger;
  //bool isRECO[ntype][njetetamn];
  bool isMC;
  //bool isRECOJC;
  //bool isGENJC;
  //  bool isParticle; //Do we want particle level informations, other than jets ?
  //  bool isGenParticle; //Do we want Simulated particle level informations, other than jets ?
  bool isReconstruct; // otherwise Only generator level informations  
  //  bool isPartQCD; //For tracker variables, recosntruct QCD EVT variables
  bool isJetQCD;  //For Jet variables, recosntruct QCD EVT variables
  bool isGenJET; // Genjet information or note (for herwig/alpgen, donot store this ?)
  //  double trackPtThreshold; //Threshold of track Pt to store it in root file, -ve implies don't store

  //  double etarange; //Eta range of all jets
  double ptthreshold; //Pt threshold of JEC jets
  double leadingPtthreshold; //Pt threshold of JEC leading jet
  bool   isOtherAlgo; // store Kt4 and ak7 variables or not
  double weight=1; //weight for histogramme fit
  double weight2=1;
 
  std::string m_resolutions_file;
  std::string scalefile;

  std::string theHLTTag;
  //unsigned int mypow_2[32];
  int nevt;

  std::string theRootFileName;
  //TFile* //theFile;
  //TTree* //T1;

  //ifstream myfile ("example.txt");
  //std::ofstream myfile;
  //myfile.open("txt.log");
  
  TDirectoryFile *TUnfoldBinng2D =new TDirectoryFile("analyzeBasicPat2D","2D Unfolding Historgams"); // Directory for 2D TUnfolding histograms
  TH2F* h_2ht;

  TH1F* vec_anglex[nhist];

  //Jet Charge 1D
  //TH1F* h_recovar[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_genvar[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_recofake[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_genmiss[ndef][njet][nkappa][njetetamn][njetptmn]; 
  //TH2F* h_RM[ndef][njet][nkappa][njetetamn][njetptmn];

  TH1F* h_recovar[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM[ndef][njet][nkappa][njetetamn][ngenPT];

#ifdef FLAV
  //First-set Flavor Tagging
  TH1F* h_recovar_gjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ujet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_djet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ojet[ndef][njet][nkappa][njetetamn][ngenPT];

  //Second-set Flavor Tagging
  TH1F* h_recovar_qjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_aqjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_aqgjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_aqojet[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef PREFIRE
  TH1F* h_recovar_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef TRACKEFF
  TH1F* h_recovar_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef TRACKPTUP
  TH1F* h_recovar_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef TRACKPTDOWN
  TH1F* h_recovar_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

  //Profile histogram
  TProfile* hchpt; // jetpt vs. charge
  TProfile* hchpt1;
  TProfile* hchpt2;
  TProfile* hprof_reco_jco_pt[ndef][njet][nkappa]; // Reco JCO vs. jetpt
  TProfile* hprof_gen_jco_pt[ndef][njet][nkappa]; // Gen JCO vs. jetpt

  //Ratio of Matched charged pT to charged pT vs GenJet pT
  TProfile *hprof_matchedChg_R_allChg_genjetpt[njet][nkappa];
  
  //Ratio of track pt to Jet pt vs. Jet pT
  TProfile* hprof_gen_trackpt_R_jetpt_jetpt[njet][nkappa];
  TProfile* hprof_reco_trackpt_R_jetpt_jetpt[njet][nkappa];

#ifdef FLAV 
  //Flavor Tagging
  TProfile* hprof_jco_pt_gjet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_ujet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_djet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_ojet[ndef][njet][nkappa];
#endif

  //static const int njetmx =30;
  //int npfjets; 
  int nchg, nchg1, nchg2;
  int pfjetmul[njetmx];
  float pfjetpx[njetmx], pfjetpy[njetmx], pfjetpz[njetmx], pfjeten[njetmx],  pfjetenuc[njetmx], neuemf[njetmx], neuhad[njetmx];
  float pfjetenscl[njetmx], pfjetensmr[njetmx];
  float jetpt, jeteta, jetphi; 
  int nallpf, ncharged;
  float thphi[nhist], thrust[nhist], anglex[nhist];
  float jtthan;
  int irunhlt, l1pres[nHLTmx],  hltpres[nHLTmx], compres[nHLTmx]; 
  static const int nprimx=150;
  int nprim, ntkpm[nprimx];
  //float  primdx[nprimx], primdy[nprimx], primdz[nprimx], 
  float primpr[nprimx];
  int irun, ilumi, ibrnc;
  unsigned int ievt;
  float inslumi;
  int nsicls, ntottrk;
//#ifdef FLAT 
  //bool isFlat=1;
//#else 
  bool isFlat=0;
//#endif

   float defweight=1.0, weighttrg=1., qlow=-10., qhigh=100000.;
//-------------------------------------------TunfoldBinning
//-------------------------------------------2D Bining using TUnfoldBinning Jet Charge

  TUnfoldBinning *binsRec2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *binsGen2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *RecoBinning2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *GenBinning2D[ndef][njet][nkappa][njetetamn];  

//-------------------------------------------Jet Charge 2D TUnfoldBinning Histograms

  TH1* h_recovar2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM2D[ndef][njet][nkappa][njetetamn];

#ifdef FLAV
  //First-set Flavor Tagging
  TH1* h_recovar_gjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ujet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_djet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ojet2D[ndef][njet][nkappa][njetetamn];

  //Second-set Flavor Tagging
  TH1* h_recovar_qjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_aqjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_aqgjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_aqojet2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef PREFIRE
  TH1* h_recovar_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefire2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefire2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKEFF
  TH1* h_recovar_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackeff2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTUP
  TH1* h_recovar_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt1_2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTDOWN
  TH1* h_recovar_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt2_2D[ndef][njet][nkappa][njetetamn];
#endif
//-------------------------------------------

  TH1F* recojt_CHF;
  TH1F* recojt_NHF;
  TH1F* recojt_NEMF;
  TH1F* recojt_CHM;
  TH1F* recojt_NumNeutralParticles;
  TH1F* recojt_CEMF;
  TH1F* recojt_NumConst;

  //TH1F* recojt_hist;
  //TH1F* recojt_pt[njetetamn][nHLTmx];
  TH1F* recojt_pt[njetetamn];
  TH1F* recojt_eta;
  TH1F* recojt_phi;

  TH1F* recojtallave_pt[njetetamn];
  TH1F* recojtallavewt1_pt[njetetamn];

  TH1F* recojtave_pt[njetetamn][nHLTmx];
  TH1F* recojtavewt1_pt[njetetamn][nHLTmx];
  TH1F* recojt1_pt[njetetamn];
  TH1F* recojt1_eta;
  TH1F* recojt1_phi;

  TH1F* recojt2_pt[njetetamn];
  TH1F* recojt2_eta;
  TH1F* recojt2_phi;

  TH1F* recojt3_pt[njetetamn];
  TH1F* recojt3_eta;
  TH1F* recojt3_phi;

  TH1F* recoht2_pt[njetetamn];

  TH1F* hjetdpt[njetetamn];
  TH1F* hjetdphi[njetetamn];
  TH1F* hjetptbypl[njetetamn];
  TH1F* hjetpt2bypt1[njetetamn];
  TH1F* hjetpt3bypt2[njetetamn];
  //TH1F* recochg_hist;
  TH1F* recochg_pt;
  TH1F* recochg_eta;
  TH1F* recochg_phi;

  TH1F* recochg1_pt;
  TH1F* recochg1_eta;
  TH1F* recochg1_phi;

  TH1F* recochg2_pt;
  TH1F* recochg2_eta;
  TH1F* recochg2_phi;

  TH1F* recochg3_pt;
  TH1F* recochg3_eta;
  TH1F* recochg3_phi;

#ifdef FLAV
//Flavor Tagging
  //gluon-jet
  TH1F* recojtg_pt[njetetamn];
  TH1F* recojtg_eta;
  TH1F* recojtg_phi; 
  
  TH1F* recojt1g_pt[njetetamn];
  TH1F* recojt1g_eta;
  TH1F* recojt1g_phi;

  TH1F* recojt2g_pt[njetetamn];
  TH1F* recojt2g_eta;
  TH1F* recojt2g_phi;

  //u-jet
  TH1F* recojtu_pt[njetetamn];
  TH1F* recojtu_eta;
  TH1F* recojtu_phi;

  TH1F* recojt1u_pt[njetetamn];
  TH1F* recojt1u_eta;
  TH1F* recojt1u_phi;

  TH1F* recojt2u_pt[njetetamn];
  TH1F* recojt2u_eta;
  TH1F* recojt2u_phi;

  //d-jet
  TH1F* recojtd_pt[njetetamn];
  TH1F* recojtd_eta;
  TH1F* recojtd_phi;
  
  TH1F* recojt1d_pt[njetetamn];
  TH1F* recojt1d_eta;
  TH1F* recojt1d_phi;
  
  TH1F* recojt2d_pt[njetetamn];
  TH1F* recojt2d_eta;
  TH1F* recojt2d_phi;

  //others-nonmatched-jets
  TH1F* recojto_pt[njetetamn];
  TH1F* recojto_eta;
  TH1F* recojto_phi;

  TH1F* recojt1o_pt[njetetamn];
  TH1F* recojt1o_eta;
  TH1F* recojt1o_phi;

  TH1F* recojt2o_pt[njetetamn];
  TH1F* recojt2o_eta;
  TH1F* recojt2o_phi;

 //Second-set Flavor Tagging
  TH1F* recojt_qjet_pt[njetetamn];
  TH1F* recojt_qjet_eta;
  TH1F* recojt_qjet_phi;

  TH1F* recojt_aqjet_pt[njetetamn];
  TH1F* recojt_aqjet_eta;
  TH1F* recojt_aqjet_phi;

  TH1F* recojt_aqgjet_pt[njetetamn];
  TH1F* recojt_aqgjet_eta;
  TH1F* recojt_aqgjet_phi;

  TH1F* recojt_aqojet_pt[njetetamn];
  TH1F* recojt_aqojet_eta;
  TH1F* recojt_aqojet_phi;

  TH1F* recojt1_qjet_pt[njetetamn];
  TH1F* recojt1_qjet_eta;
  TH1F* recojt1_qjet_phi;

  TH1F* recojt1_aqjet_pt[njetetamn];
  TH1F* recojt1_aqjet_eta;
  TH1F* recojt1_aqjet_phi;

  TH1F* recojt1_aqgjet_pt[njetetamn];
  TH1F* recojt1_aqgjet_eta;
  TH1F* recojt1_aqgjet_phi;

  TH1F* recojt1_aqojet_pt[njetetamn];
  TH1F* recojt1_aqojet_eta;
  TH1F* recojt1_aqojet_phi;

  TH1F* recojt2_qjet_pt[njetetamn];
  TH1F* recojt2_qjet_eta;
  TH1F* recojt2_qjet_phi;

  TH1F* recojt2_aqjet_pt[njetetamn];
  TH1F* recojt2_aqjet_eta;
  TH1F* recojt2_aqjet_phi;

  TH1F* recojt2_aqgjet_pt[njetetamn];
  TH1F* recojt2_aqgjet_eta;
  TH1F* recojt2_aqgjet_phi;

  TH1F* recojt2_aqojet_pt[njetetamn];
  TH1F* recojt2_aqojet_eta;
  TH1F* recojt2_aqojet_phi;
#endif

//-------------------------------------------
  //TH1F* genjt_hist;
  TH1F* genjt_pt[njetetamn];
  TH1F* genjt_eta;
  TH1F* genjt_phi;
  TH1F* genjtallave_pt[njetetamn];

  TH1F* genjt1_pt[njetetamn];
  TH1F* genjt1_eta;
  TH1F* genjt1_phi;

  TH1F* genjt2_pt[njetetamn];
  TH1F* genjt2_eta;
  TH1F* genjt2_phi;

  TH1F* genjt3_pt[njetetamn];
  TH1F* genjt3_eta;
  TH1F* genjt3_phi;

  TH1F* genjetdpt[njetetamn];
  TH1F* genjetdphi[njetetamn];
  TH1F* genjetptbypl[njetetamn];
  TH1F* genjetpt2bypt1[njetetamn];
  TH1F* genjetpt3bypt2[njetetamn];

  //TH1F* genchg_hist;
  TH1F* genchg_pt;
  TH1F* genchg_eta;
  TH1F* genchg_phi;

  TH1F* genchg1_pt;
  TH1F* genchg1_eta;
  TH1F* genchg1_phi;

  TH1F* genchg2_pt;
  TH1F* genchg2_eta;
  TH1F* genchg2_phi;

  TH1F* genchg3_pt;
  TH1F* genchg3_eta;
  TH1F* genchg3_phi;
/*
  TH1F* genneu_hist;
  TH1F* genneu_pt;
  TH1F* genneu_eta;
  TH1F* genneu_phi;

  TH1F* genjt_oth_pt[njetetamn];
  TH1F* genjt_oth_eta;
  TH1F* genjt_oth_phi;

  TH1F* genchg_oth_hist;
  TH1F* genchg_oth_pt;
  TH1F* genchg_oth_eta;
  TH1F* genchg_oth_phi;

  TH1F* genneu_oth_hist;
  TH1F* genneu_oth_pt;
  TH1F* genneu_oth_eta;
  TH1F* genneu_oth_phi;
*/

  TH1F* prim_hist[nHLTmx+1];
  TH1F* prim_sel[nHLTmx+1];

  TH1F* prim_hist_rewt[nHLTmx+1];
  TH1F* prim_sel_rewt[nHLTmx+1];

  TH2F* prim_correl;

  TH1F* prim_alltrk[2];
  TH1F* prim_seltrk[2];
  TH1F* prim_goodtrk[2];
  TH1F* prim_dx[2];
  TH1F* prim_dy[2];
  TH2F* prim_dxy[2];
  TH1F* prim_dz[2];  
  TH1F* prim_prob[2];

  TH1F* h_jetpt[nHLTmx][njetetamn];
  TH1F* h_jeteta[nHLTmx];
  TH1F* h_jetphi[nHLTmx][njetetamn];
  TH1F* h_njets[njetetamn];
  TH1F* h_nchg[njetetamn];

  TH1F* gen_njets[njetetamn];

  TH1F* trgjet_angle[nHLTmx][2];
  TH2F* trgjet_2dangle[nHLTmx][2];
  TH1F* trgjet_pt[nHLTmx][2];
  TH1F* trgjet_eta[nHLTmx][2];
  TH1F* trgjet_phi[nHLTmx][2];
  TH1F* prbjet_pt[nHLTmx][2];
  TH1F* prbjet_eta[nHLTmx][2];
  TH1F* prbjet_phi[nHLTmx][2];

  //Dijet trigger efficiency
  TH1F* hlt_dijettag[nHLTmx][njetetamn];
  TH1F* hlt_dijetprob[nHLTmx][njetetamn];

  //Trigger Normal case
  TH1F* counthist; 

//-------------------------------------------Member data
  edm::EDGetTokenT<GenEventInfoProduct> generator1_;
  edm::EDGetTokenT<pat::JetCollection> jetSrcToken_;
  edm::EDGetTokenT<edm::View<pat::PackedGenParticle> > genSrcToken_;
  edm::EDGetTokenT<pat::PackedCandidateCollection> PFSrcToken_;
  edm::EDGetTokenT<edm::TriggerResults> triggerBits_;
  edm::EDGetTokenT<pat::TriggerObjectStandAloneCollection> triggerObjects_;
  edm::EDGetTokenT<pat::PackedTriggerPrescales> triggerPrescales_;
  edm::EDGetTokenT<pat::METCollection> metToken_;
  edm::EDGetTokenT<reco::VertexCollection> vtxToken_;
  edm::EDGetTokenT<reco::BeamSpot> beamSpot_;
  edm::EDGetTokenT<reco::GenJetCollection> genjetToken_;
  edm::EDGetTokenT<std::vector<PileupSummaryInfo> > pileup_;
  edm::EDGetTokenT<reco::PFJetCollection> ak5PFjetToken_;
  edm::EDGetTokenT<reco::GenJetCollection> ak5GenJetToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfCTEQWeightsInputToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfMMTHWeightsInputToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfNNPDFWeightsInputToken_;
  const edm::EDGetTokenT<LHERunInfoProduct> LHERunInfoToken_;
  const edm::EDGetTokenT<LHEEventProduct> lheEventProductToken_;
  edm::EDGetTokenT<double> m_rho_token;
#ifdef PREFIRE
  edm::EDGetTokenT< double > prefweight_token;
  //edm::EDGetTokenT< double > prefweightup_token;
  //edm::EDGetTokenT< double > prefweightdown_token;
#endif

  /*
  edm::EDGetTokenT<reco::TrackCollection> tracksToken_;
  edm::EDGetTokenT<bool> filterGoodVerticesToken_;
  edm::EDGetTokenT<bool> filterglobalSuperTightHalo2016FilterToken_;
  edm::EDGetTokenT<bool> filterHBHENoiseFilterToken_;
  edm::EDGetTokenT<bool> filterHBHENoiseIsoFilterToken_;
  edm::EDGetTokenT<bool> filterEcalDeadCellTriggerPrimitiveFilterToken_;
  edm::EDGetTokenT<bool> filterBadPFMuonFilterToken_;
  edm::EDGetTokenT<bool> filterBadPFMuonDzFilterToken_;
  edm::EDGetTokenT<bool> filtereeBadScFilterToken_;
  edm::EDGetTokenT<bool> filterecalBadCalibFilterToken_;
  */

  float qscale;
  float wtfact; //MC : eventinfo->weight(); data : hltpres[ihltfill]*l1pres[ihltfill];
  int procid, npilup1, npilup2; //1:-5 to -1, 2:0 to 3

  int idall;
  float xfrac1, xfrac2, xpdf1, xpdf2;  

  //HLTConfigProvider hltConfig_;
  HLTPrescaleProvider hltPrescaleProvider_;
  int nreco, naa, nbb, ncc;
  //int Reco=0,Gen=0,RM=0;

std::vector<JetCorrectionUncertainty*> vsrc; // (nsrc);
reweight::PoissonMeanShifter PShiftUp_;
reweight::PoissonMeanShifter PShiftDown_;
edm::LumiReWeighting *LumiWeights_;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
  QCDEventShape::QCDEventShape(const edm::ParameterSet& iConfig):
  generator1_(consumes<GenEventInfoProduct>(iConfig.getParameter<edm::InputTag>("evtinfo"))),
  jetSrcToken_(consumes<pat::JetCollection>(iConfig.getParameter<edm::InputTag>("jetSrc"))),
  genSrcToken_(consumes<edm::View<pat::PackedGenParticle> >(iConfig.getUntrackedParameter<edm::InputTag>("genSrc"))),
  PFSrcToken_(consumes<pat::PackedCandidateCollection>(iConfig.getParameter<edm::InputTag>("pfSrc"))),
  triggerBits_(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("bits"))),
  triggerObjects_(consumes<pat::TriggerObjectStandAloneCollection>(iConfig.getParameter<edm::InputTag>("objects"))),
  triggerPrescales_(consumes<pat::PackedTriggerPrescales>(iConfig.getParameter<edm::InputTag>("prescales"))),
  metToken_(consumes<pat::METCollection>(iConfig.getParameter<edm::InputTag>("metSrc"))),
  vtxToken_(consumes<reco::VertexCollection>(iConfig.getParameter<edm::InputTag>("vertices"))),
  beamSpot_(consumes<reco::BeamSpot>(iConfig.getParameter<edm::InputTag>("bsSrc"))),
  genjetToken_(consumes<reco::GenJetCollection>(iConfig.getParameter<edm::InputTag>("genjetSrc"))),
  pileup_(consumes<std::vector<PileupSummaryInfo> >(iConfig.getParameter<edm::InputTag>("pileupSrc"))),
  ak5PFjetToken_(consumes<reco::PFJetCollection>(iConfig.getParameter<edm::InputTag>("ak5pfJetSrc"))),
  ak5GenJetToken_(consumes<reco::GenJetCollection>(iConfig.getParameter<edm::InputTag>("ak5genJetSrc"))),
  pdfCTEQWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFCTEQWeightsInputTag"))),
  pdfMMTHWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFMMTHWeightsInputTag"))),
  pdfNNPDFWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFNNPDFWeightsInputTag"))),
  LHERunInfoToken_(consumes<LHERunInfoProduct, edm::InRun >(iConfig.getParameter<edm::InputTag>("LHERunInfoProductInputTag"))),
  lheEventProductToken_(consumes<LHEEventProduct>(iConfig.getParameter<edm::InputTag>("LHEEventProductInputTag"))),
#ifdef PREFIRE
  prefweight_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProb"))),
  //prefweightup_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProbUp"))),
  //prefweightdown_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProbDown"))),
#endif

/*
  tracksToken_(consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>("tracks"))),
  filterGoodVerticesToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterGoodVertices"))),
  filterglobalSuperTightHalo2016FilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterglobalSuperTightHalo2016Filter"))),
  filterHBHENoiseFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterHBHENoiseFilter"))),
  filterHBHENoiseIsoFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterHBHENoiseIsoFilter"))),
  filterEcalDeadCellTriggerPrimitiveFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterEcalDeadCellTriggerPrimitiveFilter"))),
  filterBadPFMuonFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterBadPFMuonFilter"))),
  filterBadPFMuonDzFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterBadPFMuonDzFilter"))),
  filtereeBadScFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filtereeBadScFilter"))),
  filterecalBadCalibFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterecalBadCalibFilter"))),
*/
  hltPrescaleProvider_(iConfig, consumesCollector(), *this)
{
  //now do what ever initialization is needed
  edm::Service<TFileService> fs;
  m_rho_token = consumes<double>(iConfig.getParameter<edm::InputTag>("rho"));
  //m_resolutions_file = iConfig.getParameter<edm::FileEEInPath>("resolutionsFile").fullPath();
  //scalefile = iConfig.getParameter<edm::FileInPath>("scaleFactorsFile").fullPath();
  isHistFill = iConfig.getUntrackedParameter<bool>("HistFill", true);
  //isHistFill2 = pset.getUntrackedParameter<bool>("HistFill2", false);                                            
  isTrigger = iConfig.getUntrackedParameter<bool>("Trigger", true);
  //isRECO = iConfig.getUntrackedParameter<bool>("RECO", false);
  isMC = iConfig.getUntrackedParameter<bool>("MonteCarlo", false);
  isReconstruct = iConfig.getUntrackedParameter<bool>("Reconstruct", true);
  isJetQCD = iConfig.getUntrackedParameter<bool>("JetQCD", false);
  isGenJET = iConfig.getUntrackedParameter<bool>("GenJET", false);
  //etarange = iConfig.getUntrackedParameter<double>("EtaRange", 5.0);
  ptthreshold = iConfig.getUntrackedParameter<double>("PtThreshold", 10.0);
  //leadingPtthreshold = iConfig.getUntrackedParameter<double>("LeadingPtThreshold", 40.0);
  isOtherAlgo = iConfig.getUntrackedParameter<bool>("OtherAlgo", false);
  weight2 = iConfig.getUntrackedParameter<double>("HistWeight", 1.0);
  weight = weight2;
  theHLTTag = iConfig.getUntrackedParameter<string>("HLTTag", "HLT");
  theRootFileName = iConfig.getUntrackedParameter<string>("RootFileName");
 
  //cout << "Testing 1 ==== " <<njecmx<< endl;

  char RecoBinName[100], GenBinName[100], Axisname[100]; 
  char name[200];
  char title[200];

//-------------------------------------------Define TUnfoldBinning Jet Charge
//Binning scheme for both RECO & GEN and for all 3 definition, 2 jets and 10 kappas using array
	for(int id=0; id<ndef; id++){
		for(int ij=0; ij<njet; ij++){
			for (int ik=0; ik<nkappa; ik++){
				for (int iet=0; iet<njetetamn; iet++) {
				sprintf(RecoBinName, "Detector2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                binsRec2D[id][ij][ik][iet] = new TUnfoldBinning(RecoBinName);
                		sprintf(RecoBinName, "Recobin2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                		RecoBinning2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->AddBinning(RecoBinName);
                		sprintf(Axisname, "d%i_j%i_k%i", id,ij,ik);
                		//RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], false, false);
				RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nrecobins[id][ij][ik], recorng[id][ij][ik], false, false);
                		sprintf(Axisname, "pt");
                		//RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nHLTmx, recohtbins, false, false);
                		RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);
				//RecoBinning2D[iet][id][ij][ik]->AddAxis(Axisname, PTbins, recohtbins2D, false, false);

				sprintf(GenBinName, "Generator2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                binsGen2D[id][ij][ik][iet] = new TUnfoldBinning(GenBinName);
                		sprintf(GenBinName, "Genbin2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                		GenBinning2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->AddBinning(GenBinName);
               			sprintf(Axisname, "d%i_j%i_k%i", id, ij, ik);
                		//GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik], false, false);
				GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenbins[id][ij][ik], genrng[id][ij][ik], false, false);
                		sprintf(Axisname, "pt");
                		//GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nHLTmx, recohtbins, false, false);
				GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);
				//GenBinning2D[iet][id][ij][ik]->AddAxis(Axisname, PTbins, recohtbins2D, false, false);
				}
			}
		}
	}

//Histograms for 2D binning scheme
for(int id=0; id<ndef; id++){
        for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
			for (int iet=0; iet<njetetamn; iet++) {
				if (isReconstruct) {
					sprintf(name, "dd_reco_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                        		sprintf(title, "2D Reco Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                        		h_recovar2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
					h_recovar2D[id][ij][ik][iet]->Sumw2();

#ifdef FLAV
					//Flavor Tagging
					sprintf(name, "dd_reco_gjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco gJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_gjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_gjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_ujet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco uJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ujet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ujet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_djet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco dJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_djet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_djet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_ojet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco oJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ojet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ojet2D[id][ij][ik][iet]->Sumw2();

					//Second-set Flavor Tagging
					sprintf(name, "dd_reco_qjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco qJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_qjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_qjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_aqjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco aqJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_aqjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_aqjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_aqgjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco aqgJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_aqgjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_aqgjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_aqojet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco aqoJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_aqojet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_aqojet2D[id][ij][ik][iet]->Sumw2();
#endif

					sprintf(name, "dd_recofake_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake2D[id][ij][ik][iet]->Sumw2(); 
					}
#ifdef  LHAPDF
            			for (int ix=1; ix<nnnmx; ix++) {
            				sprintf(name, "dd_genpdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
            				sprintf(title, "2D Genpdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
            				h_genvarpdf2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
            				h_genvarpdf2D[id][ij][ik][iet][ix]->Sumw2();
           				}
#endif

#ifdef SCALEUNC
                                for (int ix=0; ix<nscale; ix++) {
                                        sprintf(name, "dd_genscaleunc_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Gen Scale Unc Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genvarscaleunc2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarscaleunc2D[id][ij][ik][iet][ix]->Sumw2();
                                        }
#endif

#ifdef  JETENERGY
            			for (int ix=1; ix<njecmx; ix++) {
            				sprintf(name, "dd_recojec_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
            				sprintf(title, "2D Recojec Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
            				h_recovarjec2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
            				h_recovarjec2D[id][ij][ik][iet][ix]->Sumw2();
            				}
#elif defined(JETRESO)
	      			for (int ix=0; ix<njecmx; ix++ ) {
              				sprintf(name, "dd_reco_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D Reco reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_recovarres2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_recovarres2D[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_corr_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D Corr reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_RM_JER_2D[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
              				h_RM_JER_2D[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_fake_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D fake reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_recofake_JER_2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_recofake_JER_2D[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_miss_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D miss reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_genmiss_JER_2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_genmiss_JER_2D[id][ij][ik][iet][ix]->Sumw2();
            				}
#endif					
					sprintf(name, "dd_gen_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                        sprintf(title, "2D Gen Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                		        h_genvar2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                        		h_genvar2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_genmiss_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss2D[id][ij][ik][iet]->Sumw2();

					if (isReconstruct) {
						sprintf(name, "dd_corr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                                sprintf(title, "Gen_Reco Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                		                h_RM2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                		h_RM2D[id][ij][ik][iet]->Sumw2();
						}

#ifdef PREFIRE
				if (isReconstruct) {
                                        sprintf(name, "dd_reco_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefire2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefire2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefire2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_corr_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefire2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefire2D[id][ij][ik][iet]->Sumw2();
                                        }

					sprintf(name, "dd_gen_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefire2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefire2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefire2D[id][ij][ik][iet]->Sumw2();			
#endif

#ifdef TRACKEFF
					if (isReconstruct) {
						sprintf(name, "dd_reco_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
	                                        sprintf(title, "2D Reco Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
        	                                h_recovar_trackeff2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                	                        h_recovar_trackeff2D[id][ij][ik][iet]->Sumw2();

                        	                sprintf(name, "dd_recofake_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                	        sprintf(title, "2D Reco Fake Track Eff Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        	h_recofake_trackeff2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        	h_recofake_trackeff2D[id][ij][ik][iet]->Sumw2();
	
						sprintf(name, "dd_corr_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackeff2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackeff2D[id][ij][ik][iet]->Sumw2();
						}
						
					sprintf(name, "dd_genmiss_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackeff2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Sumw2();					
#endif

#ifdef TRACKPTUP
					if (isReconstruct) {
                                                sprintf(name, "dd_reco_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt1_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT up Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt1_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt1_2D[id][ij][ik][iet]->Sumw2();
                                                }

                                        sprintf(name, "dd_genmiss_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Sumw2();
#endif

#ifdef TRACKPTDOWN
					if (isReconstruct) {
                                                sprintf(name, "dd_reco_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt2_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT down Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt2_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt2_2D[id][ij][ik][iet]->Sumw2();
                                                }

                                        sprintf(name, "dd_genmiss_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Sumw2();
#endif
				}
			}
		}
	}
/*
//-------------------------------------------Jet Charge Histogram
//1D Histogram for RECO & GEN for 3 definition, 2 jets, 10 kappa using array
for(int id=0; id<ndef; id++){
	for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
			for(int iet=0; iet<njetetamn; iet++){
				//for(int ipt=0; ipt<njetptmn; ipt++){
				for(int ipt=0; ipt<ngenPT; ipt++){
					if (isReconstruct) {
					sprintf(name, "reco_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
		                        //sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                		        h_recovar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                	h_recovar[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                	//sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                               	 	h_recofake[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                	h_recofake[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "RM_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                               	 	//sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                	h_RM[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                	h_RM[id][ij][ik][iet][ipt]->Sumw2();
					}
#ifdef  LHAPDF
      		      		for (int ix=1; ix<nnnmx; ix++) {
					sprintf(name, "genpdf_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
              				//sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
					h_genvarpdf[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
					h_genvarpdf[id][ij][ik][iet][ipt][ix]-Sumw2();
					}
#endif	
#ifdef  JETENERGY
                                for (int ix=1; ix<njecmx; ix++) {
                                        sprintf(name, "recojec_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#elif defined(JETRESO)
				for (int ix=0; ix<njecmx; ix++ ) {
                                        sprintf(name, "recoreso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarres[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recovarres[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "corr_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH2F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "fake_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "miss_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif
					sprintf(name, "gen_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
		                       	//sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                		        h_genvar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                	h_genvar[id][ij][ik][iet][ipt]->Sumw2();
						
					sprintf(name, "genmiss_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                       	//sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genmiss[id][ij][ik][iet][ipt]->Sumw2();
						
					}
				}
			}
		}
	}
*/
for(int id=0; id<ndef; id++){
        for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
                        for(int iet=0; iet<njetetamn; iet++){
                                //for(int ipt=0; ipt<njetptmn; ipt++){
				for(int ipt=0; ipt<ngenPT; ipt++){
                                        if (isReconstruct) {
                                        sprintf(name, "reco_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar[id][ij][ik][iet][ipt]->Sumw2();

#ifdef FLAV
					//Flavor Tagging
					sprintf(name, "reco_gjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco gjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_gjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_gjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_ujet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ujet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ujet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ujet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_djet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco djet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_djet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_djet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_ojet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ojet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ojet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ojet[id][ij][ik][iet][ipt]->Sumw2();


					//Second-set Flavor Tagging
					sprintf(name, "reco_qjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco qjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_qjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_qjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_aqjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco aqjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_aqjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_aqjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_aqgjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco aqgjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_aqgjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_aqgjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_aqojet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco aqojet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_aqojet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_aqojet[id][ij][ik][iet][ipt]->Sumw2();

#endif
                                        sprintf(name, "recofake_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        //sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM[id][ij][ik][iet][ipt]->Sumw2();
                                        }
#ifdef  LHAPDF
                                for (int ix=1; ix<nnnmx; ix++) {
                                        sprintf(name, "genpdf_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genvarpdf[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarpdf[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif

#ifdef SCALEUNC
                                for (int ix=0; ix<nscale; ix++) {
                                        sprintf(name, "genscaleunc_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
					sprintf(title, "Gen Scale Unc Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genvarscaleunc[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarscaleunc[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif

#ifdef  JETENERGY
                                for (int ix=1; ix<njecmx; ix++) {
                                        sprintf(name, "recojec_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#elif defined(JETRESO)
                                for (int ix=0; ix<njecmx; ix++ ) {
                                        sprintf(name, "reco_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarres[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovarres[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "corr_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "fake_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "miss_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif
                                        sprintf(name, "gen_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        //sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss[id][ij][ik][iet][ipt]->Sumw2();

#ifdef PREFIRE
					if (isReconstruct) {
                                        sprintf(name, "reco_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_prefire[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Fake Prefire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_prefire[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "RM PreFire Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_prefire[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_prefire[id][ij][ik][iet][ipt]->Sumw2();
					}

					sprintf(name, "gen_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "Gen PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_prefire[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Gen PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_prefire[id][ij][ik][iet][ipt]->Sumw2();
#endif

#ifdef TRACKEFF
					if (isReconstruct) {
                                        sprintf(name, "reco_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackeff[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Fake Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackeff[id][ij][ik][iet][ipt]->Sumw2();				

					sprintf(name, "RM_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "RM Track Eff Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackeff[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackeff[id][ij][ik][iet][ipt]->Sumw2();				
					}	
					sprintf(name, "genmiss_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Gen Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackeff[id][ij][ik][iet][ipt]->Sumw2();					
#endif

#ifdef TRACKPTUP
					if (isReconstruct) {
                                        sprintf(name, "reco_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackpt1[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackpt1[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM Track pT up Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackpt1[id][ij][ik][iet][ipt]->Sumw2();
                                        }
                                        sprintf(name, "genmiss_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackpt1[id][ij][ik][iet][ipt]->Sumw2();
#endif

#ifdef TRACKPTDOWN
                                        if (isReconstruct) {
                                        sprintf(name, "reco_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackpt2[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackpt2[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM Track pT down Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackpt2[id][ij][ik][iet][ipt]->Sumw2();
                                        }
                                        sprintf(name, "genmiss_tracpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackpt2[id][ij][ik][iet][ipt]->Sumw2();
#endif
                                        }
                                }
                        }
                }
        }

for(int ij=0; ij<njet; ij++){
	for (int ik=0; ik<nkappa; ik++){
        	sprintf(name, "matched_all_jetpt_j%i_k%i",ij, ik);
                sprintf(title, "Gen Matched_All Tracks vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
		hprof_matchedChg_R_allChg_genjetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
		hprof_matchedChg_R_allChg_genjetpt[ij][ik]->Sumw2();

		sprintf(name, "gen_trackpt_jetpt_jetpt_j%i_k%i",ij, ik);
                sprintf(title, "Gen Track to Jet pT vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
		hprof_gen_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
		hprof_gen_trackpt_R_jetpt_jetpt[ij][ik]->Sumw2();
	
		if(isReconstruct){
			sprintf(name, "reco_trackpt_jetpt_jetpt_j%i_k%i",ij, ik);
                	sprintf(title, "Reco Track to Jet pT vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
			hprof_reco_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_reco_trackpt_R_jetpt_jetpt[ij][ik]->Sumw2();
		}
	}
}

for(int id=0; id<ndef; id++){
	for(int ij=0; ij<njet; ij++){
        	for (int ik=0; ik<nkappa; ik++){
			sprintf(name, "reco_jco_pt_d%i_j%i_k%i",id, ij, ik);
			sprintf(title, "JCO vs pT Reco Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			hprof_reco_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			//hprof_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,ngenPT,genhtbins,-3,3);
			hprof_reco_jco_pt[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT Gen Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_gen_jco_pt[id][ij][ik]->Sumw2();
#ifdef FLAV
			//Flavor Tagging
			sprintf(name, "jco_pt_gjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT gjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_jco_pt_gjet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_jco_pt_gjet[id][ij][ik]->Sumw2();

			sprintf(name, "jco_pt_ujet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ujet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_jco_pt_ujet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
                        hprof_jco_pt_ujet[id][ij][ik]->Sumw2();

                        sprintf(name, "jco_pt_djet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT djet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_jco_pt_djet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
                        hprof_jco_pt_djet[id][ij][ik]->Sumw2();

			sprintf(name, "jco_pt_ojet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ojet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_jco_pt_ojet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
                        hprof_jco_pt_ojet[id][ij][ik]->Sumw2();
#endif
		}
	}
}

//-------------------------------------------
 sprintf(name, "corr_jet");
 sprintf(title, "Gen_Reco_HT2");
 h_2ht=fs->make<TH2F>(name, title, 10, leadingPtThreshold, 10, leadingPtThreshold);
//-------------------------------------------

#ifndef GENPART            

  recojt_CHF = fs->make<TH1F>("recojt_CHF","CHF_{recojets}",200,0, 1);
  recojt_CHF->Sumw2();
  
  recojt_NHF = fs->make<TH1F>("recojt_NHF","NHF_{recojets}",200,0, 1);
  recojt_NHF->Sumw2();

  recojt_NEMF = fs->make<TH1F>("recojt_NEMF","NEMF_{recojets}",200,0, 1);
  recojt_NEMF->Sumw2();

  recojt_CHM = fs->make<TH1F>("recojt_CHM","CHM_{recojets}",200,0, 200);
  recojt_CHM->Sumw2();

  recojt_NumNeutralParticles = fs->make<TH1F>("recojt_NumNeutralParticles","NumNeut_{recojets}",200,0, 200);
  recojt_NumNeutralParticles->Sumw2();

  recojt_CEMF = fs->make<TH1F>("recojt_CEMF","CEMF_{recojets}",200,0, 1);
  recojt_CEMF->Sumw2();

  recojt_NumConst = fs->make<TH1F>("recojt_NumConst","recojt_NumConst_{recojets}",200,0, 1200);
  recojt_NumConst->Sumw2();
         
  //recojt_hist = fs->make<TH1F>("recojt_hist","# of recojets",20,-0.5, 19.5);
  //recojt_hist->Sumw2();
  //recojt_pt = fs->make<TH1F>("recojt_pt","Et_{recojets}",100,20., 2020.);
  //recojt_pt->Sumw2();
  recojt_eta = fs->make<TH1F>("recojt_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt_eta->Sumw2();
  recojt_phi = fs->make<TH1F>("recojt_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt_phi->Sumw2();

  //recojt1_pt = fs->make<TH1F>("recojet1_pt","Et_{recojets}",100,20., 2020.);
  //recojt1_pt->Sumw2();
  recojt1_eta = fs->make<TH1F>("recojet1_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt1_eta->Sumw2();
  recojt1_phi = fs->make<TH1F>("recojet1_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt1_phi->Sumw2();

  //recojt2_pt = fs->make<TH1F>("recojet2_pt","Et_{recojets}",100,20., 2020.);
  //recojt2_pt->Sumw2();
  recojt2_eta = fs->make<TH1F>("recojet2_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt2_eta->Sumw2();
  recojt2_phi = fs->make<TH1F>("recojet2_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt2_phi->Sumw2();

  //recojt3_pt = fs->make<TH1F>("recojet2_pt","Et_{recojets}",100,20., 2020.);
  //recojt3_pt->Sumw2();
  recojt3_eta = fs->make<TH1F>("recojet3_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt3_eta->Sumw2();
  recojt3_phi = fs->make<TH1F>("recojet3_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt3_phi->Sumw2();

#ifdef FLAV
  //gluon-jet
  recojtg_eta = fs->make<TH1F>("recojtg_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojtg_eta->Sumw2();
  recojtg_phi = fs->make<TH1F>("recojtg_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojtg_phi->Sumw2();

  recojt1g_eta = fs->make<TH1F>("recojt1g_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt1g_eta->Sumw2();
  recojt1g_phi = fs->make<TH1F>("recojt1g_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt1g_phi->Sumw2();

  recojt2g_eta = fs->make<TH1F>("recojt2g_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt2g_eta->Sumw2();
  recojt2g_phi = fs->make<TH1F>("recojt2g_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt2g_phi->Sumw2();

  //d-jet
  recojtd_eta = fs->make<TH1F>("recojtd_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojtd_eta->Sumw2();
  recojtd_phi = fs->make<TH1F>("recojtd_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojtd_phi->Sumw2();

  recojt1d_eta = fs->make<TH1F>("recojt1d_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt1d_eta->Sumw2();
  recojt1d_phi = fs->make<TH1F>("recojt1d_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt1d_phi->Sumw2();

  recojt2d_eta = fs->make<TH1F>("recojt2d_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt2d_eta->Sumw2();
  recojt2d_phi = fs->make<TH1F>("recojt2d_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt2d_phi->Sumw2();

  //u-jet
  recojtu_eta = fs->make<TH1F>("recojtu_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojtu_eta->Sumw2();
  recojtu_phi = fs->make<TH1F>("recojtu_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojtu_phi->Sumw2();

  recojt1u_eta = fs->make<TH1F>("recojt1u_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt1u_eta->Sumw2();
  recojt1u_phi = fs->make<TH1F>("recojt1u_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt1u_phi->Sumw2();

  recojt2u_eta = fs->make<TH1F>("recojt2u_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt2u_eta->Sumw2();
  recojt2u_phi = fs->make<TH1F>("recojt2u_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt2u_phi->Sumw2();

  //others
  recojto_eta = fs->make<TH1F>("recojto_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojto_eta->Sumw2();
  recojto_phi = fs->make<TH1F>("recojto_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojto_phi->Sumw2();

  recojt1o_eta = fs->make<TH1F>("recojt1o_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt1o_eta->Sumw2();
  recojt1o_phi = fs->make<TH1F>("recojt1o_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt1o_phi->Sumw2();

  recojt2o_eta = fs->make<TH1F>("recojt2o_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt2o_eta->Sumw2();
  recojt2o_phi = fs->make<TH1F>("recojt2o_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt2o_phi->Sumw2(); 

  recojt_qjet_eta = fs->make<TH1F>("recojt_qjet_eta","#eta_{recojetsq}",100,-2.5, 2.5);
  recojt_qjet_eta->Sumw2();
  recojt_qjet_phi = fs->make<TH1F>("recojt_qjet_phi","#phi_{recojetsq}",100,-M_PI, M_PI);
  recojt_qjet_phi->Sumw2();

  recojt_aqjet_eta = fs->make<TH1F>("recojt_aqjet_eta","#eta_{recojetsaq}",100,-2.5, 2.5);
  recojt_aqjet_eta->Sumw2();
  recojt_aqjet_phi = fs->make<TH1F>("recojt_aqjet_phi","#phi_{recojetsaq}",100,-M_PI, M_PI);
  recojt_aqjet_phi->Sumw2();

  recojt_aqgjet_eta = fs->make<TH1F>("recojt_aqgjet_eta","#eta_{recojetsaqg}",100,-2.5, 2.5);
  recojt_aqgjet_eta->Sumw2();
  recojt_aqgjet_phi = fs->make<TH1F>("recojt_aqgjet_phi","#phi_{recojetsaqg}",100,-M_PI, M_PI);
  recojt_aqgjet_phi->Sumw2();

  recojt_aqojet_eta = fs->make<TH1F>("recojt_aqojet_eta","#eta_{recojetsaqo}",100,-2.5, 2.5);
  recojt_aqojet_eta->Sumw2();
  recojt_aqojet_phi = fs->make<TH1F>("recojt_aqojet_phi","#phi_{recojetsaqo}",100,-M_PI, M_PI);
  recojt_aqojet_phi->Sumw2();

  recojt1_qjet_eta = fs->make<TH1F>("recojt1_qjet_eta","#eta_{reco1jetsq}",100,-2.5, 2.5);
  recojt1_qjet_eta->Sumw2();
  recojt1_qjet_phi = fs->make<TH1F>("recojt1_qjet_phi","#phi_{reco1jetsq}",100,-M_PI, M_PI);
  recojt1_qjet_phi->Sumw2();

  recojt1_aqjet_eta = fs->make<TH1F>("recojt1_aqjet_eta","#eta_{reco1jetsaq}",100,-2.5, 2.5);
  recojt1_aqjet_eta->Sumw2();
  recojt1_aqjet_phi = fs->make<TH1F>("recojt1_aqjet_phi","#phi_{reco1jetsaq}",100,-M_PI, M_PI);
  recojt1_aqjet_phi->Sumw2();

  recojt1_aqgjet_eta = fs->make<TH1F>("recojt1_aqgjet_eta","#eta_{reco1jetsaqg}",100,-2.5, 2.5);
  recojt1_aqgjet_eta->Sumw2();
  recojt1_aqgjet_phi = fs->make<TH1F>("recojt1_aqgjet_phi","#phi_{reco1jetsaqg}",100,-M_PI, M_PI);
  recojt1_aqgjet_phi->Sumw2();

  recojt1_aqojet_eta = fs->make<TH1F>("recojt1_aqojet_eta","#eta_{reco1jetsaqo}",100,-2.5, 2.5);
  recojt1_aqojet_eta->Sumw2();
  recojt1_aqojet_phi = fs->make<TH1F>("recojt1_aqojet_phi","#phi_{reco1jetsaqo}",100,-M_PI, M_PI);
  recojt1_aqojet_phi->Sumw2();

  recojt2_qjet_eta = fs->make<TH1F>("recojt2_qjet_eta","#eta_{reco2jetsq}",100,-2.5, 2.5);
  recojt2_qjet_eta->Sumw2();
  recojt2_qjet_phi = fs->make<TH1F>("recojt2_qjet_phi","#phi_{reco2jetsq}",100,-M_PI, M_PI);
  recojt2_qjet_phi->Sumw2();

  recojt2_aqjet_eta = fs->make<TH1F>("recojt2_aqjet_eta","#eta_{reco2jetsaq}",100,-2.5, 2.5);
  recojt2_aqjet_eta->Sumw2();
  recojt2_aqjet_phi = fs->make<TH1F>("recojt2_aqjet_phi","#phi_{reco2jetsaq}",100,-M_PI, M_PI);
  recojt2_aqjet_phi->Sumw2();

  recojt2_aqgjet_eta = fs->make<TH1F>("recojt2_aqgjet_eta","#eta_{reco2jetsaqg}",100,-2.5, 2.5);
  recojt2_aqgjet_eta->Sumw2();
  recojt2_aqgjet_phi = fs->make<TH1F>("recojt2_aqgjet_phi","#phi_{reco2jetsaqg}",100,-M_PI, M_PI);
  recojt2_aqgjet_phi->Sumw2();

  recojt2_aqojet_eta = fs->make<TH1F>("recojt2_aqojet_eta","#eta_{reco2jetsaqo}",100,-2.5, 2.5);
  recojt2_aqojet_eta->Sumw2();
  recojt2_aqojet_phi = fs->make<TH1F>("recojt2_aqojet_phi","#phi_{reco2jetsaqo}",100,-M_PI, M_PI);
  recojt2_aqojet_phi->Sumw2();
#endif

  hchpt = fs->make<TProfile>("hchpt","hchpt",99,30,1500,1,100);
  hchpt->Sumw2();

  hchpt1 = fs->make<TProfile>("hchpt1","hchpt1",99,30,1500,1,100);
  hchpt1->Sumw2();

  hchpt2 = fs->make<TProfile>("hchpt2","hchpt2",99,30,1500,1,100);
  hchpt2->Sumw2();

  for(int jk=0; jk<njetetamn; jk++){
    sprintf(name, "recojetallave_pt_%i",jk);
    sprintf(title, "Et_{recojetsallave}_%g", etarange[jk]);
    recojtallave_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    recojtallave_pt[jk]->Sumw2();

    sprintf(name, "recojetallavewt1_pt_%i",jk);
    sprintf(title, "Et_{recojetsallavewt1}_%g", etarange[jk]);
    recojtallavewt1_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    recojtallavewt1_pt[jk]->Sumw2();

    sprintf(name, "recojt_pt_%i",jk);
    sprintf(title, "Et_{recojets}_%g", etarange[jk]);
    recojt_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_pt[jk]->Sumw2();

    sprintf(name, "recojet1_pt_%i",jk);
    sprintf(title, "Et_{recojets1}_%g", etarange[jk]);
    recojt1_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_pt[jk]->Sumw2();

    sprintf(name, "recojet2_pt_%i",jk);
    sprintf(title, "Et_{recojets2}_%g", etarange[jk]);
    recojt2_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_pt[jk]->Sumw2();

    sprintf(name, "recojet3_pt_%i",jk);
    sprintf(title, "Et_{recojets3}_%g", etarange[jk]);
    recojt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt3_pt[jk]->Sumw2();

#ifdef FLAV
    //gluon
    sprintf(name, "recojtg_pt_%i",jk);
    sprintf(title, "Et_{recojetg}_%g", etarange[jk]);
    recojtg_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtg_pt[jk]->Sumw2();

    sprintf(name, "recojt1g_pt_%i",jk);
    sprintf(title, "Et_{recojet1g}_%g", etarange[jk]);
    recojt1g_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1g_pt[jk]->Sumw2();

    sprintf(name, "recojt2g_pt_%i",jk);
    sprintf(title, "Et_{recojet2g}_%g", etarange[jk]);
    recojt2g_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2g_pt[jk]->Sumw2();

    //d-jet
    sprintf(name, "recojtd_pt_%i",jk);
    sprintf(title, "Et_{recojetd}_%g", etarange[jk]);
    recojtd_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtd_pt[jk]->Sumw2();

    sprintf(name, "recojt1d_pt_%i",jk);
    sprintf(title, "Et_{recojet1d}_%g", etarange[jk]);
    recojt1d_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1d_pt[jk]->Sumw2();

    sprintf(name, "recojt2d_pt_%i",jk);
    sprintf(title, "Et_{recojet2d}_%g", etarange[jk]);
    recojt2d_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2d_pt[jk]->Sumw2();

    //u-jet
    sprintf(name, "recojtu_pt_%i",jk);
    sprintf(title, "Et_{recojetu}_%g", etarange[jk]);
    recojtu_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtu_pt[jk]->Sumw2();
    
    sprintf(name, "recojt1u_pt_%i",jk);
    sprintf(title, "Et_{recojet1u}_%g", etarange[jk]);
    recojt1u_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1u_pt[jk]->Sumw2();

    sprintf(name, "recojt2u_pt_%i",jk);
    sprintf(title, "Et_{recojet2u}_%g", etarange[jk]);
    recojt2u_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2u_pt[jk]->Sumw2();

    //others
    sprintf(name, "recojto_pt_%i",jk);
    sprintf(title, "Et_{recojeto}_%g", etarange[jk]);
    recojto_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojto_pt[jk]->Sumw2();

    sprintf(name, "recojt1o_pt_%i",jk);
    sprintf(title, "Et_{recojet1o}_%g", etarange[jk]);
    recojt1o_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1o_pt[jk]->Sumw2();

    sprintf(name, "recojt2o_pt_%i",jk);
    sprintf(title, "Et_{recojet2o}_%g", etarange[jk]);
    recojt2o_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2o_pt[jk]->Sumw2();

    //Second-set Flavor Tagging
    sprintf(name, "recojt_qjet_pt_%i",jk);
    sprintf(title, "Et_{reco_qjet}_%g", etarange[jk]);
    recojt_qjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_qjet_pt[jk]->Sumw2();

    sprintf(name, "recojt_aqjet_pt_%i",jk);
    sprintf(title, "Et_{reco_aqjet}_%g", etarange[jk]);
    recojt_aqjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_aqjet_pt[jk]->Sumw2();

    sprintf(name, "recojt_aqgjet_pt_%i",jk);
    sprintf(title, "Et_{reco_aqgjet}_%g", etarange[jk]);
    recojt_aqgjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_aqgjet_pt[jk]->Sumw2();

    sprintf(name, "recojt_aqojet_pt_%i",jk);
    sprintf(title, "Et_{reco_aqojet}_%g", etarange[jk]);
    recojt_aqojet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_aqojet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_qjet_pt_%i",jk);
    sprintf(title, "Et_{reco1_qjet}_%g", etarange[jk]);
    recojt1_qjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_qjet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_aqjet_pt_%i",jk);
    sprintf(title, "Et_{reco1_aqjet}_%g", etarange[jk]);
    recojt1_aqjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_aqjet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_aqgjet_pt_%i",jk);
    sprintf(title, "Et_{reco1_aqgjet}_%g", etarange[jk]);
    recojt1_aqgjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_aqgjet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_aqojet_pt_%i",jk);
    sprintf(title, "Et_{reco1_aqojet}_%g", etarange[jk]);
    recojt1_aqojet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_aqojet_pt[jk]->Sumw2();
 
    sprintf(name, "recojt2_qjet_pt_%i",jk);
    sprintf(title, "Et_{reco2_qjet}_%g", etarange[jk]);
    recojt2_qjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_qjet_pt[jk]->Sumw2();

    sprintf(name, "recojt12_aqjet_pt_%i",jk);
    sprintf(title, "Et_{reco12_aqjet}_%g", etarange[jk]);
    recojt2_aqjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_aqjet_pt[jk]->Sumw2();

    sprintf(name, "recojt2_aqgjet_pt_%i",jk);
    sprintf(title, "Et_{reco2_aqgjet}_%g", etarange[jk]);
    recojt2_aqgjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_aqgjet_pt[jk]->Sumw2();

    sprintf(name, "recojt2_aqojet_pt_%i",jk);
    sprintf(title, "Et_{reco2_aqojet}_%g", etarange[jk]);
    recojt2_aqojet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_aqojet_pt[jk]->Sumw2();
#endif

    //sprintf(title, "Et_{recojets3}_%g", etarange[jk]);
    //recojt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    //recojt3_pt[jk]->Sumw2();

    for (int kl=0; kl<nHLTmx; kl++) { 
      //sprintf(name, "recojt_pt_%i_%i",jk, kl);
      //sprintf(title, "Et_{recojets}_%g_%i", etarange[jk], kl);
      //recojt_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      //recojt_pt[jk][kl]->Sumw2();

      sprintf(name, "recojetave_pt_%i_%i",jk, kl);
      sprintf(title, "Et_{recojetsave}_%g_%i", etarange[jk], kl);
      recojtave_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      recojtave_pt[jk][kl]->Sumw2();

      sprintf(name, "recojetavewt1_pt_%i_%i",jk, kl);
      sprintf(title, "Et_{recojetsavewt1}_%g_%i", etarange[jk], kl);
      recojtavewt1_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      recojtavewt1_pt[jk][kl]->Sumw2();
    }

    sprintf(name, "recojetHT2_%i",jk);
    sprintf(title, "recojetsHT2_%g", etarange[jk]);

    recoht2_pt[jk] = fs->make<TH1F>(name, title, 400,20., 1500.);
    recoht2_pt[jk]->Sumw2();


    sprintf(name, "hjetdpt_%i",jk);
    sprintf(title, "dpt_{recojets12}_%g", etarange[jk]);

    hjetdpt[jk] = fs->make<TH1F>(name, title, 100,20., 500.);
    hjetdpt[jk]->Sumw2();

    sprintf(name, "hjetpt2bypt1_%i",jk);
    sprintf(title, "hjetpt2bypt1 reco jet_%g", etarange[jk]);

    hjetpt2bypt1[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetpt2bypt1[jk]->Sumw2();

    sprintf(name, "hjetpt3bypt2_%i",jk);
    sprintf(title, "hjetpt3bypt2 reco jet_%g", etarange[jk]);
    hjetpt3bypt2[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetpt3bypt2[jk]->Sumw2();

    sprintf(name, "hjetdphi_%i",jk);
    sprintf(title, "#phi_{recojets}_%g", etarange[jk]);
    hjetdphi[jk] = fs->make<TH1F>(name,title,100,-M_PI, M_PI);
    hjetdphi[jk]->Sumw2();
    sprintf(name, "hjetptbypl_%i",jk);
    sprintf(title, "1st recojet Pt*sin/1st Recojet_%g", etarange[jk]);
    hjetptbypl[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetptbypl[jk]->Sumw2();

    //hjetpt2bypt1 = fs->make<TH1F>("hjetpt2bypt1", "hjetpt2bypt1 reco jet", 60, 0., 1.0);
    //hjetpt2bypt1->Sumw2();
    //hjetpt3bypt2 = fs->make<TH1F>("hjetpt2bypt1", "hjetpt2bypt1 reco jet", 60, 0., 1.0);
    //hjetpt3bypt2->Sumw2();
  }

  recochg_pt = fs->make<TH1F>("recochg_pt","Et_{recocharge_alljet}",100, 1., 101.);
  recochg_pt->Sumw2();
  recochg_eta = fs->make<TH1F>("recochg_eta","#eta_{recocharge_alljet}",100,-3., 3.);
  recochg_eta->Sumw2();
  recochg_phi = fs->make<TH1F>("recochg_phi","#phi_{recocharge_alljet}",100,-M_PI, M_PI);
  recochg_phi->Sumw2();

  recochg1_pt = fs->make<TH1F>("recochg1_pt","Et_{recocharge_jet1}",100, 1., 101.);
  recochg1_pt->Sumw2();
  recochg1_eta = fs->make<TH1F>("recochg1_eta","#eta_{recocharge_jet1}",100,-3., 3.);
  recochg1_eta->Sumw2();
  recochg1_phi = fs->make<TH1F>("recochg1_phi","#phi_{recocharge_jet1}",100,-M_PI, M_PI);
  recochg1_phi->Sumw2();

  recochg2_pt = fs->make<TH1F>("recochg2_pt","Et_{recocharge_jet2}",100, 1., 101.);
  recochg2_pt->Sumw2();
  recochg2_eta = fs->make<TH1F>("recochg2_eta","#eta_{recocharge_jet2}",100,-3., 3.);
  recochg2_eta->Sumw2();
  recochg2_phi = fs->make<TH1F>("recochg2_phi","#phi_{recocharge_jet2}",100,-M_PI, M_PI);
  recochg2_phi->Sumw2();

  recochg3_pt = fs->make<TH1F>("recochg3_pt","Et_{recocharge_jet3}",100, 1., 101.);
  recochg3_pt->Sumw2();
  recochg3_eta = fs->make<TH1F>("recochg3_eta","#eta_{recocharge_jet3}",100,-3., 3.);
  recochg3_eta->Sumw2();
  recochg3_phi = fs->make<TH1F>("recochg3_phi","#phi_{recocharge_jet3}",100,-M_PI, M_PI);
  recochg3_phi->Sumw2();

#endif
//-------------------------------------------

  for (int ij=0; ij<nhist; ij++) {
    sprintf(name, "anglex_%i", ij);
    vec_anglex[ij] = fs->make<TH1F>(name, name, 240, 0.7, 1.0);
  }

  //genjt_hist = fs->make<TH1F>("genjt_hist","# of genjets",20,-0.5, 19.5);
  //genjt_hist->Sumw2();
  for(int jk=0; jk<njetetamn; jk++){
    sprintf(name, "genjetallave_pt_%i",jk);
    sprintf(title, "Et_{genjetsallave}_%g", etarange[jk]);
    genjtallave_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    genjtallave_pt[jk]->Sumw2();

    sprintf(name, "genjt_pt_%i",jk);
    sprintf(title, "Et_{genjets}_%g", etarange[jk]);
    genjt_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt_pt[jk]->Sumw2();

    sprintf(name, "genjet1_pt_%i",jk);
    sprintf(title, "Et_{genjets1}_%g", etarange[jk]);
    genjt1_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt1_pt[jk]->Sumw2();

    sprintf(name, "genjet2_pt_%i",jk);
    sprintf(title, "Et_{genjets2}_%g", etarange[jk]);
    genjt2_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt2_pt[jk]->Sumw2();

    sprintf(name, "genjet3_pt_%i",jk);
    sprintf(title, "Et_{genjets3}_%g", etarange[jk]);
    genjt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt3_pt[jk]->Sumw2();

    /*sprintf(name, "genjt_oth_pt_%i",jk);
    sprintf(title, "#Et_{genjets_oth}_%g", etarange[jk]);

    genjt_oth_pt[jk] = fs->make<TH1F>(name,title,100, 20., 2020.);
    genjt_oth_pt[jk]->Sumw2();
   */

    sprintf(name, "genjetdpt_%i",jk);
    sprintf(title, "dpt_{genjets12}_%g", etarange[jk]);

    genjetdpt[jk] = fs->make<TH1F>(name, title, 100,20., 500.);
    genjetdpt[jk]->Sumw2();

    sprintf(name, "genjetpt2bypt1_%i",jk);
    sprintf(title, "jetpt2bypt1 gen jet_%g", etarange[jk]);

    genjetpt2bypt1[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetpt2bypt1[jk]->Sumw2();

    sprintf(name, "genjetpt3bypt2_%i",jk);
    sprintf(title, "hjetpt3bypt2 gen jet_%g", etarange[jk]);
    genjetpt3bypt2[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetpt3bypt2[jk]->Sumw2();

    sprintf(name, "genjetdphi_%i",jk);
    sprintf(title, "#phi_{genjets}_%g", etarange[jk]);
    genjetdphi[jk] = fs->make<TH1F>(name,title,100,-M_PI, M_PI);
    genjetdphi[jk]->Sumw2();
    
    sprintf(name, "genjetptbypl_%i",jk);
    sprintf(title, "1st genjet Pt*sin/1st genjet_%g", etarange[jk]);
    genjetptbypl[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetptbypl[jk]->Sumw2();
  }

  //genjt_pt = fs->make<TH1F>("genjt_pt","Et_{genjets}",100,20., 2020.);
  //genjt_pt->Sumw2();
  genjt_eta = fs->make<TH1F>("genjt_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt_eta->Sumw2();
  genjt_phi = fs->make<TH1F>("genjt_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt_phi->Sumw2();

  genjt1_eta = fs->make<TH1F>("genjet1_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt1_eta->Sumw2();
  genjt1_phi = fs->make<TH1F>("genjet1_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt1_phi->Sumw2();

  genjt2_eta = fs->make<TH1F>("genjet2_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt2_eta->Sumw2();
  genjt2_phi = fs->make<TH1F>("genjet2_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt2_phi->Sumw2();

  genjt3_eta = fs->make<TH1F>("genjet3_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt3_eta->Sumw2();
  genjt3_phi = fs->make<TH1F>("genjet3_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt3_phi->Sumw2();
  //genjt_oth_pt = fs->make<TH1F>("genjt_oth_pt","Et_{genjets_oth}",100, 20., 2020.);
  //genjt_oth_pt->Sumw2();
  /*  
  genjt_oth_eta = fs->make<TH1F>("genjt_oth_eta","#eta_{genjets_oth}",100,-5., 5.);
  genjt_oth_eta->Sumw2();
  genjt_oth_phi = fs->make<TH1F>("genjt_oth_phi","#phi_{genjets_oth}",100,-M_PI, M_PI);
  genjt_oth_phi->Sumw2();
  */
  //genchg_hist = fs->make<TH1F>("genchg_hist","# of genchargeds",120,-0.5, 239.5);
  //genchg_hist->Sumw2();
  genchg_pt = fs->make<TH1F>("genchg_pt","Et_{gencharge_alljet}",100, 1., 101.);
  genchg_pt->Sumw2();
  genchg_eta = fs->make<TH1F>("genchg_eta","#eta_{gencharge_alljet)",100,-3., 3.);
  genchg_eta->Sumw2();
  genchg_phi = fs->make<TH1F>("genchg_phi","#phi_{gencharge_alljet}",100,-M_PI, M_PI);
  genchg_phi->Sumw2();

  genchg1_pt = fs->make<TH1F>("genchg1_pt","Et_{gencharge_jet1}",100, 1., 101.);
  genchg1_pt->Sumw2();
  genchg1_eta = fs->make<TH1F>("genchg1_eta","#eta_{gencharge_jet1}",100,-3., 3.);
  genchg1_eta->Sumw2();
  genchg1_phi = fs->make<TH1F>("genchg1_phi","#phi_{gencharge_jet1}",100,-M_PI, M_PI);
  genchg1_phi->Sumw2(); 

  genchg2_pt = fs->make<TH1F>("genchg2_pt","Et_{gencharge_jet2}",100, 1., 101.);
  genchg2_pt->Sumw2();
  genchg2_eta = fs->make<TH1F>("genchg2_eta","#eta_{gencharge_jet2}",100,-3., 3.);
  genchg2_eta->Sumw2();
  genchg2_phi = fs->make<TH1F>("genchg2_phi","#phi_{gencharge_jet2}",100,-M_PI, M_PI);
  genchg2_phi->Sumw2();

  genchg3_pt = fs->make<TH1F>("genchg3_pt","Et_{gencharge_jet3}",100, 1., 101.);
  genchg3_pt->Sumw2();
  genchg3_eta = fs->make<TH1F>("genchg3_eta","#eta_{gencharge_jet3}",100,-3., 3.);
  genchg3_eta->Sumw2();
  genchg3_phi = fs->make<TH1F>("genchg3_phi","#phi_{gencharge_jet3}",100,-M_PI, M_PI);
  genchg3_phi->Sumw2();

  //genchg_oth_hist = fs->make<TH1F>("genchg_oth_hist","# of genchargeds (others)",120,-0.5, 239.5);
  //genchg_oth_hist->Sumw2();
  /* 
  genchg_oth_pt = fs->make<TH1F>("genchg_oth_pt","Et_{genchargeds_oth}",100,1., 101.);
  genchg_oth_pt->Sumw2();
  genchg_oth_eta = fs->make<TH1F>("genchg_oth_eta","#eta_{genchargeds_oth}",100,-5., 5.);
  genchg_oth_eta->Sumw2();
  genchg_oth_phi = fs->make<TH1F>("genchg_oth_phi","#phi_{genchargeds_oth}",100,-M_PI, M_PI);
  genchg_oth_phi->Sumw2();
  genneu_hist = fs->make<TH1F>("genneu_hist","# of genneutrals",120,-0.5, 239.5);
  genneu_hist->Sumw2();
  genneu_pt = fs->make<TH1F>("genneu_pt","Et_{genneutrals}",100,1., 101.);
  genneu_pt->Sumw2();
  genneu_eta = fs->make<TH1F>("genneu_eta","#eta_{genneutrals}",100,-3., 3.);
  genneu_eta->Sumw2();
  genneu_phi = fs->make<TH1F>("genneu_phi","#phi_{genneutrals}",100,-M_PI, M_PI);
  genneu_phi->Sumw2();

  genneu_oth_hist = fs->make<TH1F>("genneu_oth_hist","# of genneutrals (others)",120,-0.5, 239.5);
  genneu_oth_hist->Sumw2();
  genneu_oth_pt = fs->make<TH1F>("genneu_oth_pt","Et_{genneutrals_oth}",100, 1., 101.);
  genneu_oth_pt->Sumw2();
  genneu_oth_eta = fs->make<TH1F>("genneu_oth_eta","#eta_{genneutrals_oth}",100,-5., 5.);
  genneu_oth_eta->Sumw2();
  genneu_oth_phi = fs->make<TH1F>("genneu_oth_phi","#phi_{genneutrals_oth}",100,-M_PI, M_PI);
  genneu_oth_phi->Sumw2();
  */

  for (int ij=0; ij<nHLTmx; ij++) { 
    sprintf(name, "nprimall_%i", ij);
    sprintf(title, "# of primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_hist[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_hist[ij]->Sumw2();

    sprintf(name, "nprimsel_%i", ij);
    sprintf(title, "Selected # of primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_sel[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_sel[ij]->Sumw2();

    sprintf(name, "nprimall_rewt_%i", ij);
    sprintf(title, "# of rewighted primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_hist_rewt[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_hist_rewt[ij]->Sumw2();

    sprintf(name, "nprimsel_rewt_%i", ij);
    sprintf(title, "Selected # of reweighted primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_sel_rewt[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_sel_rewt[ij]->Sumw2();
  }

  prim_correl = fs->make<TH2F>("correl", "Correlation of all and Selected # of primary vtx", 60, -0.5, 59.5, 60, -0.5, 59.5);
  const char* namex[2]={"Selected", "Rejected"};
  for (int ij=0; ij<2; ij++) {
    sprintf(name, "primalltrk_%i", ij);
    sprintf(title, "All tracks in primary vtx (%s)", namex[ij]);
    prim_alltrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primgoodtrk_%i", ij);
    sprintf(title, "Good tracks in primary vtx (%s)", namex[ij]);
    prim_goodtrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primseltrk_%i", ij);
    sprintf(title, "Selected tracks in primary vtx (%s)", namex[ij]);
    prim_seltrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primdx_%i", ij);
    sprintf(title, "#Delta x of prim wrt beam spot (%s)", namex[ij]);
    prim_dx[ij] = fs->make<TH1F>(name, title, 120, -2.4, 2.4);

    sprintf(name, "primdy_%i", ij);
    sprintf(title, "#Delta y of prim wrt beam spot (%s)", namex[ij]);
    prim_dy[ij] = fs->make<TH1F>(name, title, 120, -2.4, 2.4);

    sprintf(name, "primdxy_%i", ij);
    sprintf(title, "#Delta y vs #Delta x of prim (%s)", namex[ij]);
    prim_dxy[ij] = fs->make<TH2F>(name, title, 60, -0.15, 0.15, 60, -0.15, 0.15);

    sprintf(name, "primdz_%i", ij);
    sprintf(title, "#Delta z of prim wrt beam spo (%s)", namex[ij]);
    prim_dz[ij] = fs->make<TH1F>(name, title, 120, -30.0, 30.0); 

    sprintf(name, "primprob_%i", ij);
    sprintf(title, "log10(vertex fit prob) (%s)", namex[ij]);
    prim_prob[ij] = fs->make<TH1F>(name, title, 120, -20.0, 0.0);   
  }

  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "njets_%i",ij);
    sprintf(title, "No of Jets_eta range_%gs", etarange[ij]);
    h_njets[ij] = fs->make<TH1F>(name, title, 9, 1, 10);
    h_njets[ij]->Sumw2();
  }

  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "ncharges_%i",ij);
    sprintf(title, "No of charge particles_eta range_%gs", etarange[ij]);
    h_nchg[ij] = fs->make<TH1F>(name, title, 139, 1, 140);
    h_nchg[ij]->Sumw2();
  }


  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "gennjets_%i",ij);
    sprintf(title, "No of GenJets_eta range_%gs", etarange[ij]);
    gen_njets[ij] = fs->make<TH1F>(name, title, 9, 1, 10);
    gen_njets[ij]->Sumw2();
  }
//-------------------------------------------
#ifdef TRIGGER
  const char* trigvar[2]={"L1", "HLT"};
  for(int ij=0; ij<nHLTmx; ij++){
    for(int jk=0; jk<2; jk++){
      sprintf(name, "trgjet_pt_%i_%i", ij, jk);
      sprintf(title, "trgjet_pt_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_pt[ij][jk] = fs->make<TH1F>(name, title, njetptbin, 20,1500);
      trgjet_pt[ij][jk]->Sumw2();

      sprintf(name, "trgjet_eta_%i_%i", ij, jk);
      sprintf(title, "trgjet_eta_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_eta[ij][jk] = fs->make<TH1F>(name, title, njetptbin, -5., 5.);
      trgjet_eta[ij][jk]->Sumw2();

      sprintf(name, "trgjet_phi_%i_%i", ij, jk);
      sprintf(title, "trgjet_phi_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_phi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
      trgjet_phi[ij][jk]->Sumw2();

      sprintf(name, "prbjet_pt_%i_%i", ij, jk);
      sprintf(title, "prbjet_pt_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_pt[ij][jk] = fs->make<TH1F>(name, title, njetptbin, 20,1500);
      prbjet_pt[ij][jk]->Sumw2();

      sprintf(name, "prbjet_eta_%i_%i", ij, jk);
      sprintf(title, "prbjet_eta_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_eta[ij][jk] = fs->make<TH1F>(name, title, 100,-5., 5.);
      prbjet_eta[ij][jk]->Sumw2();

      sprintf(name, "prbjet_phi_%i_%i", ij, jk);
      sprintf(title, "prbjet_phi_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_phi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
      prbjet_phi[ij][jk]->Sumw2();
    }
  } 
#endif
//Trigger special

//-------------------------------------------
	if (isReconstruct) { 
		for(int ij=0; ij<nHLTmx; ij++){
			for(int jk=0; jk<njetetamn; jk++){
				sprintf(name, "jetpt_%i_%i",jk,ij);
				sprintf(title, "jetpt_%s_%g", jethlt_name[ij], etarange[jk]);
				h_jetpt[ij][jk] = fs->make<TH1F>(name, title, 300, 50, 1550);
				h_jetpt[ij][jk]->Sumw2();
				
				sprintf(name, "jetphi_%i_%i",jk, ij);
				sprintf(title, "jetphi_%s_%g", jethlt_name[ij],etarange[jk]);
				h_jetphi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
				h_jetphi[ij][jk]->Sumw2();				
			}
		}
	}

#ifdef TRIGGER
  for(int ij=0; ij<nHLTmx; ij++){

    sprintf(name, "jeteta_%i", ij);
    sprintf(title, "jetphi_%s", jethlt_name[ij]);//, jetvar[ij]);
    h_jeteta[ij] = fs->make<TH1F>(name, title, 100, -5, 5);
    h_jeteta[ij]->Sumw2();

    for (int jk=0; jk<2; jk++){ 
      sprintf(name, "angle1d_%s_%i", jethlt_name[ij], jk);
      sprintf(title, "Angle%s_%i", jethlt_name[ij], jk);
      trgjet_angle[ij][jk] = fs->make<TH1F>(name, title, 90 , 0.1, 2.5);

      sprintf(name, "angle2d_%s_%i", jethlt_name[ij], jk);
      sprintf(title, "Angle_2d_hist%s_%i", jethlt_name[ij], jk);
      trgjet_2dangle[ij][jk] = fs->make<TH2F>(name, title, njetptbin, 20, 1500, 30 , 0.1, 2.5);
    }
  }

  for (int ij=0; ij<nHLTmx; ij++) {
    for (int jk=0; jk<njetetamn; jk++) {
      sprintf(name, "hlt_dijettag_%i_%i", ij, jk);
      sprintf(title, "dijet tagged P_T : (%s) |i#eta|<%g", jethlt_name[ij], etarange[jk]);
      hlt_dijettag[ij][jk] = fs->make<TH1F>(name, title, 60, 0.4*leadingPtThreshold[ij], 2.5*leadingPtThreshold[ij]);
      hlt_dijettag[ij][jk]->Sumw2();

      sprintf(name, "hlt_dijetprob_%i_%i", ij, jk);
      sprintf(title, "dijet probed P_T : (%s) |i#eta|<%g", jethlt_name[ij], etarange[jk]);
      hlt_dijetprob[ij][jk] = fs->make<TH1F>(name, title, 60, 0.4*leadingPtThreshold[ij], 2.5*leadingPtThreshold[ij]);
      hlt_dijetprob[ij][jk]->Sumw2();
    }
  }
#endif

  counthist = fs->make<TH1F>("count","No of events",2,0,2); 

  for (int ix=0; ix<32; ix++) { mypow_2[ix] = pow(2,ix);}
  nevt = 0;
  //irun_old=-1;
  //trig_init=0;
  nreco=naa= nbb= ncc=0;
}

QCDEventShape::~QCDEventShape()
{

   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//member functions

// ------------ method called for each event  ------------
void QCDEventShape::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  //t1=clock();
  using namespace edm;
  using namespace std;
  using namespace reco;
  using namespace pat;
  
  //gRandom->SetSeed(19919925);
  //float rn=gRandom->Uniform();
  //cout << " Random Number ini = " << rn << endl;
  //if (rn >0.90) return;
  //cout << " Random Number = " << rn << endl;
  //cout << "Time = " << t1 << "; " << t2 << endl;
  
  nevt++;
  //int ievt = iEvent.id().event();
  counthist->Fill(1); 
  //if (nevt%100==1)   std::cout<<"QCDEventShape::analyze "<< nevt<<" IRUN= "<<iEvent.id().run()<<" ievt= "<< iEvent.id().event()<<" "<<ievt<<endl;
  if (nevt%1000==1)   std::cout<<"Jet Charge Analysis Run No. =  "<< nevt<<endl;
  //std::cout << "ok1"<<endl;

  //" ilumi" <<
  //iEvent.luminosityBlock() << " ibunch " << iEvent.bunchCrossing() <<std::endl;
  //cout << "NEvent = " <<  nevt << endl;
  //if(iEvent.luminosityBlock()==9881 || iEvent.luminosityBlock()==23185 || iEvent.luminosityBlock()==25334 || iEvent.luminosityBlock()== 26584 ||iEvent.luminosityBlock()== 35674 || iEvent.luminosityBlock()==32764 || iEvent.luminosityBlock()== 35675 || iEvent.luminosityBlock()==53681) return ;
  //if(iEvent.luminosityBlock()==2 || iEvent.luminosityBlock()==7175 || iEvent.luminosityBlock()==41151 || iEvent.luminosityBlock()==7389697 || iEvent.luminosityBlock()==60334 || iEvent.luminosityBlock()==51317 || iEvent.luminosityBlock()==53654 || iEvent.luminosityBlock()==10333 || iEvent.luminosityBlock()==54778 || iEvent.luminosityBlock()==10082 || iEvent.luminosityBlock()==54322 || iEvent.luminosityBlock()==64667 || iEvent.luminosityBlock()==65977 || iEvent.luminosityBlock()==55534 || iEvent.luminosityBlock()==55781 || iEvent.luminosityBlock()==55782 || iEvent.luminosityBlock()==55783 || iEvent.luminosityBlock()==61360 || iEvent.luminosityBlock()==61370 ||iEvent.luminosityBlock()==68258 || iEvent.luminosityBlock()==62147 || iEvent.luminosityBlock()==67194 || iEvent.luminosityBlock()==43070 || iEvent.luminosityBlock()==49429 || iEvent.luminosityBlock()==15102 || iEvent.luminosityBlock()==23306 || iEvent.luminosityBlock()==14242|| iEvent.luminosityBlock()==19080 || iEvent.luminosityBlock()==9312025) return;
  //npfjets = 0;
  //nchg =0;
  //if(iEvent.luminosityBlock()<4401) return; 
  //if(nevt<3442) return;
  //if(nevt!=3080) return;
  //cout << "Write test 1 = ok " << endl;
//-------------------------------------------
  
  std::vector<HepLorentzVector> recomom[njecmx][ntype][njetetamn];
  std::vector<HepLorentzVector> genmom[nGenReso][ntype][njetetamn];
  std::vector<HepLorentzVector> tmpjt4v;                                                  
  std::vector<HepLorentzVector> tmpgen4v;
  
  //recojet1_pt = 0.0, recojet2_pt = 0.0;
  //genrecojet1_pt = 0.0, genrecojet2_pt = 0.0;
 
  double RecoJCO[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double GenJCO[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};

  double recomomJCO[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

#ifdef FLAV
  double RecoJCO_gjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ujet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_djet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  double recomomJCO_gjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ujet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_djet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  //Second-set Flavor Tagging
  double RecoJCO_qjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_aqjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_aqgjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_aqojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  double recomomJCO_qjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_aqjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_aqgjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_aqojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

  double imatched_all_pt[njet][nkappa][njecmx] = {{{0.0}}};

#ifdef MATCHING
  double genmomJCO[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
#endif

#ifdef TRACKEFF
  double RecoJCO_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

#ifdef TRACKPTUP
  double RecoJCO_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

#ifdef TRACKPTDOWN
  double RecoJCO_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

//------------------------------------------

 //Reco JCO initialize
  double ijet1candsmom_num[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den[nkappa][njecmx] = {{0.0}}, ijet1_long_num[nkappa][njecmx] = {{0.0}}, ijet1_long_den[nkappa][njecmx] = {{0.0}}, ijet1_tran_num[nkappa][njecmx] = {{0.0}}, ijet1_tran_den[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num[nkappa][njecmx] = {{0.0}},ijet2candsmom_den[nkappa][njecmx] = {{0.0}}, ijet2_long_num[nkappa][njecmx] = {{0.0}}, ijet2_long_den[nkappa][njecmx] = {{0.0}}, ijet2_tran_num[nkappa][njecmx] = {{0.0}}, ijet2_tran_den[nkappa][njecmx] = {{0.0}}; 
 
  //Gen JCO initialize
  double igenjet1candsmom_num[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den[nkappa][nGenReso] = {{0.0}}; 
  double igenjet2candsmom_num[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den[nkappa][nGenReso] = {{0.0}};

#ifdef FLAV
  //Flavor Tagging
  //g-jet
  double ijet1candsmom_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_gjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_gjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_gjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_gjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_gjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_gjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_gjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_gjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_gjet[nkappa][njecmx] = {{0.0}};

  //u-jet
  double ijet1candsmom_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ujet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ujet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ujet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ujet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ujet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ujet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ujet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ujet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ujet[nkappa][njecmx] = {{0.0}};

  //d-jet
  double ijet1candsmom_num_djet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_djet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_djet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_djet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_djet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_djet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_djet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_djet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_djet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_djet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_djet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_djet[nkappa][njecmx] = {{0.0}};

  //others
  double ijet1candsmom_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ojet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ojet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ojet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ojet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ojet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ojet[nkappa][njecmx] = {{0.0}};


  //Second-set Flavor Tagging
  //quark
  double ijet1candsmom_num_qjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_qjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_qjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_qjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_qjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_qjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_qjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_qjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_qjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_qjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_qjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_qjet[nkappa][njecmx] = {{0.0}};

  //ant-quark
  double ijet1candsmom_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_aqjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_aqjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_aqjet[nkappa][njecmx] = {{0.0}};
  //gluon
  double ijet1candsmom_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_aqgjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_aqgjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_aqgjet[nkappa][njecmx] = {{0.0}};

  //others
  double ijet1candsmom_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_aqojet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_aqojet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_aqojet[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKEFF 
  double ijet1candsmom_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackeff[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackeff[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackeff[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKPTUP
  double ijet1candsmom_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackpt1[nkappa][njecmx] = {{0.0}},ijet1_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKPTDOWN
  double ijet1candsmom_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};
#endif

  double igenjet1candsmom_alltracks[nkappa][njecmx] = {{0.0}}, igenjet2candsmom_alltracks[nkappa][njecmx] = {{0.0}};
  double ijet1candsmom_alltracks[nkappa][njecmx] = {{0.0}}, ijet2candsmom_alltracks[nkappa][njecmx] = {{0.0}};
  
  double igenjet1candsmom_matchedtracks[nkappa][njecmx] = {{0.0}};
  double igenjet2candsmom_matchedtracks[nkappa][njecmx] = {{0.0}};

//-------------------------------------------
  wtfact=1.0;
  //double px=0;
  //double py=0;
  //double ptxy=0;

  //int ncount=0;
  unsigned ncount=0;
  //double recterm=0;
  //int ithird=-1;
  int irecoht=-1;
	//#ifdef JETENERGY
	int irecohtjec[njecmx];
	for (int ij=0; ij<njecmx; ij++) { irecohtjec[ij]=-1;}
	//#endif	
  double leadingptjec[njecmx] ={0};   // jet charge 

  //int igenht=-1;
	//#ifdef  JETRESO
	int igenhtres[nGenReso];
	for (int ij=0; ij<nGenReso; ij++) { igenhtres[ij]=-1;}
	//#endif
	double leadgenptres[nGenReso]={0};// jet charge


//Handle<bool> filterGoodVertices;
//iEvent.getByToken(filterGoodVerticesToken_, filterGoodVertices);

//bool passMETFilters = (*filterGoodVertices);
//if(!passMETFilters) return;

edm::Handle<reco::VertexCollection> primaryVertices;
iEvent.getByToken(vtxToken_, primaryVertices);

//Select events with at least one good primary vertex with ndof>4 with abs(z)<24 and rho<2
bool PVEvent=false;
if (primaryVertices.isValid() && primaryVertices->size()>0) {
        for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
                if(!vert->isFake() && vert->ndof()>4 && abs(vert->position().z())<24 && vert->position().rho() < 2){
                        PVEvent=true;
                        break;
                        }
                }
        }
if(!PVEvent) return;

edm::Handle<pat::METCollection> pfmet;
iEvent.getByToken(metToken_, pfmet);

//MET should be within 0.3
double miset=0, /*misphi=0,*/ sumEt=0;
	if(pfmet.isValid()){
		miset = pfmet->begin()->corPt();
	  	//misphi = pfmet->begin()->corPhi(); 
	  	sumEt = pfmet->begin()->corSumEt() ; 
		if(sumEt<1.) { sumEt = 1.; } 
		//cout<<(miset*1.0/sumEt)<<endl;
	  }	
if((miset*1.0/sumEt)>0.3) return ;

/*
edm::Handle<reco::TrackCollection> tracks;
iEvent.getByToken(tracksToken_, tracks);

bool isGoodTrack = false;
if(tracks.isValid() && tracks->size()>1){
for(unsigned trk =0; trk !=tracks->size(); trk++){
	//cout<<" Track PT : "<<(*tracks)[trk].pt()<<" hitpattern : "<<(*tracks)[trk].hitPattern().numberOfValidHits()<<" chi2 : "<<(*tracks)[trk].normalizedChi2()<<endl;
	if((*tracks)[trk].pt()>1.0 && (*tracks)[trk].hitPattern().numberOfValidHits() >= 10 && (*tracks)[trk].normalizedChi2() < 5.0){
	isGoodTrack = true;
		}
	}
}
if (!isGoodTrack) return;
*/

#ifdef TRIGGER
  const char* variab1;
#endif
#ifndef DIJETAVE
  const char* variab2; 
#endif

  if (isMC) {
#ifdef LHAPDF
    edm::Handle<LHEEventProduct> EvtHandle ;
    iEvent.getByToken( lheEventProductToken_ , EvtHandle ) ;
		
		for ( unsigned int weightIndex = 0; weightIndex < EvtHandle->weights().size(); ++weightIndex ) {
			//cout<< EvtHandle->weights()[weightIndex].wgt <<endl;
                        //systematicWeightIDs->push_back( atoi(EvtHandle->weights()[weightIndex].id.c_str()) );
			if (weightIndex>=9 && weightIndex<=109) {
				pdfwt[weightIndex-9] = EvtHandle->weights()[weightIndex].wgt/EvtHandle->originalXWGTUP(); 
				//std::cout << weightIndex << " " << EvtHandle->weights()[weightIndex].id << " " << EvtHandle->weights()[weightIndex].wgt <<" "<<pdfwt[weightIndex-9]<< std::endl;
				}
    			}
#endif

    edm::Handle<GenEventInfoProduct> eventinfo;
    iEvent.getByToken(generator1_, eventinfo);
 
#ifdef SCALEUNC 
    for(unsigned int scaleIndex = 0 ; scaleIndex < eventinfo->weights().size(); ++scaleIndex){
	scalewt[scaleIndex] = eventinfo->weights()[scaleIndex];
	//cout<<"scaleIndex : "<<scaleIndex<<" weight : "<<eventinfo->weights()[scaleIndex]<<endl;
	}
#endif

    if (eventinfo.isValid()) { 
      qscale = eventinfo->qScale(); 
      wtfact = eventinfo->weight();
      //cout<<"wtfact : "<<wtfact<<endl;
      //weight = weight2*wtfact;
      procid = eventinfo->signalProcessID();
      //cout << " qscale = " <<setw(14)<< qscale << " ; wtfact = " << wtfact << " ; procid = " << procid  << endl;

      if (eventinfo->hasPDF()) {
	const gen::PdfInfo* xpdf = eventinfo->pdf();
	
	int id1 = xpdf->id.first;
	int id2 = xpdf->id.second;
	
	idall = 100*(id1+50)+ (id2+50); 
	
	qscale = xpdf->scalePDF;
	
	xfrac1 = xpdf->x.first;
	xfrac2 = xpdf->x.second;
	
	xpdf1 = xfrac1*xpdf->xPDF.first;
	xpdf2 = xfrac2*xpdf->xPDF.second; 
      }
    }
  }
 
#ifdef PREFIRE
edm::Handle< double > theprefweight;
iEvent.getByToken(prefweight_token, theprefweight ) ;
double _prefiringweight =(*theprefweight);
/*
edm::Handle< double > theprefweightup;
iEvent.getByToken(prefweightup_token, theprefweightup ) ;
double _prefiringweightup =(*theprefweightup);

edm::Handle< double > theprefweightdown;
iEvent.getByToken(prefweightdown_token, theprefweightdown ) ;
double _prefiringweightdown =(*theprefweightdown);
*/
//cout << "Prefire  wt : " << _prefiringweight << endl;
//cout << "Prefire up wt : " << _prefiringweightup << endl;
//cout << "Prefire down wt : " << _prefiringweightdown << endl;
#endif
 
#ifdef TRIGGER
  edm::Handle<edm::TriggerResults> trigRes;
  iEvent.getByToken(triggerBits_, trigRes);
  
  edm::Handle<pat::TriggerObjectStandAloneCollection> triggerObjects;
  iEvent.getByToken(triggerObjects_, triggerObjects);
  
  edm::Handle<pat::PackedTriggerPrescales> triggerPrescales;
  iEvent.getByToken(triggerPrescales_, triggerPrescales);
//-------------------------------------------Trigger
  const edm::TriggerNames &names = iEvent.triggerNames(*trigRes);
  //int ihltfill = -1;
#endif
  
  tmpjt4v.clear();   //Reco level
  //tmpcand4v.clear();
  tmpgen4v.clear();  // Gen level

  //double aveleadingpt =0;  //ESVs (dijet)
  double leadingpt = 0;    //Jet charge (single jet)
  bool isInEtaRange[njetetamn]={0}; //GMA{0,0,0,0};

  recoJetpT = 0.0; 
  recojet1_pt = 0.0;  
  recojet2_pt = 0.0; 
  
  genrecojet1_pt = 0.0; 
  genrecojet2_pt = 0.0; 

#ifndef GENPART
  edm::Handle<pat::JetCollection> ak4PFJets;
  if (isReconstruct) { 
    iEvent.getByToken(jetSrcToken_, ak4PFJets);
  }
  
  if (isReconstruct && ((!ak4PFJets.isValid()) || ak4PFJets->size() <2)) return; //GMA, do we use this
  
  if (ak4PFJets.isValid() && ak4PFJets->size()>=2) {
#ifdef DIJETAVE
    for (int iet=0; iet<njetetamn; iet++) {
      isInEtaRange[iet] = true;
      }
    
    for (int ij=0; ij<1; ij++) { 
      for (int iet=0; iet<njetetamn; iet++) {
	if (abs((*ak4PFJets)[ij].eta())>etarange[iet]) { isInEtaRange[iet] = false;}
      }
      
      //Jet ID ================= 2017 & 2018 UL jetID recomendation 
      double NHF = (*ak4PFJets)[ij].neutralHadronEnergyFraction();
      double NEMF = (*ak4PFJets)[ij].neutralEmEnergyFraction();
      double CHF = (*ak4PFJets)[ij].chargedHadronEnergyFraction();
      //double MUF = (*ak4PFJets)[ij].muonEnergyFraction();
      //double CEMF = (*ak4PFJets)[ij].chargedEmEnergyFraction();
      int NumConst = (*ak4PFJets)[ij].chargedMultiplicity()+(*ak4PFJets)[ij].neutralMultiplicity();
      //int NumNeutralParticles =(*ak4PFJets)[ij].neutralMultiplicity();
      int CHM = (*ak4PFJets)[ij].chargedMultiplicity();
      bool passPUIDtight = bool((*ak4PFJets)[ij].userInt("pileupJetId:fullId") & (1 << 0)) || ((*ak4PFJets)[ij].pt() > 50.0);

      bool TightJetID =false;
      if(abs((*ak4PFJets)[ij].eta())<=2.7){
      if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0  && abs((*ak4PFJets)[ij].eta())<=2.6 )  TightJetID =true;
      if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ij].eta())>2.6 )  TightJetID =true;}
      else {TightJetID =false;}
      if (abs((*ak4PFJets)[ij].eta())>2.7) {TightJetID = false;}  //2.5 or 2.6
      if ((*ak4PFJets)[ij].pt()<30.0) {TightJetID = false;}

	/*
      if (TightJetID) { aveleadingpt +=(*ak4PFJets)[ij].pt();
			leadingpt = (*ak4PFJets)[0].pt();
      //std::cout<<"ok2"<<endl;
      std::cout << "Leading jet pt :"<<leadingpt<<endl;
      //std::cout << "Sub-Leading jet pt :"<<(*ak4PFJets)[1].pt()<<endl;
      //std::cout << "Avg. Leading jet pt :"<<aveleadingpt<<endl;
			} else {aveleadingpt -=100000;
			        leadingpt -=100000;}
	*/

	//if(!TightJetID && !passPUIDtight) continue;
	if (abs((*ak4PFJets)[ij].eta())>2.1 || (*ak4PFJets)[ij].pt()<30.0 ) continue;
	if(TightJetID && passPUIDtight){
	//aveleadingpt +=(*ak4PFJets)[ij].pt();
	leadingpt = (*ak4PFJets)[ij].pt();}
	//std::cout << "Leading jet pt TightJet ID :"<<leadingpt<<endl;}
        //std::cout << "Sub-Leading jet pt :"<<(*ak4PFJets)[1].pt()<<endl;
    }
    //aveleadingpt /=2.0;
    
#else

#endif
  }//if (ak4PFJets.isValid() && ak4PFJets->size()>=2) {
#endif
 
  if (isReconstruct && isMC && leadingpt>3*qscale) return;
  irecoht = getbinid(leadingpt, nHLTmx, leadingPtThreshold);

#ifdef TRIGGER
  bool trgpas[nHLTmx]={0,0,0,0,0,0,0,0,0,0};  //8 or 10
  //Calcualte Trigger Efficiency for dijet events
  bool trg_prev=false;

  //if (!isMC) {
  for (int jk=-1; jk<nHLTmx; jk++) {
    for(unsigned ij = 0; ij<trigRes->size(); ++ij) {
      std::string name = names.triggerName(ij);
      variab1 = name.c_str(); 
      if ((jk<0 && strstr(variab1,jethlt_lowest) && strlen(variab1)-strlen(jethlt_lowest)<5) || 
	  (jk>=0 && strstr(variab1,jethlt_name[jk]) && strlen(variab1)-strlen(jethlt_name[jk])<5)) {
	
	 //const std::pair<std::vector<std::pair<std::string,int> >,int> prescalesInDetail(hltConfig_.prescaleValuesInDetail(iEvent,iSetup, variab1));
	 const std::pair<std::vector<std::pair<std::string,int> >,int> prescalesInDetail(hltPrescaleProvider_.prescaleValuesInDetail(iEvent,iSetup,variab1));
	 if (jk>=0) { 
          //cout<<variab1<<endl;
	  //==============================================================================
	  //double tmpp1= prescalesInDetail.first[0].second;
	  //double tmpp2 = prescalesInDetail.first[1].second;
	  //l1pres[jk] =min(tmpp1, tmpp2);
	  //==============================================================================
	  l1pres[jk] = prescalesInDetail.first[0].second;
	  
	 //if (jk>=3 && l1pres[jk]>1) { l1pres[jk]=1.0;}
	 if(l1pres[jk]<=0){l1pres[jk]=1.0;}
         hltpres[jk] = prescalesInDetail.second;	  

	 //compres[jk] = (l1pres[jk])*(triggerPrescales->getPrescaleForIndex(ij)); 
	 //compres[jk] = triggerPrescales->getPrescaleForIndex(ij);
	 compres[jk] = (l1pres[jk])*(hltpres[jk]);
         //if (jk==9){compres[jk]=1.0;} // fix for 2017E sample pt spike
	         	//cout<<"Print Trigger : "<<variab1<< ":"<< compres[jk]<<endl;} 
	 //cout << "Prescale" << "Path " << variab1 <<" " <<   compres[jk] << endl;
	 //cout<<"Run NO= "<< iEvent.id().run()<<" ; Event No = "<< iEvent.id().event()<< " ; ilumi = " << iEvent.luminosityBlock() << 
	 //	" ; ibunch = " << iEvent.bunchCrossing()<<" ; L1 Pres0 = " << l1pres[jk] <<" "<<
	 //            " ; HLT Path= "<<name <<" ; HLT Pres = " <<hltpres[jk]<<" ; compres ="<<compres[jk] <<"; irecoht = "<< irecoht <<"; Pt=" <<aveleadingpt<<endl;
	 if (trigRes->accept(ij)) {trgpas[jk] = true;
		//cout << "Prescale" << "Path " << variab1 <<" " <<   compres[jk] << endl;//} // ihltfill = jk;}
	 }
	 //if (trg_prev && compres[jk]>0.99) {
	 if (trg_prev){
	    for (int iet=0; iet<njetetamn; iet++) {
	      if (isInEtaRange[iet]) { 
		//hlt_dijettag[jk][iet]->Fill(aveleadingpt,compres[jk]);
                hlt_dijettag[jk][iet]->Fill(leadingpt,compres[jk]);
		//if (trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(aveleadingpt, compres[jk]);} //{, (isMC) ? 1.0 : compres[jk]);}
                if (trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(leadingpt, compres[jk]);}
	      }
	    }
	  }
	  /*
 	    for (int iet=0; iet<njetetamn; iet++) {
	    if (isInEtaRange[iet]) { 
	    if(trg_prev) hlt_dijettag[jk][iet]->Fill(aveleadingpt);
	    if (trg_prev && trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(aveleadingpt);} 
	    }    
	    }*/
	  //if (trg_prev) cout << "Accept =" << " name = " <<name <<endl;
	  trg_prev = trigRes->accept(ij);
	  //trg_prev = trg_prev|trigRes->accept(ij);
	  //if (!trg_prev) { trg_prev = trigRes->accept(ij);}
	  break;
	} else {
	  trg_prev = trigRes->accept(ij);
	  break;
	}
      }
    }
  }
#endif
  //cout<<"ihltfill "<<ihltfill<<endl;
  //cout<<"3 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
  
  //if ((irecoht <0 || irecoht >=nHLTmx) || ((!isMC) && (!trgpas[irecoht]))) return; //GMA remove this condition
  //cout <<"irecoht = "<<irecoht<<endl;
  //if (irecoht==-3) return;

#ifdef TRIGGER
  if (irecoht>=0 && ((!isMC) && (!trgpas[irecoht]))) return;
  if (irecoht==-2 && ((!isMC) && (!trgpas[0]))) return; 
#endif
  
  if (!isMC) {
    if (irecoht>=0) {
      wtfact = compres[irecoht];
    } else if (irecoht==-2) {
      wtfact = compres[0];
    } else {
      return ;
    }
  }
  
  //for (int ij=0; ij<nHLTmx; ij++) {lumiwt[ij]=intlumi[nHLTmx-1]/intlumi[ij];}// cout<<"nt "<<datpileup[ij][0]<<endl;}
  if (isMC) {
#ifndef GENPART
    //Handle<std::vector< PileupSummaryInfo > >  PupInfo;
    //iEvent.getByLabel("addPileupInfo", PupInfo);
    edm::Handle<std::vector<PileupSummaryInfo> > PupInfo;
    iEvent.getByToken(pileup_, PupInfo);
    int npu = -1;
    //int tnpv  = -1;
    PShiftDown_ = reweight::PoissonMeanShifter(-0.5);
    PShiftUp_ = reweight::PoissonMeanShifter(0.5);
    if (PupInfo.isValid()) {
      std::vector<PileupSummaryInfo>::const_iterator PVI;
      for(PVI = PupInfo->begin(); PVI != PupInfo->end(); ++PVI) {
	if (PVI->getBunchCrossing()==0) {
          //npu = PVI->getPU_NumInteractions();
	  npu = PVI->getTrueNumInteractions();
          //tnpv  = PVI->getTrueNumInteractions();
	  break;
	}
      }
    }
    //double MyWeight = LumiWeights_->weight(npu);
    
    //cout << "Main weight = " <<MyWeight << endl;
    //double TotalWeight_plus = MyWeight*PShiftUp_.ShiftWeight( npu );
    //double TotalWeight_plus = PShiftUp_.ShiftWeight( npu );
    //double TotalWeight_minus = PShiftDown_.ShiftWeight( npu ); 

    //cout << "Plus " << wtfact*TotalWeight_plus << " Mi = " << endl;
    //cout << "wt= " <<  wtfact << " : weightmi" <<wtfact*TotalWeight_minus << " Mi = " << endl;
    //wtfact=wtfact*TotalWeight_plus; 
    //wtfact=wtfact-TotalWeight_minus; 
    //cout << "npu Number of interactions : " << npu << endl; 
    //cout << "tnpv Number of true interactions : " << tnpv << endl; 
    if (npu<0) return; //GMA  
    if (isFlat) {
      weight =weight2*wtfact; // for flat MC sample
    } else {
      weight =weight2;
    }
#endif
    defweight = weight;

#ifndef GENPART
    int tmprecht = (irecoht>=0) ? irecoht : 0; //GMA
   
    if (npu<npileupmx) {
          weight *=rat_pileup[tmprecht][npu]; //GMA
    } else {
            weight *=rat_pileup[tmprecht][npileupmx-1]; //GMA
    }
#endif
    
    weighttrg = weight;
    //cout <<"weight  "<<weight<<" "<< weight2<<endl;
    //sar 3D PU reweighting 111028
  } else {
    weight = weight2;
    defweight = weight2;
    weighttrg = weight*wtfact; // *lumiwt[irecoht];
    //weighttrg = weight*lumiwt[3];
    //cout <<"TEST2  weighttrg "<< weighttrg<<" ; weight "<<weight<<" ; "<< wtfact<<endl;
  }


#ifdef PREFIRE
double tmpwt = weighttrg;
weighttrg = tmpwt*_prefiringweight;
//weighttrg = tmpwt*_prefiringweightup;
//weighttrg = tmpwt*_prefiringweightdown;
#endif

//---------------Lumiweight------------------
/*
//cout << "before lumi " << weighttrg ;
#ifdef LUMIWEIGHT
double tmpwt = weighttrg;
weighttrg = tmpwt*lumiwtt;
#endif
//cout << "   After lumi " << weighttrg << endl;
*/

//-------------------------------------------

#ifndef GENPART
  if(!isMC){
    reco::TrackBase::Point beamPoint(0,0, 0);
    //math::XYZPoint beamPoint(0,0, 0); 
    
    edm::Handle<reco::BeamSpot> beamSpotH;
    iEvent.getByToken(beamSpot_,beamSpotH);
    if (beamSpotH.isValid()){
      beamPoint = beamSpotH->position();
    }
    //cout<<"Debugging 1 "<<endl;
    //edm::Handle<reco::VertexCollection> primaryVertices;
    //iEvent.getByToken(vtxToken_, primaryVertices);  
    int tmpvert=0;
    nprim=0;
    if (primaryVertices.isValid()) {
      tmpvert = primaryVertices->size();
      //cout<<"temp"<<tmpvert<<endl;
	//cout<<"Debugging 2 "<<endl;
      for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
	int isel = (vert->isValid() && !vert->isFake()) ? 1 : 0;
	int ngoodtrk = 0;
	int nseltrk = 0;
	double prob = ChiSquaredProbability(vert->chi2(),vert->ndof());
	for (reco::Vertex::trackRef_iterator reftrk =vert->tracks_begin(); reftrk<vert->tracks_end(); reftrk++) {
	  if ((*reftrk)->quality(TrackBase::highPurity) && vert->trackWeight(*reftrk)>0) {
	    ngoodtrk++; 
	    if ((*reftrk)->normalizedChi2()<100000 && 
		abs((*reftrk)->dxy()) < 10000 && 
		(*reftrk)->pt() >0.50) {nseltrk++; } 
	  }
	}
	prim_alltrk[isel]->Fill(vert->tracksSize());
	prim_goodtrk[isel]->Fill(ngoodtrk);
	prim_seltrk[isel]->Fill(nseltrk);
	prim_dx[isel]->Fill(vert->position().x() - beamPoint.x());
	prim_dy[isel]->Fill(vert->position().y() - beamPoint.y());
	prim_dxy[isel]->Fill(vert->position().x() - beamPoint.x(), vert->position().y() - beamPoint.y());
	prim_dz[isel]->Fill(vert->position().z() - beamPoint.z());
	prim_prob[isel]->Fill(max(-20.0, log10(prob)));
	
	if (isel==1 && nprim < nprimx-1) {
	  primpr[nprim] = prob;
	  ntkpm[nprim] = 1000*(1000*min(int(vert->tracksSize()),999) + min(ngoodtrk,999)) + min(999, nseltrk);
	  nprim++;
	}
      }
    }
    
    prim_hist[0]->Fill(tmpvert);
    prim_sel[0]->Fill(nprim);
    
    prim_hist_rewt[0]->Fill(tmpvert, weighttrg);
    prim_sel_rewt[0]->Fill(nprim, weighttrg);

    if (irecoht>=0 && irecoht<nHLTmx) { 
      prim_hist[irecoht]->Fill(tmpvert);
      prim_sel[irecoht]->Fill(nprim);
      
      prim_hist_rewt[irecoht]->Fill(tmpvert, weighttrg);
      prim_sel_rewt[irecoht]->Fill(nprim, weighttrg);   
    }
    prim_correl->Fill(tmpvert, nprim);
 } 
#endif 
  
edm::Handle<reco::GenJetCollection> genjets;
if(isMC) {
iEvent.getByToken(genjetToken_,genjets);
}

//bool tt = false;
//Jet Matching - Leading & Sub-Leading
#ifdef MATCHING
bool jet_matches = false;

if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

std::vector<bool> matched_recojets(ak4PFJets->size(), false);
std::vector<bool> matched_genjets(genjets->size(), false);

// Initialize variables to keep track of leading recojet and leading genjet
    unsigned int reco_lead_idx = 0;
    unsigned int gen_lead_idx = 0;
    double reco_lead_pt = 0;
    double gen_lead_pt = 0;
/*
// Print the pt of all recojets
    cout << "Reco Jets:" << std::endl;
    for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
        cout << "Jet " << ijet << " pt: " << (*ak4PFJets)[ijet].pt() <<endl;
    }

// Print the pt of all genjets
    cout << "Gen Jets:" << std::endl;
    for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
        cout << "Jet " << igjet << " pt: " << (*genjets)[igjet].pt() <<endl;
    }
*/
// Loop over all AK4 PFJets to find the one with the highest pt
    for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
        if ((*ak4PFJets)[ijet].pt() > reco_lead_pt) {
            reco_lead_idx = ijet;
            reco_lead_pt = (*ak4PFJets)[ijet].pt();
        }
    }

// Loop over all genjets to find the one with the highest pt
    for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
        if ((*genjets)[igjet].pt() > gen_lead_pt) {
            gen_lead_idx = igjet;
            gen_lead_pt = (*genjets)[igjet].pt();
        }
    }

// Calculate the deltaR between the leading recojet and leading genjet, and check if they are matched
    double jetdR_lead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[gen_lead_idx]);
    if (jetdR_lead < 0.2) {

// If the leading jets are matched, mark them as such in the matched_recojets and matched_genjets vectors
        matched_recojets[reco_lead_idx] = true;
        matched_genjets[gen_lead_idx] = true;

	// Initialize variables to keep track of subleading recojet and subleading genjet
        unsigned int reco_sublead_idx = 0;
        unsigned int gen_sublead_idx = 0;
        double reco_sublead_pt = 0;
        double gen_sublead_pt = 0;

// Loop over all AK4 PFJets to find the one with the highest pt, excluding the leading jet
for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	    if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
            if (ijet == reco_lead_idx || (*ak4PFJets)[ijet].pt() < reco_sublead_pt) continue;
            double jetdR_sublead = deltaR((*ak4PFJets)[ijet], (*genjets)[gen_lead_idx]);
            if (jetdR_sublead < 0.2) {
                reco_sublead_idx = ijet;
                reco_sublead_pt = (*ak4PFJets)[ijet].pt();
            }
        }

// Check if the subleading recojet is matched to the leading genjet
        for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	    if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
            if (igjet == gen_lead_idx || (*genjets)[igjet].pt() < gen_sublead_pt) continue;
            double jetdR_sublead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[igjet]);
            if (jetdR_sublead < 0.2) {
                gen_sublead_idx = igjet;
                gen_sublead_pt = (*genjets)[igjet].pt();
            }
        }

// Loop over all genjets to find the one with the highest pt, excluding the leading jet
        double jetdR_sublead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[gen_sublead_idx]);
        if (jetdR_sublead < 0.2) {
            matched_recojets[reco_sublead_idx] = true;
            matched_genjets[gen_sublead_idx] = true;
            jet_matches = true;
	}
    }
}
//#endif

//Particle matching
//bool part_matches = false;
std::vector<reco::CandidatePtr> matched_recoparts;
std::vector<reco::CandidatePtr> matched_genparts;

if(jet_matches){
if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

    std::vector<bool> matched_recojets(ak4PFJets->size(), false);
    std::vector<bool> matched_genjets(genjets->size(), false);

        for (unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
        for (unsigned igjet = 0; igjet != genjets->size(); igjet++) {
	
		if ((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1 || (*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
                if (matched_recojets[ijet] || matched_genjets[igjet]) continue;
	
	double jetdR = deltaR((*ak4PFJets)[ijet], (*genjets)[igjet]);
            if (jetdR < 0.2) {
                std::vector<reco::CandidatePtr> recodaus((*ak4PFJets)[ijet].daughterPtrVector());
                std::sort(recodaus.begin(), recodaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<reco::CandidatePtr> gendaus((*genjets)[igjet].daughterPtrVector());
                std::sort(gendaus.begin(), gendaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<bool> matched_recodaus(recodaus.size(), false);
                std::vector<bool> matched_gendaus(gendaus.size(), false);

                for (unsigned int ireco = 0; ireco < recodaus.size(); ++ireco) {
                    const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*recodaus[ireco]);

                    for (unsigned int igen = 0; igen < gendaus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*gendaus[igen]);
			if(recocand.pt()<1.0 || abs(recocand.eta())>2.5 || gencand.pt()<1.0 || abs(gencand.eta())>2.5 || recocand.charge()==0 || gencand.charge()==0) continue;
                        double partdR = deltaR(recocand, gencand);
                        if (partdR < 0.05 && recocand.charge() == gencand.charge() && !matched_recodaus[ireco] && !matched_gendaus[igen]) {
			//if (partdR < 0.05 && !matched_recodaus[ireco] && !matched_gendaus[igen]) {
                            matched_recodaus[ireco] = true;
                            matched_gendaus[igen] = true;
                            matched_recoparts.push_back(recodaus[ireco]);
                            matched_genparts.push_back(gendaus[igen]);
/*			cout<<"------Particle Matching START--------"<<endl;
			if(ijet==0){
			cout<<"Leading RecoJet pt : "<<(*ak4PFJets)[ijet].pt()<<endl;
			cout<<"Leading GenJet pt : "<<(*genjets)[igjet].pt()<<endl;
			cout << "Leading RecoJet Particle check : pt: " << recocand.pt() << " eta: " << recocand.eta() << " ID: " << recocand.pdgId() << " charge: " << recocand.charge() << endl;
			cout << "Leading GenJet Particle check : pt: " << gencand.pt() << " eta: " <<gencand.eta() << " ID: " << gencand.pdgId() << " charge: " << gencand.charge() << endl;
	}
			cout<<"------Particle Matching END--------"<<endl;
*/
						}
                    				}
                			}
				//part_matches = true;
            			}
        		}
    		}
	}
}

#endif

if(isMC) {

//    edm::Handle<reco::GenJetCollection> genjets;
//    iEvent.getByToken(genjetToken_,genjets);
}

//Reco Level work starts here 
 
  vector<double> jetptx[njecmx];
  vector<double> jetscl[njecmx];
  vector<int> jetindx[njecmx];

#ifndef GENPART
  if (ak4PFJets.isValid()) { 
    for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
      double pt = (*ak4PFJets)[ijet].pt();
      
      //#ifndef JETENERGY
      //#ifdef JETRESO
      
#if defined(JETRESO)&&(!defined(JETENERGY))
      //resolution file 
      JME::JetResolution resolution;
      //resolution = JME::JetResolution("Summer19UL17_JRV2_DATA_PtResolution_AK4PFchs.txt");    // for DATA
      resolution = JME::JetResolution("Summer19UL17_JRV2_MC_PtResolution_AK4PFchs.txt");      // for MC
 
      //Scalefactor file
      JME::JetResolutionScaleFactor res_sf;
      //cout<<"Filename="<<scalefile<<endl;
      //res_sf = JME::JetResolutionScaleFactor("Summer19UL17_JRV2_DATA_SF_AK4PFchs.txt");        // for DATA
      res_sf = JME::JetResolutionScaleFactor("Summer19UL17_JRV2_MC_SF_AK4PFchs.txt");          // for MC
      
      edm::Handle<double> rho;
      iEvent.getByToken(m_rho_token, rho);
      //cout<< "  rho=" << *rho << endl;
      
      //cout << "Write test 3 = ok " << endl;
      double eta = (*ak4PFJets)[ijet].eta();
      double reso = 1;
      JME::JetParameters parameters_5 = {{JME::Binning::JetPt, pt}, {JME::Binning::JetEta, eta}, {JME::Binning::Rho, *rho}};
      float rp = resolution.getResolution(parameters_5);
      float sf = res_sf.getScaleFactor({{JME::Binning::JetEta, eta}});
      float sf_up= res_sf.getScaleFactor({{JME::Binning::JetEta, eta}}, Variation::UP);
      float sf_dn= res_sf.getScaleFactor({{JME::Binning::JetEta, eta}}, Variation::DOWN);
      //#endif
      //#endif
#endif 
      for (int isrc = 0; isrc < njecmx; isrc++) {
	double sup = 1;
#ifdef JETENERGY
	double eta = (*ak4PFJets)[ijet].eta();
	if (isrc>0 && isrc<=nsrc) {
	  JetCorrectionUncertainty *jecUnc = vsrc[isrc-1];
	  jecUnc->setJetEta(eta);
	  jecUnc->setJetPt(pt);
	  
	  sup += jecUnc->getUncertainty(true);
	} else if (isrc>nsrc) {
	  JetCorrectionUncertainty *jecUnc = vsrc[isrc-nsrc-1];
	  jecUnc->setJetEta(eta);
	  jecUnc->setJetPt(pt);
	  sup -= jecUnc->getUncertainty(false);
	}
#elif defined(JETRESO)

	//edm::Handle<reco::GenJetCollection> genjets;
     	//iEvent.getByToken(genjetToken_,genjets);
 	//cout << "Gen Jets no " << genjets->size() <<endl;

	bool match_jet = false;
	double m_dPt_max_factor = 1.0;

	//double m_dPt_max_factor = 3.0;
        //double m_dPt_max_factor = 3.0;
        double min_dR = std::numeric_limits<double>::infinity();

	double matched_genJetPt = 0.0;

	for(unsigned igjet = 0; igjet != genjets->size(); igjet++){
   		double dR = deltaR((*genjets)[igjet], (*ak4PFJets)[ijet]);
		//cout << "dR = " << dR << endl ;

		double m_dR_max = 0.2;

	if (dR > min_dR) continue;
  	if (dR < m_dR_max) {
     	double dPt = std::abs((*genjets)[igjet].pt() - (*ak4PFJets)[ijet].pt());
      	//cout << "dPt = " << dPt << endl 
	if (dPt > m_dPt_max_factor * rp * (*ak4PFJets)[ijet].pt())    continue;
	     	min_dR = dR;
     	 	match_jet=true;
         	matched_genJetPt = (*genjets)[igjet].pt(); 
                }

		//cout << "mindR = " << min_dR << endl;
		}

	//cout << " match_jet " << match_jet <<" "<< ijet << endl;
	
#ifdef STOCHASTIC
match_jet = false;
#endif
	
	if(match_jet){

        double dPt =  std::abs((*ak4PFJets)[ijet].pt() - matched_genJetPt);

       	if (isrc==0) {
          sup= 1 + (sf - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        } else if (isrc==1) {
          sup= 1 + (sf_up - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        } else if (isrc==2) {
          sup= 1 + (sf_dn - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        }

	}else{

	/*
	if (isrc==0) {  
	  reso = sqrt(abs(sf*sf - 1))*rp;
	} else if (isrc==1) {
	  reso = sqrt(abs(sf_up*sf_up - 1))*rp;
	} else if (isrc==2) {
	  reso = sqrt(abs(sf_dn*sf_dn - 1))*rp;
	}
	sup = gRandom->Gaus(1.0, reso);			
	*/

	if (isrc==0) {
          reso = sqrt(max(sf*sf - 1.0,0.0));
        } else if (isrc==1) {
          reso = sqrt(max(sf_up*sf_up - 1.0,0.0));;
        } else if (isrc==2) {
          reso = sqrt(max(sf_dn*sf_dn - 1.0,0.0));;
        }


        sup = 1+ (gRandom->Gaus(0, rp))*reso;
	}

#endif
	//cout << "Scale " << sup <<endl;
	jetptx[isrc].push_back(sup*pt);
	jetscl[isrc].push_back(sup);
	jetindx[isrc].push_back(ijet);
      }
    }
//#if defined(JETENERGY)||defined(JETRESO)
    
    for (int isrc = 0; isrc < njecmx; isrc++) {
      for (unsigned int ij=0; ij<jetptx[isrc].size()-1; ij++) {
	for (unsigned int jk=ij+1; jk<jetptx[isrc].size(); jk++) {
	  if (jetptx[isrc][jk]>jetptx[isrc][ij]) {
	    double tmppt = jetptx[isrc][ij];
	    double tmpscl = jetscl[isrc][ij];
	    int tmpindx = jetindx[isrc][ij];
	    
	    jetptx[isrc][ij] = jetptx[isrc][jk];
	    jetscl[isrc][ij] = jetscl[isrc][jk];
	    jetindx[isrc][ij] = jetindx[isrc][jk];					
	    
	    jetptx[isrc][jk] = tmppt;
	    jetscl[isrc][jk] = tmpscl;
	    jetindx[isrc][jk] = tmpindx;
	  }
	}
      }
    }
    //#endif
    
    for (int isrc = 0; isrc < njecmx; isrc++) {
      if (jetptx[isrc].size()>=2) {
	leadingptjec[isrc] = jetptx[isrc][0];
        //irecohtjec[isrc] = getbinid(leadingptjec[isrc], nHLTmx, leadingPtThreshold);
	irecohtjec[isrc] = getbinid(leadingptjec[isrc], ngenPT, genhtbins);
	//irecohtjec[isrc] = getbinid(leadingptjec[isrc], PTbins, recohtbins2D);
	//cout<<" JEC CORRECTED PT : "<<leadingptjec[isrc]<<endl;
      } else {
	irecohtjec[isrc] = -1;
      }
    }

    //GMA Need the corection on aveleadingpt
    if (ak4PFJets.isValid() && ak4PFJets->size() >=2) { //  && aveleadingpt >leadingPtThreshold[0]) { //GMA look on this
      
      for (int iet=0; iet<njetetamn; iet++) {
	for (int isrc = 0; isrc < njecmx; isrc++) {
	  //if (aveleadingptjec[isrc] >leadingPtThreshold[0]) {
	  if (leadingptjec[isrc] >leadingPtThreshold[0]) {
	    //int njets=0;
	    ncount=0;
	    //recterm=0;
	    //ithird=-1;
	    //double sup = 1;	
	    //px=0;
	    //py=0;
	    //ptxy=0;
	    tmpjt4v.clear();
	    //tmpcand4v.clear();
	    //tmpgen4v.clear();
	    
	    //if (abs((*ak4PFJets)[0].eta())<etarange[iet] && abs((*ak4PFJets)[1].eta())<etarange[iet]) {
	    //for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
	    
	    for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
	      if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet]) {
		//if (abs((*ak4PFJets)[jetindx[isrc][ijet]].eta())<etarange[iet]) {
		//if (deltaR(((*ak4PFJets)[jetindx[isrc][0]]),((*ak4PFJets)[jetindx[isrc][ijet]]))<1.6) continue;
	        if (dPhi(((*ak4PFJets)[jetindx[isrc][0]].phi()), ((*ak4PFJets)[jetindx[isrc][1]].phi()))<2.0) continue;
		if (dPT(((*ak4PFJets)[jetindx[isrc][0]].pt()), ((*ak4PFJets)[jetindx[isrc][1]].pt()))>0.3) continue;
		//if ((((*ak4PFJets)[jetindx[isrc][0]].pt()) / ((*ak4PFJets)[jetindx[isrc][1]].pt()))>1.5) continue;
	      	//int flavour = (*ak4PFJets)[ijet].partonFlavour();
        	//cout << "Flavour : "<<flavour<<endl;
		
		int ireorjt = jetindx[isrc][ijet];
#ifdef FLAV		
		int jetflav = (*ak4PFJets)[ireorjt].partonFlavour();	
		//if(jetflav==5){cout << "Flavour : "<<jetflav<<endl;}	
#endif	
		double pt = jetptx[isrc][ijet];
		double sup = jetscl[isrc][ijet];
		double abseta = abs((*ak4PFJets)[ireorjt].eta());
	        if (pt<30.0 || abseta >etarange[iet]) continue;	
		//if (iet==0 && isrc==0) cout <<"pteta "<<pt<<" "<<abseta<<endl;
		//bool isEta = (abseta<2.5) ? true : false;
		bool isEta = (abseta<2.1) ? true : false;
		
		//if (isEta && pt>30.0) { njets++;}
		if (abseta>5.0) continue;
		bool isPt = (pt>30.0) ? true : false;
		if (isEta && isPt) {ncount++;}
		
		//cout<< "ncount = " << ncount << endl;
		//Jet ID ================= Tight ID 2017 Recomendation  check for 2018
		double NHF = (*ak4PFJets)[ireorjt].neutralHadronEnergyFraction();
		double NEMF = (*ak4PFJets)[ireorjt].neutralEmEnergyFraction();
		double CHF = (*ak4PFJets)[ireorjt].chargedHadronEnergyFraction();
		//double MUF = (*ak4PFJets)[ireorjt].muonEnergyFraction();
		double CEMF = (*ak4PFJets)[ireorjt].chargedEmEnergyFraction();
		int NumConst = (*ak4PFJets)[ireorjt].chargedMultiplicity()+(*ak4PFJets)[ireorjt].neutralMultiplicity();
		int NumNeutralParticles =(*ak4PFJets)[ireorjt].neutralMultiplicity();
		int CHM = (*ak4PFJets)[ireorjt].chargedMultiplicity();
                //cout<<"NHF== "<< NHF << "; NEF== " << NEMF <<" ; CHF==" <<CHF <<" ;cef==" << CEMF <<"; no= " << NumConst <<" ; nch==" << CHM <<" ; NO of part==" << NumNeutralParticles <<endl;
                bool passPUIDtight = bool((*ak4PFJets)[ireorjt].userInt("pileupJetId:fullId") & (1 << 0)) || ((*ak4PFJets)[ireorjt].pt() > 50.0);
		bool TightJetID =false;
                //if (abs((*ak4PFJets)[ireorjt].eta())<=2.6 && CEMF<0.8 && CHM>0 && CHF>0 && NumConst>1 && NEMF<0.9 && MUF <0.8 && NHF < 0.9 ) {TightJetID =true;}
      		//else {TightJetID =false;}
      		if(abs((*ak4PFJets)[ireorjt].eta())<=2.7){
                if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0 && abs((*ak4PFJets)[ireorjt].eta())<=2.6)  TightJetID =true;
                if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ireorjt].eta())>2.6)  TightJetID =true;}
                else {TightJetID =false;}
                if (abs((*ak4PFJets)[ireorjt].eta())>2.7) {TightJetID = false;}
                if ((*ak4PFJets)[ireorjt].pt()<30.0) {TightJetID = false;}
		
		if( ireorjt<=1 && !TightJetID) break;
		if (!TightJetID && !passPUIDtight) continue;
		//cout<<"ireorjt : "<<ireorjt<<endl;
			
		HepLorentzVector tmp4v((*ak4PFJets)[ireorjt].px(), (*ak4PFJets)[ireorjt].py(), (*ak4PFJets)[ireorjt].pz(), (*ak4PFJets)[ireorjt].energy()); tmp4v *=sup;
                Hep3Vector tmp3v((*ak4PFJets)[ireorjt].px(), (*ak4PFJets)[ireorjt].py(), (*ak4PFJets)[ireorjt].pz()); tmp3v *=sup;
		
		if (isEta && isPt) { tmpjt4v.push_back(tmp4v);}
		//tmpjt4v.push_back(tmp4v);	  
		//if (isEta && isPt) {allrecojetmom.push_back(tmp4v);}
		//if (ncount<=2) {  //change for all jet 26th June
		  if (isEta && isPt) {recomom[isrc][0][iet].push_back(tmp4v);}
		  //}
		  //cout <<"ncount filled "<<ncount<<" "<<isrc<<" "<<iet<<" "<<recomom[isrc][0][iet].size()<<endl;
		  //px +=tmp4v.px();
		  //py +=tmp4v.py();
		  //ptxy +=tmp4v.perp();
		  if (isrc==0) {

		    if ((isInEtaRange[iet])) {recojt_CHF->Fill(CHF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NHF->Fill(NHF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NEMF->Fill(NEMF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_CHM->Fill(CHM, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NumNeutralParticles->Fill(NumNeutralParticles, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_CEMF->Fill(CEMF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NumConst->Fill(NumConst, weighttrg);}
 
		    if ((isInEtaRange[iet])) {recojt_pt[iet]->Fill(tmp4v.perp(), weighttrg); recoJetpT = tmp4v.perp();}
		    if (isPt && iet==0) {recojt_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {recojt_phi->Fill(tmp4v.phi(), weighttrg);}
		    //if (isEta && ncount==1) {recoht2_pt[iet]->Fill(aveleadingpt,weighttrg);}
		    if (isEta && ncount==1) {recoht2_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()),weighttrg);}

#ifdef FLAV		
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
				if (isInEtaRange[iet]) {recojtg_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtg_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtg_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==2){//u-jet
				if (isInEtaRange[iet]) {recojtu_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtu_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtu_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==1){//d-jet
				if (isInEtaRange[iet]) {recojtd_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtd_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtd_phi->Fill(tmp4v.phi(), weighttrg);}
			}else{//others
				if (isInEtaRange[iet]) {recojto_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojto_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojto_phi->Fill(tmp4v.phi(), weighttrg);}
			}

			//Second-Set Flavor Tagging
			if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
				if (isInEtaRange[iet]) {recojt_qjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_qjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_qjet_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                if (isInEtaRange[iet]) {recojt_aqjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_aqjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_aqjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(abs(jetflav==21 || jetflav==9)){
				if (isInEtaRange[iet]) {recojt_aqgjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_aqgjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_aqgjet_phi->Fill(tmp4v.phi(), weighttrg);}
			}else{
				if (isInEtaRange[iet]) {recojt_aqojet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_aqojet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_aqojet_phi->Fill(tmp4v.phi(), weighttrg);}
			}
#endif
		  }//if (isrc==0) {
		
		if (isrc==0) { 
		  if(ijet==0) { 
		    if (isInEtaRange[iet]) {recojt1_pt[iet]->Fill(tmp4v.perp(), weighttrg); recojet1_pt = tmp4v.perp();} 
		    if (isPt && iet==0) {recojt1_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {recojt1_phi->Fill(tmp4v.phi(), weighttrg);}
#ifdef FLAV
		    	if(abs(jetflav==21 || jetflav==9)){//gluon-jet
		  	  	if (isInEtaRange[iet]) {recojt1g_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1g_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1g_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==2){//u-jet
				if (isInEtaRange[iet]) {recojt1u_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1u_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1u_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==1){//d-jet
				if (isInEtaRange[iet]) {recojt1d_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1d_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1d_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{//others
				if (isInEtaRange[iet]) {recojt1o_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1o_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1o_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
			
			if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                if (isInEtaRange[iet]) {recojt1_qjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_qjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_qjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                if (isInEtaRange[iet]) {recojt1_aqjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_aqjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_aqjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(abs(jetflav==21 || jetflav==9)){
                                if (isInEtaRange[iet]) {recojt1_aqgjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_aqgjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_aqgjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{
                                if (isInEtaRange[iet]) {recojt1_aqojet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_aqojet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_aqojet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
#endif				
		  } else if(ijet==1){
		    if (isInEtaRange[iet]) {recojt2_pt[iet]->Fill(tmp4v.perp(), weighttrg); recojet2_pt = tmp4v.perp();}
		    if (isPt && iet==0) {recojt2_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {recojt2_phi->Fill(tmp4v.phi(), weighttrg);}

		    if (isInEtaRange[iet] && ncount==2) { 
		      if (irecoht>=0 && irecoht<nHLTmx) { 
			//recojtave_pt[iet][irecoht]->Fill(aveleadingpt, weighttrg);
			//recojtavewt1_pt[iet][irecoht]->Fill(aveleadingpt);
			recojtave_pt[iet][irecoht]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()), weighttrg);
                        recojtavewt1_pt[iet][irecoht]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()));
		      }
		      
		      //recojtallavewt1_pt[iet]->Fill(aveleadingpt);
		      //recojtallave_pt[iet]->Fill(aveleadingpt, weighttrg);
		      recojtallavewt1_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()));
                      recojtallave_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()), weighttrg);
		    }
#ifdef FLAV
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                if (isInEtaRange[iet]) {recojt2g_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2g_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2g_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==2){//u-jet
                        	if (isInEtaRange[iet]) {recojt2u_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2u_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2u_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==1){//d-jet
                        	if (isInEtaRange[iet]) {recojt2d_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2d_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2d_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{//others
                                if (isInEtaRange[iet]) {recojt2o_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2o_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2o_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
		    
			if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                if (isInEtaRange[iet]) {recojt2_qjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_qjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_qjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                if (isInEtaRange[iet]) {recojt2_aqjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_aqjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_aqjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(abs(jetflav==21 || jetflav==9)){
                                if (isInEtaRange[iet]) {recojt2_aqgjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_aqgjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_aqgjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{
                                if (isInEtaRange[iet]) {recojt2_aqojet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_aqojet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_aqojet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
#endif
		  } else if(ijet==2) {
		    if (isInEtaRange[iet]) {recojt3_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0 ) {recojt3_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {recojt3_phi->Fill(tmp4v.phi(), weighttrg);} 
		  }
		  
		  if (tmpjt4v.size()==2 && isInEtaRange[iet]) { 
		    double dphi = dPhi(tmpjt4v[0].phi(), tmpjt4v[1].phi());
		    double dpt = tmpjt4v[0].perp() - tmpjt4v[1].perp();
		    double dperp = fabs(tmpjt4v[1].perp()*sin(dphi))/tmpjt4v[0].perp();
		    hjetdphi[iet]->Fill(dphi, weighttrg);
		    hjetdpt[iet]->Fill(dpt, weighttrg);
		    hjetptbypl[iet]->Fill(dperp, weighttrg);
		    hjetpt2bypt1[iet]->Fill(tmpjt4v[1].perp()/tmpjt4v[0].perp(), weighttrg);
		  }
		  
		  if (tmpjt4v.size()==3) {hjetpt3bypt2[iet]->Fill(tmpjt4v[2].perp()/tmpjt4v[1].perp(), weighttrg);}
		  } //if (isrc==0) {
		
		//int nchg=0;
		nchg = 0, nchg1 = 0, nchg2 = 0;
		std::vector<reco::CandidatePtr> daus((*ak4PFJets)[ireorjt].daughterPtrVector());           
		std::sort(daus.begin(), daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });               
      		                                                                   
		for (unsigned int i2 = 0; i2< daus.size(); ++i2) { //particle loop  
		  const pat::PackedCandidate &pfcand = dynamic_cast<const pat::PackedCandidate &>(*daus[i2]);
		  int charge = pfcand.charge();
		  HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
		  //tmpcand4v.push_back(cand4v);	
                  //nchg++;
		  if(charge !=0){nchg++;}
		  if(ijet==0 && charge !=0){nchg1++;}
		  if(ijet==1 && charge !=0){nchg2++;}	
                  //h_nchg[iet]->Fill(nchg, weighttrg);   // need to check
		  //if (cand4v.perp()<0.5) continue;
		  //if (ncount<=2 && isEta && isPt) { 
		  //recomom[isrc][1][iet].push_back(cand4v);
		    
		    if (charge !=0) {
		      recomom[isrc][1][iet].push_back(cand4v);
                      //if(cand4v.perp()>1.0){mom[isrc][iet].push_back(cand4v);}
#ifdef TRACKSYS
		      if (gRandom->Uniform() < 0.96) {recomom[isrc][2][iet].push_back(cand4v); }
#endif
		}
		  if (isrc==0) { 
		    //if (isEta && isPt) {
		      if (charge !=0) {
			recochg_phi->Fill(cand4v.phi(), weighttrg);
			recochg_pt->Fill(cand4v.perp(), weighttrg);
			recochg_eta->Fill(cand4v.eta(), weighttrg);
		      }
		    
		      if (ijet==0 && charge !=0) {
                        recochg1_phi->Fill(cand4v.phi(), weighttrg);
                        recochg1_pt->Fill(cand4v.perp(), weighttrg);
                        recochg1_eta->Fill(cand4v.eta(), weighttrg);
		      }
                     else if (ijet==1 && charge !=0) {
                        recochg2_phi->Fill(cand4v.phi(), weighttrg);
                        recochg2_pt->Fill(cand4v.perp(), weighttrg);
                        recochg2_eta->Fill(cand4v.eta(), weighttrg);
                      }
                     else if (ijet==2 && charge !=0) {
                        recochg3_phi->Fill(cand4v.phi(), weighttrg);
                        recochg3_pt->Fill(cand4v.perp(), weighttrg);
                        recochg3_eta->Fill(cand4v.eta(), weighttrg);
                      }                     
		    }//if (isrc==0) {
		     //}
	} //for (unsigned int i2 = 0; i2< daus.size(); ++i2
	//cout<<" Reco particle momentum : "<<ijet1candsmomk1<<" Jet pt : "<<recojet1_test<<" JCO : "<<ijet1candsmomk1/recojet1_test<<endl;
        //cout<<"-------------"<<endl;
        h_nchg[iet]->Fill(nchg, weighttrg);    

if(ijet==0){
        for (int ik=0; ik<10; ik++){
#ifdef MATCHING
	if(jet_matches){
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

        	for (unsigned int imatched = 0; imatched < matched_recoparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recocand = static_cast<const pat::PackedCandidate&>(*matched_recoparts[imatched]);

                if (recocand.charge() == matched_recocand.charge() && deltaR(recocand, matched_recocand) < 1e-4) {
			int charge = recocand.charge();
			Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
			if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

				ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
        	                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                	        ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                      		ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#ifdef FLAV
				//Flavor Tagging
				if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                        ijet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==2){//u-jet
                                        ijet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==1){//d-jet
                                        ijet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{//others
                                        ijet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }

				//Second-Set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet1candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet1candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet1candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet1candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
				if (gRandom->Uniform() < 0.977){
					ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                	ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                	ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
			else{
				if (gRandom->Uniform() < 0.99){
					ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                	ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                	ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
			}
#endif

#ifdef TRACKPTUP
				cand3v *= 1.015;
				ijet1candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
				cand3v *= 0.985;
				ijet1candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
				}
			}
		}
	}
	}else{
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
			int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
				
				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

				ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#ifdef FLAV
				//Flavor Tagging
				if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                        ijet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==2){//u-jet
                                        ijet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==1){//d-jet
                                        ijet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{//others
                                        ijet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }

				//Second-set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet1candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet1candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet1candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet1candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }
#endif

#ifdef TRACKPTUP
                                cand3v *= 1.015;
                                ijet1candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
                                cand3v *= 0.985;
                                ijet1candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
				}
			}
		}

#else

	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

                                ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
#endif
	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
				ijet1candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			}
		}
	}
}

if(ijet==1){
	for (int ik=0; ik<10; ik++){
#ifdef MATCHING
	if(jet_matches){
                for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

                for (unsigned int imatched = 0; imatched < matched_recoparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recocand = static_cast<const pat::PackedCandidate&>(*matched_recoparts[imatched]);

                if (recocand.charge() == matched_recocand.charge() && deltaR(recocand, matched_recocand) < 1e-4) {
                        int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet2candsmom_den[ik][isrc] += (cand3v.perp());

				ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                	        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        	ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        	ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#ifdef FLAV	
			//Flavor Tagging	
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                ijet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==2){//u-jet
                                ijet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==1){//d-jet
                                ijet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else{//others
                                ijet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }

				//Second-Set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet2candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet2candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet2candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet2candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }
#endif

#ifdef TRACKPTUP
                                cand3v *= 1.015;
                                ijet2candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
                                cand3v *= 0.985;
                                ijet2candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
					}
				}
			}
		}
	}else{
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
		
			ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			ijet2candsmom_den[ik][isrc] += (cand3v.perp());

			ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

#ifdef FLAV
			//Flavor Tagging
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                ijet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==2){//u-jet
                                ijet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==1){//d-jet
                                ijet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else{//others
                                ijet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }

				//Second-set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet2candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet2candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet2candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet2candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }
#endif

#ifdef TRACKPTUP
                                cand3v *= 1.015;
                                ijet2candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
                                cand3v *= 0.985;
                                ijet2candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
				}
			}
		}

#else

	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
               
			ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			ijet2candsmom_den[ik][isrc] += (cand3v.perp());

                        ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
#endif
	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
                        ijet2candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			}
		}
	}
}

		//  if(isEta && isPt) {ncount++;}
	   	//  }//if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet])
	  	//  }//for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++)
/*	    if (ithird>=0) {
	      
	      recomom[isrc][0][iet].push_back(tmp4v);
	      //					cout <<"recomom[isrc][0][iet] "<< isrc<<" "<<iet<<" "<<recomom[isrc][0][iet].size()<<endl;
	      // tmpjt4v.push_back(tmp4v);   
	      
	      std::vector<reco::CandidatePtr> daus((*ak4PFJets)[ithird].daughterPtrVector());
	      std::sort(daus.begin(), daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2 ->pt(); });
	      for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		const pat::PackedCandidate &pfcand = dynamic_cast<const pat::PackedCandidate &>(*daus[i2]);
		int charge = pfcand.charge();
		HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
		//      if (cand4v.perp()<0.5) continue;                                                             
		recomom[isrc][1][iet].push_back(cand4v);
		
		if (charge !=0) {
		  recomom[isrc][2][iet].push_back(cand4v);
#ifdef TRACKSYS
		  if (gRandom->Uniform() < 0.96) {recomom[isrc][4][iet].push_back(cand4v); }
#endif
		  
		}
		if (charge==0){
		  if (cand4v.perp()>1.0) {
		    recomom[isrc][3][iet].push_back(cand4v);
		  }
		} else{
		  if (cand4v.perp()>0.5) {
		    recomom[isrc][3][iet].push_back(cand4v);
		  }
		}
	      }
	    }*/ //if (ithird>=0) 
	    h_njets[iet]->Fill(ncount, weighttrg);
              } //if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet])
            } // for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++)
	  } //if (aveleadingptjec[isrc] >leadingPtThreshold[0])
	} // 	for (int isrc = 0; isrc < njecmx; isrc++)
      } //for (int iet=0; iet<njetetamn; iet++)	   
    } // if (ak4PFJets.isValid() && ak4PFJets->size()>=2 && (*ak4PFJets)[0].pt()>leadingPtThreshold[0])
  } // if (ak4PFJets.isValid())
#endif 
  //cout << "Write test 1 = ok " << endl;
  //==================================***GenJets*****=================================
  //cout<<"0 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
  //double leadgenpt =0;

//Gen level work starts
  //edm::Handle<reco::GenJetCollection> genjets;
  if(isMC) {
    //edm::Handle<reco::GenJetCollection> genjets;
    //iEvent.getByToken(genjetToken_,genjets);
    
    //double avegenpt =0;
    double leadgenpt =0;
    //cout <<"HGebjet "<<endl;
    if(isMC && ((!genjets.isValid()) || genjets->size()<2)) return;

    if (genjets.isValid() &&  genjets->size()>=2) {
#ifdef DIJETAVE
	
      for (int iet=0; iet<njetetamn; iet++) {
	isInEtaRange[iet] = true;
      }
      
      for (int ij=0; ij<1; ij++) {
	for (int iet=0; iet<njetetamn; iet++) {
	  if (abs((*genjets)[ij].eta())>etarange[iet]) { isInEtaRange[iet] = false;}
	}
	
	//if (abs((*genjets)[ij].eta())<2.5 && (*genjets)[ij].pt()>30.0 ) {
/*	
	if (abs((*genjets)[ij].eta())<2.1 && (*genjets)[ij].pt()>30.0 ) { 
	  avegenpt +=(*genjets)[ij].pt();
          leadgenpt = (*genjets)[0].pt();
	} else {avegenpt -=100000;
		leadgenpt -=100000;}
*/
	
	if (abs((*genjets)[ij].eta())>2.1 || (*genjets)[ij].pt()<30.0 ) continue;
	  //avegenpt +=(*genjets)[ij].pt();
          leadgenpt = (*genjets)[ij].pt();
	//cout<<"Lead gen pt : "<<leadgenpt<<endl;
	//cout<<"Sub-Lead gen pt : "<<(*genjets)[1].pt()<<endl;
      }
        //avegenpt /=2.0;
#else 

#endif
    } 
    
    //igenht = getbinid(leadgenpt, njetptmn, leadingPtThreshold);
 
    //cout << "Write test 2 = ok " << endl;
    //cout << "Write test 321 = ok " << endl;
    vector<double> genjetptx[nGenReso];
    vector<double> genjetscl[nGenReso]; 
    vector<int> genjetindx[nGenReso];
   
  if(genjets.isValid()){
    for(unsigned ijet = 0; ijet != genjets->size(); ijet++) {
      double pt = (*genjets)[ijet].pt();
      for (int isrc = 0; isrc < nGenReso; isrc++) {
	double sup = 1.0;	
	genjetptx[isrc].push_back(sup*pt);
	genjetscl[isrc].push_back(sup);
	genjetindx[isrc].push_back(ijet);
      }
    }
  }
       //cout << "Write test 3 = ok " << endl;
       //cout << "Write test 322 = ok "<<nGenReso << endl;
//////#ifdef JETRESO
    for (int isrc = 0; isrc < nGenReso; isrc++) {
     //if(genjetptx[isrc].size()==0) break;
      for (unsigned int ij=0; ij<genjetptx[isrc].size()-1; ij++) {
	for (unsigned int jk=ij+1; jk<genjetptx[isrc].size(); jk++) {  
	  if (genjetptx[isrc][jk]>genjetptx[isrc][ij]){ 
	    double tmppt = genjetptx[isrc][ij];
	    double tmpscl = genjetscl[isrc][ij];
	    int tmpindx = genjetindx[isrc][ij];
	    
	    genjetptx[isrc][ij] = genjetptx[isrc][jk];
	    genjetscl[isrc][ij] = genjetscl[isrc][jk];
	    genjetindx[isrc][ij] = genjetindx[isrc][jk];			

	    genjetptx[isrc][jk] = tmppt;
	    genjetscl[isrc][jk] = tmpscl;
	    genjetindx[isrc][jk] = tmpindx;
	  }
	}
      }
    }
    //////#endif
    //cout << "Write test 4 = ok " << endl;
    //double avegenptres[nGenReso]={0};
    
    for (int isrc = 0; isrc < nGenReso; isrc++) {
      if (genjetptx[isrc].size()>=2) {
        leadgenptres[isrc] = (genjetptx[isrc][0]);
        //igenhtres[isrc] = getbinid(leadgenptres[isrc], njetptmn, leadingPtThreshold);
	igenhtres[isrc] = getbinid(leadgenptres[isrc], ngenPT, genhtbins);
	//igenhtres[isrc] = getbinid(leadgenptres[isrc], PTbins, recohtbins2D);
      } else {
	igenhtres[isrc] = -1;
      }
    }
     
    if(genjets.isValid() && genjets->size() >=2) { //  && avegenpt>leadingPtThreshold[0]) {
    
     for (int iet=0; iet<njetetamn; iet++) {
	for (int isrc=0; isrc<nGenReso; isrc++) { 
          if (leadgenptres[isrc] > leadingPtThreshold[0]) {
	    //double px =0;
	    //double py =0;
	    //double ptxy =0;
	    
	    ncount=0;
	    //int recterm=0;
	    //int ithird=-1;
	    tmpgen4v.clear(); 
	    for(unsigned ijet = 0; ijet != genjets->size(); ijet++) {
		if (abs((*genjets)[genjetindx[isrc][0]].eta())<etarange[iet] && abs((*genjets)[genjetindx[isrc][1]].eta())<etarange[iet]) {
	     /* if ((*genjets)[igenjt].pt()>25.0) {
		cout<<"ievt "<<ievt<<" "<<ijet<<" "<<igenjt<<" "<<genjetptx[isrc][ijet]<<" "<<(*genjets)[igenjt].pt()<<" "<<(*genjets)[igenjt].eta()<<" "<<(*genjets)[igenjt].phi()<<endl;
	      }*/

	        //if (abs((*genjets)[genjetindx[isrc][ijet]].eta())<etarange[iet]) {
		//if (deltaR(((*genjets)[genjetindx[isrc][0]]),((*genjets)[genjetindx[isrc][ijet]]))<1.6) continue;
		//cout << (deltaR(((*genjets)[genjetindx[isrc][0]]),((*genjets)[genjetindx[isrc][ijet]])))<<e
		if (dPhi(((*genjets)[genjetindx[isrc][0]].phi()), ((*genjets)[genjetindx[isrc][1]].phi()))<2.0) continue;
                if (dPT(((*genjets)[genjetindx[isrc][0]].pt()), ((*genjets)[genjetindx[isrc][1]].pt()))>0.3) continue; 
		//if ((((*genjets)[genjetindx[isrc][0]].pt()) / ((*genjets)[genjetindx[isrc][1]].pt()))>1.5) continue;
		int igenjt = genjetindx[isrc][ijet];

		//cout<<genjetindx[isrc][ijet]<<endl;
		double pt = genjetptx[isrc][ijet];
		double sup = genjetscl[isrc][ijet];
		double abseta = abs((*genjets)[igenjt].eta());
		if (pt<30.0 || abseta >etarange[iet]) continue;
		bool isEta = (abseta<2.1) ? true : false;
		
		//if (iet==0 && isrc==0) 
		//cout <<"MC:pteta "<<ijet<<" "<<pt<<" "<<abseta<<endl;
		if (abseta>5.0) continue;
		bool isPt = (pt>30.0) ? true : false;
		if (isEta && isPt) {ncount++;}	
		
		//if(igenjt<=1) continue;
		//cout<<"igenjt : "<<igenjt<<endl;
	
		HepLorentzVector tmp4v((*genjets)[igenjt].px(), (*genjets)[igenjt].py(), (*genjets)[igenjt].pz(), (*genjets)[igenjt].energy()); tmp4v *=sup;
		Hep3Vector tmp3v((*genjets)[igenjt].px(), (*genjets)[igenjt].py(), (*genjets)[igenjt].pz()); tmp3v *=sup;
		//cout<<"GenJet pt test : "<<tmp3v.perp()<<endl;
		if (isEta && isPt) { tmpgen4v.push_back(tmp4v);} 
	
		  if (isEta && isPt) {genmom[isrc][0][iet].push_back(tmp4v);}

		  if (isrc==0) { 
		    if (isInEtaRange[iet]) {genjt_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0) {genjt_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {genjt_phi->Fill(tmp4v.phi(), weighttrg);}
			//cout<<"GenJet PT : "<<tmp4v.perp()<<endl;  
		  }
		
		if (isrc==0) { 
		  if(ijet==0) {
		    //cout<<"Gen Pt= " << avegenpt <<endl;
		    if (isInEtaRange[iet]) {genjt1_pt[iet]->Fill(tmp4v.perp(), weighttrg); genrecojet1_pt = tmp4v.perp();}
		    if (isPt && iet==0) {genjt1_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {genjt1_phi->Fill(tmp4v.phi(), weighttrg);}
			//cout<<"GenJet PT : "<<tmp4v.perp()<<endl;	
		  } else if(ijet==1){
		    //cout<<"okkkkkkkk" <<endl;
		    if (isInEtaRange[iet]) {genjt2_pt[iet]->Fill(tmp4v.perp(), weighttrg); genrecojet2_pt = tmp4v.perp();}
		    if (isPt && iet==0) {genjt2_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {genjt2_phi->Fill(tmp4v.phi(), weighttrg);}
		    if (isInEtaRange[iet] && ncount==2) {
		      //cout<<"Gen Pt 1= " << avegenpt <<endl;
		      genjtallave_pt[iet]->Fill(0.5*(tmpgen4v[0].perp()+tmpgen4v[1].perp()), weighttrg);
		    }
		  } else if(ijet==2) {
		    if (isInEtaRange[iet]) {genjt3_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0 ) {genjt3_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {genjt3_phi->Fill(tmp4v.phi(), weighttrg);}
		  }
		  if (tmpgen4v.size()==2 && isInEtaRange[iet]) {
		    double dphi = dPhi(tmpgen4v[0].phi(), tmpgen4v[1].phi());
		    double dpt = tmpgen4v[0].perp() - tmpgen4v[1].perp();
		    double dperp = fabs(tmpgen4v[1].perp()*sin(dphi))/tmpgen4v[0].perp();
		    
		    genjetdphi[iet]->Fill(dphi, weighttrg);
		    genjetdpt[iet]->Fill(dpt, weighttrg);
		    genjetptbypl[iet]->Fill(dperp, weight);
		    genjetpt2bypt1[iet]->Fill(tmpgen4v[1].perp()/tmpgen4v[0].perp(), weight);
		  }
		  
		  if (tmpgen4v.size()==3) {genjetpt3bypt2[iet]->Fill(tmpgen4v[2].perp()/tmpgen4v[1].perp(), weight);}
		}
#ifdef GENPART
		
		std::vector <const GenParticle*> daus ((*genjets)[igenjt].getGenConstituents ());
		std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });  //need to check 
		for (unsigned int i2 =0; i2< daus.size(); ++i2) {
		  const GenParticle* pfcand = daus[i2];
		  int charge = pfcand->charge();
		  HepLorentzVector cand4v(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
		  //int pdgid = pfcand->pdgId();
		 //std::cout<<"GENPART loop"<<endl; 
#else		
		
		  std::vector<reco::CandidatePtr> daus((*genjets)[igenjt].daughterPtrVector());
		  std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });                               
		  for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		    const pat::PackedCandidate &pfcand = static_cast<const pat::PackedCandidate &>(*daus[i2]);
		    int charge = pfcand.charge();
		    //int pdgid = pfcand.pdgId();
		    //if(pdgid==2){//cout<<"pdgid : "<<pdgid<<endl;
		    //cout<<"True"<<endl;}
		    //std::cout<<"ALL loop"<<endl;
		    HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
#endif
		    //	    if (cand4v.perp()<0.5) continue;
		    
		    //if (ncount<=2 && isEta && isPt) {
		      //genmom[isrc][1][iet].push_back(cand4v);
		      if (charge !=0) {
			genmom[isrc][1][iet].push_back(cand4v);
#ifdef TRACKSYS
			if (gRandom->Uniform() < 0.96) {genmom[isrc][2][iet].push_back(cand4v); }
#endif
	}
	if (isrc==0) { 
               	if (charge !=0) {
			genchg_phi->Fill(cand4v.phi(), weighttrg);
			genchg_pt->Fill(cand4v.perp(), weighttrg);
			genchg_eta->Fill(cand4v.eta(), weighttrg);
		  	}
		if (ijet==0 && charge !=0) {
			genchg1_phi->Fill(cand4v.phi(), weighttrg);
                        genchg1_pt->Fill(cand4v.perp(), weighttrg);
                        genchg1_eta->Fill(cand4v.eta(), weighttrg);
			}
		else if (ijet==1 && charge !=0) {
			genchg2_phi->Fill(cand4v.phi(), weighttrg);
                        genchg2_pt->Fill(cand4v.perp(), weighttrg);
                        genchg2_eta->Fill(cand4v.eta(), weighttrg);
			}
		else if (ijet==2 && charge !=0) {
                        genchg3_phi->Fill(cand4v.phi(), weighttrg);
                        genchg3_pt->Fill(cand4v.perp(), weighttrg);
                        genchg3_eta->Fill(cand4v.eta(), weighttrg);
                        }
		}//if (isrc==0)
		} //for (unsigned int i2 = 0; i2< daus.size(); ++i2)
		//cout<<" Gen particle momentum : "<<igenjet1candsmomk1<<" Jet pt : "<<genjet1_test<<" JCO : "<<igenjet1candsmomk1/genjet1_test<<endl;
		//cout<<"-------------"<<endl;

	if (ijet==0){
		for (int ik=0; ik<10; ik++){
#ifdef MATCHING
			if(jet_matches){	
				for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                		const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

	        		for (unsigned int imatched = 0; imatched < matched_genparts.size(); ++imatched) {
                		const pat::PackedCandidate& matched_gencand = static_cast<const pat::PackedCandidate&>(*matched_genparts[imatched]);

                		if (gencand.charge() == matched_gencand.charge() && deltaR(gencand, matched_gencand) < 1e-4) {

				int charge = gencand.charge();
                        	Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());

                        	if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

					igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                	igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
		
					igenjet1candsmom_matchedtracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
						}
					}
				}
			}
			}else{
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);
				
                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				
				igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
			}
#else
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

				igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
#endif
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				igenjet1candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			}	
		}			
	}
}

	if(ijet==1){
		for (int ik=0; ik<10; ik++){
#ifdef MATCHING
			if(jet_matches){
                                for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                                const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                                for (unsigned int imatched = 0; imatched < matched_genparts.size(); ++imatched) {
                                const pat::PackedCandidate& matched_gencand = static_cast<const pat::PackedCandidate&>(*matched_genparts[imatched]);

                                if (gencand.charge() == matched_gencand.charge() && deltaR(gencand, matched_gencand) < 1e-4) {
                                int charge = gencand.charge();
                                Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                                if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

					igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

        	                        igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                	                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        	        igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					igenjet2candsmom_matchedtracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
						}
					}
				}
			}
		}else{
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);
                                
                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
		
				igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}
			}
		}

#else
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				
				igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
		
#endif
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				igenjet2candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				}
			}
	}
}

		  //  if (isEta && isPt) {ncount++;}
		} // if (abs((*genjets)[genjetindx[isrc][0]].eta())<etarange[iet] && 
		//								abs((*genjets)[genjetindx[isrc][1]].eta())<etarange[iet])
	      } //	for(unsigned ijet = 0; ijet != genjets->size(); ijet++) 
	      //cout << "Write test 324 = ok " << endl;
	     /* if (ithird>=0) {
		//							cout <<"ithird "<<isrc<<" "<< iet<<" "<< ithird<<endl;
		
		HepLorentzVector tmp4v((*genjets)[ithird].px(), (*genjets)[ithird].py(), (*genjets)[ithird].pz(), (*genjets)[ithird].energy());
		genmom[isrc][0][iet].push_back(tmp4v);
		//cout <<"thirdijxxx "<<isrc<<" "<<iet<<" "<< genmom[isrc][0][iet].size()<<" "<<genjets->size()<<" "<<ithird<<" "<<tmp4v.perp()<<" "<<tmp4v.eta()<<" "<<tmp4v.phi()<<" "<<setprecision(14)<<weighttrg<<endl;
#ifdef GENPART
		std::vector <const GenParticle*> daus ((*genjets)[ithird].getGenConstituents ());
		//								std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); }); 
		
		for (unsigned int i2 =0; i2< daus.size(); ++i2) {
		  const GenParticle* pfcand = daus[i2];
		  int charge = pfcand->charge();
		  HepLorentzVector cand4v(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
		  //								int pdgid = pfcand->pdgId();
		  
#else
		  std::vector<reco::CandidatePtr> daus((*genjets)[ithird].daughterPtrVector());
		  std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });    
		  
		  for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		    const pat::PackedCandidate &pfcand = static_cast<const pat::PackedCandidate &>(*daus[i2]);
		    
		    int charge = pfcand.charge();
		    HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
#endif
		    
		    
		    //      if (cand4v.perp()<0.5) continue;                                                                                                                     
		    genmom[isrc][1][iet].push_back(cand4v);
		    if (charge !=0) {
		      genmom[isrc][2][iet].push_back(cand4v);
#ifdef TRACKSYS
		      if (gRandom->Uniform() < 0.96) {genmom[isrc][4][iet].push_back(cand4v); }
#endif
		    }
		    
		    if(charge ==0) {
		      if (cand4v.perp()>1.0) {
			genmom[isrc][3][iet].push_back(cand4v);
		      }
		    } else {
		      if (cand4v.perp()>0.5) {
			genmom[isrc][3][iet].push_back(cand4v);
		      }
		    }
		  } //for (unsigned int i2 = 0; i2< daus.size(); ++i2) 
		}*/// if (ithird>=0)
		gen_njets[iet]->Fill(ncount,weighttrg); 
	      } // if (avegenptres[isrc] > leadingPtThreshold[0])
	    } //	for (int isrc=0; isrc<nGenReso; isrc++)
	  } //for (int iet=0; iet<njetetamn; iet++)
	} // if(genjets.isValid() && genjets->size()>=2 && (*genjets)[0].pt()>leadingPtThreshold[0])
	// } //if (genjets.isValid() &&  genjets->size()>=2) 
	//h_2ht->Fill(aveleadingpt,avegenpt, weighttrg);
	h_2ht->Fill(leadingpt,leadgenpt, weighttrg);
	///////Response
      } //isMC
      //	cout<<"22 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
      // if(isMC) h_2ht->Fill(aveleadingpt,avegenpt, weighttrg);
      //cout << "Write test 325 = ok " << endl;
      //for(int rnum=0; rnum<10; rnum++) {
      /*double rand=gRandom->Uniform();
      int k = rand/0.1;
      //cout << "Rand Number " << k << endl;*/
 
//-----------------------------------------------Calculate And Fill Jet Charge Obserables------------------------------------

for (int ik=0; ik<nkappa; ik++){
	for (int isrc = 0; isrc < njecmx; isrc++) {
		RecoJCO[0][0][ik][isrc] = (ijet1candsmom_num[ik][isrc]/(pow(ijet1candsmom_den[ik][isrc],kappa[ik])));
                RecoJCO[0][1][ik][isrc] = (ijet2candsmom_num[ik][isrc]/(pow(ijet2candsmom_den[ik][isrc],kappa[ik])));

		RecoJCO[1][0][ik][isrc] = (ijet1_long_num[ik][isrc]/ijet1_long_den[ik][isrc]);
                RecoJCO[1][1][ik][isrc] = (ijet2_long_num[ik][isrc]/ijet2_long_den[ik][isrc]);

                RecoJCO[2][0][ik][isrc] = (ijet1_tran_num[ik][isrc]/ijet1_tran_den[ik][isrc]);
                RecoJCO[2][1][ik][isrc] = (ijet2_tran_num[ik][isrc]/ijet2_tran_den[ik][isrc]);


		recomomJCO[0][0][ik][isrc] = (pow(ijet1candsmom_den[ik][isrc],kappa[ik]));
                recomomJCO[0][1][ik][isrc] = (pow(ijet2candsmom_den[ik][isrc],kappa[ik]));

                recomomJCO[1][0][ik][isrc] = (ijet1_long_den[ik][isrc]);
                recomomJCO[1][1][ik][isrc] = (ijet2_long_den[ik][isrc]);

                recomomJCO[2][0][ik][isrc] = (ijet1_tran_den[ik][isrc]);
                recomomJCO[2][1][ik][isrc] = (ijet2_tran_den[ik][isrc]);
#ifdef FLAV
		//g-jet
		RecoJCO_gjet[0][0][ik][isrc] = (ijet1candsmom_num_gjet[ik][isrc]/(pow(ijet1candsmom_den_gjet[ik][isrc],kappa[ik])));
                RecoJCO_gjet[0][1][ik][isrc] = (ijet2candsmom_num_gjet[ik][isrc]/(pow(ijet2candsmom_den_gjet[ik][isrc],kappa[ik])));

                RecoJCO_gjet[1][0][ik][isrc] = (ijet1_long_num_gjet[ik][isrc]/ijet1_long_den_gjet[ik][isrc]);
                RecoJCO_gjet[1][1][ik][isrc] = (ijet2_long_num_gjet[ik][isrc]/ijet2_long_den_gjet[ik][isrc]);

                RecoJCO_gjet[2][0][ik][isrc] = (ijet1_tran_num_gjet[ik][isrc]/ijet1_tran_den_gjet[ik][isrc]);
                RecoJCO_gjet[2][1][ik][isrc] = (ijet2_tran_num_gjet[ik][isrc]/ijet2_tran_den_gjet[ik][isrc]);

		recomomJCO_gjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_gjet[ik][isrc],kappa[ik]));
                recomomJCO_gjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_gjet[ik][isrc],kappa[ik]));

                recomomJCO_gjet[1][0][ik][isrc] = (ijet1_long_den_gjet[ik][isrc]);
                recomomJCO_gjet[1][1][ik][isrc] = (ijet2_long_den_gjet[ik][isrc]);

                recomomJCO_gjet[2][0][ik][isrc] = (ijet1_tran_den_gjet[ik][isrc]);
                recomomJCO_gjet[2][1][ik][isrc] = (ijet2_tran_den_gjet[ik][isrc]);

		//u-jet
		RecoJCO_ujet[0][0][ik][isrc] = (ijet1candsmom_num_ujet[ik][isrc]/(pow(ijet1candsmom_den_ujet[ik][isrc],kappa[ik])));
                RecoJCO_ujet[0][1][ik][isrc] = (ijet2candsmom_num_ujet[ik][isrc]/(pow(ijet2candsmom_den_ujet[ik][isrc],kappa[ik])));

                RecoJCO_ujet[1][0][ik][isrc] = (ijet1_long_num_ujet[ik][isrc]/ijet1_long_den_ujet[ik][isrc]);
                RecoJCO_ujet[1][1][ik][isrc] = (ijet2_long_num_ujet[ik][isrc]/ijet2_long_den_ujet[ik][isrc]);

                RecoJCO_ujet[2][0][ik][isrc] = (ijet1_tran_num_ujet[ik][isrc]/ijet1_tran_den_ujet[ik][isrc]);
                RecoJCO_ujet[2][1][ik][isrc] = (ijet2_tran_num_ujet[ik][isrc]/ijet2_tran_den_ujet[ik][isrc]);

		recomomJCO_ujet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ujet[ik][isrc],kappa[ik]));
                recomomJCO_ujet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ujet[ik][isrc],kappa[ik]));

                recomomJCO_ujet[1][0][ik][isrc] = (ijet1_long_den_ujet[ik][isrc]);
                recomomJCO_ujet[1][1][ik][isrc] = (ijet2_long_den_ujet[ik][isrc]);

                recomomJCO_ujet[2][0][ik][isrc] = (ijet1_tran_den_ujet[ik][isrc]);
                recomomJCO_ujet[2][1][ik][isrc] = (ijet2_tran_den_ujet[ik][isrc]);

		//d-jet
		RecoJCO_djet[0][0][ik][isrc] = (ijet1candsmom_num_djet[ik][isrc]/(pow(ijet1candsmom_den_djet[ik][isrc],kappa[ik])));
                RecoJCO_djet[0][1][ik][isrc] = (ijet2candsmom_num_djet[ik][isrc]/(pow(ijet2candsmom_den_djet[ik][isrc],kappa[ik])));

                RecoJCO_djet[1][0][ik][isrc] = (ijet1_long_num_djet[ik][isrc]/ijet1_long_den_djet[ik][isrc]);
                RecoJCO_djet[1][1][ik][isrc] = (ijet2_long_num_djet[ik][isrc]/ijet2_long_den_djet[ik][isrc]);

                RecoJCO_djet[2][0][ik][isrc] = (ijet1_tran_num_djet[ik][isrc]/ijet1_tran_den_djet[ik][isrc]);
                RecoJCO_djet[2][1][ik][isrc] = (ijet2_tran_num_djet[ik][isrc]/ijet2_tran_den_djet[ik][isrc]);

		recomomJCO_djet[0][0][ik][isrc] = (pow(ijet1candsmom_den_djet[ik][isrc],kappa[ik]));
                recomomJCO_djet[0][1][ik][isrc] = (pow(ijet2candsmom_den_djet[ik][isrc],kappa[ik]));

                recomomJCO_djet[1][0][ik][isrc] = (ijet1_long_den_djet[ik][isrc]);
                recomomJCO_djet[1][1][ik][isrc] = (ijet2_long_den_djet[ik][isrc]);

                recomomJCO_djet[2][0][ik][isrc] = (ijet1_tran_den_djet[ik][isrc]);
                recomomJCO_djet[2][1][ik][isrc] = (ijet2_tran_den_djet[ik][isrc]);

		//others
		RecoJCO_ojet[0][0][ik][isrc] = (ijet1candsmom_num_ojet[ik][isrc]/(pow(ijet1candsmom_den_ojet[ik][isrc],kappa[ik])));
                RecoJCO_ojet[0][1][ik][isrc] = (ijet2candsmom_num_ojet[ik][isrc]/(pow(ijet2candsmom_den_ojet[ik][isrc],kappa[ik])));

                RecoJCO_ojet[1][0][ik][isrc] = (ijet1_long_num_ojet[ik][isrc]/ijet1_long_den_ojet[ik][isrc]);
                RecoJCO_ojet[1][1][ik][isrc] = (ijet2_long_num_ojet[ik][isrc]/ijet2_long_den_ojet[ik][isrc]);

                RecoJCO_ojet[2][0][ik][isrc] = (ijet1_tran_num_ojet[ik][isrc]/ijet1_tran_den_ojet[ik][isrc]);
                RecoJCO_ojet[2][1][ik][isrc] = (ijet2_tran_num_ojet[ik][isrc]/ijet2_tran_den_ojet[ik][isrc]);

		recomomJCO_ojet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ojet[ik][isrc],kappa[ik]));
                recomomJCO_ojet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ojet[ik][isrc],kappa[ik]));

                recomomJCO_ojet[1][0][ik][isrc] = (ijet1_long_den_ojet[ik][isrc]);
                recomomJCO_ojet[1][1][ik][isrc] = (ijet2_long_den_ojet[ik][isrc]);

                recomomJCO_ojet[2][0][ik][isrc] = (ijet1_tran_den_ojet[ik][isrc]);
                recomomJCO_ojet[2][1][ik][isrc] = (ijet2_tran_den_ojet[ik][isrc]);

		//Second-Set Flavor Tagging
		RecoJCO_qjet[0][0][ik][isrc] = (ijet1candsmom_num_qjet[ik][isrc]/(pow(ijet1candsmom_den_qjet[ik][isrc],kappa[ik])));
                RecoJCO_qjet[0][1][ik][isrc] = (ijet2candsmom_num_qjet[ik][isrc]/(pow(ijet2candsmom_den_qjet[ik][isrc],kappa[ik])));

                RecoJCO_qjet[1][0][ik][isrc] = (ijet1_long_num_qjet[ik][isrc]/ijet1_long_den_qjet[ik][isrc]);
                RecoJCO_qjet[1][1][ik][isrc] = (ijet2_long_num_qjet[ik][isrc]/ijet2_long_den_qjet[ik][isrc]);

                RecoJCO_qjet[2][0][ik][isrc] = (ijet1_tran_num_qjet[ik][isrc]/ijet1_tran_den_qjet[ik][isrc]);
                RecoJCO_qjet[2][1][ik][isrc] = (ijet2_tran_num_qjet[ik][isrc]/ijet2_tran_den_qjet[ik][isrc]);

                recomomJCO_qjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_qjet[ik][isrc],kappa[ik]));
                recomomJCO_qjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_qjet[ik][isrc],kappa[ik]));

                recomomJCO_qjet[1][0][ik][isrc] = (ijet1_long_den_qjet[ik][isrc]);
                recomomJCO_qjet[1][1][ik][isrc] = (ijet2_long_den_qjet[ik][isrc]);

                recomomJCO_qjet[2][0][ik][isrc] = (ijet1_tran_den_qjet[ik][isrc]);
                recomomJCO_qjet[2][1][ik][isrc] = (ijet2_tran_den_qjet[ik][isrc]);

		//ant-quark
		RecoJCO_aqjet[0][0][ik][isrc] = (ijet1candsmom_num_aqjet[ik][isrc]/(pow(ijet1candsmom_den_aqjet[ik][isrc],kappa[ik])));
                RecoJCO_aqjet[0][1][ik][isrc] = (ijet2candsmom_num_aqjet[ik][isrc]/(pow(ijet2candsmom_den_aqjet[ik][isrc],kappa[ik])));

                RecoJCO_aqjet[1][0][ik][isrc] = (ijet1_long_num_aqjet[ik][isrc]/ijet1_long_den_aqjet[ik][isrc]);
                RecoJCO_aqjet[1][1][ik][isrc] = (ijet2_long_num_aqjet[ik][isrc]/ijet2_long_den_aqjet[ik][isrc]);

                RecoJCO_aqjet[2][0][ik][isrc] = (ijet1_tran_num_aqjet[ik][isrc]/ijet1_tran_den_aqjet[ik][isrc]);
                RecoJCO_aqjet[2][1][ik][isrc] = (ijet2_tran_num_aqjet[ik][isrc]/ijet2_tran_den_aqjet[ik][isrc]);

                recomomJCO_aqjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_aqjet[ik][isrc],kappa[ik]));
                recomomJCO_aqjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_aqjet[ik][isrc],kappa[ik]));

                recomomJCO_aqjet[1][0][ik][isrc] = (ijet1_long_den_aqjet[ik][isrc]);
                recomomJCO_aqjet[1][1][ik][isrc] = (ijet2_long_den_aqjet[ik][isrc]);

                recomomJCO_aqjet[2][0][ik][isrc] = (ijet1_tran_den_aqjet[ik][isrc]);
                recomomJCO_aqjet[2][1][ik][isrc] = (ijet2_tran_den_aqjet[ik][isrc]);

		//gluon
		RecoJCO_aqgjet[0][0][ik][isrc] = (ijet1candsmom_num_aqgjet[ik][isrc]/(pow(ijet1candsmom_den_aqgjet[ik][isrc],kappa[ik])));
                RecoJCO_aqgjet[0][1][ik][isrc] = (ijet2candsmom_num_aqgjet[ik][isrc]/(pow(ijet2candsmom_den_aqgjet[ik][isrc],kappa[ik])));

                RecoJCO_aqgjet[1][0][ik][isrc] = (ijet1_long_num_aqgjet[ik][isrc]/ijet1_long_den_aqgjet[ik][isrc]);
                RecoJCO_aqgjet[1][1][ik][isrc] = (ijet2_long_num_aqgjet[ik][isrc]/ijet2_long_den_aqgjet[ik][isrc]);

                RecoJCO_aqgjet[2][0][ik][isrc] = (ijet1_tran_num_aqgjet[ik][isrc]/ijet1_tran_den_aqgjet[ik][isrc]);
                RecoJCO_aqgjet[2][1][ik][isrc] = (ijet2_tran_num_aqgjet[ik][isrc]/ijet2_tran_den_aqgjet[ik][isrc]);

                recomomJCO_aqgjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_aqgjet[ik][isrc],kappa[ik]));
                recomomJCO_aqgjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_aqgjet[ik][isrc],kappa[ik]));

                recomomJCO_aqgjet[1][0][ik][isrc] = (ijet1_long_den_aqgjet[ik][isrc]);
                recomomJCO_aqgjet[1][1][ik][isrc] = (ijet2_long_den_aqgjet[ik][isrc]);

                recomomJCO_aqgjet[2][0][ik][isrc] = (ijet1_tran_den_aqgjet[ik][isrc]);
                recomomJCO_aqgjet[2][1][ik][isrc] = (ijet2_tran_den_aqgjet[ik][isrc]);

		//others
		RecoJCO_aqojet[0][0][ik][isrc] = (ijet1candsmom_num_aqojet[ik][isrc]/(pow(ijet1candsmom_den_aqojet[ik][isrc],kappa[ik])));
                RecoJCO_aqojet[0][1][ik][isrc] = (ijet2candsmom_num_aqojet[ik][isrc]/(pow(ijet2candsmom_den_aqojet[ik][isrc],kappa[ik])));

                RecoJCO_aqojet[1][0][ik][isrc] = (ijet1_long_num_aqojet[ik][isrc]/ijet1_long_den_aqojet[ik][isrc]);
                RecoJCO_aqojet[1][1][ik][isrc] = (ijet2_long_num_aqojet[ik][isrc]/ijet2_long_den_aqojet[ik][isrc]);

                RecoJCO_aqojet[2][0][ik][isrc] = (ijet1_tran_num_aqojet[ik][isrc]/ijet1_tran_den_aqojet[ik][isrc]);
                RecoJCO_aqojet[2][1][ik][isrc] = (ijet2_tran_num_aqojet[ik][isrc]/ijet2_tran_den_aqojet[ik][isrc]);

                recomomJCO_aqojet[0][0][ik][isrc] = (pow(ijet1candsmom_den_aqojet[ik][isrc],kappa[ik]));
                recomomJCO_aqojet[0][1][ik][isrc] = (pow(ijet2candsmom_den_aqojet[ik][isrc],kappa[ik]));

                recomomJCO_aqojet[1][0][ik][isrc] = (ijet1_long_den_aqojet[ik][isrc]);
                recomomJCO_aqojet[1][1][ik][isrc] = (ijet2_long_den_aqojet[ik][isrc]);

                recomomJCO_aqojet[2][0][ik][isrc] = (ijet1_tran_den_aqojet[ik][isrc]);
                recomomJCO_aqojet[2][1][ik][isrc] = (ijet2_tran_den_aqojet[ik][isrc]);
#endif

#ifdef TRACKEFF
		RecoJCO_trackeff[0][0][ik][isrc] = (ijet1candsmom_num_trackeff[ik][isrc]/(pow(ijet1candsmom_den_trackeff[ik][isrc],kappa[ik])));
                RecoJCO_trackeff[0][1][ik][isrc] = (ijet2candsmom_num_trackeff[ik][isrc]/(pow(ijet2candsmom_den_trackeff[ik][isrc],kappa[ik])));

                RecoJCO_trackeff[1][0][ik][isrc] = (ijet1_long_num_trackeff[ik][isrc]/ijet1_long_den_trackeff[ik][isrc]);
                RecoJCO_trackeff[1][1][ik][isrc] = (ijet2_long_num_trackeff[ik][isrc]/ijet2_long_den_trackeff[ik][isrc]);

                RecoJCO_trackeff[2][0][ik][isrc] = (ijet1_tran_num_trackeff[ik][isrc]/ijet1_tran_den_trackeff[ik][isrc]);
                RecoJCO_trackeff[2][1][ik][isrc] = (ijet2_tran_num_trackeff[ik][isrc]/ijet2_tran_den_trackeff[ik][isrc]);


                recomomJCO_trackeff[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackeff[ik][isrc],kappa[ik]));
                recomomJCO_trackeff[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackeff[ik][isrc],kappa[ik]));

                recomomJCO_trackeff[1][0][ik][isrc] = (ijet1_long_den_trackeff[ik][isrc]);
                recomomJCO_trackeff[1][1][ik][isrc] = (ijet2_long_den_trackeff[ik][isrc]);

                recomomJCO_trackeff[2][0][ik][isrc] = (ijet1_tran_den_trackeff[ik][isrc]);
                recomomJCO_trackeff[2][1][ik][isrc] = (ijet2_tran_den_trackeff[ik][isrc]);
#endif

#ifdef TRACKPTUP
		RecoJCO_trackpt1[0][0][ik][isrc] = (ijet1candsmom_num_trackpt1[ik][isrc]/(pow(ijet1candsmom_den_trackpt1[ik][isrc],kappa[ik])));
                RecoJCO_trackpt1[0][1][ik][isrc] = (ijet2candsmom_num_trackpt1[ik][isrc]/(pow(ijet2candsmom_den_trackpt1[ik][isrc],kappa[ik])));

                RecoJCO_trackpt1[1][0][ik][isrc] = (ijet1_long_num_trackpt1[ik][isrc]/ijet1_long_den_trackpt1[ik][isrc]);
                RecoJCO_trackpt1[1][1][ik][isrc] = (ijet2_long_num_trackpt1[ik][isrc]/ijet2_long_den_trackpt1[ik][isrc]);

                RecoJCO_trackpt1[2][0][ik][isrc] = (ijet1_tran_num_trackpt1[ik][isrc]/ijet1_tran_den_trackpt1[ik][isrc]);
                RecoJCO_trackpt1[2][1][ik][isrc] = (ijet2_tran_num_trackpt1[ik][isrc]/ijet2_tran_den_trackpt1[ik][isrc]);


                recomomJCO_trackpt1[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackpt1[ik][isrc],kappa[ik]));
                recomomJCO_trackpt1[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackpt1[ik][isrc],kappa[ik]));

                recomomJCO_trackpt1[1][0][ik][isrc] = (ijet1_long_den_trackpt1[ik][isrc]);
                recomomJCO_trackpt1[1][1][ik][isrc] = (ijet2_long_den_trackpt1[ik][isrc]);

                recomomJCO_trackpt1[2][0][ik][isrc] = (ijet1_tran_den_trackpt1[ik][isrc]);
                recomomJCO_trackpt1[2][1][ik][isrc] = (ijet2_tran_den_trackpt1[ik][isrc]);
#endif

#ifdef TRACKPTDOWN
                RecoJCO_trackpt2[0][0][ik][isrc] = (ijet1candsmom_num_trackpt2[ik][isrc]/(pow(ijet1candsmom_den_trackpt2[ik][isrc],kappa[ik])));
                RecoJCO_trackpt2[0][1][ik][isrc] = (ijet2candsmom_num_trackpt2[ik][isrc]/(pow(ijet2candsmom_den_trackpt2[ik][isrc],kappa[ik])));

                RecoJCO_trackpt2[1][0][ik][isrc] = (ijet1_long_num_trackpt2[ik][isrc]/ijet1_long_den_trackpt2[ik][isrc]);
                RecoJCO_trackpt2[1][1][ik][isrc] = (ijet2_long_num_trackpt2[ik][isrc]/ijet2_long_den_trackpt2[ik][isrc]);

                RecoJCO_trackpt2[2][0][ik][isrc] = (ijet1_tran_num_trackpt2[ik][isrc]/ijet1_tran_den_trackpt2[ik][isrc]);
                RecoJCO_trackpt2[2][1][ik][isrc] = (ijet2_tran_num_trackpt2[ik][isrc]/ijet2_tran_den_trackpt2[ik][isrc]);


                recomomJCO_trackpt2[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackpt2[ik][isrc],kappa[ik]));
                recomomJCO_trackpt2[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackpt2[ik][isrc],kappa[ik]));

                recomomJCO_trackpt2[1][0][ik][isrc] = (ijet1_long_den_trackpt2[ik][isrc]);
                recomomJCO_trackpt2[1][1][ik][isrc] = (ijet2_long_den_trackpt2[ik][isrc]);

                recomomJCO_trackpt2[2][0][ik][isrc] = (ijet1_tran_den_trackpt2[ik][isrc]);
                recomomJCO_trackpt2[2][1][ik][isrc] = (ijet2_tran_den_trackpt2[ik][isrc]);
#endif
		}
	
	for (int isrc = 0; isrc < nGenReso; isrc++) {
		GenJCO[0][0][ik][isrc] = (igenjet1candsmom_num[ik][isrc]/(pow(igenjet1candsmom_den[ik][isrc],kappa[ik])));
                GenJCO[0][1][ik][isrc] = (igenjet2candsmom_num[ik][isrc]/(pow(igenjet2candsmom_den[ik][isrc],kappa[ik])));

		GenJCO[1][0][ik][isrc] = (igenjet1_long_num[ik][isrc]/igenjet1_long_den[ik][isrc]);
		GenJCO[1][1][ik][isrc] = (igenjet2_long_num[ik][isrc]/igenjet2_long_den[ik][isrc]);

		GenJCO[2][0][ik][isrc] = (igenjet1_tran_num[ik][isrc]/igenjet1_tran_den[ik][isrc]);
		GenJCO[2][1][ik][isrc] = (igenjet2_tran_num[ik][isrc]/igenjet2_tran_den[ik][isrc]);

#ifdef MATCHING
		genmomJCO[0][0][ik][isrc] = (pow(igenjet1candsmom_den[ik][isrc],kappa[ik]));
                genmomJCO[0][1][ik][isrc] = (pow(igenjet2candsmom_den[ik][isrc],kappa[ik]));

		genmomJCO[1][0][ik][isrc] = (igenjet1_long_den[ik][isrc]);
                genmomJCO[1][1][ik][isrc] = (igenjet2_long_den[ik][isrc]);

		genmomJCO[2][0][ik][isrc] = (igenjet1_tran_den[ik][isrc]);
                genmomJCO[2][1][ik][isrc] = (igenjet2_tran_den[ik][isrc]);
#endif
		imatched_all_pt[0][ik][isrc] = igenjet1candsmom_matchedtracks[ik][isrc]/igenjet1candsmom_alltracks[ik][isrc];
                imatched_all_pt[1][ik][isrc] = igenjet2candsmom_matchedtracks[ik][isrc]/igenjet2candsmom_alltracks[ik][isrc];
		}
	}

double recojetpt[njet] = {0.0};
double genjetpt[njet] = {0.0};

for(int ij=0; ij<njet; ij++){
	recojetpt[0] = recojet1_pt;
	recojetpt[1] = recojet2_pt;

	genjetpt[0] = genrecojet1_pt;
	genjetpt[1] = genrecojet2_pt;
	}	

//Dependence of Jet pT on JCO and flavor tagged JCO
for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
	if(isReconstruct){
	for (int isrc = 0; isrc < njecmx; isrc++) {
        	if(isrc==0){
			if(recomomJCO[id][ij][ik][isrc]>0){hprof_reco_jco_pt[id][ij][ik]->Fill(recojetpt[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}
#ifdef FLAV
			if(recomomJCO_gjet[id][ij][ik][isrc]>0){hprof_jco_pt_gjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_gjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_ujet[id][ij][ik][isrc]>0){hprof_jco_pt_ujet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ujet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_djet[id][ij][ik][isrc]>0){hprof_jco_pt_djet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_djet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_ojet[id][ij][ik][isrc]>0){hprof_jco_pt_ojet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ojet[id][ij][ik][isrc],weighttrg);}
#endif
				}
			}
		}
	if(isMC){
	for (int isrc = 0; isrc < nGenReso; isrc++) {
		if(isrc==0){
			if(genjetpt[ij]>0 && GenJCO[id][ij][ik][isrc]>0){hprof_gen_jco_pt[id][ij][ik]->Fill(genjetpt[ij],GenJCO[id][ij][ik][isrc],weighttrg);}
					}
				}
			}
		}
	}
}

double recotrackpt[njet][nkappa][njecmx] = {{{0.0}}};
double gentrackpt[njet][nkappa][njecmx] = {{{0.0}}};

for(int ik=0; ik<nkappa; ik++){
	for (int isrc = 0; isrc < njecmx; isrc++) {
                recotrackpt[0][ik][isrc] = ijet1candsmom_alltracks[ik][isrc];
                recotrackpt[1][ik][isrc] = ijet2candsmom_alltracks[ik][isrc];
        }
        for (int isrc = 0; isrc < nGenReso; isrc++) {
		gentrackpt[0][ik][isrc] = igenjet1candsmom_alltracks[ik][isrc];
		gentrackpt[1][ik][isrc] = igenjet2candsmom_alltracks[ik][isrc];
	}
}

//Ration of Matched charged pT to All Charged pT vs particle Jet pT
//Ratio of track pT to Jet pT vs Jet pT 
//For both particle and detector level
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
	//Reco level
	if(isReconstruct){
		for (int isrc = 0; isrc < njecmx; isrc++) {
                	if(isrc==0){	
				if(pow(recojetpt[ij],kappa[ik])>0){
					hprof_reco_trackpt_R_jetpt_jetpt[ij][ik]->Fill((pow(recojetpt[ij],kappa[ik])),(recotrackpt[ij][ik][isrc]/(pow(recojetpt[ij],kappa[ik]))),weighttrg);
				}
			}	
		}
	}
	//Gen level
	if(isMC){
	for (int isrc = 0; isrc < nGenReso; isrc++) {
                if(isrc==0){
			if(gentrackpt[ij][ik][isrc]>0){
				hprof_matchedChg_R_allChg_genjetpt[ij][ik]->Fill((pow(genjetpt[ij],kappa[ik])),imatched_all_pt[ij][ik][isrc],weighttrg);
				}
			if(pow(genjetpt[ij],kappa[ik])>0){
				hprof_gen_trackpt_R_jetpt_jetpt[ij][ik]->Fill((pow(genjetpt[ij],kappa[ik])),(gentrackpt[ij][ik][isrc]/(pow(genjetpt[ij],kappa[ik]))),weighttrg);
					}
				}
			}
		}
	}
}

//Charged particle multiplicity vs Jet pT (overall, lead & sub-lead)
hchpt->Fill(recoJetpT,nchg,weighttrg);
hchpt1->Fill(recojet1_pt, nchg1, weighttrg);
hchpt2->Fill(recojet2_pt, nchg2, weighttrg);

//cout<<"recojet1_pt : "<<recojet1_pt<<" nchg1 : "<<nchg1<<endl;
//cout<<"recojet2_pt : "<<recojet2_pt<<" nchg2 : "<<nchg2<<endl;

//////////////////////////////////////////////////////////////////////////////////////////////    
//Histograms are filled using array for all the kappa values
//1D
bool isRecoJCO1D[ndef][njet][nkappa][njetetamn];
bool isGenJCO1D[ndef][njet][nkappa][njetetamn];
#ifdef JETRESO
bool isRecoJCO_JER_1D[ndef][njet][nkappa][njetetamn][njecmx];
#endif

#ifdef TRACKEFF
bool isRecoJCO_trackeff_1D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTUP
bool isRecoJCO_trackpt1_1D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTDOWN
bool isRecoJCO_trackpt2_1D[ndef][njet][nkappa][njetetamn];
#endif

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
	if(recomomJCO[id][ij][ik][0]<=0 || recomomJCO[id][ij][ik][1]<=0 || recomomJCO[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif
                        if (isReconstruct) {
				for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
                                        if(recomomJCO[id][ij][ik][isrc]<=0) continue;
#endif
                                        if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#ifdef JETRESO
						isRecoJCO_JER_1D[id][ij][ik][iet][isrc]=true;
#endif
                                                if (isrc==0) {
                                                        if(ak4PFJets->size()>=2){
                                                        isRecoJCO1D[id][ij][ik][iet]=true;
							h_recovar[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#ifdef FLAV
							if(recomomJCO_gjet[id][ij][ik][isrc]>0){
								h_recovar_gjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_gjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_ujet[id][ij][ik][isrc]>0){
								h_recovar_ujet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ujet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_djet[id][ij][ik][isrc]>0){
								h_recovar_djet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_djet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_ojet[id][ij][ik][isrc]>0){
								h_recovar_ojet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ojet[id][ij][ik][isrc],weighttrg);}

							//Second-set Flavor Tagging
							if(recomomJCO_qjet[id][ij][ik][isrc]>0){
                                                                h_recovar_qjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_qjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_aqjet[id][ij][ik][isrc]>0){
                                                                h_recovar_aqjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_aqjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_aqgjet[id][ij][ik][isrc]>0){
                                                                h_recovar_aqgjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_aqgjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_aqojet[id][ij][ik][isrc]>0){
                                                                h_recovar_aqojet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_aqojet[id][ij][ik][isrc],weighttrg);}
#endif

#ifdef PREFIRE
							h_recovar_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#endif

#ifdef TRACKEFF
							if(recomomJCO_trackeff[id][ij][ik][isrc]>0){
							isRecoJCO_trackeff_1D[id][ij][ik][iet]=true;
							h_recovar_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],weighttrg);
							}
#endif

#ifdef TRACKPTUP
							if(recomomJCO_trackpt1[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt1_1D[id][ij][ik][iet]=true;
                                                        h_recovar_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],weighttrg);
                                                        }
#endif

#ifdef TRACKPTDOWN
							if(recomomJCO_trackpt2[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt2_1D[id][ij][ik][iet]=true;
                                                        h_recovar_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],weighttrg);
                                                        }
#endif
                                                                }
                                                        }
                                                else{
#ifdef JETENERGY
                                                        if(ak4PFJets->size()>=2){
                                                                h_recovarjec[id][ij][ik][iet][irecohtjec[isrc]][isrc]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
#elif defined(JETRESO)
                                                        if(ak4PFJets->size()>=2){
                                                                h_recovarres[id][ij][ik][iet][irecohtjec[isrc]][isrc]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
#endif
                                                }
                                                }
                                        }
                                }//if (isReconstruct) {
			if(isMC){
                                 for (int isrc=0; isrc<nGenReso; isrc++) {
                                        if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                                if(isrc==0){
                                                        if(genjets->size()>=2){
                                                        isGenJCO1D[id][ij][ik][iet]=true;
                                                        h_genvar[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_genvar_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
#endif

                                                                }
#ifdef LHAPDF
                                                        for (int ix=1; ix<nnnmx; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarpdf[id][ij][ik][iet][igenhtres[isrc]][ix]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*pdfwt[ix]);
                                                                        }
                                                                }
#endif

#ifdef SCALEUNC
							for (int ix=0; ix<nscale; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarscaleunc[id][ij][ik][iet][igenhtres[isrc]][ix]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*scalewt[ix]);
                                                                        }
                                                                }
#endif

                                                        }
                                                }
					if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                                if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
						//if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
						if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
						//if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif

                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
							h_RM[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_RM_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
#endif

                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_recofake_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#endif

                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_genmiss_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
#endif

                                                        }
                                                }
						else{
                                                        if(isRecoJCO1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
								h_recofake_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#endif

							}
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
								h_genmiss_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
#endif

                                                                }
							}//else{
#ifdef TRACKEFF
						if(recomomJCO_trackeff[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
						if(isRecoJCO_trackeff_1D && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_trackeff[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackeff_1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],weighttrg);
                                                        }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_trackeff[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                                }
                                                        }//else{

#endif

#ifdef TRACKPTUP
						if(recomomJCO_trackpt1[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt1_1D && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_trackpt1[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt1_1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],weighttrg);
                                                        }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_trackpt1[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                                }
                                                        }//else{
#endif

#ifdef TRACKPTDOWN
						if(recomomJCO_trackpt2[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt2_1D && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_trackpt2[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt2_1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],weighttrg);
                                                        }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_trackpt2[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                                }
                                                        }//else{
#endif
						}//if (isrc==0 && isReconstruct){
#ifdef JETRESO
                        if(isrc==0 && isReconstruct){
                                for(int ijer=0 ; ijer < njecmx ; ijer++){
                                        if( isRecoJCO_JER_1D[id][ij][ik][iet][ijer] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[ijer]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_JER[id][ij][ik][iet][igenhtres[isrc]][ijer]->Fill(GenJCO[id][ij][ik][isrc], weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_JER_1D[id][ij][ik][iet][ijer] && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                                }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_JER[id][ij][ik][iet][igenhtres[isrc]][ijer]->Fill(GenJCO[id][ij][ik][isrc], weighttrg);
                                                                }
                                                        }

                                                }
                                        }
#endif
					}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
			}//for (int ik=0; ik<nkappa; ik++){
		}//for(int ij=0; ij<njet; ij++){
	}//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){

//////////////////////////////////////////////////////////////////////////////////////////////
//2D
bool isRecoJCO2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO2D[ndef][njet][nkappa][njetetamn];
#ifdef JETRESO
bool isRecoJCO_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
#endif

#ifdef TRACKEFF
bool isRecoJCO_trackeff_2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTUP
bool isRecoJCO_trackpt1_2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTDOWN
bool isRecoJCO_trackpt2_2D[ndef][njet][nkappa][njetetamn];
#endif

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
	if(recomomJCO[id][ij][ik][0]<=0 || recomomJCO[id][ij][ik][1]<=0 || recomomJCO[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif

                        if (isReconstruct) {
                                for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
					if(recomomJCO[id][ij][ik][isrc]<=0) continue;
#endif
					if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#ifdef JETRESO
						isRecoJCO_JER_2D[id][ij][ik][iet][isrc]=true;
#endif
                                                if (isrc==0) {
							if(ak4PFJets->size()>=2){
							isRecoJCO2D[id][ij][ik][iet]=true;
							int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
							h_recovar2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
#ifdef FLAV
							//Flavor Tagging JCO
							if(recomomJCO_gjet[id][ij][ik][isrc]>0){
								int irecbin_gjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_gjet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_gjet2D[id][ij][ik][iet]->Fill(irecbin_gjet,weighttrg);}
                                                        if(recomomJCO_ujet[id][ij][ik][isrc]>0){
								int irecbin_ujet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ujet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_ujet2D[id][ij][ik][iet]->Fill(irecbin_ujet,weighttrg);}
                                                        if(recomomJCO_djet[id][ij][ik][isrc]>0){
								int irecbin_djet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_djet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_djet2D[id][ij][ik][iet]->Fill(irecbin_djet,weighttrg);}
                                                        if(recomomJCO_ojet[id][ij][ik][isrc]>0){
								int irecbin_ojet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ojet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_ojet2D[id][ij][ik][iet]->Fill(irecbin_ojet,weighttrg);}

							//Second-set Flavor Tagging
							if(recomomJCO_qjet[id][ij][ik][isrc]>0){
                                                                int irecbin_qjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_qjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_qjet2D[id][ij][ik][iet]->Fill(irecbin_qjet,weighttrg);}
							if(recomomJCO_aqjet[id][ij][ik][isrc]>0){
                                                                int irecbin_aqjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_aqjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_aqjet2D[id][ij][ik][iet]->Fill(irecbin_aqjet,weighttrg);}
							if(recomomJCO_aqgjet[id][ij][ik][isrc]>0){
                                                                int irecbin_aqgjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_aqgjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_aqgjet2D[id][ij][ik][iet]->Fill(irecbin_aqgjet,weighttrg);}
							if(recomomJCO_aqojet[id][ij][ik][isrc]>0){
                                                                int irecbin_aqojet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_aqojet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_aqojet2D[id][ij][ik][iet]->Fill(irecbin_aqojet,weighttrg);}
#endif

#ifdef PREFIRE
                                                        h_recovar_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
#endif


#ifdef TRACKEFF				
							if(recomomJCO_trackeff[id][ij][ik][isrc]>0){
							isRecoJCO_trackeff_2D[id][ij][ik][iet]=true;
							int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
							h_recovar_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff,weighttrg);			
							}
#endif

#ifdef TRACKPTUP                         
                                                        if(recomomJCO_trackpt1[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt1_2D[id][ij][ik][iet]=true;
                                                        int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1,weighttrg);
                                                        }
#endif

#ifdef TRACKPTDOWN                         
                                                        if(recomomJCO_trackpt2[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt2_2D[id][ij][ik][iet]=true;
                                                        int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2,weighttrg);
                                                        }
#endif
								}
							}
						else{
#ifdef JETENERGY
							if(ak4PFJets->size()>=2){
								int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        	h_recovarjec2D[id][ij][ik][iet][isrc]->Fill(irecbin, weighttrg);
							}
#elif defined(JETRESO)
							if(ak4PFJets->size()>=2){
                                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovarres2D[id][ij][ik][iet][isrc]->Fill(irecbin, weighttrg);
                                                        }
#endif
						}

					}//if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
				}//for (int isrc=0; isrc<njecmx; isrc++) {
			}//if (isReconstruct) {
			if(isMC){
				 for (int isrc=0; isrc<nGenReso; isrc++) {
					if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
						if(isrc==0){
							if(genjets->size()>=2){
							isGenJCO2D[id][ij][ik][iet]=true;
							int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genvar2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);

#ifdef PREFIRE
                                                        h_genvar_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
#endif

							}

#ifdef LHAPDF
                				        for (int ix=1; ix<nnnmx; ix++) {
		                        			if (genjets->size()>=2) {
                        						int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                        						h_genvarpdf2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*pdfwt[ix]);
                                                                    	}
                        					}
#endif

#ifdef SCALEUNC
							for (int ix=0; ix<nscale; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarscaleunc2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*scalewt[ix]);
                                                                        }
                                                                }
#endif

							}//if(isrc==0){
						}//if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
					if (isrc==0 && isReconstruct){
#ifdef MATCHING
						if( isRecoJCO2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
						if( isRecoJCO2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
							int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
							int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_RM2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);

#ifdef PREFIRE
							h_RM_prefire2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);
#endif

							}
						else if(ak4PFJets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);

#ifdef PREFIRE
							h_recofake_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
#endif

							}
						else if(genjets->size()>=2){
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);

#ifdef PREFIRE
							h_genmiss_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
#endif

							}
						}
						else{
							if(isRecoJCO2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
								int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        	h_recofake2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);

#ifdef PREFIRE
								h_recofake_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
#endif

								}
							if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
								int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
	                                                        h_genmiss2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);

#ifdef PREFIRE
								h_genmiss_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
#endif

								}												
							}
#ifdef TRACKEFF
						if(recomomJCO_trackeff[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
						if(isRecoJCO_trackeff_2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        int igenbin_trackeff = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff,igenbin_trackeff,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin_trackeff = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Fill(igenbin_trackeff, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackeff_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recofake_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin_trackeff = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_trackeff2D[id][ij][ik][iet]->Fill(igenbin_trackeff, weighttrg);
                                                                }
                                                        }
#endif

#ifdef TRACKPTUP
                                                if(recomomJCO_trackpt1[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt1_2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        int igenbin_trackpt1 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1,igenbin_trackpt1,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin_trackpt1 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin_trackpt1, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt1_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recofake_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin_trackpt1 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin_trackpt1, weighttrg);
                                                                }
                                                        }
#endif

#ifdef TRACKPTDOWN
                                                if(recomomJCO_trackpt2[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt2_2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        int igenbin_trackpt2 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2,igenbin_trackpt2,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin_trackpt2 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin_trackpt2, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt2_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recofake_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin_trackpt2 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin_trackpt2, weighttrg);
                                                                }
                                                        }
#endif
						}//if (isrc==0 && isReconstruct){
#ifdef JETRESO
			if(isrc==0 && isReconstruct){
				for(int ijer=0 ; ijer < njecmx ; ijer++){
					if( isRecoJCO_JER_2D[id][ij][ik][iet][ijer] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[ijer]);
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_RM_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin,igenbin,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[ijer]);
							h_recofake_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_genmiss_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_JER_2D[id][ij][ik][iet][ijer] && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[ijer]);
								h_recofake_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
								h_genmiss_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin, weighttrg);
                                                                }
                                                        }
		
						}//for(int ijer=0 ; ijer < njecmx ; ijer++){
					}//if(isrc==0 && isReconstruct){
#endif
					}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
			}//for (int ik=0; ik<nkappa; ik++){
		}//for(int ij=0; ij<njet; ij++){
	}//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){


//cout <<"-------------"<<endl;
//cout<<"Event wt : "<<weighttrg<<endl;
	//if (nevt%1000==1) { std::cout <<"nevt "<<nevt<<" naa "<<naa<<" nbb "<<nbb<<" ncc "<<ncc<< std::endl;}
      	//if (nevt%1000==1) { std::cout <<"Reco "<< Reco << " Gen " <<Gen<< " RM " <<RM <<std::endl;}
      	//if(nevt==100){cout <<igenht <<endl;}
      	}//cout <<"END EVENT"<< endl;

// ------------ method called once each job just before starting event loop  ------------
void 
QCDEventShape::beginJob() {
//t1=clock();
  nevt = 0;
  if (isMC) {
    double dattot[nHLTmx]={0};
    double mctot=0;
    for (int ij=0; ij<npileupmx; ij++) {
      for (int jk=0; jk<nHLTmx; jk++) {
	 dattot[jk] +=datpileup[jk][ij];
	}
         mctot +=mcpileup[ij];
        }

      for (int ij=0; ij<npileupmx; ij++) {
        mcpileup[ij] /=max(1.e-6,mctot);
           for (int jk=0; jk<nHLTmx; jk++) {
                datpileup[jk][ij] /=max(1.e-6,dattot[jk]);
                rat_pileup[jk][ij] =  datpileup[jk][ij]/mcpileup[ij];
                }
        }
  }

#ifdef JETENERGY
  for (int isrc = 0; isrc < nsrc; isrc++) {
    const char *name = srcnames[isrc];
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL17_RunF_V5_DATA_UncertaintySources_AK4PFchs.txt", name);  // data chnage eras for different era
    JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL17_V5_MC_UncertaintySources_AK4PFchs.txt", name);   // for mc
    JetCorrectionUncertainty *unc = new JetCorrectionUncertainty(*p);
    //vsrc[isrc] = unc;vsrc.push_back(unc);
    vsrc.push_back(unc);
    }
#endif  

//cout << "Write test 34 = ok " << endl;
}

// ------------ method called once each job just after ending the event loop  ------------
void 
QCDEventShape::endJob() 
{
//cout<<"naa: "<<naa<<endl;
   TUnfoldBinng2D->cd(); 
  //TUnfoldBinning Jet Charge
	for(int id=0; id<ndef; id++){
		for(int ij=0; ij<njet; ij++){
			for(int ik=0; ik<nkappa; ik++){
				for (int iet=0; iet<njetetamn; iet++) {
					h_recovar2D[id][ij][ik][iet]->Write();
					h_genvar2D[id][ij][ik][iet]->Write();
					h_recofake2D[id][ij][ik][iet]->Write();
					h_genmiss2D[id][ij][ik][iet]->Write();
					h_RM2D[id][ij][ik][iet]->Write();

#ifdef FLAV
					h_recovar_gjet2D[id][ij][ik][iet]->Write();
					h_recovar_ujet2D[id][ij][ik][iet]->Write();
					h_recovar_djet2D[id][ij][ik][iet]->Write();
					h_recovar_ojet2D[id][ij][ik][iet]->Write();

					//Second-Set Flavor Tagging
					h_recovar_qjet2D[id][ij][ik][iet]->Write();
					h_recovar_aqjet2D[id][ij][ik][iet]->Write();
					h_recovar_aqgjet2D[id][ij][ik][iet]->Write();
					h_recovar_aqojet2D[id][ij][ik][iet]->Write();
#endif
	
#ifdef  LHAPDF
            				for (int ix=1; ix<nnnmx; ix++) {h_genvarpdf2D[id][ij][ik][iet][ix]->Write();}
#endif

#ifdef  SCALEUNC
                                        for (int ix=0; ix<nscale; ix++) {h_genvarscaleunc2D[id][ij][ik][iet][ix]->Write();}
#endif

#ifdef  JETENERGY
            				for (int ix=1; ix<njecmx; ix++) {h_recovarjec2D[id][ij][ik][iet][ix]->Write();}
#elif defined(JETRESO)
            				for (int ix=0; ix<njecmx; ix++ ) {
             					h_recovarres2D[id][ij][ik][iet][ix]->Write();
             					h_RM_JER_2D[id][ij][ik][iet][ix]->Write();
             					h_recofake_JER_2D[id][ij][ik][iet][ix]->Write();
             					h_genmiss_JER_2D[id][ij][ik][iet][ix]->Write();
         					}
#endif

#ifdef PREFIRE
					h_recovar_prefire2D[id][ij][ik][iet]->Write();
                                        h_genvar_prefire2D[id][ij][ik][iet]->Write();
                                        h_recofake_prefire2D[id][ij][ik][iet]->Write();
                                        h_genmiss_prefire2D[id][ij][ik][iet]->Write();
                                        h_RM_prefire2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKEFF
					h_recovar_trackeff2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackeff2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Write();
                                        h_RM_trackeff2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKPTUP
                                        h_recovar_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_RM_trackpt1_2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKPTDOWN
                                        h_recovar_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_RM_trackpt2_2D[id][ij][ik][iet]->Write();
#endif
					}
				}
			}
		}
}

// ------------ method called when starting to processes a run  ------------

void 
QCDEventShape::beginRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
// Initialize hltConfig

#ifdef TRIGGER

// cout << "Write test 4 = ok " << endl;
  bool changed(true);
  if (hltPrescaleProvider_.init(iRun,iSetup,theHLTTag.c_str(),changed)) {
  HLTConfigProvider const&  hltConfig = hltPrescaleProvider_.hltConfigProvider();
  hltConfig.dump("Triggers");
  hltConfig.dump("PrescaleTable");

    for (unsigned int ij=0; ij<nHLTmx; ij++) {
      l1pres[ij] = hltpres[ij]=-7;
      }
	} 
	else {
         	}

#endif
 
  std::cout<<" End of QCDEventShape::beginRun"<<std::endl; //"nevt "<<nevt<<" naa "<<naa<<" nbb "<<nbb<<" ncc "<<ncc<< std::endl;
}


// ------------ method called when ending the processing of a run  ------------
/*
void 
QCDEventShape::endRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
std::cout<<" End of QCDEventShape::beginRun"<<std::endl;
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void 
QCDEventShape::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{


}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void 
QCDEventShape::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
QCDEventShape::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  //Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

double PhiInRange(const double& phi) {
      double phiout = phi;
      
      if( phiout > 2*M_PI || phiout < -2*M_PI) {
	phiout = fmod( phiout, 2*M_PI);
      }
      if (phiout <= -M_PI) phiout += 2*M_PI;
      else if (phiout >  M_PI) phiout -= 2*M_PI;
      
      return phiout;
}

template <class T, class U>
double deltaR(const T& t, const U& u) {
return sqrt(pow(t.eta()-u.eta(),2) +pow(PhiInRange(t.phi()-u.phi()),2));
}

// Default jet charge observable NOT USED
double JetCharge1(int charge, double candspt, double jpt, double k) {
	double Q1 = 0.0;
	//double j1 = 0.0;
	Q1 +=1.0*( charge*(pow(candspt,k)));
	//j1 = Q1/pow(jpt,k);
	return Q1/pow(jpt,k);
	//return j1;
}

// For default definition Q
double candsmom(int charge, double candspt, double k){	
	//double q = 0.0;
	double q = ( charge*(pow(candspt,k)));
	return q;
}
/*
double candsmom2(double p, double k) {
    double result = pow(p, k);
    	if (p > 0 && !isnan(result) && !isinf(result)) {
    		return result;
    	          } else {continue;}
}
*/ 
// For longitudinal definition Q(L)
double dotproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k) {
	double dot = 0.0;
	//double dotresult =0.0;
	dot = (pow((((candspx*jpx) + (candspy*jpy) + (candspz*jpz))/jpt),k));
	//dotresult = (charge*(pow(dot,k)));
	return dot;
	//return dotresult;
}

// For transverse definition Q(T)
double crossproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k){
	double cross = 0.0;
	//double crossresult =0.0;
	cross = (pow(((sqrt((pow(((candspy*jpz) - (candspz*jpy)),2)) + (pow(((candspz*jpx) - (candspx*jpz)),2)) + (pow(((candspx*jpy) - (candspy*jpx)),2))))/jpt),k));
	//crossreult = (charge*(pow(cross,k)));
	return cross;
	//return crossresult;
}

double dotProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k) {
    double dotProduct = v1.dot(v2);
    double magV2 = v2.mag();
    double dotOverMag = dotProduct / magV2;
    double result = std::pow(dotOverMag, k);
    return result;
}

double crossProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k) {
    Hep3Vector crossProduct = v1.cross(v2);
    double magV2 = v2.mag();
    double crossOverMag = crossProduct.mag() / magV2;
    double result = std::pow(crossOverMag, k);
    return result;
}

//define this as a plug-in
DEFINE_FWK_MODULE(QCDEventShape);
