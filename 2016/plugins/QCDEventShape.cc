// -*- C++ -*-
//
// Package:    Test/QCDEventShape
// Class:      QCDEventShape
// 
/**\class QCDEventShape QCDEventShape.cc Test/QCDEventShape/plugins/QCDEventShape.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Soumyadip Barman
//         Created:  Tue, 02 Feb 2021 10:24:21 GMT
//
//


// system include files

#define DIJETAVE 

////for data
//#define JETENERGY
//#define TRIGGER

////for Madgraph
#define LHAPDF
#define JETRESO
#define TRIGGER
#define MATCHING

////for Pythia8 & Herwig7
//#define JETRESO
//#define TRIGGER
//#define MATCHING

////MC Flavor Tagging 
#define FLAV

////For Flat
//#define FLAT

////For GenParticle only
//#define GENPART

//#define LUMIWEIGHT
//#define MERGE_BIN

//#define TRACKSYS

//For L1 PreFiring
#define PREFIRE

//For PileUp
#define PUNOMI
//#define PUUP
//#define PUDOWN

//For Hybrid JER
#define STOCHASTIC

//For Track Reconstruction Efficiency
#define TRACKEFF

//For Track pT Resolution
#define TRACKPTUP
#define TRACKPTDOWN

//Scale Variation for PY8Flat
#define SCALEUNC


#include <memory>
#include <map>
#include <string>
#include <vector>
#include "TCanvas.h"
#include "TFormula.h"
#include "TFile.h"
#include "TH1F.h"
#include "TTree.h"
#include <cmath>
#include "TMath.h"
#include "CLHEP/Vector/LorentzVector.h"
#include "TRandom.h"
#include "TUnfoldBinning.h"
#include "TUnfoldDensity.h"
#include "TUnfoldBinningXML.h"
#include "TUnfold.h"
#include "TUnfoldSys.h"

#include "TH2F.h"
#include "TProfile.h"
#include <fstream>
#include <iostream>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include <time.h>
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "DataFormats/PatCandidates/interface/Electron.h"
#include "DataFormats/PatCandidates/interface/Photon.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/PatCandidates/interface/Tau.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/MET.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/PatCandidates/interface/PackedGenParticle.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "DataFormats/Math/interface/deltaR.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "L1Trigger/GlobalTriggerAnalyzer/interface/L1GtTrigReport.h"
#include "CondFormats/L1TObjects/interface/L1GtTriggerMenu.h"
#include "CondFormats/DataRecord/interface/L1GtTriggerMenuRcd.h"
#include "L1Trigger/GlobalTriggerAnalyzer/interface/L1GtTrigReportEntry.h"
#include "CondFormats/DataRecord/interface/L1GtStableParametersRcd.h"
#include "DataFormats/PatCandidates/interface/TriggerObjectStandAlone.h"
#include "DataFormats/PatCandidates/interface/PackedTriggerPrescales.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"

#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "SimDataFormats/GeneratorProducts/interface/PdfInfo.h"
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/LHERunInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h"

#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "DataFormats/HLTReco/interface/TriggerEvent.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
//#include "FWCore/Framework/interface/TriggerNames.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "DataFormats/Luminosity/interface/LumiDetails.h"

#include "Test/QCDEventShape/plugins/EventShape_vector.h" 


#include "DataFormats/Common/interface/View.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/TrackReco/interface/TrackBase.h"
#include "DataFormats/BeamSpot/interface/BeamSpot.h"
#include "CommonTools/Statistics/interface/ChiSquaredProbability.h"

#include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"

//#include "HLTrigger/HLTcore/interface/HLTPrescaleProvider.h"
#include "JetMETCorrections/Modules/interface/JetResolution.h"
#include "CondFormats/JetMETObjects/interface/JetResolutionObject.h"
#include <JetMETCorrections/Modules/interface/JetResolution.h>
#include <FWCore/Framework/interface/EventSetup.h>
#include <FWCore/Framework/interface/ESHandle.h>
#include <CondFormats/DataRecord/interface/JetResolutionRcd.h>
#include <CondFormats/DataRecord/interface/JetResolutionScaleFactorRcd.h>
#include "FWCore/Utilities/interface/typelookup.h"
#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
#include "CondFormats/JetMETObjects/interface/JetCorrectionUncertainty.h"
#include "HLTrigger/HLTcore/interface/HLTPrescaleProvider.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
#include "PhysicsTools/Utilities/interface/LumiReWeighting.h"
#include "CLHEP/Vector/ThreeVector.h"

using namespace edm;
using namespace reco;
using namespace std;
using namespace CLHEP;
using namespace trigger;
using namespace math;

static const int nhist=10; 
static const int nHLTmx=9; //10 triggers
static const int ngenPT=5;  // event PT bins : merged two trigger phase-space into one

const int ndef=3; // 3 JCO definition
const int njet=2; // 2 Jets 
const int nkappa=10; // 10 kappas
const int range=200; // bin-edge range

const char* jcodef[ndef]={"D","L","T"}; // 3 JCO definitions
double jetname[njet]={1,2};             // 2 Jets
double kappa[nkappa]={0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0}; // 10 kappa values

double recoJetpT, recojet1_pt, recojet2_pt, genrecojet1_pt, genrecojet2_pt;

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Date_26Jul2023 : Fixed Binning
double recobins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};

double genbins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};

double recomin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double recomax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};

double genmin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double genmax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Date_02Jun2023 : Some bins and range modifed by hand as there are some bins with zero entries at reco level
double nrecobins[ndef][njet][nkappa]={{{40,32,24,20,16,16,24,20,20,16},{52,36,32,28,24,20,24,24,20,16}},{{24,24,20,20,20,20,20,16,16,16},{24,24,20,20,20,24,24,20,20,16}},{{24,24,20,16,20,20,16,16,16,16},{24,24,24,20,24,20,20,20,20,20}}};

double ngenbins[ndef][njet][nkappa]={{{20,16,12,10,8,8,12,10,10,8},{26,18,16,14,12,10,12,12,10,8}},{{12,12,10,10,10,10,10,8,8,8},{12,12,10,10,10,12,12,10,10,8}},{{12,12,10,8,10,10,8,8,8,8},{12,12,12,10,12,10,10,10,10,10}}};

double recorng[ndef][njet][nkappa][range]={{{{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//40
{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//32
{-4.00,-3.33,-2.67,-2.27,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.27,2.67,3.33,4.00},//24
{-2.93,-2.40,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.40,2.93},//20
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13},//16
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24 done
{-1.33,-1.20,-1.07,-0.94,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,0.94,1.07,1.20,1.33}, //20 done
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-3.73,-3.60,-3.47,-3.20,-2.93,-2.80,-2.67,-2.53,-2.40,-2.27,-2.13,-2.00,-1.87,-1.73,-1.60,-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47,1.60,1.73,1.87,2.00,2.13,2.27,2.40,2.53,2.67,2.80,2.93,3.20,3.47,3.60,3.73},//52
{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//36
{-3.60,-3.27,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.27,3.60},//32 done
{-2.67,-2.40,-2.13,-1.86,-1.60,-1.33,-1.07,-0.87,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.87,1.07,1.33,1.60,1.86,2.13,2.40,2.67},//28 done
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24 done
{-1.87,-1.60,-1.33,-1.06,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,1.06,1.33,1.60,1.87},//20 done
{-1.47,-1.33,-1.20,-1.06,-0.93,-0.80,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.80,0.93,1.06,1.20,1.33,1.47}, //24 done
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24
{-1.20,-1.13,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.13,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done 
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.67,0.80,0.93,1.07},//24
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done
{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80},//20 done
{-0.87,-0.77,-0.67,-0.54,-0.40,-0.30,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.30,0.40,0.54,0.67,0.77,0.87}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done
{-1.07,-0.87,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.87,1.07},//24
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.80,1.07},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00}},//16

{{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.67,0.80,0.93,1.07}, //24
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-0.87,-0.80,-0.73,-0.60,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.60,0.73,0.80,0.87}, //24 done
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.83,-0.67,-0.57,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.57,0.67,0.83,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00}}}};//20


double genrng[ndef][njet][nkappa][range]={{{{-3.73,-3.20,-2.67,-2.13,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.13,2.67,3.20,3.73},
{-3.73,-3.20,-2.67,-2.13,-1.60,-1.07,-0.53,-0.27,0.00,0.27,0.53,1.07,1.60,2.13,2.67,3.20,3.73},
{-4.00,-2.67,-1.87,-1.33,-0.80,-0.27,0.00,0.27,0.80,1.33,1.87,2.67,4.00},
{-2.93,-1.87,-1.33,-0.80,-0.27,0.00,0.27,0.80,1.33,1.87,2.93},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.13,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.13},
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47}, //12 done
{-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33},//10 done
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-3.73,-3.47,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.47,3.73},
{-3.73,-3.20,-2.67,-2.13,-1.60,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.60,2.13,2.67,3.20,3.73},
{-3.60,-2.93,-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40,2.93,3.60}, //16 done
{-2.67,-2.13,-1.60,-1.07,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,1.07,1.60,2.13,2.67},//14 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//12 done
{-1.87,-1.33,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.33,1.87},//10 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},//12 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},
{-1.20,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73},//12 done
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73}, //12 done
{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80},//10 done
{-0.87,-0.67,-0.40,-0.20,-0.07,0.00,0.07,0.20,0.40,0.67,0.87},//10 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //10 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73}, //12 done
{-1.07,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,1.07},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,1.07},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00}},

{{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80},//12 done
{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80}, //12 done
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-0.87,-0.73,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.73,0.87}, //12 done
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.67,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.67,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00}}}};
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Date_26Jul2023 : Some bins and range modifed by hand as there are some bins with zero entries at reco level : bins changed for lower kappa values
double nrecobins[ndef][njet][nkappa]={{{28,20,20,16,16,16,24,20,20,16},{28,24,24,24,24,20,24,24,20,16}},{{20,20,20,20,20,20,20,16,16,16},{20,20,20,20,20,24,24,20,20,16}},{{20,20,20,16,20,20,16,16,16,16},{20,20,20,20,24,20,20,20,20,20}}};

double ngenbins[ndef][njet][nkappa]={{{14,10,10,8,8,8,12,10,10,8},{14,12,12,12,12,10,12,12,10,8}},{{10,10,10,10,10,10,10,8,8,8},{10,10,10,10,10,12,12,10,10,8}},{{10,10,10,8,10,10,8,8,8,8},{10,10,10,10,12,10,10,10,10,10}}};

double recorng[ndef][njet][nkappa][range]={{{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},//28
{-3.33,-2.83,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,-0.17,0.00,0.17,0.33,0.67,1.00,1.33,1.67,2.00,2.33,2.83,3.33},//20
{-3.33,-2.83,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,-0.17,0.00,0.17,0.33,0.67,1.00,1.33,1.67,2.00,2.33,2.83,3.33},//20
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13},//16
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24 done
{-1.33,-1.20,-1.07,-0.94,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,0.94,1.07,1.20,1.33}, //20 done
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},//28
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24 done
{-1.87,-1.60,-1.33,-1.06,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,1.06,1.33,1.60,1.87},//20 done
{-1.47,-1.33,-1.20,-1.06,-0.93,-0.80,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.80,0.93,1.06,1.20,1.33,1.47}, //24 done
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24
{-1.20,-1.13,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.13,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20 done 
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80},//20 done
{-0.87,-0.77,-0.67,-0.54,-0.40,-0.30,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.30,0.40,0.54,0.67,0.77,0.87}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07}, //20 done
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.80,1.07},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00}},//16

{{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-0.87,-0.80,-0.73,-0.60,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.60,0.73,0.80,0.87}, //24 done
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.83,-0.67,-0.57,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.57,0.67,0.83,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00}}}};//20


double genrng[ndef][njet][nkappa][range]={{{{-3.67,-3.00,-2.33,-1.67,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.67,2.33,3.00,3.67},
{-3.33,-2.33,-1.67,-1.00,-0.33,0.00,0.33,1.00,1.67,2.33,3.33},
{-3.33,-2.33,-1.67,-1.00,-0.33,0.00,0.33,1.00,1.67,2.33,3.33},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.13,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.13},
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47}, //12 done
{-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33},//10 done
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-3.67,-3.00,-2.33,-1.67,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.67,2.33,3.00,3.67},
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40}, //16 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//14 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//12 done
{-1.87,-1.33,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.33,1.87},//10 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},//12 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},
{-1.20,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},//12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80},//10 done
{-0.87,-0.67,-0.40,-0.20,-0.07,0.00,0.07,0.20,0.40,0.67,0.87},//10 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //10 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07}, //12 done
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,1.07},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00}},

{{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},//12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-0.87,-0.73,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.73,0.87}, //12 done
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.67,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.67,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00}}}};

//Binning for plotting all kappa in one canvas
double recobinskappa[ndef][njet][nkappa]={{{30,30,30,30,30,30,30,30,30,30},{30,30,30,30,30,30,30,30,30,30}},
                                        {{20,20,20,20,20,20,20,20,20,20},{20,20,20,20,20,20,20,20,20,20}},
                                        {{20,20,20,20,20,20,20,20,20,20},{20,20,20,20,20,20,20,20,20,20}}};
/*
double genbins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};
*/
double recominkappa[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0},{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0}},
                                        {{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0},{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0}}};

double recomaxkappa[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0},{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0}},
                                        {{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0},{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0}}};
/*
double genmin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double genmax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};
*/
//----------------------------------------PT Binning For 2D unfold 
//double recohtbins[nHLTmx+1] = {76, 101, 164, 232, 295, 373, 449, 507, 612, 3000.0}; // 10 trigger phase-space
//double genhtbins[ngenPT+1] = {76, 164, 295, 449, 612, 3000.0};   // 5 PT binning

double recohtbins[nHLTmx+1] = {92, 119, 185, 251, 319, 388, 467, 518, 579, 3000.0};  // 2017UL Trigger turn-on
double genhtbins[ngenPT+1] = {92, 185, 319, 467, 579, 3000.0};  //2017 pT binning
//double genhtbins[ngenPT+1] = {100, 400, 700, 1000, 1400, 3000.0};

/*
#ifdef MERGE_BIN
double recohtbins[nHLTmx+1] = {83, 109, 176, 247, 318, 387, 477, 573, 3000.0}; //For 2018
#else
double recohtbins[nHLTmx+1] = {66, 95, 155, 227, 286, 350, 444, 557, 3000.0}; // For 2016 Trigger
#endif
*/

//---------------------------------------------Lumi weight
/*
int iera = 2;// 0 for Run 2016, 1 for Run 2017 , 2 for Run 2018
double lumi[3] = {36330, 41480, 59830};
double total_lumi = lumi[0]+lumi[1]+lumi[2];
double lumiwtt = lumi[iera]/total_lumi;
*/
//-------------------------------------------

const int npileupmx=99; //49;
double rat_pileup[nHLTmx][npileupmx]={{0}};
//clock_t t1,t2;

//UL PU
double mcpileup[npileupmx] = {1.00402e-05, 5.76499e-05, 7.37891e-05, 0.000110933, 0.000158858, 0.000368637, 0.000893114, 0.00189701, 0.0035888, 0.00636053, 0.0104174, 0.0158123, 0.0223786, 0.0299187, 0.0380276, 0.0454314, 0.0511181, 0.0547435, 0.0567906, 0.0577145, 0.0578177, 0.0571252, 0.0555457, 0.0531344, 0.0501519, 0.0466816, 0.0429245, 0.0389567, 0.0348507, 0.0307357, 0.0267712, 0.022972, 0.0193389, 0.0159603, 0.0129311, 0.0102889, 0.00798783, 0.00606652, 0.00447821, 0.0032159, 0.00224504, 0.00151447, 0.000981184, 0.00060967, 0.000362193, 0.000211573, 0.000119152, 6.49134e-05, 3.57796e-05, 1.99044e-05, 1.13639e-05, 6.49624e-06, 3.96626e-06, 2.3791e-06, 1.50997e-06, 1.09817e-06, 7.31299e-07, 6.10399e-07, 3.74846e-07, 2.65177e-07, 2.01924e-07, 1.39348e-07, 8.326e-08, 6.04932e-08, 6.52537e-08, 5.90575e-08, 2.29162e-08, 1.97295e-08, 1.77311e-08, 3.57548e-09, 1.3504e-09, 8.50071e-09, 5.02792e-09, 4.93737e-10, 8.1392e-10, 5.62779e-09, 5.15141e-10, 8.21677e-10, 0, 1.49167e-09, 8.43518e-09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

//HLT Path PileUP
#ifdef PUNOMI
double datpileup[nHLTmx][npileupmx] = {{5.2228e-06, 4.78698e-05, 0.00031893, 0.00015203, 0.000324416, 0.00151584, 0.00516684, 0.00772539, 0.00854466, 0.0114081, 0.0168755, 0.0239617, 0.0320735, 0.0408648, 0.0499775, 0.0580075, 0.0630094, 0.0644992, 0.0632582, 0.0603569, 0.0568499, 0.0534058, 0.0500768, 0.0465926, 0.042772, 0.0386465, 0.0343659, 0.0301007, 0.0260019, 0.0221828, 0.0187114, 0.0156125, 0.0128799, 0.0104923, 0.00842414, 0.00665175, 0.00515313, 0.00390718, 0.0028921, 0.0020846, 0.0014596, 0.000990586, 0.000650469, 0.000412764, 0.000252968, 0.000149756, 8.57179e-05, 4.75242e-05, 2.55932e-05, 1.34397e-05, 6.91719e-06, 3.51216e-06, 1.77333e-06, 8.98744e-07, 4.61913e-07, 2.43173e-07, 1.32199e-07, 7.45422e-08, 4.35795e-08, 2.62928e-08, 1.6251e-08, 1.02079e-08, 6.46951e-09, 4.11319e-09, 2.61233e-09, 1.65257e-09, 1.03933e-09, 6.49073e-10, 4.02229e-10, 2.4724e-10, 1.50709e-10, 9.10956e-11, 5.45988e-11, 3.24493e-11, 1.91242e-11, 1.11773e-11, 6.47884e-12, 3.72464e-12, 2.12385e-12, 1.20126e-12, 6.73976e-13, 3.75116e-13, 2.07118e-13, 1.13453e-13, 6.16558e-14, 3.32436e-14, 1.7784e-14, 9.43963e-15, 4.9716e-15, 2.59815e-15, 1.34733e-15, 6.93321e-16, 3.5404e-16, 1.79404e-16, 9.02143e-17, 4.50171e-17, 2.22908e-17, 1.09521e-17, 5.33933e-18},
{4.89492e-06, 4.76567e-05, 0.000263877, 0.000188908, 0.000418299, 0.00171571, 0.00593946, 0.0112904, 0.0168787, 0.0240734, 0.0314472, 0.0370343, 0.0411121, 0.0454532, 0.0513282, 0.0576159, 0.0618456, 0.0629171, 0.0613305, 0.0581588, 0.0543907, 0.05055, 0.0466628, 0.0425628, 0.0381995, 0.0337011, 0.0292685, 0.0250796, 0.0212552, 0.0178546, 0.0148856, 0.0123194, 0.0101101, 0.0082103, 0.00658029, 0.00519021, 0.00401753, 0.00304362, 0.00225084, 0.0016208, 0.00113373, 0.000768708, 0.000504346, 0.0003198, 0.000195861, 0.000115874, 6.62793e-05, 3.67184e-05, 1.97554e-05, 1.03619e-05, 5.32531e-06, 2.69906e-06, 1.35991e-06, 6.87579e-07, 3.52505e-07, 1.85139e-07, 1.00455e-07, 5.65722e-08, 3.3059e-08, 1.99515e-08, 1.23426e-08, 7.76261e-09, 4.92681e-09, 3.13702e-09, 1.99524e-09, 1.26392e-09, 7.95901e-10, 4.97621e-10, 3.08696e-10, 1.89927e-10, 1.15872e-10, 7.00926e-11, 4.20403e-11, 2.50018e-11, 1.47439e-11, 8.62222e-12, 5.00056e-12, 2.87634e-12, 1.64102e-12, 9.28672e-13, 5.21328e-13, 2.90323e-13, 1.60395e-13, 8.7914e-14, 4.78078e-14, 2.57945e-14, 1.38088e-14, 7.33499e-15, 3.86607e-15, 2.02199e-15, 1.04938e-15, 5.40438e-16, 2.76197e-16, 1.40073e-16, 7.04936e-17, 3.52045e-17, 1.74457e-17, 8.57807e-18, 4.185e-18},
{1.33191e-05, 8.41562e-05, 0.000336949, 0.000247009, 0.000854888, 0.00689466, 0.0245049, 0.0281708, 0.0163041, 0.0147222, 0.0200221, 0.0265182, 0.0330448, 0.0396851, 0.0467685, 0.0533749, 0.0577262, 0.0592521, 0.0585386, 0.0564231, 0.0537013, 0.0508362, 0.0478055, 0.0443781, 0.0404634, 0.0361914, 0.0317973, 0.0275112, 0.0235081, 0.0198888, 0.0166845, 0.0138762, 0.0114237, 0.00928747, 0.00743786, 0.00585427, 0.00451961, 0.00341603, 0.00252284, 0.00181673, 0.00127275, 0.000865498, 0.000570098, 0.000363126, 0.00022341, 0.00013271, 7.61446e-05, 4.22573e-05, 2.27382e-05, 1.19075e-05, 6.10035e-06, 3.07864e-06, 1.54393e-06, 7.77484e-07, 3.97689e-07, 2.08932e-07, 1.13713e-07, 6.43742e-08, 3.78546e-08, 2.29865e-08, 1.42947e-08, 9.02658e-09, 5.74521e-09, 3.66472e-09, 2.33321e-09, 1.47862e-09, 9.31075e-10, 5.8194e-10, 3.60809e-10, 2.21846e-10, 1.35255e-10, 8.17682e-11, 4.90207e-11, 2.91468e-11, 1.71902e-11, 1.00581e-11, 5.83928e-12, 3.36418e-12, 1.92369e-12, 1.09188e-12, 6.15244e-13, 3.44179e-13, 1.91168e-13, 1.05427e-13, 5.77308e-14, 3.1389e-14, 1.69454e-14, 9.08272e-15, 4.83332e-15, 2.55336e-15, 1.339e-15, 6.96971e-16, 3.60058e-16, 1.84589e-16, 9.39012e-17, 4.73931e-17, 2.37293e-17, 1.17847e-17, 5.80466e-18},
{4.16221e-06, 4.20045e-05, 0.000224165, 0.000160465, 0.000332433, 0.00117499, 0.00383611, 0.00717808, 0.0107503, 0.0159182, 0.0226394, 0.0297432, 0.0367484, 0.0439936, 0.0518253, 0.0591955, 0.0641381, 0.0659295, 0.065037, 0.0623062, 0.0586976, 0.0548553, 0.0508768, 0.0465898, 0.041915, 0.0369678, 0.0319664, 0.0271353, 0.02266, 0.0186647, 0.0152061, 0.0122793, 0.00983689, 0.00781234, 0.00613877, 0.00475928, 0.00362906, 0.00271327, 0.00198322, 0.0014134, 0.000979767, 0.000659182, 0.00042967, 0.00027098, 0.000165231, 9.74029e-05, 5.55513e-05, 3.07016e-05, 1.6486e-05, 8.63383e-06, 4.43255e-06, 2.2456e-06, 1.13185e-06, 5.73032e-07, 2.94462e-07, 1.55134e-07, 8.44596e-08, 4.77086e-08, 2.79384e-08, 1.68768e-08, 1.04382e-08, 6.55754e-09, 4.15476e-09, 2.63991e-09, 1.67527e-09, 1.05878e-09, 6.65204e-10, 4.14986e-10, 2.5689e-10, 1.57737e-10, 9.60534e-11, 5.8004e-11, 3.47353e-11, 2.06288e-11, 1.21506e-11, 7.09863e-12, 4.11381e-12, 2.36506e-12, 1.34898e-12, 7.63414e-13, 4.28685e-13, 2.38871e-13, 1.32086e-13, 7.24827e-14, 3.94739e-14, 2.13351e-14, 1.14445e-14, 6.09285e-15, 3.21936e-15, 1.68827e-15, 8.78695e-16, 4.5389e-16, 2.32685e-16, 1.18381e-16, 5.97683e-17, 2.99443e-17, 1.48862e-17, 7.34246e-18, 3.59306e-18},
{4.19508e-06, 4.54036e-05, 0.000294051, 0.000155697, 0.000292895, 0.000836147, 0.00260713, 0.00564786, 0.00970735, 0.0149791, 0.0218178, 0.0289569, 0.0354815, 0.04158, 0.0480195, 0.0543231, 0.0588081, 0.0606926, 0.060364, 0.0585843, 0.0561192, 0.0534228, 0.0504891, 0.0471161, 0.0432365, 0.0389841, 0.0345794, 0.0302318, 0.0261045, 0.0223035, 0.0188796, 0.0158385, 0.0131593, 0.0108113, 0.00876475, 0.0069947, 0.00548052, 0.00420426, 0.00314862, 0.00229557, 0.00162496, 0.00111422, 0.000738753, 0.000473053, 0.000292403, 0.000174502, 0.000100637, 5.61783e-05, 3.04302e-05, 1.60479e-05, 8.27602e-06, 4.19719e-06, 2.10821e-06, 1.05797e-06, 5.35915e-07, 2.77058e-07, 1.47681e-07, 8.17357e-08, 4.70595e-08, 2.80849e-08, 1.7244e-08, 1.07962e-08, 6.83529e-09, 4.34712e-09, 2.76377e-09, 1.75078e-09, 1.10276e-09, 6.8974e-10, 4.28074e-10, 2.63508e-10, 1.60848e-10, 9.73512e-11, 5.84192e-11, 3.47587e-11, 2.05059e-11, 1.19955e-11, 6.95829e-12, 4.00266e-12, 2.28336e-12, 1.29181e-12, 7.24831e-13, 4.03368e-13, 2.22641e-13, 1.21889e-13, 6.61894e-14, 3.56528e-14, 1.90499e-14, 1.00973e-14, 5.30938e-15, 2.76968e-15, 1.43344e-15, 7.3606e-16, 3.75013e-16, 1.89581e-16, 9.50975e-17, 4.73344e-17, 2.33787e-17, 1.14574e-17, 5.57155e-18},
{4.356e-06, 4.44041e-05, 0.000283907, 0.000154777, 0.000305286, 0.00104224, 0.00347718, 0.00693546, 0.01064, 0.0150729, 0.02068, 0.0268104, 0.033288, 0.0403348, 0.0479969, 0.0550832, 0.0597774, 0.061566, 0.0610849, 0.0591776, 0.0566076, 0.0538174, 0.0507929, 0.0473282, 0.0433585, 0.039024, 0.0345511, 0.0301509, 0.0259852, 0.0221578, 0.0187173, 0.0156678, 0.0129867, 0.0106418, 0.00860174, 0.00684094, 0.00533838, 0.004076, 0.00303621, 0.00220028, 0.00154714, 0.00105316, 0.0006928, 0.000439929, 0.000269546, 0.000159403, 9.10872e-05, 5.03923e-05, 2.70691e-05, 1.41746e-05, 7.27316e-06, 3.68106e-06, 1.8526e-06, 9.36045e-07, 4.79841e-07, 2.52168e-07, 1.37e-07, 7.72906e-08, 4.52558e-08, 2.73636e-08, 1.69541e-08, 1.06754e-08, 6.78113e-09, 4.32017e-09, 2.74889e-09, 1.74192e-09, 1.09726e-09, 6.86269e-10, 4.25881e-10, 2.62131e-10, 1.5999e-10, 9.68217e-11, 5.80953e-11, 3.45622e-11, 2.03875e-11, 1.19246e-11, 6.916e-12, 3.97757e-12, 2.26853e-12, 1.28308e-12, 7.19701e-13, 4.00366e-13, 2.20892e-13, 1.20874e-13, 6.56036e-14, 3.53166e-14, 1.88582e-14, 9.98875e-15, 5.24842e-15, 2.73572e-15, 1.4147e-15, 7.25812e-16, 3.69465e-16, 1.86607e-16, 9.35203e-17, 4.65067e-17, 2.29489e-17, 1.12367e-17, 5.45945e-18},
{4.24547e-06, 3.80708e-05, 0.000159027, 0.000147613, 0.000277688, 0.00088616, 0.00283265, 0.00544837, 0.00846445, 0.0128465, 0.0189894, 0.0259604, 0.0330516, 0.040244, 0.0478646, 0.0551157, 0.0602123, 0.0624065, 0.0621714, 0.0603534, 0.0577819, 0.054945, 0.0518418, 0.0482671, 0.0441596, 0.0396701, 0.0350384, 0.0304891, 0.0261943, 0.022264, 0.0187483, 0.0156489, 0.0129382, 0.0105782, 0.00853271, 0.00677207, 0.00527306, 0.0040163, 0.00298352, 0.00215541, 0.00151038, 0.00102426, 0.000671052, 0.000424272, 0.000258769, 0.00015231, 8.66201e-05, 4.76974e-05, 2.55096e-05, 1.33072e-05, 6.80862e-06, 3.44087e-06, 1.73235e-06, 8.77557e-07, 4.52065e-07, 2.392e-07, 1.30988e-07, 7.44832e-08, 4.39109e-08, 2.66898e-08, 1.65961e-08, 1.04732e-08, 6.66081e-09, 4.24601e-09, 2.70228e-09, 1.7124e-09, 1.07856e-09, 6.74493e-10, 4.18516e-10, 2.57565e-10, 1.57185e-10, 9.51131e-11, 5.70639e-11, 3.39447e-11, 2.00207e-11, 1.17083e-11, 6.78935e-12, 3.90388e-12, 2.22592e-12, 1.25857e-12, 7.05687e-13, 3.92394e-13, 2.16381e-13, 1.18334e-13, 6.41814e-14, 3.45246e-14, 1.84198e-14, 9.74752e-15, 5.11656e-15, 2.66414e-15, 1.37612e-15, 7.0518e-16, 3.58519e-16, 1.80848e-16, 9.05161e-17, 4.49537e-17, 2.21534e-17, 1.0833e-17, 5.25658e-18},
{2.6023e-06, 2.0996e-05, 6.51172e-05, 9.41871e-05, 0.000148034, 0.000291241, 0.000704223, 0.00141856, 0.00252469, 0.00439193, 0.00751877, 0.0120581, 0.017926, 0.0248897, 0.0326516, 0.0404338, 0.0470294, 0.0518213, 0.0548712, 0.0565006, 0.0571406, 0.0570952, 0.0563517, 0.05476, 0.0523059, 0.0491505, 0.0455113, 0.0415816, 0.0375179, 0.0334442, 0.0294538, 0.0256111, 0.0219607, 0.018538, 0.0153747, 0.0125008, 0.00994118, 0.00771318, 0.00582371, 0.00426785, 0.00302825, 0.00207592, 0.00137259, 0.000874405, 0.000536469, 0.000317084, 0.000180748, 9.95605e-05, 5.31458e-05, 2.7603e-05, 1.4023e-05, 7.0154e-06, 3.48514e-06, 1.7364e-06, 8.77271e-07, 4.54445e-07, 2.43627e-07, 1.35898e-07, 7.88916e-08, 4.74368e-08, 2.93109e-08, 1.84476e-08, 1.17316e-08, 7.49018e-09, 4.77875e-09, 3.0369e-09, 1.91841e-09, 1.20307e-09, 7.48437e-10, 4.61708e-10, 2.8239e-10, 1.71234e-10, 1.02945e-10, 6.13675e-11, 3.62783e-11, 2.1271e-11, 1.23716e-11, 7.13865e-12, 4.08711e-12, 2.32207e-12, 1.30928e-12, 7.32698e-13, 4.06981e-13, 2.24387e-13, 1.22802e-13, 6.67108e-14, 3.59722e-14, 1.92533e-14, 1.02282e-14, 5.39289e-15, 2.82199e-15, 1.46546e-15, 7.55173e-16, 3.86138e-16, 1.95897e-16, 9.85978e-17, 4.92291e-17, 2.43805e-17, 1.19758e-17},
{2.6023e-06, 2.0996e-05, 6.51172e-05, 9.41871e-05, 0.000148034, 0.000291241, 0.000704223, 0.00141856, 0.00252469, 0.00439193, 0.00751877, 0.0120581, 0.017926, 0.0248897, 0.0326516, 0.0404338, 0.0470294, 0.0518213, 0.0548712, 0.0565006, 0.0571406, 0.0570952, 0.0563517, 0.05476, 0.0523059, 0.0491505, 0.0455113, 0.0415816, 0.0375179, 0.0334442, 0.0294538, 0.0256111, 0.0219607, 0.018538, 0.0153747, 0.0125008, 0.00994118, 0.00771318, 0.00582371, 0.00426785, 0.00302825, 0.00207592, 0.00137259, 0.000874405, 0.000536469, 0.000317084, 0.000180748, 9.95605e-05, 5.31458e-05, 2.7603e-05, 1.4023e-05, 7.0154e-06, 3.48514e-06, 1.7364e-06, 8.77271e-07, 4.54445e-07, 2.43627e-07, 1.35898e-07, 7.88916e-08, 4.74368e-08, 2.93109e-08, 1.84476e-08, 1.17316e-08, 7.49018e-09, 4.77875e-09, 3.0369e-09, 1.91841e-09, 1.20307e-09, 7.48437e-10, 4.61708e-10, 2.8239e-10, 1.71234e-10, 1.02945e-10, 6.13675e-11, 3.62783e-11, 2.1271e-11, 1.23716e-11, 7.13865e-12, 4.08711e-12, 2.32207e-12, 1.30928e-12, 7.32698e-13, 4.06981e-13, 2.24387e-13, 1.22802e-13, 6.67108e-14, 3.59722e-14, 1.92533e-14, 1.02282e-14, 5.39289e-15, 2.82199e-15, 1.46546e-15, 7.55173e-16, 3.86138e-16, 1.95897e-16, 9.85978e-17, 4.92291e-17, 2.43805e-17, 1.19758e-17}};
#endif

//Scale Down
#ifdef PUDOWN
double datpileup[nHLTmx][npileupmx] = {{6.03667e-06, 7.60574e-05, 0.000307637, 0.000176086, 0.000453516, 0.00239672, 0.00661466, 0.00837479, 0.00981379, 0.0143308, 0.0212881, 0.0297347, 0.039106, 0.0490753, 0.0585196, 0.06507, 0.0675457, 0.0666481, 0.0636412, 0.0598129, 0.0560218, 0.052361, 0.0485117, 0.0442723, 0.0397016, 0.0349882, 0.0303351, 0.0259142, 0.0218463, 0.0181943, 0.0149712, 0.0121595, 0.00972992, 0.00765254, 0.00590003, 0.00444671, 0.00326666, 0.00233228, 0.00161376, 0.00107933, 0.000696324, 0.000432685, 0.000258784, 0.000149002, 8.2688e-05, 4.43251e-05, 2.303e-05, 1.16532e-05, 5.7788e-06, 2.83109e-06, 1.3837e-06, 6.82335e-07, 3.43538e-07, 1.78489e-07, 9.63896e-08, 5.42021e-08, 3.16176e-08, 1.8985e-08, 1.16271e-08, 7.20079e-09, 4.4785e-09, 2.78314e-09, 1.72226e-09, 1.05894e-09, 6.46049e-10, 3.90789e-10, 2.34271e-10, 1.39155e-10, 8.18937e-11, 4.77496e-11, 2.75848e-11, 1.57897e-11, 8.95597e-12, 5.03398e-12, 2.80415e-12, 1.54813e-12, 8.47137e-13, 4.59476e-13, 2.47033e-13, 1.31658e-13, 6.95603e-14, 3.64342e-14, 1.89194e-14, 9.7403e-15, 4.97187e-15, 2.5163e-15, 1.26275e-15, 6.28336e-16, 3.10025e-16, 1.51682e-16, 7.35877e-17, 3.53995e-17, 1.68852e-17, 7.98517e-18, 3.74397e-18, 1.74022e-18, 8.01599e-19, 3.66134e-19, 1.65602e-19},
{5.68913e-06, 6.98388e-05, 0.000261857, 0.000221571, 0.000572431, 0.00266489, 0.00802858, 0.0138155, 0.0205967, 0.0289207, 0.0361908, 0.0412809, 0.0456847, 0.0514923, 0.0585242, 0.0639995, 0.065968, 0.0646799, 0.0613645, 0.0572535, 0.0530333, 0.0487584, 0.0442347, 0.039416, 0.0344717, 0.0296437, 0.0251339, 0.0210687, 0.0174998, 0.0144189, 0.0117807, 0.00952727, 0.00760525, 0.00597332, 0.00460108, 0.00346477, 0.00254293, 0.00181372, 0.00125365, 0.00083765, 0.000539922, 0.000335235, 0.000200358, 0.000115284, 6.39299e-05, 3.42411e-05, 1.77723e-05, 8.98105e-06, 4.44641e-06, 2.17398e-06, 1.06005e-06, 5.21396e-07, 2.61834e-07, 1.35732e-07, 7.31807e-08, 4.11197e-08, 2.39886e-08, 1.44155e-08, 8.83962e-09, 5.48262e-09, 3.4152e-09, 2.12559e-09, 1.31724e-09, 8.10975e-10, 4.9536e-10, 2.99963e-10, 1.79996e-10, 1.0701e-10, 6.30261e-11, 3.6775e-11, 2.1259e-11, 1.21764e-11, 6.91054e-12, 3.88652e-12, 2.16618e-12, 1.19659e-12, 6.55154e-13, 3.55558e-13, 1.91281e-13, 1.0201e-13, 5.39325e-14, 2.82687e-14, 1.46901e-14, 7.56874e-15, 3.86649e-15, 1.95847e-15, 9.83637e-16, 4.89868e-16, 2.41911e-16, 1.18458e-16, 5.75181e-17, 2.76923e-17, 1.32196e-17, 6.25659e-18, 2.93569e-18, 1.3655e-18, 6.29411e-19, 2.87665e-19, 1.30187e-19},
{1.52847e-05, 0.000111846, 0.000336401, 0.000291758, 0.0014372, 0.011372, 0.0299606, 0.0249232, 0.0149156, 0.0176394, 0.0244016, 0.0316021, 0.038788, 0.0464026, 0.0540322, 0.0596326, 0.061991, 0.0615915, 0.0594243, 0.0564671, 0.0533219, 0.0499853, 0.046186, 0.0418328, 0.0371019, 0.0322809, 0.0276367, 0.0233584, 0.019541, 0.0161978, 0.0132923, 0.0107741, 0.00860099, 0.00674377, 0.00518075, 0.00389105, 0.00285084, 0.00203273, 0.00140694, 0.000942806, 0.000610182, 0.000380648, 0.000228584, 0.000132078, 7.34698e-05, 3.9412e-05, 2.0451e-05, 1.03128e-05, 5.08671e-06, 2.47528e-06, 1.20124e-06, 5.88768e-07, 2.95341e-07, 1.53398e-07, 8.30944e-08, 4.69863e-08, 2.7592e-08, 1.6677e-08, 1.02723e-08, 6.39131e-09, 3.98919e-09, 2.48557e-09, 1.541e-09, 9.48696e-10, 5.79267e-10, 3.50568e-10, 2.10218e-10, 1.24891e-10, 7.35132e-11, 4.28766e-11, 2.47835e-11, 1.41991e-11, 8.06489e-12, 4.54199e-12, 2.53675e-12, 1.40525e-12, 7.72205e-13, 4.20975e-13, 2.27698e-13, 1.22197e-13, 6.50691e-14, 3.43794e-14, 1.80229e-14, 9.37413e-15, 4.83719e-15, 2.47616e-15, 1.25732e-15, 6.33215e-16, 3.16261e-16, 1.5663e-16, 7.69108e-17, 3.74383e-17, 1.80638e-17, 8.63738e-18, 4.09257e-18, 1.92121e-18, 8.93255e-19, 4.11503e-19, 1.87625e-19},
{4.84534e-06, 6.10393e-05, 0.000222315, 0.000187603, 0.000438987, 0.00178142, 0.00514768, 0.00877275, 0.0132406, 0.0197982, 0.0275065, 0.0352553, 0.0430316, 0.0514189, 0.0599025, 0.0662226, 0.0689664, 0.0684633, 0.0656768, 0.0617635, 0.0575465, 0.05317, 0.0484331, 0.0432556, 0.0377955, 0.0323212, 0.0270968, 0.0223287, 0.0181424, 0.0145787, 0.0116083, 0.00916091, 0.00715392, 0.00551242, 0.00417646, 0.00310006, 0.00224665, 0.00158467, 0.00108476, 0.000718813, 0.000460119, 0.000284063, 0.000168995, 9.68777e-05, 5.35625e-05, 2.86187e-05, 1.48251e-05, 7.48065e-06, 3.70018e-06, 1.80881e-06, 8.82677e-07, 4.34967e-07, 2.19062e-07, 1.13956e-07, 6.16495e-08, 3.47306e-08, 2.02888e-08, 1.2193e-08, 7.46926e-09, 4.62466e-09, 2.87455e-09, 1.78487e-09, 1.10342e-09, 6.77713e-10, 4.13005e-10, 2.49542e-10, 1.49431e-10, 8.86677e-11, 5.21309e-11, 3.03697e-11, 1.75319e-11, 1.003e-11, 5.68713e-12, 3.19634e-12, 1.78081e-12, 9.83622e-13, 5.38663e-13, 2.92492e-13, 1.57486e-13, 8.40863e-14, 4.45224e-14, 2.33784e-14, 1.21742e-14, 6.28736e-15, 3.2203e-15, 1.63578e-15, 8.24047e-16, 4.11689e-16, 2.0397e-16, 1.00213e-16, 4.88233e-17, 2.35852e-17, 1.12963e-17, 5.36362e-18, 2.52455e-18, 1.17776e-18, 5.44416e-19, 2.49472e-19, 1.13184e-19},
{4.8764e-06, 7.16538e-05, 0.000284733, 0.000181053, 0.000368628, 0.00122226, 0.00361646, 0.00735906, 0.0122213, 0.0188597, 0.0267006, 0.0342401, 0.0410422, 0.0479282, 0.0550715, 0.0606993, 0.0634176, 0.0634441, 0.061655, 0.0589878, 0.0560314, 0.0528009, 0.0490598, 0.0447435, 0.0400301, 0.0351876, 0.0304588, 0.0260235, 0.021989, 0.0183959, 0.0152356, 0.0124761, 0.0100796, 0.00801334, 0.00625054, 0.00476854, 0.00354639, 0.00256272, 0.00179379, 0.00121285, 0.000790459, 0.000495872, 0.000299238, 0.000173749, 9.71777e-05, 5.2459e-05, 2.74146e-05, 1.39262e-05, 6.91395e-06, 3.37826e-06, 1.63897e-06, 7.98087e-07, 3.94914e-07, 2.01073e-07, 1.06405e-07, 5.87983e-08, 3.38607e-08, 2.01694e-08, 1.23021e-08, 7.60828e-09, 4.73293e-09, 2.94434e-09, 1.82464e-09, 1.12366e-09, 6.86638e-10, 4.15995e-10, 2.49757e-10, 1.48567e-10, 8.75502e-11, 5.11112e-11, 2.95602e-11, 1.69375e-11, 9.61524e-12, 5.40835e-12, 3.01429e-12, 1.66471e-12, 9.11056e-13, 4.94108e-13, 2.65572e-13, 1.41464e-13, 7.46829e-14, 3.90777e-14, 2.02668e-14, 1.04185e-14, 5.30902e-15, 2.68182e-15, 1.34299e-15, 6.66751e-16, 3.28188e-16, 1.60165e-16, 7.75011e-17, 3.71833e-17, 1.76886e-17, 8.34289e-18, 3.90144e-18, 1.80878e-18, 8.31133e-19, 3.78738e-19, 1.70917e-19},
{5.05871e-06, 6.9425e-05, 0.000275673, 0.000180265, 0.000397481, 0.00158111, 0.0047502, 0.00864372, 0.0128969, 0.0183925, 0.0248882, 0.0318179, 0.0392581, 0.0474807, 0.055688, 0.061702, 0.064364, 0.0642236, 0.0622901, 0.059506, 0.0564461, 0.0531158, 0.0492739, 0.0448592, 0.0400578, 0.0351438, 0.0303614, 0.0258882, 0.0218287, 0.0182211, 0.0150551, 0.0122963, 0.00990536, 0.00784815, 0.0060972, 0.00462968, 0.00342443, 0.00245934, 0.00170961, 0.00114723, 0.000741589, 0.000461159, 0.000275733, 0.000158579, 8.78428e-05, 4.69787e-05, 2.43423e-05, 1.22799e-05, 6.06975e-06, 2.96355e-06, 1.44359e-06, 7.09719e-07, 3.56498e-07, 1.84996e-07, 9.99105e-08, 5.62538e-08, 3.2884e-08, 1.97952e-08, 1.21543e-08, 7.54542e-09, 4.70307e-09, 2.92843e-09, 1.81541e-09, 1.11806e-09, 6.83177e-10, 4.13857e-10, 2.48446e-10, 1.4777e-10, 8.70713e-11, 5.08259e-11, 2.93917e-11, 1.68386e-11, 9.55763e-12, 5.37495e-12, 2.995e-12, 1.65362e-12, 9.04703e-13, 4.90481e-13, 2.63511e-13, 1.40298e-13, 7.4027e-14, 3.8711e-14, 2.00632e-14, 1.03064e-14, 5.24778e-15, 2.64869e-15, 1.32524e-15, 6.57344e-16, 3.23256e-16, 1.57608e-16, 7.61906e-17, 3.65195e-17, 1.73563e-17, 8.17856e-18, 3.82114e-18, 1.77002e-18, 8.12647e-19, 3.70028e-19, 1.66863e-19},
{4.93089e-06, 5.04559e-05, 0.000162791, 0.000170641, 0.000356242, 0.00132683, 0.00381935, 0.00676648, 0.0105169, 0.0162489, 0.0235579, 0.0313403, 0.0391504, 0.0473491, 0.0556381, 0.0620408, 0.0651684, 0.0653339, 0.0635179, 0.0607384, 0.0576286, 0.0542115, 0.0502467, 0.0456779, 0.0407046, 0.0356174, 0.0306759, 0.0260691, 0.0219073, 0.0182286, 0.0150184, 0.0122357, 0.0098346, 0.00777539, 0.00602719, 0.00456524, 0.00336735, 0.0024107, 0.00166986, 0.00111618, 0.000718461, 0.00044475, 0.000264652, 0.000151455, 8.34788e-05, 4.44283e-05, 2.29178e-05, 1.15179e-05, 5.6783e-06, 2.76992e-06, 1.35102e-06, 6.66753e-07, 3.37008e-07, 1.76273e-07, 9.60038e-08, 5.44685e-08, 3.20327e-08, 1.93636e-08, 1.19202e-08, 7.41063e-09, 4.62218e-09, 2.87876e-09, 1.78464e-09, 1.099e-09, 6.71444e-10, 4.06692e-10, 2.44112e-10, 1.45175e-10, 8.5532e-11, 4.99216e-11, 2.88651e-11, 1.65346e-11, 9.38349e-12, 5.27592e-12, 2.93908e-12, 1.62224e-12, 8.87199e-13, 4.80775e-13, 2.5816e-13, 1.37364e-13, 7.24284e-14, 3.78451e-14, 1.95972e-14, 1.00573e-14, 5.11556e-15, 2.57904e-15, 1.28885e-15, 6.38491e-16, 3.13575e-16, 1.52682e-16, 7.37084e-17, 3.5281e-17, 1.67447e-17, 7.87964e-18, 3.6766e-18, 1.70088e-18, 7.7994e-19, 3.54722e-19, 1.59784e-19},
{2.99217e-06, 2.52593e-05, 7.14212e-05, 0.000106816, 0.000174403, 0.000387792, 0.000942178, 0.00184863, 0.00332001, 0.00593168, 0.0101122, 0.0158988, 0.0230743, 0.0313282, 0.0400039, 0.047714, 0.0534434, 0.0571211, 0.0590952, 0.0598755, 0.0598503, 0.0590208, 0.0572121, 0.0544219, 0.0508574, 0.0467788, 0.04241, 0.0379298, 0.0334765, 0.0291501, 0.0250173, 0.021126, 0.0175161, 0.0142249, 0.0112856, 0.00872254, 0.00654829, 0.00476076, 0.00334224, 0.00225997, 0.00146894, 0.00091659, 0.000548788, 0.000315396, 0.000174222, 9.27188e-05, 4.77072e-05, 2.38495e-05, 1.16595e-05, 5.62082e-06, 2.69965e-06, 1.30746e-06, 6.46804e-07, 3.30784e-07, 1.76371e-07, 9.83087e-08, 5.70788e-08, 3.42368e-08, 2.10021e-08, 1.30509e-08, 8.15233e-09, 5.09034e-09, 3.16512e-09, 1.95509e-09, 1.19797e-09, 7.2757e-10, 4.37795e-10, 2.60953e-10, 1.54079e-10, 9.01254e-11, 5.22307e-11, 2.99947e-11, 1.70717e-11, 9.6314e-12, 5.38703e-12, 2.98756e-12, 1.64302e-12, 8.96124e-13, 4.84758e-13, 2.60097e-13, 1.38423e-13, 7.30718e-14, 3.82607e-14, 1.98703e-14, 1.0235e-14, 5.22856e-15, 2.64884e-15, 1.33071e-15, 6.62865e-16, 3.27377e-16, 1.60293e-16, 7.7799e-17, 3.74276e-17, 1.78444e-17, 8.43083e-18, 3.9468e-18, 1.83014e-18, 8.41012e-19, 3.82495e-19},
{2.99217e-06, 2.52593e-05, 7.14212e-05, 0.000106816, 0.000174403, 0.000387792, 0.000942178, 0.00184863, 0.00332001, 0.00593168, 0.0101122, 0.0158988, 0.0230743, 0.0313282, 0.0400039, 0.047714, 0.0534434, 0.0571211, 0.0590952, 0.0598755, 0.0598503, 0.0590208, 0.0572121, 0.0544219, 0.0508574, 0.0467788, 0.04241, 0.0379298, 0.0334765, 0.0291501, 0.0250173, 0.021126, 0.0175161, 0.0142249, 0.0112856, 0.00872254, 0.00654829, 0.00476076, 0.00334224, 0.00225997, 0.00146894, 0.00091659, 0.000548788, 0.000315396, 0.000174222, 9.27188e-05, 4.77072e-05, 2.38495e-05, 1.16595e-05, 5.62082e-06, 2.69965e-06, 1.30746e-06, 6.46804e-07, 3.30784e-07, 1.76371e-07, 9.83087e-08, 5.70788e-08, 3.42368e-08, 2.10021e-08, 1.30509e-08, 8.15233e-09, 5.09034e-09, 3.16512e-09, 1.95509e-09, 1.19797e-09, 7.2757e-10, 4.37795e-10, 2.60953e-10, 1.54079e-10, 9.01254e-11, 5.22307e-11, 2.99947e-11, 1.70717e-11, 9.6314e-12, 5.38703e-12, 2.98756e-12, 1.64302e-12, 8.96124e-13, 4.84758e-13, 2.60097e-13, 1.38423e-13, 7.30718e-14, 3.82607e-14, 1.98703e-14, 1.0235e-14, 5.22856e-15, 2.64884e-15, 1.33071e-15, 6.62865e-16, 3.27377e-16, 1.60293e-16, 7.7799e-17, 3.74276e-17, 1.78444e-17, 8.43083e-18, 3.9468e-18, 1.83014e-18, 8.41012e-19, 3.82495e-19}};
#endif

//Scale Up
#ifdef PUUP
double datpileup[nHLTmx][npileupmx] = {{4.54124e-06, 3.5788e-05, 0.000315953, 0.000134202, 0.000251532, 0.000961422, 0.00380107, 0.00694896, 0.00779576, 0.00939423, 0.0134776, 0.0193236, 0.0263027, 0.0340081, 0.0422286, 0.0504414, 0.057123, 0.0608594, 0.0616189, 0.0601587, 0.057385, 0.0541653, 0.0510229, 0.0479824, 0.0448132, 0.0413532, 0.0376144, 0.0337154, 0.0297995, 0.0259986, 0.022417, 0.019124, 0.0161524, 0.0135058, 0.0111705, 0.00912579, 0.00735094, 0.00582673, 0.00453526, 0.00345884, 0.00257897, 0.00187582, 0.00132817, 0.000913739, 0.000609871, 0.000394503, 0.000247197, 0.000150063, 8.83231e-05, 5.04781e-05, 2.80775e-05, 1.52486e-05, 8.11973e-06, 4.26198e-06, 2.21966e-06, 1.15594e-06, 6.07218e-07, 3.24662e-07, 1.7813e-07, 1.00875e-07, 5.90902e-08, 3.57393e-08, 2.22066e-08, 1.40797e-08, 9.0462e-09, 5.85395e-09, 3.79702e-09, 2.45982e-09, 1.58767e-09, 1.01929e-09, 6.5022e-10, 4.11881e-10, 2.58982e-10, 1.61609e-10, 1.00073e-10, 6.1491e-11, 3.74934e-11, 2.26861e-11, 1.36221e-11, 8.11768e-12, 4.80113e-12, 2.81838e-12, 1.64219e-12, 9.49794e-13, 5.45304e-13, 3.10789e-13, 1.75843e-13, 9.87709e-14, 5.50798e-14, 3.04948e-14, 1.67627e-14, 9.14862e-15, 4.95763e-15, 2.66754e-15, 1.4252e-15, 7.56094e-16, 3.9831e-16, 2.08361e-16, 1.08233e-16},
{4.23809e-06, 3.71855e-05, 0.000256953, 0.000164245, 0.000326106, 0.00112217, 0.00424432, 0.0091646, 0.0139831, 0.0199681, 0.0269579, 0.0329586, 0.037257, 0.0408516, 0.0453136, 0.0510585, 0.0564788, 0.0596405, 0.0600408, 0.0582738, 0.0552609, 0.0517984, 0.0482883, 0.0447382, 0.0410049, 0.0370369, 0.0329308, 0.0288533, 0.0249604, 0.0213651, 0.0181304, 0.0152752, 0.0127848, 0.0106242, 0.00875313, 0.00713455, 0.0057392, 0.00454508, 0.00353494, 0.00269375, 0.00200671, 0.00145821, 0.00103151, 0.000709017, 0.000472851, 0.000305651, 0.000191398, 0.000116118, 6.83e-05, 3.90063e-05, 2.16778e-05, 1.17605e-05, 6.2541e-06, 3.27745e-06, 1.70365e-06, 8.85284e-07, 4.63948e-07, 2.47476e-07, 1.35495e-07, 7.66079e-08, 4.48341e-08, 2.71119e-08, 1.68539e-08, 1.0696e-08, 6.88076e-09, 4.45884e-09, 2.89622e-09, 1.87885e-09, 1.21426e-09, 7.80504e-10, 4.98448e-10, 3.1606e-10, 1.98914e-10, 1.24229e-10, 7.69845e-11, 4.73369e-11, 2.88816e-11, 1.74858e-11, 1.05054e-11, 6.26376e-12, 3.70658e-12, 2.17698e-12, 1.26911e-12, 7.34403e-13, 4.21867e-13, 2.4057e-13, 1.36192e-13, 7.65446e-14, 4.27119e-14, 2.36628e-14, 1.3016e-14, 7.10876e-15, 3.85502e-15, 2.07581e-15, 1.10989e-15, 5.89275e-16, 3.10672e-16, 1.62643e-16, 8.4551e-17},
{1.16144e-05, 6.97547e-05, 0.00032729, 0.000217345, 0.000558157, 0.00407368, 0.0183632, 0.0289122, 0.0193457, 0.0133109, 0.0164923, 0.0221777, 0.0281727, 0.0341295, 0.0403522, 0.0468613, 0.0524473, 0.0557621, 0.0566656, 0.0557435, 0.0537023, 0.0511925, 0.0485718, 0.0458064, 0.0426988, 0.0391617, 0.0352901, 0.0312762, 0.0273182, 0.0235753, 0.0201491, 0.0170828, 0.0143729, 0.0119898, 0.00989839, 0.00806957, 0.00648252, 0.00512191, 0.00397357, 0.0030219, 0.00224893, 0.00163475, 0.00115837, 0.000798544, 0.000534603, 0.000347064, 0.00021828, 0.000132947, 7.84405e-05, 4.4882e-05, 2.4954e-05, 1.35225e-05, 7.17226e-06, 3.7443e-06, 1.9377e-06, 1.00264e-06, 5.23838e-07, 2.79136e-07, 1.5306e-07, 8.68763e-08, 5.11243e-08, 3.11037e-08, 1.94457e-08, 1.23996e-08, 8.00558e-09, 5.20094e-09, 3.38378e-09, 2.19717e-09, 1.42053e-09, 9.13072e-10, 5.82932e-10, 3.69448e-10, 2.32372e-10, 1.45032e-10, 8.98219e-11, 5.52036e-11, 3.36713e-11, 2.03851e-11, 1.22513e-11, 7.31016e-12, 4.33116e-12, 2.54841e-12, 1.48925e-12, 8.64466e-13, 4.98473e-13, 2.85548e-13, 1.6251e-13, 9.18879e-14, 5.162e-14, 2.88109e-14, 1.59759e-14, 8.80099e-15, 4.81651e-15, 2.61845e-15, 1.41396e-15, 7.58367e-16, 4.03956e-16, 2.13679e-16, 1.12233e-16},
{3.60067e-06, 3.28671e-05, 0.000218448, 0.000139725, 0.000266143, 0.000792015, 0.00276824, 0.00584383, 0.00888059, 0.0129095, 0.018569, 0.0250048, 0.0314576, 0.0378846, 0.0447184, 0.0519352, 0.0581912, 0.0619841, 0.0630535, 0.0618967, 0.0592524, 0.0559193, 0.0524041, 0.0487714, 0.0448731, 0.0406327, 0.036134, 0.0315543, 0.0270846, 0.02289, 0.0190891, 0.0157476, 0.0128784, 0.0104537, 0.00842259, 0.00672762, 0.00531607, 0.0041447, 0.00317955, 0.0023936, 0.00176387, 0.00126946, 0.000890438, 0.000607606, 0.000402726, 0.000258987, 0.000161492, 9.76341e-05, 5.72644e-05, 3.26269e-05, 1.80972e-05, 9.80262e-06, 5.20698e-06, 2.72701e-06, 1.41759e-06, 7.37279e-07, 3.87077e-07, 2.07016e-07, 1.13702e-07, 6.44906e-08, 3.78419e-08, 2.29218e-08, 1.42573e-08, 9.0442e-09, 5.81112e-09, 3.75922e-09, 2.43685e-09, 1.57742e-09, 1.01721e-09, 6.52413e-10, 4.15762e-10, 2.63094e-10, 1.6526e-10, 1.03024e-10, 6.37362e-11, 3.91303e-11, 2.38414e-11, 1.44168e-11, 8.65266e-12, 5.15478e-12, 3.04847e-12, 1.78976e-12, 1.04323e-12, 6.03755e-13, 3.46947e-13, 1.97973e-13, 1.12178e-13, 6.31221e-14, 3.52728e-14, 1.95745e-14, 1.0788e-14, 5.90466e-15, 3.20963e-15, 1.7327e-15, 9.28953e-16, 4.94612e-16, 2.61534e-16, 1.37332e-16, 7.16117e-17},
{3.63629e-06, 3.38513e-05, 0.000290806, 0.000136226, 0.000243195, 0.000590907, 0.00185786, 0.00432411, 0.0077362, 0.0119917, 0.0177219, 0.0242713, 0.0305845, 0.0362939, 0.0419249, 0.0479156, 0.0533514, 0.0568649, 0.0581128, 0.0575382, 0.0557966, 0.0535153, 0.0510462, 0.0483699, 0.0453133, 0.0418096, 0.0379584, 0.0339417, 0.0299398, 0.0260993, 0.0225223, 0.0192651, 0.0163446, 0.01375, 0.0114579, 0.0094422, 0.00767968, 0.00615126, 0.00484072, 0.00373344, 0.00281492, 0.00206976, 0.00148074, 0.00102871, 0.000692946, 0.000452135, 0.000285636, 0.000174742, 0.000103598, 5.96036e-05, 3.33458e-05, 1.81912e-05, 9.71186e-06, 5.09751e-06, 2.64565e-06, 1.36743e-06, 7.09818e-07, 3.73568e-07, 2.01239e-07, 1.11847e-07, 6.44224e-08, 3.84487e-08, 2.3671e-08, 1.4926e-08, 9.56456e-09, 6.18479e-09, 4.01321e-09, 2.60253e-09, 1.68199e-09, 1.0814e-09, 6.90857e-10, 4.38255e-10, 2.75951e-10, 1.72428e-10, 1.06908e-10, 6.57691e-11, 4.01461e-11, 2.43156e-11, 1.46137e-11, 8.71535e-12, 5.15795e-12, 3.02937e-12, 1.76573e-12, 1.02144e-12, 5.8644e-13, 3.34174e-13, 1.89004e-13, 1.06104e-13, 5.9124e-14, 3.27024e-14, 1.79553e-14, 9.78629e-15, 5.29504e-15, 2.84422e-15, 1.51675e-15, 8.03045e-16, 4.22139e-16, 2.2033e-16, 1.14184e-16},
{3.77688e-06, 3.34107e-05, 0.000280257, 0.000135325, 0.000248039, 0.000704387, 0.0024785, 0.00551712, 0.00881796, 0.0124743, 0.017201, 0.0226255, 0.0283711, 0.0344763, 0.0411728, 0.0481983, 0.0541819, 0.0577859, 0.0589205, 0.0582082, 0.0563531, 0.0539771, 0.0514225, 0.0486633, 0.0455229, 0.0419363, 0.0380087, 0.033927, 0.0298737, 0.0259949, 0.0223904, 0.019115, 0.0161839, 0.0135852, 0.0112938, 0.00928246, 0.00752704, 0.00600791, 0.00470868, 0.00361463, 0.00271096, 0.00198159, 0.0014085, 0.000971664, 0.000649599, 0.000420468, 0.000263405, 0.000159748, 9.38787e-05, 5.3546e-05, 2.97138e-05, 1.60946e-05, 8.5457e-06, 4.47198e-06, 2.3218e-06, 1.20547e-06, 6.31516e-07, 3.36938e-07, 1.84639e-07, 1.04545e-07, 6.1295e-08, 3.71362e-08, 2.31251e-08, 1.46966e-08, 9.46422e-09, 6.13754e-09, 3.9887e-09, 2.58857e-09, 1.67348e-09, 1.07601e-09, 6.87385e-10, 4.36016e-10, 2.74513e-10, 1.71512e-10, 1.06329e-10, 6.54066e-11, 3.99207e-11, 2.41764e-11, 1.45282e-11, 8.66312e-12, 5.12617e-12, 3.0101e-12, 1.7541e-12, 1.01443e-12, 5.82231e-13, 3.31656e-13, 1.87503e-13, 1.05212e-13, 5.8597e-14, 3.23927e-14, 1.77743e-14, 9.68123e-15, 5.23449e-15, 2.80959e-15, 1.49711e-15, 7.91999e-16, 4.15982e-16, 2.1693e-16, 1.12324e-16},
{3.6811e-06, 3.12872e-05, 0.000151815, 0.000129651, 0.000228128, 0.000607751, 0.00204322, 0.00437658, 0.00691994, 0.0102917, 0.0152837, 0.0214018, 0.0278768, 0.0343567, 0.0410684, 0.0480895, 0.0543031, 0.0582994, 0.0597817, 0.0592674, 0.0574802, 0.0550983, 0.0524999, 0.0496692, 0.0464298, 0.0427193, 0.0386514, 0.0344242, 0.0302316, 0.0262289, 0.0225224, 0.0191692, 0.0161836, 0.01355, 0.011239, 0.00921853, 0.00746059, 0.00594296, 0.0046477, 0.00355921, 0.00266217, 0.00194005, 0.00137437, 0.000944672, 0.000629084, 0.000405499, 0.000252922, 0.000152701, 8.93292e-05, 5.07226e-05, 2.80273e-05, 1.51236e-05, 8.0058e-06, 4.18152e-06, 2.17023e-06, 1.12855e-06, 5.93396e-07, 3.18402e-07, 1.75731e-07, 1.0027e-07, 5.92169e-08, 3.60958e-08, 2.25799e-08, 1.43945e-08, 9.28737e-09, 6.02926e-09, 3.92035e-09, 2.54469e-09, 1.64512e-09, 1.05769e-09, 6.75599e-10, 4.28485e-10, 2.69738e-10, 1.68509e-10, 1.04456e-10, 6.42476e-11, 3.92091e-11, 2.37427e-11, 1.42657e-11, 8.50525e-12, 5.03181e-12, 2.95403e-12, 1.72095e-12, 9.94935e-13, 5.70824e-13, 3.25012e-13, 1.83652e-13, 1.02991e-13, 5.7322e-14, 3.16645e-14, 1.73607e-14, 9.44761e-15, 5.10332e-15, 2.7364e-15, 1.45654e-15, 7.69667e-16, 4.03778e-16, 2.10311e-16, 1.08762e-16},
{2.282e-06, 1.79548e-05, 5.91763e-05, 8.35976e-05, 0.000128726, 0.000227305, 0.000527097, 0.00109868, 0.00195866, 0.00332254, 0.00563848, 0.00915959, 0.0139046, 0.0197265, 0.0264166, 0.0336394, 0.0405456, 0.0461809, 0.0502114, 0.0527589, 0.0541148, 0.0546434, 0.054583, 0.0539129, 0.0525033, 0.0503328, 0.047527, 0.0442679, 0.0407226, 0.0370288, 0.0332972, 0.0296138, 0.0260406, 0.0226203, 0.019385, 0.0163622, 0.013578, 0.0110559, 0.00881474, 0.00686635, 0.00521379, 0.00385045, 0.00275983, 0.00191633, 0.00128726, 0.000835734, 0.000524241, 0.00031781, 0.000186367, 0.000105886, 5.84273e-05, 3.14145e-05, 1.65296e-05, 8.5587e-06, 4.39074e-06, 2.25012e-06, 1.16269e-06, 6.1176e-07, 3.30775e-07, 1.85043e-07, 1.07419e-07, 6.46086e-08, 4.00508e-08, 2.5401e-08, 1.6356e-08, 1.06205e-08, 6.91685e-09, 4.50049e-09, 2.91751e-09, 1.88098e-09, 1.20472e-09, 7.65993e-10, 4.83323e-10, 3.02587e-10, 1.87948e-10, 1.15829e-10, 7.08296e-11, 4.29814e-11, 2.58859e-11, 1.54746e-11, 9.18326e-12, 5.41066e-12, 3.16537e-12, 1.8389e-12, 1.06093e-12, 6.07907e-13, 3.45962e-13, 1.95557e-13, 1.09794e-13, 6.12273e-14, 3.39131e-14, 1.86567e-14, 1.01938e-14, 5.53159e-15, 2.98099e-15, 1.5953e-15, 8.4776e-16, 4.47326e-16, 2.34351e-16},
{2.282e-06, 1.79548e-05, 5.91763e-05, 8.35976e-05, 0.000128726, 0.000227305, 0.000527097, 0.00109868, 0.00195866, 0.00332254, 0.00563848, 0.00915959, 0.0139046, 0.0197265, 0.0264166, 0.0336394, 0.0405456, 0.0461809, 0.0502114, 0.0527589, 0.0541148, 0.0546434, 0.054583, 0.0539129, 0.0525033, 0.0503328, 0.047527, 0.0442679, 0.0407226, 0.0370288, 0.0332972, 0.0296138, 0.0260406, 0.0226203, 0.019385, 0.0163622, 0.013578, 0.0110559, 0.00881474, 0.00686635, 0.00521379, 0.00385045, 0.00275983, 0.00191633, 0.00128726, 0.000835734, 0.000524241, 0.00031781, 0.000186367, 0.000105886, 5.84273e-05, 3.14145e-05, 1.65296e-05, 8.5587e-06, 4.39074e-06, 2.25012e-06, 1.16269e-06, 6.1176e-07, 3.30775e-07, 1.85043e-07, 1.07419e-07, 6.46086e-08, 4.00508e-08, 2.5401e-08, 1.6356e-08, 1.06205e-08, 6.91685e-09, 4.50049e-09, 2.91751e-09, 1.88098e-09, 1.20472e-09, 7.65993e-10, 4.83323e-10, 3.02587e-10, 1.87948e-10, 1.15829e-10, 7.08296e-11, 4.29814e-11, 2.58859e-11, 1.54746e-11, 9.18326e-12, 5.41066e-12, 3.16537e-12, 1.8389e-12, 1.06093e-12, 6.07907e-13, 3.45962e-13, 1.95557e-13, 1.09794e-13, 6.12273e-14, 3.39131e-14, 1.86567e-14, 1.01938e-14, 5.53159e-15, 2.98099e-15, 1.5953e-15, 8.4776e-16, 4.47326e-16, 2.34351e-16}};
#endif

//-------------------------------------------
static const int nsrc = 27;   // Change form 26 as for 2015 data .  See JEC for 2017 94X
const char* srcnames[nsrc] = {"AbsoluteStat", "AbsoluteScale", "AbsoluteMPFBias", "Fragmentation", "SinglePionECAL", "SinglePionHCAL", "FlavorQCD", "TimePtEta", "RelativeJEREC1", "RelativeJEREC2", "RelativeJERHF","RelativePtBB", "RelativePtEC1", "RelativePtEC2","RelativePtHF","RelativeBal", "RelativeSample", "RelativeFSR", "RelativeStatFSR", "RelativeStatEC", "RelativeStatHF", "PileUpDataMC", "PileUpPtRef", "PileUpPtBB", "PileUpPtEC1", "PileUpPtEC2", "PileUpPtHF"};
//-------------------------------------------
double intlumi[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1};
double lumiwt[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1};
//unsigned int l1trg[4], hlttr[8], tetrg[2];
unsigned int mypow_2[32];

//std::ofstream myfile;
//myfile.open("txt.log");

//const bool m_trigeff = true;
//const int njetptmn=nHLTmx; // 8; //10
const int njetptmn=ngenPT; //5
const int njetptbin=120;

#ifdef DIJETAVE
const char* jethlt_name[nHLTmx]={"HLT_PFJet60_v","HLT_PFJet80_v","HLT_PFJet140_v","HLT_PFJet200_v","HLT_PFJet260_v","HLT_PFJet320_v","HLT_PFJet400_v","HLT_PFJet450_v","HLT_PFJet500_v"};
const char* jethlt_lowest={"HLT_PFJet40_v"};

//double leadingPtThreshold[nHLTmx+1] ={76, 101, 164, 232, 295, 373, 449, 507, 612, 3000.0}; //trigger turn on for 2016 UL JetHT sample
double leadingPtThreshold[nHLTmx+1] ={92, 119, 185, 251, 319, 388, 467, 518, 579, 3000.0}; //trigger turn on for 2017 UL JetHT sample

/*
#ifdef MERGE_BIN
double leadingPtThreshold[njetptmn+1] ={83, 109, 176, 247, 318, 387, 477, 573, 3000.0}; //Fit Value dijet trigger 2018
#else
double leadingPtThreshold[njetptmn+1] ={66, 95, 155, 227, 286, 350, 444, 557, 3000.0}; //Fit Value dijet trigger 2016
#endif
//double leadingPtThreshold[njetptmn+1] ={83, 109, 172, 241, 309, 377, 462, 570, 3000.0}; //Fit Value dijet trigger 2017
*/

//double compres[njetptmn] = {1630, 5320, 62.1, 38.9, 27.0, 4.33, 1.23, 1.0};
//double compres[njetptmn] = {1630, 5320, 62.1, 38.9, 27.0, 4.33, 1.23, 1.0};

//#else

#endif

#ifdef DIJETAVE
double jethlt_thr[nHLTmx]={60,80,140,200,260,320,400,450,500};
//#else

#endif
double prescl[nHLTmx];

#ifdef TRACKSYS
const int ntype=3; 
#else
const int ntype=2;
#endif

const int njetetamn=1; // GMA 4; eta

#ifdef  LHAPDF
const int nnnmx=101;
double pdfwt[nnnmx];
//TH1F* h_genvarpdf[ndef][njet][nkappa][njetetamn][njetptmn][nnnmx];
TH1F* h_genvarpdf[ndef][njet][nkappa][njetetamn][ngenPT][nnnmx];
TH1* h_genvarpdf2D[ndef][njet][nkappa][njetetamn][nnnmx];

const int nmgscale=9;
double mgscale[nmgscale];
TH1F* h_genvarmgscale[ndef][njet][nkappa][njetetamn][ngenPT][nmgscale];
TH1* h_genvarmgscale2D[ndef][njet][nkappa][njetetamn][nmgscale];
#endif

#ifdef SCALEUNC
//Only available in Py8 Flat
const int nscale=46;
double scalewt[nscale];
TH1F* h_genvarscaleunc[ndef][njet][nkappa][njetetamn][ngenPT][nscale];
TH1* h_genvarscaleunc2D[ndef][njet][nkappa][njetetamn][nscale];
#endif

#ifdef  JETENERGY
//const int nsrc = 26;
const int njecmx=2*nsrc+1;
//TH1F* h_recovarjec[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
TH1F* h_recovarjec[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1* h_recovarjec2D[ndef][njet][nkappa][njetetamn][njecmx];
#elif defined(JETRESO)
const int njecmx = 3;
//TH1F* h_recovarres[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH2F* h_RM_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH1F* h_genmiss_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH1F* h_recofake_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];

TH1F* h_recovarres[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH2F* h_RM_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1F* h_genmiss_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1F* h_recofake_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];

TH2* h_RM_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recovarres2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_genmiss_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recofake_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
#else
const int njecmx=1;
#endif

const int nGenReso=1;
double etarange[njetetamn] ={2.1}; //2.5
double resetarange[njetetamn+4] ={0, 0.5, 1.0, 1.5}; //, 2.0, 2.5, 3.0, 3.5};
double par0[njetetamn+4]={1.02, 1.02, 1.022, 1.017, 0.98}; //, 0.9327};
double par1[njetetamn+4]={7.3e-6, -7.3e-6, -5.66e-6, -9.9e-6, 1.41e-4}; //, 4.6e-4};
double par2[njetetamn+4]={-8.2e-9, -8.2e-9, -3.58e-9, -4.18e-9, -6.104e-8}; //, -4.041e-7};
double particlept[4]={0.0, 0.25, 0.50, 1.00};

#ifdef TRACKSYS
const char* typname[ntype]={"Jets", "Charged Particles"};
#else
const char* typname[ntype]={"Jets", "Charged Particles"};
#endif
static const int njetmx =30;

int getbinid(double val, int nbmx, double* array) {
  if (val<array[0]) return -2;
  for (int ix=0; ix<=nbmx; ix++) {
    if (val < array[ix]) return ix-1;
  }
  return -3;
}

double Phi_0_2pi(double x) {
  while (x >= 2*M_PI) x -= 2*M_PI;
  while (x <     0.)  x += 2*M_PI;
  return x;
}

double Phi_mpi_pi(double x) {
  while (x >= M_PI) x -= 2*M_PI;
  while (x < -M_PI) x += 2*M_PI;
  return x;
}

double dPhi(double phi1,double phi2){
  phi1=Phi_0_2pi(phi1);
  phi2=Phi_0_2pi(phi2);
  return Phi_mpi_pi(phi1-phi2);
}

double dPT(double pt1, double pt2){
	return ((pt1 - pt2) / (pt1 + pt2));
}

 int sbitx(unsigned ival, int ibit) {
 unsigned den = mypow_2[ibit]; // unsigned(pow(2., double(ibit)));
 int isel = unsigned(ival/den)%2;
 //  int isel = unsigned(ival/den);
 //cout <<"iv "<< ival<<" "<<ibit<<" "<<den<<" "<<ival/den<<" "<<unsigned(ival/den)<<" "<<isel<<endl;

 return isel;
}

double respfun(double a, double b, double c, double x){
  double func=a+b*x+c*x*x;
  return func;
}

double JetCharge1(int charge, double candspt, double jpt, double k);

double candsmom(int charge, double candspt, double k);
double candsmom2(double p, double k);

double dotproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k);
double crossproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k);

double dotProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k);
double crossProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k);

struct triggervar{
  HepLorentzVector trg4v;
  bool		  both;
  bool            level1;
  bool            highl;
  int             ihlt;
  int             prescl;
};

//
// class declaration
//

class QCDEventShape : public edm::EDAnalyzer {
   public:
      explicit QCDEventShape(const edm::ParameterSet&);
      ~QCDEventShape();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() override;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
      virtual void endJob() override;

      virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
 
  // int sbitx(unsigned ival, int ibit);

  bool isHistFill;
  bool isTrigger;
  //bool isRECO[ntype][njetetamn];
  bool isMC;
  //bool isRECOJC;
  //bool isGENJC;
  //  bool isParticle; //Do we want particle level informations, other than jets ?
  //  bool isGenParticle; //Do we want Simulated particle level informations, other than jets ?
  bool isReconstruct; // otherwise Only generator level informations  
  //  bool isPartQCD; //For tracker variables, recosntruct QCD EVT variables
  bool isJetQCD;  //For Jet variables, recosntruct QCD EVT variables
  bool isGenJET; // Genjet information or note (for herwig/alpgen, donot store this ?)
  //  double trackPtThreshold; //Threshold of track Pt to store it in root file, -ve implies don't store

  //  double etarange; //Eta range of all jets
  double ptthreshold; //Pt threshold of JEC jets
  double leadingPtthreshold; //Pt threshold of JEC leading jet
  bool   isOtherAlgo; // store Kt4 and ak7 variables or not
  double weight=1; //weight for histogramme fit
  double weight2=1;
 
  std::string m_resolutions_file;
  std::string scalefile;

  std::string theHLTTag;
  //unsigned int mypow_2[32];
  int nevt;

  std::string theRootFileName;
  //TFile* //theFile;
  //TTree* //T1;

  //ifstream myfile ("example.txt");
  //std::ofstream myfile;
  //myfile.open("txt.log");
  
  TDirectoryFile *TUnfoldBinng2D =new TDirectoryFile("analyzeBasicPat2D","2D Unfolding Historgams"); // Directory for 2D TUnfolding histograms
  TH2F* h_2ht;

  TH1F* vec_anglex[nhist];

  //Jet Charge 1D
  //TH1F* h_recovar[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_genvar[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_recofake[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_genmiss[ndef][njet][nkappa][njetetamn][njetptmn]; 
  //TH2F* h_RM[ndef][njet][nkappa][njetetamn][njetptmn];

  TH1F* h_recovar[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM[ndef][njet][nkappa][njetetamn][ngenPT];

  TH1F* h_recovarIB[ndef][njet][nkappa][njetetamn][ngenPT]; //identical binning & range for all the variables

#ifdef FLAV
  //First-set Flavor Tagging
  TH1F* h_recovar_gjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ujet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ubarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_djet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_dbarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ojet[ndef][njet][nkappa][njetetamn][ngenPT];

  //Second-set Flavor Tagging
  TH1F* h_recovar_qjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_aqjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_aqgjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_aqojet[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef PREFIRE
  TH1F* h_recovar_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_prefire[ndef][njet][nkappa][njetetamn][ngenPT];

  TH1F* h_recovar_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];

  TH1F* h_recovar_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef TRACKEFF
  TH1F* h_recovar_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef TRACKPTUP
  TH1F* h_recovar_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_trackpt1[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

#ifdef TRACKPTDOWN
  TH1F* h_recovar_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_trackpt2[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

  //Profile histogram
/*  TProfile* hchpt; // jetpt vs. charge
  TProfile* hchpt1;
  TProfile* hchpt2;
  TProfile* hprof_reco_jco_pt[ndef][njet][nkappa]; // Reco JCO vs. jetpt
  TProfile* hprof_gen_jco_pt[ndef][njet][nkappa]; // Gen JCO vs. jetpt
*/
  TH2F* hchpt;
  TH2F* hchpt1;
  TH2F* hchpt1_gjet;
  TH2F* hchpt1_ujet;
  TH2F* hchpt1_ubarjet;
  TH2F* hchpt1_djet;
  TH2F* hchpt1_dbarjet;

  TH2F* hchpt2;
  TH2F* hchpt2_gjet;
  TH2F* hchpt2_ujet;
  TH2F* hchpt2_ubarjet;
  TH2F* hchpt2_djet;
  TH2F* hchpt2_dbarjet;

  TH2F* hprof_reco_jco_pt[ndef][njet][nkappa]; // Reco JCO vs. jetpt
  TH2F* hprof_gen_jco_pt[ndef][njet][nkappa]; // Gen JCO vs. jetpt

  //Ratio of Matched charged pT to charged pT vs GenJet pT
  //TProfile *hprof_matchedChg_R_allChg_genjetpt[njet][nkappa];
  TH2F *hprof_matchedChg_R_allChg_genjetpt[njet][nkappa];
  
  //Ratio of track pt to Jet pt vs. Jet pT
  //TProfile* hprof_gen_trackpt_R_jetpt_jetpt[njet][nkappa];
  //TProfile* hprof_reco_trackpt_R_jetpt_jetpt[njet][nkappa];

  TH2F* hprof_gen_trackpt_R_jetpt_jetpt[njet][nkappa];
  TH2F* hprof_reco_trackpt_R_jetpt_jetpt[njet][nkappa];

  TH2F* hprof_reco_jco_pt_debug[ndef][njet][nkappa];  //debug
#ifdef FLAV 
  //Flavor Tagging
  /*
  TProfile* hprof_jco_pt_gjet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_ujet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_ubarjet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_djet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_dbarjet[ndef][njet][nkappa];
  TProfile* hprof_jco_pt_ojet[ndef][njet][nkappa];
  */
  TH2F* hprof_jco_pt_gjet[ndef][njet][nkappa];
  TH2F* hprof_jco_pt_ujet[ndef][njet][nkappa];
  TH2F* hprof_jco_pt_ubarjet[ndef][njet][nkappa];
  TH2F* hprof_jco_pt_djet[ndef][njet][nkappa];
  TH2F* hprof_jco_pt_dbarjet[ndef][njet][nkappa];
  TH2F* hprof_jco_pt_ojet[ndef][njet][nkappa];

#endif

  //static const int njetmx =30;
  //int npfjets; 
  int nchg, nchg1, nchg2;
  int pfjetmul[njetmx];
  float pfjetpx[njetmx], pfjetpy[njetmx], pfjetpz[njetmx], pfjeten[njetmx],  pfjetenuc[njetmx], neuemf[njetmx], neuhad[njetmx];
  float pfjetenscl[njetmx], pfjetensmr[njetmx];
  float jetpt, jeteta, jetphi; 
  int nallpf, ncharged;
  float thphi[nhist], thrust[nhist], anglex[nhist];
  float jtthan;
  int irunhlt, l1pres[nHLTmx],  hltpres[nHLTmx], compres[nHLTmx]; 
  static const int nprimx=150;
  int nprim, ntkpm[nprimx];
  //float  primdx[nprimx], primdy[nprimx], primdz[nprimx], 
  float primpr[nprimx];
  int irun, ilumi, ibrnc;
  unsigned int ievt;
  float inslumi;
  int nsicls, ntottrk;
//#ifdef FLAT 
  //bool isFlat=1;
//#else 
  bool isFlat=0;
//#endif

   float defweight=1.0, weighttrg=1., qlow=-10., qhigh=100000.;
//-------------------------------------------TunfoldBinning
//-------------------------------------------2D Bining using TUnfoldBinning Jet Charge

  TUnfoldBinning *binsRec2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *binsGen2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *RecoBinning2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *GenBinning2D[ndef][njet][nkappa][njetetamn];  

//-------------------------------------------Jet Charge 2D TUnfoldBinning Histograms

  TH1* h_recovar2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM2D[ndef][njet][nkappa][njetetamn];

#ifdef FLAV
  //First-set Flavor Tagging
  TH1* h_recovar_gjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ujet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ubarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_djet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_dbarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ojet2D[ndef][njet][nkappa][njetetamn];

  //Second-set Flavor Tagging
  TH1* h_recovar_qjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_aqjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_aqgjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_aqojet2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef PREFIRE
  TH1* h_recovar_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefire2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefire2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefireup_2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefiredown_2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKEFF
  TH1* h_recovar_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackeff2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTUP
  TH1* h_recovar_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt1_2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTDOWN
  TH1* h_recovar_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt2_2D[ndef][njet][nkappa][njetetamn];
#endif
//-------------------------------------------

  TH1F* recojt_CHF;
  TH1F* recojt_NHF;
  TH1F* recojt_NEMF;
  TH1F* recojt_CHM;
  TH1F* recojt_NumNeutralParticles;
  TH1F* recojt_CEMF;
  TH1F* recojt_NumConst;

  //TH1F* recojt_hist;
  //TH1F* recojt_pt[njetetamn][nHLTmx];
  TH1F* recojt_pt[njetetamn];
  TH1F* recojt_eta;
  TH1F* recojt_phi;

  TH1F* recojtallave_pt[njetetamn];
  TH1F* recojtallavewt1_pt[njetetamn];

  TH1F* recojtave_pt[njetetamn][nHLTmx];
  TH1F* recojtavewt1_pt[njetetamn][nHLTmx];
  TH1F* recojt1_pt[njetetamn];
  TH1F* recojt1_eta;
  TH1F* recojt1_phi;

  TH1F* recojt2_pt[njetetamn];
  TH1F* recojt2_eta;
  TH1F* recojt2_phi;

  TH1F* recojt3_pt[njetetamn];
  TH1F* recojt3_eta;
  TH1F* recojt3_phi;

  TH1F* recoht2_pt[njetetamn];

  TH1F* hjetdpt[njetetamn];
  TH1F* hjetdphi[njetetamn];
  TH1F* hjetptbypl[njetetamn];
  TH1F* hjetpt2bypt1[njetetamn];
  TH1F* hjetpt3bypt2[njetetamn];
  //TH1F* recochg_hist;
  TH1F* recochg_pt;
  TH1F* recochg_eta;
  TH1F* recochg_phi;

  TH1F* recochg1_pt;
  TH1F* recochg1_eta;
  TH1F* recochg1_phi;

  TH1F* recochg2_pt;
  TH1F* recochg2_eta;
  TH1F* recochg2_phi;

  TH1F* recochg3_pt;
  TH1F* recochg3_eta;
  TH1F* recochg3_phi;

#ifdef FLAV
//Flavor Tagging
  //gluon-jet
  TH1F* recojtg_pt[njetetamn];
  TH1F* recojtg_eta;
  TH1F* recojtg_phi; 
  
  TH1F* recojt1g_pt[njetetamn];
  TH1F* recojt1g_eta;
  TH1F* recojt1g_phi;

  TH1F* recojt2g_pt[njetetamn];
  TH1F* recojt2g_eta;
  TH1F* recojt2g_phi;

  //u-jet
  TH1F* recojtu_pt[njetetamn];
  TH1F* recojtu_eta;
  TH1F* recojtu_phi;

  TH1F* recojt1u_pt[njetetamn];
  TH1F* recojt1u_eta;
  TH1F* recojt1u_phi;

  TH1F* recojt2u_pt[njetetamn];
  TH1F* recojt2u_eta;
  TH1F* recojt2u_phi;

  //ubar-jet
  TH1F* recojtubar_pt[njetetamn];
  TH1F* recojtubar_eta;
  TH1F* recojtubar_phi;

  TH1F* recojt1ubar_pt[njetetamn];
  TH1F* recojt1ubar_eta;
  TH1F* recojt1ubar_phi;

  TH1F* recojt2ubar_pt[njetetamn];
  TH1F* recojt2ubar_eta;
  TH1F* recojt2ubar_phi;


  //d-jet
  TH1F* recojtd_pt[njetetamn];
  TH1F* recojtd_eta;
  TH1F* recojtd_phi;
  
  TH1F* recojt1d_pt[njetetamn];
  TH1F* recojt1d_eta;
  TH1F* recojt1d_phi;
  
  TH1F* recojt2d_pt[njetetamn];
  TH1F* recojt2d_eta;
  TH1F* recojt2d_phi;

  //dbar-jet
  TH1F* recojtdbar_pt[njetetamn];
  TH1F* recojtdbar_eta;
  TH1F* recojtdbar_phi;

  TH1F* recojt1dbar_pt[njetetamn];
  TH1F* recojt1dbar_eta;
  TH1F* recojt1dbar_phi;

  TH1F* recojt2dbar_pt[njetetamn];
  TH1F* recojt2dbar_eta;
  TH1F* recojt2dbar_phi;

  //others-nonmatched-jets
  TH1F* recojto_pt[njetetamn];
  TH1F* recojto_eta;
  TH1F* recojto_phi;

  TH1F* recojt1o_pt[njetetamn];
  TH1F* recojt1o_eta;
  TH1F* recojt1o_phi;

  TH1F* recojt2o_pt[njetetamn];
  TH1F* recojt2o_eta;
  TH1F* recojt2o_phi;

 //Second-set Flavor Tagging
  TH1F* recojt_qjet_pt[njetetamn];
  TH1F* recojt_qjet_eta;
  TH1F* recojt_qjet_phi;

  TH1F* recojt_aqjet_pt[njetetamn];
  TH1F* recojt_aqjet_eta;
  TH1F* recojt_aqjet_phi;

  TH1F* recojt_aqgjet_pt[njetetamn];
  TH1F* recojt_aqgjet_eta;
  TH1F* recojt_aqgjet_phi;

  TH1F* recojt_aqojet_pt[njetetamn];
  TH1F* recojt_aqojet_eta;
  TH1F* recojt_aqojet_phi;

  TH1F* recojt1_qjet_pt[njetetamn];
  TH1F* recojt1_qjet_eta;
  TH1F* recojt1_qjet_phi;

  TH1F* recojt1_aqjet_pt[njetetamn];
  TH1F* recojt1_aqjet_eta;
  TH1F* recojt1_aqjet_phi;

  TH1F* recojt1_aqgjet_pt[njetetamn];
  TH1F* recojt1_aqgjet_eta;
  TH1F* recojt1_aqgjet_phi;

  TH1F* recojt1_aqojet_pt[njetetamn];
  TH1F* recojt1_aqojet_eta;
  TH1F* recojt1_aqojet_phi;

  TH1F* recojt2_qjet_pt[njetetamn];
  TH1F* recojt2_qjet_eta;
  TH1F* recojt2_qjet_phi;

  TH1F* recojt2_aqjet_pt[njetetamn];
  TH1F* recojt2_aqjet_eta;
  TH1F* recojt2_aqjet_phi;

  TH1F* recojt2_aqgjet_pt[njetetamn];
  TH1F* recojt2_aqgjet_eta;
  TH1F* recojt2_aqgjet_phi;

  TH1F* recojt2_aqojet_pt[njetetamn];
  TH1F* recojt2_aqojet_eta;
  TH1F* recojt2_aqojet_phi;
#endif

//-------------------------------------------
  //TH1F* genjt_hist;
  TH1F* genjt_pt[njetetamn];
  TH1F* genjt_eta;
  TH1F* genjt_phi;
  TH1F* genjtallave_pt[njetetamn];

  TH1F* genjt1_pt[njetetamn];
  TH1F* genjt1_eta;
  TH1F* genjt1_phi;

  TH1F* genjt2_pt[njetetamn];
  TH1F* genjt2_eta;
  TH1F* genjt2_phi;

  TH1F* genjt3_pt[njetetamn];
  TH1F* genjt3_eta;
  TH1F* genjt3_phi;

  TH1F* genjetdpt[njetetamn];
  TH1F* genjetdphi[njetetamn];
  TH1F* genjetptbypl[njetetamn];
  TH1F* genjetpt2bypt1[njetetamn];
  TH1F* genjetpt3bypt2[njetetamn];

  //TH1F* genchg_hist;
  TH1F* genchg_pt;
  TH1F* genchg_eta;
  TH1F* genchg_phi;

  TH1F* genchg1_pt;
  TH1F* genchg1_eta;
  TH1F* genchg1_phi;

  TH1F* genchg2_pt;
  TH1F* genchg2_eta;
  TH1F* genchg2_phi;

  TH1F* genchg3_pt;
  TH1F* genchg3_eta;
  TH1F* genchg3_phi;
/*
  TH1F* genneu_hist;
  TH1F* genneu_pt;
  TH1F* genneu_eta;
  TH1F* genneu_phi;

  TH1F* genjt_oth_pt[njetetamn];
  TH1F* genjt_oth_eta;
  TH1F* genjt_oth_phi;

  TH1F* genchg_oth_hist;
  TH1F* genchg_oth_pt;
  TH1F* genchg_oth_eta;
  TH1F* genchg_oth_phi;

  TH1F* genneu_oth_hist;
  TH1F* genneu_oth_pt;
  TH1F* genneu_oth_eta;
  TH1F* genneu_oth_phi;
*/

  TH1F* prim_hist[nHLTmx+1];
  TH1F* prim_sel[nHLTmx+1];

  TH1F* prim_hist_rewt[nHLTmx+1];
  TH1F* prim_sel_rewt[nHLTmx+1];

  TH2F* prim_correl;

  TH1F* prim_alltrk[2];
  TH1F* prim_seltrk[2];
  TH1F* prim_goodtrk[2];
  TH1F* prim_dx[2];
  TH1F* prim_dy[2];
  TH2F* prim_dxy[2];
  TH1F* prim_dz[2];  
  TH1F* prim_prob[2];

  TH1F* h_jetpt[nHLTmx][njetetamn];
  TH1F* h_jeteta[nHLTmx];
  TH1F* h_jetphi[nHLTmx][njetetamn];
  TH1F* h_njets[njetetamn];
  TH1F* h_nchg[njetetamn];

  TH1F* gen_njets[njetetamn];

  TH1F* trgjet_angle[nHLTmx][2];
  TH2F* trgjet_2dangle[nHLTmx][2];
  TH1F* trgjet_pt[nHLTmx][2];
  TH1F* trgjet_eta[nHLTmx][2];
  TH1F* trgjet_phi[nHLTmx][2];
  TH1F* prbjet_pt[nHLTmx][2];
  TH1F* prbjet_eta[nHLTmx][2];
  TH1F* prbjet_phi[nHLTmx][2];

  //Dijet trigger efficiency
  TH1F* hlt_dijettag[nHLTmx][njetetamn];
  TH1F* hlt_dijetprob[nHLTmx][njetetamn];

  //Trigger Normal case
  TH1F* counthist; 

//-------------------------------------------Member data
  edm::EDGetTokenT<GenEventInfoProduct> generator1_;
  edm::EDGetTokenT<pat::JetCollection> jetSrcToken_;
  edm::EDGetTokenT<edm::View<pat::PackedGenParticle> > genSrcToken_;
  edm::EDGetTokenT<pat::PackedCandidateCollection> PFSrcToken_;
  edm::EDGetTokenT<edm::TriggerResults> triggerBits_;
  edm::EDGetTokenT<pat::TriggerObjectStandAloneCollection> triggerObjects_;
  edm::EDGetTokenT<pat::PackedTriggerPrescales> triggerPrescales_;
  edm::EDGetTokenT<pat::METCollection> metToken_;
  edm::EDGetTokenT<reco::VertexCollection> vtxToken_;
  edm::EDGetTokenT<reco::BeamSpot> beamSpot_;
  edm::EDGetTokenT<reco::GenJetCollection> genjetToken_;
  edm::EDGetTokenT<std::vector<PileupSummaryInfo> > pileup_;
  edm::EDGetTokenT<reco::PFJetCollection> ak5PFjetToken_;
  edm::EDGetTokenT<reco::GenJetCollection> ak5GenJetToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfCTEQWeightsInputToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfMMTHWeightsInputToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfNNPDFWeightsInputToken_;
  const edm::EDGetTokenT<LHERunInfoProduct> LHERunInfoToken_;
  const edm::EDGetTokenT<LHEEventProduct> lheEventProductToken_;
  edm::EDGetTokenT<double> m_rho_token;
#ifdef PREFIRE
  edm::EDGetTokenT< double > prefweight_token;
  edm::EDGetTokenT< double > prefweightup_token;
  edm::EDGetTokenT< double > prefweightdown_token;
#endif

  /*
  edm::EDGetTokenT<reco::TrackCollection> tracksToken_;
  edm::EDGetTokenT<bool> filterGoodVerticesToken_;
  edm::EDGetTokenT<bool> filterglobalSuperTightHalo2016FilterToken_;
  edm::EDGetTokenT<bool> filterHBHENoiseFilterToken_;
  edm::EDGetTokenT<bool> filterHBHENoiseIsoFilterToken_;
  edm::EDGetTokenT<bool> filterEcalDeadCellTriggerPrimitiveFilterToken_;
  edm::EDGetTokenT<bool> filterBadPFMuonFilterToken_;
  edm::EDGetTokenT<bool> filterBadPFMuonDzFilterToken_;
  edm::EDGetTokenT<bool> filtereeBadScFilterToken_;
  edm::EDGetTokenT<bool> filterecalBadCalibFilterToken_;
  */

  float qscale;
  float wtfact; //MC : eventinfo->weight(); data : hltpres[ihltfill]*l1pres[ihltfill];
  int procid, npilup1, npilup2; //1:-5 to -1, 2:0 to 3

  int idall;
  float xfrac1, xfrac2, xpdf1, xpdf2;  

  //HLTConfigProvider hltConfig_;
  HLTPrescaleProvider hltPrescaleProvider_;
  int nreco, naa, nbb, ncc;
  //int Reco=0,Gen=0,RM=0;

std::vector<JetCorrectionUncertainty*> vsrc; // (nsrc);
reweight::PoissonMeanShifter PShiftUp_;
reweight::PoissonMeanShifter PShiftDown_;
edm::LumiReWeighting *LumiWeights_;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
  QCDEventShape::QCDEventShape(const edm::ParameterSet& iConfig):
  generator1_(consumes<GenEventInfoProduct>(iConfig.getParameter<edm::InputTag>("evtinfo"))),
  jetSrcToken_(consumes<pat::JetCollection>(iConfig.getParameter<edm::InputTag>("jetSrc"))),
  genSrcToken_(consumes<edm::View<pat::PackedGenParticle> >(iConfig.getUntrackedParameter<edm::InputTag>("genSrc"))),
  PFSrcToken_(consumes<pat::PackedCandidateCollection>(iConfig.getParameter<edm::InputTag>("pfSrc"))),
  triggerBits_(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("bits"))),
  triggerObjects_(consumes<pat::TriggerObjectStandAloneCollection>(iConfig.getParameter<edm::InputTag>("objects"))),
  triggerPrescales_(consumes<pat::PackedTriggerPrescales>(iConfig.getParameter<edm::InputTag>("prescales"))),
  metToken_(consumes<pat::METCollection>(iConfig.getParameter<edm::InputTag>("metSrc"))),
  vtxToken_(consumes<reco::VertexCollection>(iConfig.getParameter<edm::InputTag>("vertices"))),
  beamSpot_(consumes<reco::BeamSpot>(iConfig.getParameter<edm::InputTag>("bsSrc"))),
  genjetToken_(consumes<reco::GenJetCollection>(iConfig.getParameter<edm::InputTag>("genjetSrc"))),
  pileup_(consumes<std::vector<PileupSummaryInfo> >(iConfig.getParameter<edm::InputTag>("pileupSrc"))),
  ak5PFjetToken_(consumes<reco::PFJetCollection>(iConfig.getParameter<edm::InputTag>("ak5pfJetSrc"))),
  ak5GenJetToken_(consumes<reco::GenJetCollection>(iConfig.getParameter<edm::InputTag>("ak5genJetSrc"))),
  pdfCTEQWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFCTEQWeightsInputTag"))),
  pdfMMTHWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFMMTHWeightsInputTag"))),
  pdfNNPDFWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFNNPDFWeightsInputTag"))),
  LHERunInfoToken_(consumes<LHERunInfoProduct, edm::InRun >(iConfig.getParameter<edm::InputTag>("LHERunInfoProductInputTag"))),
  lheEventProductToken_(consumes<LHEEventProduct>(iConfig.getParameter<edm::InputTag>("LHEEventProductInputTag"))),
#ifdef PREFIRE
  prefweight_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProb"))),
  prefweightup_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProbUp"))),
  prefweightdown_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProbDown"))),
#endif

/*
  tracksToken_(consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>("tracks"))),
  filterGoodVerticesToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterGoodVertices"))),
  filterglobalSuperTightHalo2016FilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterglobalSuperTightHalo2016Filter"))),
  filterHBHENoiseFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterHBHENoiseFilter"))),
  filterHBHENoiseIsoFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterHBHENoiseIsoFilter"))),
  filterEcalDeadCellTriggerPrimitiveFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterEcalDeadCellTriggerPrimitiveFilter"))),
  filterBadPFMuonFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterBadPFMuonFilter"))),
  filterBadPFMuonDzFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterBadPFMuonDzFilter"))),
  filtereeBadScFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filtereeBadScFilter"))),
  filterecalBadCalibFilterToken_(consumes<bool>(iConfig.getParameter<edm::InputTag>("filterecalBadCalibFilter"))),
*/
  hltPrescaleProvider_(iConfig, consumesCollector(), *this)
{
  //now do what ever initialization is needed
  edm::Service<TFileService> fs;
  m_rho_token = consumes<double>(iConfig.getParameter<edm::InputTag>("rho"));
  //m_resolutions_file = iConfig.getParameter<edm::FileEEInPath>("resolutionsFile").fullPath();
  //scalefile = iConfig.getParameter<edm::FileInPath>("scaleFactorsFile").fullPath();
  isHistFill = iConfig.getUntrackedParameter<bool>("HistFill", true);
  //isHistFill2 = pset.getUntrackedParameter<bool>("HistFill2", false);                                            
  isTrigger = iConfig.getUntrackedParameter<bool>("Trigger", true);
  //isRECO = iConfig.getUntrackedParameter<bool>("RECO", false);
  isMC = iConfig.getUntrackedParameter<bool>("MonteCarlo", false);
  isReconstruct = iConfig.getUntrackedParameter<bool>("Reconstruct", true);
  isJetQCD = iConfig.getUntrackedParameter<bool>("JetQCD", false);
  isGenJET = iConfig.getUntrackedParameter<bool>("GenJET", false);
  //etarange = iConfig.getUntrackedParameter<double>("EtaRange", 5.0);
  ptthreshold = iConfig.getUntrackedParameter<double>("PtThreshold", 10.0);
  //leadingPtthreshold = iConfig.getUntrackedParameter<double>("LeadingPtThreshold", 40.0);
  isOtherAlgo = iConfig.getUntrackedParameter<bool>("OtherAlgo", false);
  weight2 = iConfig.getUntrackedParameter<double>("HistWeight", 1.0);
  weight = weight2;
  theHLTTag = iConfig.getUntrackedParameter<string>("HLTTag", "HLT");
  theRootFileName = iConfig.getUntrackedParameter<string>("RootFileName");
 
  //cout << "Testing 1 ==== " <<njecmx<< endl;

  char RecoBinName[100], GenBinName[100], Axisname[100]; 
  char name[200];
  char title[200];

//-------------------------------------------Define TUnfoldBinning Jet Charge
//Binning scheme for both RECO & GEN and for all 3 definition, 2 jets and 10 kappas using array
	for(int id=0; id<ndef; id++){
		for(int ij=0; ij<njet; ij++){
			for (int ik=0; ik<nkappa; ik++){
				for (int iet=0; iet<njetetamn; iet++) {
				sprintf(RecoBinName, "Detector2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                binsRec2D[id][ij][ik][iet] = new TUnfoldBinning(RecoBinName);
                		sprintf(RecoBinName, "Recobin2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                		RecoBinning2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->AddBinning(RecoBinName);
                		sprintf(Axisname, "d%i_j%i_k%i", id,ij,ik);
                		//RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], false, false);
				RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nrecobins[id][ij][ik], recorng[id][ij][ik], false, false);
                		sprintf(Axisname, "pt");
                		//RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nHLTmx, recohtbins, false, false);
                		RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);
				//RecoBinning2D[iet][id][ij][ik]->AddAxis(Axisname, PTbins, recohtbins2D, false, false);

				sprintf(GenBinName, "Generator2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                binsGen2D[id][ij][ik][iet] = new TUnfoldBinning(GenBinName);
                		sprintf(GenBinName, "Genbin2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                		GenBinning2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->AddBinning(GenBinName);
               			sprintf(Axisname, "d%i_j%i_k%i", id, ij, ik);
                		//GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik], false, false);
				GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenbins[id][ij][ik], genrng[id][ij][ik], false, false);
                		sprintf(Axisname, "pt");
                		//GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nHLTmx, recohtbins, false, false);
				GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);
				//GenBinning2D[iet][id][ij][ik]->AddAxis(Axisname, PTbins, recohtbins2D, false, false);
				}
			}
		}
	}

//Histograms for 2D binning scheme
for(int id=0; id<ndef; id++){
        for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
			for (int iet=0; iet<njetetamn; iet++) {
				if (isReconstruct) {
					sprintf(name, "dd_reco_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                        		sprintf(title, "2D Reco Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                        		h_recovar2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
					h_recovar2D[id][ij][ik][iet]->Sumw2();

#ifdef FLAV
					//Flavor Tagging
					sprintf(name, "dd_reco_gjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco gJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_gjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_gjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_ujet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco uJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ujet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ujet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_ubarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco ubarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ubarjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ubarjet2D[id][ij][ik][iet]->Sumw2();


					sprintf(name, "dd_reco_djet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco dJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_djet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_djet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_dbarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco dbarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_dbarjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_dbarjet2D[id][ij][ik][iet]->Sumw2();


					sprintf(name, "dd_reco_ojet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco oJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ojet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ojet2D[id][ij][ik][iet]->Sumw2();

					//Second-set Flavor Tagging
					sprintf(name, "dd_reco_qjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco qJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_qjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_qjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_aqjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco aqJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_aqjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_aqjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_aqgjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco aqgJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_aqgjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_aqgjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_aqojet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco aqoJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_aqojet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_aqojet2D[id][ij][ik][iet]->Sumw2();
#endif

					sprintf(name, "dd_recofake_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake2D[id][ij][ik][iet]->Sumw2(); 
					}
#ifdef  LHAPDF
            			for (int ix=1; ix<nnnmx; ix++) {
            				sprintf(name, "dd_genpdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
            				sprintf(title, "2D Genpdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
            				h_genvarpdf2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
            				h_genvarpdf2D[id][ij][ik][iet][ix]->Sumw2();
           				}
				for(int iy=0; iy<nmgscale; iy++){
					sprintf(name, "dd_genmgscale_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, iy);
                                        sprintf(title, "2D Genmgscale Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],iy);
                                        h_genvarmgscale2D[id][ij][ik][iet][iy] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarmgscale2D[id][ij][ik][iet][iy]->Sumw2();
					}
#endif

#ifdef SCALEUNC
                                for (int ix=0; ix<nscale; ix++) {
                                        sprintf(name, "dd_genscaleunc_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Gen Scale Unc Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genvarscaleunc2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarscaleunc2D[id][ij][ik][iet][ix]->Sumw2();
                                        }
#endif

#ifdef  JETENERGY
            			for (int ix=1; ix<njecmx; ix++) {
            				sprintf(name, "dd_recojec_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
            				sprintf(title, "2D Recojec Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
            				h_recovarjec2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
            				h_recovarjec2D[id][ij][ik][iet][ix]->Sumw2();
            				}
#elif defined(JETRESO)
	      			for (int ix=0; ix<njecmx; ix++ ) {
              				sprintf(name, "dd_reco_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D Reco reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_recovarres2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_recovarres2D[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_corr_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D Corr reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_RM_JER_2D[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
              				h_RM_JER_2D[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_fake_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D fake reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_recofake_JER_2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_recofake_JER_2D[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_miss_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D miss reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_genmiss_JER_2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_genmiss_JER_2D[id][ij][ik][iet][ix]->Sumw2();
            				}
#endif					
					sprintf(name, "dd_gen_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                        sprintf(title, "2D Gen Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                		        h_genvar2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                        		h_genvar2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_genmiss_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss2D[id][ij][ik][iet]->Sumw2();

					if (isReconstruct) {
						sprintf(name, "dd_corr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                                sprintf(title, "Gen_Reco Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                		                h_RM2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                		h_RM2D[id][ij][ik][iet]->Sumw2();
						}

#ifdef PREFIRE
				if (isReconstruct) {
                                        sprintf(name, "dd_reco_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefire2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefire2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefire2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_corr_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefire2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefire2D[id][ij][ik][iet]->Sumw2();

					//up
					sprintf(name, "dd_reco_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefireup_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire up Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefireup_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefireup_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefireup_2D[id][ij][ik][iet]->Sumw2();

					//down
					sprintf(name, "dd_reco_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefiredown_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire down Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefiredown_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefiredown_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefiredown_2D[id][ij][ik][iet]->Sumw2();
                                        }

					sprintf(name, "dd_gen_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefire2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefire2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefire2D[id][ij][ik][iet]->Sumw2();			

					//up
					sprintf(name, "dd_gen_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefireup_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefireup_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefireup_2D[id][ij][ik][iet]->Sumw2();

					//down
					sprintf(name, "dd_gen_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefiredown_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefiredown_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefiredown_2D[id][ij][ik][iet]->Sumw2();
#endif

#ifdef TRACKEFF
					if (isReconstruct) {
						sprintf(name, "dd_reco_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
	                                        sprintf(title, "2D Reco Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
        	                                h_recovar_trackeff2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                	                        h_recovar_trackeff2D[id][ij][ik][iet]->Sumw2();

                        	                sprintf(name, "dd_recofake_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                	        sprintf(title, "2D Reco Fake Track Eff Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        	h_recofake_trackeff2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        	h_recofake_trackeff2D[id][ij][ik][iet]->Sumw2();
	
						sprintf(name, "dd_corr_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackeff2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackeff2D[id][ij][ik][iet]->Sumw2();
						}
						
					sprintf(name, "dd_genmiss_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackeff2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Sumw2();					
#endif

#ifdef TRACKPTUP
					if (isReconstruct) {
                                                sprintf(name, "dd_reco_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt1_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT up Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt1_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt1_2D[id][ij][ik][iet]->Sumw2();
                                                }

                                        sprintf(name, "dd_genmiss_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Sumw2();
#endif

#ifdef TRACKPTDOWN
					if (isReconstruct) {
                                                sprintf(name, "dd_reco_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt2_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT down Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt2_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt2_2D[id][ij][ik][iet]->Sumw2();
                                                }

                                        sprintf(name, "dd_genmiss_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Sumw2();
#endif
				}
			}
		}
	}
/*
//-------------------------------------------Jet Charge Histogram
//1D Histogram for RECO & GEN for 3 definition, 2 jets, 10 kappa using array
for(int id=0; id<ndef; id++){
	for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
			for(int iet=0; iet<njetetamn; iet++){
				//for(int ipt=0; ipt<njetptmn; ipt++){
				for(int ipt=0; ipt<ngenPT; ipt++){
					if (isReconstruct) {
					sprintf(name, "reco_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
		                        //sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                		        h_recovar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                	h_recovar[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                	//sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                               	 	h_recofake[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                	h_recofake[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "RM_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                               	 	//sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                	h_RM[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                	h_RM[id][ij][ik][iet][ipt]->Sumw2();
					}
#ifdef  LHAPDF
      		      		for (int ix=1; ix<nnnmx; ix++) {
					sprintf(name, "genpdf_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
              				//sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
					h_genvarpdf[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
					h_genvarpdf[id][ij][ik][iet][ipt][ix]-Sumw2();
					}
#endif	
#ifdef  JETENERGY
                                for (int ix=1; ix<njecmx; ix++) {
                                        sprintf(name, "recojec_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#elif defined(JETRESO)
				for (int ix=0; ix<njecmx; ix++ ) {
                                        sprintf(name, "recoreso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarres[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recovarres[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "corr_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH2F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "fake_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "miss_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif
					sprintf(name, "gen_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
		                       	//sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                		        h_genvar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                	h_genvar[id][ij][ik][iet][ipt]->Sumw2();
						
					sprintf(name, "genmiss_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                       	//sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genmiss[id][ij][ik][iet][ipt]->Sumw2();
						
					}
				}
			}
		}
	}
*/
for(int id=0; id<ndef; id++){
        for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
                        for(int iet=0; iet<njetetamn; iet++){
                                //for(int ipt=0; ipt<njetptmn; ipt++){
				for(int ipt=0; ipt<ngenPT; ipt++){
                                        if (isReconstruct) {
                                        sprintf(name, "reco_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_jc_ib_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco identical binning Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovarIB[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                                        h_recovarIB[id][ij][ik][iet][ipt]->Sumw2();
#ifdef FLAV
					//Flavor Tagging
					sprintf(name, "reco_gjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco gjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_gjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_gjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_ujet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ujet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ujet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ujet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_ubarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ubarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ubarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ubarjet[id][ij][ik][iet][ipt]->Sumw2();


					sprintf(name, "reco_djet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco djet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_djet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_djet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_dbarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco dbarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_dbarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_dbarjet[id][ij][ik][iet][ipt]->Sumw2();


					sprintf(name, "reco_ojet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ojet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ojet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ojet[id][ij][ik][iet][ipt]->Sumw2();


					//Second-set Flavor Tagging
					sprintf(name, "reco_qjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco qjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_qjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_qjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_aqjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco aqjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_aqjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_aqjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_aqgjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco aqgjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_aqgjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_aqgjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_aqojet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco aqojet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_aqojet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_aqojet[id][ij][ik][iet][ipt]->Sumw2();

#endif
                                        sprintf(name, "recofake_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        //sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM[id][ij][ik][iet][ipt]->Sumw2();
                                        }
#ifdef  LHAPDF
                                for (int ix=1; ix<nnnmx; ix++) {
                                        sprintf(name, "genpdf_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genvarpdf[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarpdf[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
				for (int iy=0; iy<nmgscale; iy++) {
                                        sprintf(name, "genmgscale_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, iy);
					sprintf(title, "Genmgscale Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),iy);
                                        h_genvarmgscale[id][ij][ik][iet][ipt][iy] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarmgscale[id][ij][ik][iet][ipt][iy]->Sumw2();
                                        }
#endif

#ifdef SCALEUNC
                                for (int ix=0; ix<nscale; ix++) {
                                        sprintf(name, "genscaleunc_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
					sprintf(title, "Gen Scale Unc Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genvarscaleunc[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarscaleunc[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif

#ifdef  JETENERGY
                                for (int ix=1; ix<njecmx; ix++) {
                                        sprintf(name, "recojec_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#elif defined(JETRESO)
                                for (int ix=0; ix<njecmx; ix++ ) {
                                        sprintf(name, "reco_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarres[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovarres[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "corr_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "fake_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "miss_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif
                                        sprintf(name, "gen_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        //sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss[id][ij][ik][iet][ipt]->Sumw2();

#ifdef PREFIRE
					if (isReconstruct) {
                                        sprintf(name, "reco_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_prefire[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Fake Prefire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_prefire[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "RM PreFire Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_prefire[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_prefire[id][ij][ik][iet][ipt]->Sumw2();

					//up
					sprintf(name, "reco_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco PreFire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_prefireup[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Prefire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_prefireup[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM PreFire up Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_prefireup[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_prefireup[id][ij][ik][iet][ipt]->Sumw2();

					//down
					sprintf(name, "reco_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco PreFire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_prefiredown[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Prefire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_prefiredown[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM PreFire down Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_prefiredown[id][ij][ik][iet][ipt]->Sumw2();
					}

					sprintf(name, "gen_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "Gen PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_prefire[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Gen PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_prefire[id][ij][ik][iet][ipt]->Sumw2();

					//up
					sprintf(name, "gen_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen PreFire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_prefireup[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen PreFire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_prefireup[id][ij][ik][iet][ipt]->Sumw2();

					//down
					sprintf(name, "gen_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen PreFire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_prefiredown[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen PreFire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_prefiredown[id][ij][ik][iet][ipt]->Sumw2();
#endif

#ifdef TRACKEFF
					if (isReconstruct) {
                                        sprintf(name, "reco_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackeff[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Fake Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackeff[id][ij][ik][iet][ipt]->Sumw2();				

					sprintf(name, "RM_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "RM Track Eff Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackeff[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackeff[id][ij][ik][iet][ipt]->Sumw2();				
					}	
					sprintf(name, "genmiss_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Gen Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackeff[id][ij][ik][iet][ipt]->Sumw2();					
#endif

#ifdef TRACKPTUP
					if (isReconstruct) {
                                        sprintf(name, "reco_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackpt1[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackpt1[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM Track pT up Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackpt1[id][ij][ik][iet][ipt]->Sumw2();
                                        }
                                        sprintf(name, "genmiss_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackpt1[id][ij][ik][iet][ipt]->Sumw2();
#endif

#ifdef TRACKPTDOWN
                                        if (isReconstruct) {
                                        sprintf(name, "reco_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackpt2[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackpt2[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM Track pT down Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackpt2[id][ij][ik][iet][ipt]->Sumw2();
                                        }
                                        sprintf(name, "genmiss_tracpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackpt2[id][ij][ik][iet][ipt]->Sumw2();
#endif
                                        }
                                }
                        }
                }
        }

for(int ij=0; ij<njet; ij++){
	for (int ik=0; ik<nkappa; ik++){
        	sprintf(name, "matched_all_jetpt_j%i_k%i",ij, ik);
                sprintf(title, "Gen Matched_All Tracks vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
		//hprof_matchedChg_R_allChg_genjetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
		//hprof_matchedChg_R_allChg_genjetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,30,-1,1);
		hprof_matchedChg_R_allChg_genjetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,20,0,2);
		hprof_matchedChg_R_allChg_genjetpt[ij][ik]->Sumw2();

		sprintf(name, "gen_trackpt_jetpt_jetpt_j%i_k%i",ij, ik);
                sprintf(title, "Gen Track to Jet pT vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
		//hprof_gen_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
		//hprof_gen_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,30,-1,1);
		hprof_gen_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,20,0,2);
		hprof_gen_trackpt_R_jetpt_jetpt[ij][ik]->Sumw2();
	
		if(isReconstruct){
			sprintf(name, "reco_trackpt_jetpt_jetpt_j%i_k%i",ij, ik);
                	sprintf(title, "Reco Track to Jet pT vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
			//hprof_reco_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			//hprof_reco_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,30,-1,1);
			hprof_reco_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,20,0,2);
			hprof_reco_trackpt_R_jetpt_jetpt[ij][ik]->Sumw2();
		}
	}
}

for(int id=0; id<ndef; id++){
	for(int ij=0; ij<njet; ij++){
        	for (int ik=0; ik<nkappa; ik++){
			sprintf(name, "reco_jco_pt_d%i_j%i_k%i",id, ij, ik);
			sprintf(title, "JCO vs pT Reco Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			//hprof_reco_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			//hprof_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,ngenPT,genhtbins,-3,3);
			hprof_reco_jco_pt[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
			hprof_reco_jco_pt[id][ij][ik]->Sumw2();

			//reco_jco_pt_d0_j0_k9
			sprintf(name, "reco_jco_pt_debug_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT Reco debug Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_reco_jco_pt_debug[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,30,-3,3);
			//hprof_reco_jco_pt_debug[id][ij][ik] = fs->make<TH2F>(name,title,20,30,1500, nrecobins[id][ij][ik], recorng[id][ij][ik]);
			hprof_reco_jco_pt_debug[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT Gen Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        //hprof_gen_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_gen_jco_pt[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
			hprof_gen_jco_pt[id][ij][ik]->Sumw2();
#ifdef FLAV
			//Flavor Tagging
			sprintf(name, "jco_pt_gjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT gjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        //hprof_jco_pt_gjet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_jco_pt_gjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
			hprof_jco_pt_gjet[id][ij][ik]->Sumw2();

			sprintf(name, "jco_pt_ujet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ujet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        //hprof_jco_pt_ujet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
                        hprof_jco_pt_ujet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_jco_pt_ujet[id][ij][ik]->Sumw2();

			sprintf(name, "jco_pt_ubarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ubarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        //hprof_jco_pt_ubarjet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_jco_pt_ubarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_jco_pt_ubarjet[id][ij][ik]->Sumw2();

			sprintf(name, "jco_pt_djet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT djet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        //hprof_jco_pt_djet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_jco_pt_djet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_jco_pt_djet[id][ij][ik]->Sumw2();

                        sprintf(name, "jco_pt_dbarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT dbarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        //hprof_jco_pt_dbarjet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_jco_pt_dbarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_jco_pt_dbarjet[id][ij][ik]->Sumw2();

			sprintf(name, "jco_pt_ojet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ojet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        //hprof_jco_pt_ojet[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			hprof_jco_pt_ojet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_jco_pt_ojet[id][ij][ik]->Sumw2();
#endif
		}
	}
}

//-------------------------------------------
 sprintf(name, "corr_jet");
 sprintf(title, "Gen_Reco_HT2");
 h_2ht=fs->make<TH2F>(name, title, 9, leadingPtThreshold, 9, leadingPtThreshold);
//-------------------------------------------

#ifndef GENPART            

  recojt_CHF = fs->make<TH1F>("recojt_CHF","CHF_{recojets}",200,0, 1);
  recojt_CHF->Sumw2();
  
  recojt_NHF = fs->make<TH1F>("recojt_NHF","NHF_{recojets}",200,0, 1);
  recojt_NHF->Sumw2();

  recojt_NEMF = fs->make<TH1F>("recojt_NEMF","NEMF_{recojets}",200,0, 1);
  recojt_NEMF->Sumw2();

  recojt_CHM = fs->make<TH1F>("recojt_CHM","CHM_{recojets}",200,0, 200);
  recojt_CHM->Sumw2();

  recojt_NumNeutralParticles = fs->make<TH1F>("recojt_NumNeutralParticles","NumNeut_{recojets}",200,0, 200);
  recojt_NumNeutralParticles->Sumw2();

  recojt_CEMF = fs->make<TH1F>("recojt_CEMF","CEMF_{recojets}",200,0, 1);
  recojt_CEMF->Sumw2();

  recojt_NumConst = fs->make<TH1F>("recojt_NumConst","recojt_NumConst_{recojets}",200,0, 1200);
  recojt_NumConst->Sumw2();
         
  //recojt_hist = fs->make<TH1F>("recojt_hist","# of recojets",20,-0.5, 19.5);
  //recojt_hist->Sumw2();
  //recojt_pt = fs->make<TH1F>("recojt_pt","Et_{recojets}",100,20., 2020.);
  //recojt_pt->Sumw2();
  recojt_eta = fs->make<TH1F>("recojt_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt_eta->Sumw2();
  recojt_phi = fs->make<TH1F>("recojt_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt_phi->Sumw2();

  //recojt1_pt = fs->make<TH1F>("recojet1_pt","Et_{recojets}",100,20., 2020.);
  //recojt1_pt->Sumw2();
  recojt1_eta = fs->make<TH1F>("recojet1_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt1_eta->Sumw2();
  recojt1_phi = fs->make<TH1F>("recojet1_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt1_phi->Sumw2();

  //recojt2_pt = fs->make<TH1F>("recojet2_pt","Et_{recojets}",100,20., 2020.);
  //recojt2_pt->Sumw2();
  recojt2_eta = fs->make<TH1F>("recojet2_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt2_eta->Sumw2();
  recojt2_phi = fs->make<TH1F>("recojet2_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt2_phi->Sumw2();

  //recojt3_pt = fs->make<TH1F>("recojet2_pt","Et_{recojets}",100,20., 2020.);
  //recojt3_pt->Sumw2();
  recojt3_eta = fs->make<TH1F>("recojet3_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt3_eta->Sumw2();
  recojt3_phi = fs->make<TH1F>("recojet3_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt3_phi->Sumw2();

#ifdef FLAV
  //gluon-jet
  recojtg_eta = fs->make<TH1F>("recojtg_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojtg_eta->Sumw2();
  recojtg_phi = fs->make<TH1F>("recojtg_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojtg_phi->Sumw2();

  recojt1g_eta = fs->make<TH1F>("recojt1g_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt1g_eta->Sumw2();
  recojt1g_phi = fs->make<TH1F>("recojt1g_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt1g_phi->Sumw2();

  recojt2g_eta = fs->make<TH1F>("recojt2g_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt2g_eta->Sumw2();
  recojt2g_phi = fs->make<TH1F>("recojt2g_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt2g_phi->Sumw2();

  //d-jet
  recojtd_eta = fs->make<TH1F>("recojtd_eta","#eta_{recojetsd}",100,-2.5, 2.5);
  recojtd_eta->Sumw2();
  recojtd_phi = fs->make<TH1F>("recojtd_phi","#phi_{recojetsd}",100,-M_PI, M_PI);
  recojtd_phi->Sumw2();

  recojt1d_eta = fs->make<TH1F>("recojt1d_eta","#eta_{recojetsd}",100,-2.5, 2.5);
  recojt1d_eta->Sumw2();
  recojt1d_phi = fs->make<TH1F>("recojt1d_phi","#phi_{recojetsd}",100,-M_PI, M_PI);
  recojt1d_phi->Sumw2();

  recojt2d_eta = fs->make<TH1F>("recojt2d_eta","#eta_{recojetsd}",100,-2.5, 2.5);
  recojt2d_eta->Sumw2();
  recojt2d_phi = fs->make<TH1F>("recojt2d_phi","#phi_{recojetsd}",100,-M_PI, M_PI);
  recojt2d_phi->Sumw2();

  //dbar-jet
  recojtdbar_eta = fs->make<TH1F>("recojtdbar_eta","#eta_{recojetsdbar}",100,-2.5, 2.5);
  recojtdbar_eta->Sumw2();
  recojtdbar_phi = fs->make<TH1F>("recojtdbar_phi","#phi_{recojetsdbar}",100,-M_PI, M_PI);
  recojtdbar_phi->Sumw2();

  recojt1dbar_eta = fs->make<TH1F>("recojt1dbar_eta","#eta_{recojetsdbar}",100,-2.5, 2.5);
  recojt1dbar_eta->Sumw2();
  recojt1dbar_phi = fs->make<TH1F>("recojt1dbar_phi","#phi_{recojetsdbar}",100,-M_PI, M_PI);
  recojt1dbar_phi->Sumw2();

  recojt2dbar_eta = fs->make<TH1F>("recojt2dbar_eta","#eta_{recojetsdbar}",100,-2.5, 2.5);
  recojt2dbar_eta->Sumw2();
  recojt2dbar_phi = fs->make<TH1F>("recojt2dbar_phi","#phi_{recojetsdbar}",100,-M_PI, M_PI);
  recojt2dbar_phi->Sumw2();

  //u-jet
  recojtu_eta = fs->make<TH1F>("recojtu_eta","#eta_{recojetsu}",100,-2.5, 2.5);
  recojtu_eta->Sumw2();
  recojtu_phi = fs->make<TH1F>("recojtu_phi","#phi_{recojetsu}",100,-M_PI, M_PI);
  recojtu_phi->Sumw2();

  recojt1u_eta = fs->make<TH1F>("recojt1u_eta","#eta_{recojetsu}",100,-2.5, 2.5);
  recojt1u_eta->Sumw2();
  recojt1u_phi = fs->make<TH1F>("recojt1u_phi","#phi_{recojetsu}",100,-M_PI, M_PI);
  recojt1u_phi->Sumw2();

  recojt2u_eta = fs->make<TH1F>("recojt2u_eta","#eta_{recojetsu}",100,-2.5, 2.5);
  recojt2u_eta->Sumw2();
  recojt2u_phi = fs->make<TH1F>("recojt2u_phi","#phi_{recojetsu}",100,-M_PI, M_PI);
  recojt2u_phi->Sumw2();

  //ubar-jet
  recojtubar_eta = fs->make<TH1F>("recojtubar_eta","#eta_{recojetsubar}",100,-2.5, 2.5);
  recojtubar_eta->Sumw2();
  recojtubar_phi = fs->make<TH1F>("recojtubar_phi","#phi_{recojetsubar}",100,-M_PI, M_PI);
  recojtubar_phi->Sumw2();

  recojt1ubar_eta = fs->make<TH1F>("recojt1ubar_eta","#eta_{recojetsubar}",100,-2.5, 2.5);
  recojt1ubar_eta->Sumw2();
  recojt1ubar_phi = fs->make<TH1F>("recojt1ubar_phi","#phi_{recojetsubar}",100,-M_PI, M_PI);
  recojt1ubar_phi->Sumw2();

  recojt2ubar_eta = fs->make<TH1F>("recojt2ubar_eta","#eta_{recojetsubar}",100,-2.5, 2.5);
  recojt2ubar_eta->Sumw2();
  recojt2ubar_phi = fs->make<TH1F>("recojt2ubar_phi","#phi_{recojetsubar}",100,-M_PI, M_PI);
  recojt2ubar_phi->Sumw2();
  
  //others
  recojto_eta = fs->make<TH1F>("recojto_eta","#eta_{recojetso}",100,-2.5, 2.5);
  recojto_eta->Sumw2();
  recojto_phi = fs->make<TH1F>("recojto_phi","#phi_{recojetso}",100,-M_PI, M_PI);
  recojto_phi->Sumw2();

  recojt1o_eta = fs->make<TH1F>("recojt1o_eta","#eta_{recojetso}",100,-2.5, 2.5);
  recojt1o_eta->Sumw2();
  recojt1o_phi = fs->make<TH1F>("recojt1o_phi","#phi_{recojetso}",100,-M_PI, M_PI);
  recojt1o_phi->Sumw2();

  recojt2o_eta = fs->make<TH1F>("recojt2o_eta","#eta_{recojetso}",100,-2.5, 2.5);
  recojt2o_eta->Sumw2();
  recojt2o_phi = fs->make<TH1F>("recojt2o_phi","#phi_{recojetso}",100,-M_PI, M_PI);
  recojt2o_phi->Sumw2(); 

  //Second-set Flavor 
  recojt_qjet_eta = fs->make<TH1F>("recojt_qjet_eta","#eta_{recojetsq}",100,-2.5, 2.5);
  recojt_qjet_eta->Sumw2();
  recojt_qjet_phi = fs->make<TH1F>("recojt_qjet_phi","#phi_{recojetsq}",100,-M_PI, M_PI);
  recojt_qjet_phi->Sumw2();

  recojt_aqjet_eta = fs->make<TH1F>("recojt_aqjet_eta","#eta_{recojetsaq}",100,-2.5, 2.5);
  recojt_aqjet_eta->Sumw2();
  recojt_aqjet_phi = fs->make<TH1F>("recojt_aqjet_phi","#phi_{recojetsaq}",100,-M_PI, M_PI);
  recojt_aqjet_phi->Sumw2();

  recojt_aqgjet_eta = fs->make<TH1F>("recojt_aqgjet_eta","#eta_{recojetsaqg}",100,-2.5, 2.5);
  recojt_aqgjet_eta->Sumw2();
  recojt_aqgjet_phi = fs->make<TH1F>("recojt_aqgjet_phi","#phi_{recojetsaqg}",100,-M_PI, M_PI);
  recojt_aqgjet_phi->Sumw2();

  recojt_aqojet_eta = fs->make<TH1F>("recojt_aqojet_eta","#eta_{recojetsaqo}",100,-2.5, 2.5);
  recojt_aqojet_eta->Sumw2();
  recojt_aqojet_phi = fs->make<TH1F>("recojt_aqojet_phi","#phi_{recojetsaqo}",100,-M_PI, M_PI);
  recojt_aqojet_phi->Sumw2();

  recojt1_qjet_eta = fs->make<TH1F>("recojt1_qjet_eta","#eta_{reco1jetsq}",100,-2.5, 2.5);
  recojt1_qjet_eta->Sumw2();
  recojt1_qjet_phi = fs->make<TH1F>("recojt1_qjet_phi","#phi_{reco1jetsq}",100,-M_PI, M_PI);
  recojt1_qjet_phi->Sumw2();

  recojt1_aqjet_eta = fs->make<TH1F>("recojt1_aqjet_eta","#eta_{reco1jetsaq}",100,-2.5, 2.5);
  recojt1_aqjet_eta->Sumw2();
  recojt1_aqjet_phi = fs->make<TH1F>("recojt1_aqjet_phi","#phi_{reco1jetsaq}",100,-M_PI, M_PI);
  recojt1_aqjet_phi->Sumw2();

  recojt1_aqgjet_eta = fs->make<TH1F>("recojt1_aqgjet_eta","#eta_{reco1jetsaqg}",100,-2.5, 2.5);
  recojt1_aqgjet_eta->Sumw2();
  recojt1_aqgjet_phi = fs->make<TH1F>("recojt1_aqgjet_phi","#phi_{reco1jetsaqg}",100,-M_PI, M_PI);
  recojt1_aqgjet_phi->Sumw2();

  recojt1_aqojet_eta = fs->make<TH1F>("recojt1_aqojet_eta","#eta_{reco1jetsaqo}",100,-2.5, 2.5);
  recojt1_aqojet_eta->Sumw2();
  recojt1_aqojet_phi = fs->make<TH1F>("recojt1_aqojet_phi","#phi_{reco1jetsaqo}",100,-M_PI, M_PI);
  recojt1_aqojet_phi->Sumw2();

  recojt2_qjet_eta = fs->make<TH1F>("recojt2_qjet_eta","#eta_{reco2jetsq}",100,-2.5, 2.5);
  recojt2_qjet_eta->Sumw2();
  recojt2_qjet_phi = fs->make<TH1F>("recojt2_qjet_phi","#phi_{reco2jetsq}",100,-M_PI, M_PI);
  recojt2_qjet_phi->Sumw2();

  recojt2_aqjet_eta = fs->make<TH1F>("recojt2_aqjet_eta","#eta_{reco2jetsaq}",100,-2.5, 2.5);
  recojt2_aqjet_eta->Sumw2();
  recojt2_aqjet_phi = fs->make<TH1F>("recojt2_aqjet_phi","#phi_{reco2jetsaq}",100,-M_PI, M_PI);
  recojt2_aqjet_phi->Sumw2();

  recojt2_aqgjet_eta = fs->make<TH1F>("recojt2_aqgjet_eta","#eta_{reco2jetsaqg}",100,-2.5, 2.5);
  recojt2_aqgjet_eta->Sumw2();
  recojt2_aqgjet_phi = fs->make<TH1F>("recojt2_aqgjet_phi","#phi_{reco2jetsaqg}",100,-M_PI, M_PI);
  recojt2_aqgjet_phi->Sumw2();

  recojt2_aqojet_eta = fs->make<TH1F>("recojt2_aqojet_eta","#eta_{reco2jetsaqo}",100,-2.5, 2.5);
  recojt2_aqojet_eta->Sumw2();
  recojt2_aqojet_phi = fs->make<TH1F>("recojt2_aqojet_phi","#phi_{reco2jetsaqo}",100,-M_PI, M_PI);
  recojt2_aqojet_phi->Sumw2();
#endif
/*
  hchpt = fs->make<TProfile>("hchpt","hchpt",99,30,1500,1,100);
  hchpt->Sumw2();

  hchpt1 = fs->make<TProfile>("hchpt1","hchpt1",99,30,1500,1,100);
  hchpt1->Sumw2();

  hchpt2 = fs->make<TProfile>("hchpt2","hchpt2",99,30,1500,1,100);
  hchpt2->Sumw2();
*/
  hchpt = fs->make<TH2F>("hchpt","hchpt",30,30,1500,99,1,100);
  hchpt->Sumw2();

  hchpt1 = fs->make<TH2F>("hchpt1","hchpt1",30,30,1500,99,1,100);
  hchpt1->Sumw2();

  hchpt1_gjet = fs->make<TH2F>("hchpt1_gjet","hchpt1_gjet",30,30,1500,99,1,100);
  hchpt1_gjet->Sumw2();

  hchpt1_ujet = fs->make<TH2F>("hchpt1_ujet","hchpt1_ujet",30,30,1500,99,1,100);
  hchpt1_ujet->Sumw2();

  hchpt1_ubarjet = fs->make<TH2F>("hchpt1_ubarjet","hchpt1_ubarjet",30,30,1500,99,1,100);
  hchpt1_ubarjet->Sumw2();

  hchpt1_djet = fs->make<TH2F>("hchpt1_djet","hchpt1_djet",30,30,1500,99,1,100);
  hchpt1_djet->Sumw2();

  hchpt1_dbarjet = fs->make<TH2F>("hchpt1_dbarjet","hchpt1_dbarjet",30,30,1500,99,1,100);
  hchpt1_dbarjet->Sumw2();

  hchpt2 = fs->make<TH2F>("hchpt2","hchpt2",30,30,1500,99,1,100);
  hchpt2->Sumw2();

  hchpt2_gjet = fs->make<TH2F>("hchpt2_gjet","hchpt2_gjet",30,30,1500,99,1,100);
  hchpt2_gjet->Sumw2();

  hchpt2_ujet = fs->make<TH2F>("hchpt2_ujet","hchpt2_ujet",30,30,1500,99,1,100);
  hchpt2_ujet->Sumw2();

  hchpt2_ubarjet = fs->make<TH2F>("hchpt2_ubarjet","hchpt2_ubarjet",30,30,1500,99,1,100);
  hchpt2_ubarjet->Sumw2();

  hchpt2_djet = fs->make<TH2F>("hchpt2_djet","hchpt2_djet",30,30,1500,99,1,100);
  hchpt2_djet->Sumw2();

  hchpt2_dbarjet = fs->make<TH2F>("hchpt2_dbarjet","hchpt2_dbarjet",30,30,1500,99,1,100);
  hchpt2_dbarjet->Sumw2();

  for(int jk=0; jk<njetetamn; jk++){
    sprintf(name, "recojetallave_pt_%i",jk);
    sprintf(title, "Et_{recojetsallave}_%g", etarange[jk]);
    recojtallave_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    recojtallave_pt[jk]->Sumw2();

    sprintf(name, "recojetallavewt1_pt_%i",jk);
    sprintf(title, "Et_{recojetsallavewt1}_%g", etarange[jk]);
    recojtallavewt1_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    recojtallavewt1_pt[jk]->Sumw2();

    sprintf(name, "recojt_pt_%i",jk);
    sprintf(title, "Et_{recojets}_%g", etarange[jk]);
    recojt_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_pt[jk]->Sumw2();

    sprintf(name, "recojet1_pt_%i",jk);
    sprintf(title, "Et_{recojets1}_%g", etarange[jk]);
    recojt1_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_pt[jk]->Sumw2();

    sprintf(name, "recojet2_pt_%i",jk);
    sprintf(title, "Et_{recojets2}_%g", etarange[jk]);
    recojt2_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_pt[jk]->Sumw2();

    sprintf(name, "recojet3_pt_%i",jk);
    sprintf(title, "Et_{recojets3}_%g", etarange[jk]);
    recojt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt3_pt[jk]->Sumw2();

#ifdef FLAV
    //gluon
    sprintf(name, "recojtg_pt_%i",jk);
    sprintf(title, "Et_{recojetg}_%g", etarange[jk]);
    recojtg_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtg_pt[jk]->Sumw2();

    sprintf(name, "recojt1g_pt_%i",jk);
    sprintf(title, "Et_{recojet1g}_%g", etarange[jk]);
    recojt1g_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1g_pt[jk]->Sumw2();

    sprintf(name, "recojt2g_pt_%i",jk);
    sprintf(title, "Et_{recojet2g}_%g", etarange[jk]);
    recojt2g_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2g_pt[jk]->Sumw2();

    //d-jet
    sprintf(name, "recojtd_pt_%i",jk);
    sprintf(title, "Et_{recojetd}_%g", etarange[jk]);
    recojtd_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtd_pt[jk]->Sumw2();

    sprintf(name, "recojt1d_pt_%i",jk);
    sprintf(title, "Et_{recojet1d}_%g", etarange[jk]);
    recojt1d_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1d_pt[jk]->Sumw2();

    sprintf(name, "recojt2d_pt_%i",jk);
    sprintf(title, "Et_{recojet2d}_%g", etarange[jk]);
    recojt2d_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2d_pt[jk]->Sumw2();

    //dbar-jet
    sprintf(name, "recojtdbar_pt_%i",jk);
    sprintf(title, "Et_{recojetdbar}_%g", etarange[jk]);
    recojtdbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtdbar_pt[jk]->Sumw2();

    sprintf(name, "recojt1dbar_pt_%i",jk);
    sprintf(title, "Et_{recojet1dbar}_%g", etarange[jk]);
    recojt1dbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1dbar_pt[jk]->Sumw2();

    sprintf(name, "recojt2dbar_pt_%i",jk);
    sprintf(title, "Et_{recojet2dbar}_%g", etarange[jk]);
    recojt2dbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2dbar_pt[jk]->Sumw2();

    //u-jet
    sprintf(name, "recojtu_pt_%i",jk);
    sprintf(title, "Et_{recojetu}_%g", etarange[jk]);
    recojtu_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtu_pt[jk]->Sumw2();
    
    sprintf(name, "recojt1u_pt_%i",jk);
    sprintf(title, "Et_{recojet1u}_%g", etarange[jk]);
    recojt1u_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1u_pt[jk]->Sumw2();

    sprintf(name, "recojt2u_pt_%i",jk);
    sprintf(title, "Et_{recojet2u}_%g", etarange[jk]);
    recojt2u_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2u_pt[jk]->Sumw2();

    //ubar-jet
    sprintf(name, "recojtubar_pt_%i",jk);
    sprintf(title, "Et_{recojetubar}_%g", etarange[jk]);
    recojtubar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtubar_pt[jk]->Sumw2();

    sprintf(name, "recojt1ubar_pt_%i",jk);
    sprintf(title, "Et_{recojet1ubar}_%g", etarange[jk]);
    recojt1ubar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1ubar_pt[jk]->Sumw2();

    sprintf(name, "recojt2ubar_pt_%i",jk);
    sprintf(title, "Et_{recojet2ubar}_%g", etarange[jk]);
    recojt2ubar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2ubar_pt[jk]->Sumw2();

    //others
    sprintf(name, "recojto_pt_%i",jk);
    sprintf(title, "Et_{recojeto}_%g", etarange[jk]);
    recojto_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojto_pt[jk]->Sumw2();

    sprintf(name, "recojt1o_pt_%i",jk);
    sprintf(title, "Et_{recojet1o}_%g", etarange[jk]);
    recojt1o_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1o_pt[jk]->Sumw2();

    sprintf(name, "recojt2o_pt_%i",jk);
    sprintf(title, "Et_{recojet2o}_%g", etarange[jk]);
    recojt2o_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2o_pt[jk]->Sumw2();

    //Second-set Flavor Tagging
    sprintf(name, "recojt_qjet_pt_%i",jk);
    sprintf(title, "Et_{reco_qjet}_%g", etarange[jk]);
    recojt_qjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_qjet_pt[jk]->Sumw2();

    sprintf(name, "recojt_aqjet_pt_%i",jk);
    sprintf(title, "Et_{reco_aqjet}_%g", etarange[jk]);
    recojt_aqjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_aqjet_pt[jk]->Sumw2();

    sprintf(name, "recojt_aqgjet_pt_%i",jk);
    sprintf(title, "Et_{reco_aqgjet}_%g", etarange[jk]);
    recojt_aqgjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_aqgjet_pt[jk]->Sumw2();

    sprintf(name, "recojt_aqojet_pt_%i",jk);
    sprintf(title, "Et_{reco_aqojet}_%g", etarange[jk]);
    recojt_aqojet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_aqojet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_qjet_pt_%i",jk);
    sprintf(title, "Et_{reco1_qjet}_%g", etarange[jk]);
    recojt1_qjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_qjet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_aqjet_pt_%i",jk);
    sprintf(title, "Et_{reco1_aqjet}_%g", etarange[jk]);
    recojt1_aqjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_aqjet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_aqgjet_pt_%i",jk);
    sprintf(title, "Et_{reco1_aqgjet}_%g", etarange[jk]);
    recojt1_aqgjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_aqgjet_pt[jk]->Sumw2();

    sprintf(name, "recojt1_aqojet_pt_%i",jk);
    sprintf(title, "Et_{reco1_aqojet}_%g", etarange[jk]);
    recojt1_aqojet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_aqojet_pt[jk]->Sumw2();
 
    sprintf(name, "recojt2_qjet_pt_%i",jk);
    sprintf(title, "Et_{reco2_qjet}_%g", etarange[jk]);
    recojt2_qjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_qjet_pt[jk]->Sumw2();

    sprintf(name, "recojt12_aqjet_pt_%i",jk);
    sprintf(title, "Et_{reco12_aqjet}_%g", etarange[jk]);
    recojt2_aqjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_aqjet_pt[jk]->Sumw2();

    sprintf(name, "recojt2_aqgjet_pt_%i",jk);
    sprintf(title, "Et_{reco2_aqgjet}_%g", etarange[jk]);
    recojt2_aqgjet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_aqgjet_pt[jk]->Sumw2();

    sprintf(name, "recojt2_aqojet_pt_%i",jk);
    sprintf(title, "Et_{reco2_aqojet}_%g", etarange[jk]);
    recojt2_aqojet_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_aqojet_pt[jk]->Sumw2();
#endif

    //sprintf(title, "Et_{recojets3}_%g", etarange[jk]);
    //recojt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    //recojt3_pt[jk]->Sumw2();

    for (int kl=0; kl<nHLTmx; kl++) { 
      //sprintf(name, "recojt_pt_%i_%i",jk, kl);
      //sprintf(title, "Et_{recojets}_%g_%i", etarange[jk], kl);
      //recojt_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      //recojt_pt[jk][kl]->Sumw2();

      sprintf(name, "recojetave_pt_%i_%i",jk, kl);
      sprintf(title, "Et_{recojetsave}_%g_%i", etarange[jk], kl);
      recojtave_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      recojtave_pt[jk][kl]->Sumw2();

      sprintf(name, "recojetavewt1_pt_%i_%i",jk, kl);
      sprintf(title, "Et_{recojetsavewt1}_%g_%i", etarange[jk], kl);
      recojtavewt1_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      recojtavewt1_pt[jk][kl]->Sumw2();
    }

    sprintf(name, "recojetHT2_%i",jk);
    sprintf(title, "recojetsHT2_%g", etarange[jk]);

    recoht2_pt[jk] = fs->make<TH1F>(name, title, 400,20., 1500.);
    recoht2_pt[jk]->Sumw2();


    sprintf(name, "hjetdpt_%i",jk);
    sprintf(title, "dpt_{recojets12}_%g", etarange[jk]);

    hjetdpt[jk] = fs->make<TH1F>(name, title, 100,20., 500.);
    hjetdpt[jk]->Sumw2();

    sprintf(name, "hjetpt2bypt1_%i",jk);
    sprintf(title, "hjetpt2bypt1 reco jet_%g", etarange[jk]);

    hjetpt2bypt1[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetpt2bypt1[jk]->Sumw2();

    sprintf(name, "hjetpt3bypt2_%i",jk);
    sprintf(title, "hjetpt3bypt2 reco jet_%g", etarange[jk]);
    hjetpt3bypt2[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetpt3bypt2[jk]->Sumw2();

    sprintf(name, "hjetdphi_%i",jk);
    sprintf(title, "#phi_{recojets}_%g", etarange[jk]);
    hjetdphi[jk] = fs->make<TH1F>(name,title,100,-M_PI, M_PI);
    hjetdphi[jk]->Sumw2();
    sprintf(name, "hjetptbypl_%i",jk);
    sprintf(title, "1st recojet Pt*sin/1st Recojet_%g", etarange[jk]);
    hjetptbypl[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetptbypl[jk]->Sumw2();

    //hjetpt2bypt1 = fs->make<TH1F>("hjetpt2bypt1", "hjetpt2bypt1 reco jet", 60, 0., 1.0);
    //hjetpt2bypt1->Sumw2();
    //hjetpt3bypt2 = fs->make<TH1F>("hjetpt2bypt1", "hjetpt2bypt1 reco jet", 60, 0., 1.0);
    //hjetpt3bypt2->Sumw2();
  }

  recochg_pt = fs->make<TH1F>("recochg_pt","Et_{recocharge_alljet}",100, 1., 101.);
  recochg_pt->Sumw2();
  recochg_eta = fs->make<TH1F>("recochg_eta","#eta_{recocharge_alljet}",100,-3., 3.);
  recochg_eta->Sumw2();
  recochg_phi = fs->make<TH1F>("recochg_phi","#phi_{recocharge_alljet}",100,-M_PI, M_PI);
  recochg_phi->Sumw2();

  recochg1_pt = fs->make<TH1F>("recochg1_pt","Et_{recocharge_jet1}",100, 1., 101.);
  recochg1_pt->Sumw2();
  recochg1_eta = fs->make<TH1F>("recochg1_eta","#eta_{recocharge_jet1}",100,-3., 3.);
  recochg1_eta->Sumw2();
  recochg1_phi = fs->make<TH1F>("recochg1_phi","#phi_{recocharge_jet1}",100,-M_PI, M_PI);
  recochg1_phi->Sumw2();

  recochg2_pt = fs->make<TH1F>("recochg2_pt","Et_{recocharge_jet2}",100, 1., 101.);
  recochg2_pt->Sumw2();
  recochg2_eta = fs->make<TH1F>("recochg2_eta","#eta_{recocharge_jet2}",100,-3., 3.);
  recochg2_eta->Sumw2();
  recochg2_phi = fs->make<TH1F>("recochg2_phi","#phi_{recocharge_jet2}",100,-M_PI, M_PI);
  recochg2_phi->Sumw2();

  recochg3_pt = fs->make<TH1F>("recochg3_pt","Et_{recocharge_jet3}",100, 1., 101.);
  recochg3_pt->Sumw2();
  recochg3_eta = fs->make<TH1F>("recochg3_eta","#eta_{recocharge_jet3}",100,-3., 3.);
  recochg3_eta->Sumw2();
  recochg3_phi = fs->make<TH1F>("recochg3_phi","#phi_{recocharge_jet3}",100,-M_PI, M_PI);
  recochg3_phi->Sumw2();

#endif
//-------------------------------------------

  for (int ij=0; ij<nhist; ij++) {
    sprintf(name, "anglex_%i", ij);
    vec_anglex[ij] = fs->make<TH1F>(name, name, 240, 0.7, 1.0);
  }

  //genjt_hist = fs->make<TH1F>("genjt_hist","# of genjets",20,-0.5, 19.5);
  //genjt_hist->Sumw2();
  for(int jk=0; jk<njetetamn; jk++){
    sprintf(name, "genjetallave_pt_%i",jk);
    sprintf(title, "Et_{genjetsallave}_%g", etarange[jk]);
    genjtallave_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    genjtallave_pt[jk]->Sumw2();

    sprintf(name, "genjt_pt_%i",jk);
    sprintf(title, "Et_{genjets}_%g", etarange[jk]);
    genjt_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt_pt[jk]->Sumw2();

    sprintf(name, "genjet1_pt_%i",jk);
    sprintf(title, "Et_{genjets1}_%g", etarange[jk]);
    genjt1_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt1_pt[jk]->Sumw2();

    sprintf(name, "genjet2_pt_%i",jk);
    sprintf(title, "Et_{genjets2}_%g", etarange[jk]);
    genjt2_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt2_pt[jk]->Sumw2();

    sprintf(name, "genjet3_pt_%i",jk);
    sprintf(title, "Et_{genjets3}_%g", etarange[jk]);
    genjt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt3_pt[jk]->Sumw2();

    /*sprintf(name, "genjt_oth_pt_%i",jk);
    sprintf(title, "#Et_{genjets_oth}_%g", etarange[jk]);

    genjt_oth_pt[jk] = fs->make<TH1F>(name,title,100, 20., 2020.);
    genjt_oth_pt[jk]->Sumw2();
   */

    sprintf(name, "genjetdpt_%i",jk);
    sprintf(title, "dpt_{genjets12}_%g", etarange[jk]);

    genjetdpt[jk] = fs->make<TH1F>(name, title, 100,20., 500.);
    genjetdpt[jk]->Sumw2();

    sprintf(name, "genjetpt2bypt1_%i",jk);
    sprintf(title, "jetpt2bypt1 gen jet_%g", etarange[jk]);

    genjetpt2bypt1[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetpt2bypt1[jk]->Sumw2();

    sprintf(name, "genjetpt3bypt2_%i",jk);
    sprintf(title, "hjetpt3bypt2 gen jet_%g", etarange[jk]);
    genjetpt3bypt2[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetpt3bypt2[jk]->Sumw2();

    sprintf(name, "genjetdphi_%i",jk);
    sprintf(title, "#phi_{genjets}_%g", etarange[jk]);
    genjetdphi[jk] = fs->make<TH1F>(name,title,100,-M_PI, M_PI);
    genjetdphi[jk]->Sumw2();
    
    sprintf(name, "genjetptbypl_%i",jk);
    sprintf(title, "1st genjet Pt*sin/1st genjet_%g", etarange[jk]);
    genjetptbypl[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetptbypl[jk]->Sumw2();
  }

  //genjt_pt = fs->make<TH1F>("genjt_pt","Et_{genjets}",100,20., 2020.);
  //genjt_pt->Sumw2();
  genjt_eta = fs->make<TH1F>("genjt_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt_eta->Sumw2();
  genjt_phi = fs->make<TH1F>("genjt_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt_phi->Sumw2();

  genjt1_eta = fs->make<TH1F>("genjet1_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt1_eta->Sumw2();
  genjt1_phi = fs->make<TH1F>("genjet1_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt1_phi->Sumw2();

  genjt2_eta = fs->make<TH1F>("genjet2_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt2_eta->Sumw2();
  genjt2_phi = fs->make<TH1F>("genjet2_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt2_phi->Sumw2();

  genjt3_eta = fs->make<TH1F>("genjet3_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt3_eta->Sumw2();
  genjt3_phi = fs->make<TH1F>("genjet3_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt3_phi->Sumw2();
  //genjt_oth_pt = fs->make<TH1F>("genjt_oth_pt","Et_{genjets_oth}",100, 20., 2020.);
  //genjt_oth_pt->Sumw2();
  /*  
  genjt_oth_eta = fs->make<TH1F>("genjt_oth_eta","#eta_{genjets_oth}",100,-5., 5.);
  genjt_oth_eta->Sumw2();
  genjt_oth_phi = fs->make<TH1F>("genjt_oth_phi","#phi_{genjets_oth}",100,-M_PI, M_PI);
  genjt_oth_phi->Sumw2();
  */
  //genchg_hist = fs->make<TH1F>("genchg_hist","# of genchargeds",120,-0.5, 239.5);
  //genchg_hist->Sumw2();
  genchg_pt = fs->make<TH1F>("genchg_pt","Et_{gencharge_alljet}",100, 1., 101.);
  genchg_pt->Sumw2();
  genchg_eta = fs->make<TH1F>("genchg_eta","#eta_{gencharge_alljet)",100,-3., 3.);
  genchg_eta->Sumw2();
  genchg_phi = fs->make<TH1F>("genchg_phi","#phi_{gencharge_alljet}",100,-M_PI, M_PI);
  genchg_phi->Sumw2();

  genchg1_pt = fs->make<TH1F>("genchg1_pt","Et_{gencharge_jet1}",100, 1., 101.);
  genchg1_pt->Sumw2();
  genchg1_eta = fs->make<TH1F>("genchg1_eta","#eta_{gencharge_jet1}",100,-3., 3.);
  genchg1_eta->Sumw2();
  genchg1_phi = fs->make<TH1F>("genchg1_phi","#phi_{gencharge_jet1}",100,-M_PI, M_PI);
  genchg1_phi->Sumw2(); 

  genchg2_pt = fs->make<TH1F>("genchg2_pt","Et_{gencharge_jet2}",100, 1., 101.);
  genchg2_pt->Sumw2();
  genchg2_eta = fs->make<TH1F>("genchg2_eta","#eta_{gencharge_jet2}",100,-3., 3.);
  genchg2_eta->Sumw2();
  genchg2_phi = fs->make<TH1F>("genchg2_phi","#phi_{gencharge_jet2}",100,-M_PI, M_PI);
  genchg2_phi->Sumw2();

  genchg3_pt = fs->make<TH1F>("genchg3_pt","Et_{gencharge_jet3}",100, 1., 101.);
  genchg3_pt->Sumw2();
  genchg3_eta = fs->make<TH1F>("genchg3_eta","#eta_{gencharge_jet3}",100,-3., 3.);
  genchg3_eta->Sumw2();
  genchg3_phi = fs->make<TH1F>("genchg3_phi","#phi_{gencharge_jet3}",100,-M_PI, M_PI);
  genchg3_phi->Sumw2();

  //genchg_oth_hist = fs->make<TH1F>("genchg_oth_hist","# of genchargeds (others)",120,-0.5, 239.5);
  //genchg_oth_hist->Sumw2();
  /* 
  genchg_oth_pt = fs->make<TH1F>("genchg_oth_pt","Et_{genchargeds_oth}",100,1., 101.);
  genchg_oth_pt->Sumw2();
  genchg_oth_eta = fs->make<TH1F>("genchg_oth_eta","#eta_{genchargeds_oth}",100,-5., 5.);
  genchg_oth_eta->Sumw2();
  genchg_oth_phi = fs->make<TH1F>("genchg_oth_phi","#phi_{genchargeds_oth}",100,-M_PI, M_PI);
  genchg_oth_phi->Sumw2();
  genneu_hist = fs->make<TH1F>("genneu_hist","# of genneutrals",120,-0.5, 239.5);
  genneu_hist->Sumw2();
  genneu_pt = fs->make<TH1F>("genneu_pt","Et_{genneutrals}",100,1., 101.);
  genneu_pt->Sumw2();
  genneu_eta = fs->make<TH1F>("genneu_eta","#eta_{genneutrals}",100,-3., 3.);
  genneu_eta->Sumw2();
  genneu_phi = fs->make<TH1F>("genneu_phi","#phi_{genneutrals}",100,-M_PI, M_PI);
  genneu_phi->Sumw2();

  genneu_oth_hist = fs->make<TH1F>("genneu_oth_hist","# of genneutrals (others)",120,-0.5, 239.5);
  genneu_oth_hist->Sumw2();
  genneu_oth_pt = fs->make<TH1F>("genneu_oth_pt","Et_{genneutrals_oth}",100, 1., 101.);
  genneu_oth_pt->Sumw2();
  genneu_oth_eta = fs->make<TH1F>("genneu_oth_eta","#eta_{genneutrals_oth}",100,-5., 5.);
  genneu_oth_eta->Sumw2();
  genneu_oth_phi = fs->make<TH1F>("genneu_oth_phi","#phi_{genneutrals_oth}",100,-M_PI, M_PI);
  genneu_oth_phi->Sumw2();
  */

  for (int ij=0; ij<nHLTmx; ij++) { 
    sprintf(name, "nprimall_%i", ij);
    sprintf(title, "# of primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_hist[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_hist[ij]->Sumw2();

    sprintf(name, "nprimsel_%i", ij);
    sprintf(title, "Selected # of primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_sel[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_sel[ij]->Sumw2();

    sprintf(name, "nprimall_rewt_%i", ij);
    sprintf(title, "# of rewighted primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_hist_rewt[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_hist_rewt[ij]->Sumw2();

    sprintf(name, "nprimsel_rewt_%i", ij);
    sprintf(title, "Selected # of reweighted primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_sel_rewt[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_sel_rewt[ij]->Sumw2();
  }

  prim_correl = fs->make<TH2F>("correl", "Correlation of all and Selected # of primary vtx", 60, -0.5, 59.5, 60, -0.5, 59.5);
  const char* namex[2]={"Selected", "Rejected"};
  for (int ij=0; ij<2; ij++) {
    sprintf(name, "primalltrk_%i", ij);
    sprintf(title, "All tracks in primary vtx (%s)", namex[ij]);
    prim_alltrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primgoodtrk_%i", ij);
    sprintf(title, "Good tracks in primary vtx (%s)", namex[ij]);
    prim_goodtrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primseltrk_%i", ij);
    sprintf(title, "Selected tracks in primary vtx (%s)", namex[ij]);
    prim_seltrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primdx_%i", ij);
    sprintf(title, "#Delta x of prim wrt beam spot (%s)", namex[ij]);
    prim_dx[ij] = fs->make<TH1F>(name, title, 120, -2.4, 2.4);

    sprintf(name, "primdy_%i", ij);
    sprintf(title, "#Delta y of prim wrt beam spot (%s)", namex[ij]);
    prim_dy[ij] = fs->make<TH1F>(name, title, 120, -2.4, 2.4);

    sprintf(name, "primdxy_%i", ij);
    sprintf(title, "#Delta y vs #Delta x of prim (%s)", namex[ij]);
    prim_dxy[ij] = fs->make<TH2F>(name, title, 60, -0.15, 0.15, 60, -0.15, 0.15);

    sprintf(name, "primdz_%i", ij);
    sprintf(title, "#Delta z of prim wrt beam spo (%s)", namex[ij]);
    prim_dz[ij] = fs->make<TH1F>(name, title, 120, -30.0, 30.0); 

    sprintf(name, "primprob_%i", ij);
    sprintf(title, "log10(vertex fit prob) (%s)", namex[ij]);
    prim_prob[ij] = fs->make<TH1F>(name, title, 120, -20.0, 0.0);   
  }

  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "njets_%i",ij);
    sprintf(title, "No of Jets_eta range_%gs", etarange[ij]);
    h_njets[ij] = fs->make<TH1F>(name, title, 9, 1, 10);
    h_njets[ij]->Sumw2();
  }

  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "ncharges_%i",ij);
    sprintf(title, "No of charge particles_eta range_%gs", etarange[ij]);
    h_nchg[ij] = fs->make<TH1F>(name, title, 139, 1, 140);
    h_nchg[ij]->Sumw2();
  }


  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "gennjets_%i",ij);
    sprintf(title, "No of GenJets_eta range_%gs", etarange[ij]);
    gen_njets[ij] = fs->make<TH1F>(name, title, 9, 1, 10);
    gen_njets[ij]->Sumw2();
  }
//-------------------------------------------
#ifdef TRIGGER
  const char* trigvar[2]={"L1", "HLT"};
  for(int ij=0; ij<nHLTmx; ij++){
    for(int jk=0; jk<2; jk++){
      sprintf(name, "trgjet_pt_%i_%i", ij, jk);
      sprintf(title, "trgjet_pt_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_pt[ij][jk] = fs->make<TH1F>(name, title, njetptbin, 20,1500);
      trgjet_pt[ij][jk]->Sumw2();

      sprintf(name, "trgjet_eta_%i_%i", ij, jk);
      sprintf(title, "trgjet_eta_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_eta[ij][jk] = fs->make<TH1F>(name, title, njetptbin, -5., 5.);
      trgjet_eta[ij][jk]->Sumw2();

      sprintf(name, "trgjet_phi_%i_%i", ij, jk);
      sprintf(title, "trgjet_phi_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_phi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
      trgjet_phi[ij][jk]->Sumw2();

      sprintf(name, "prbjet_pt_%i_%i", ij, jk);
      sprintf(title, "prbjet_pt_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_pt[ij][jk] = fs->make<TH1F>(name, title, njetptbin, 20,1500);
      prbjet_pt[ij][jk]->Sumw2();

      sprintf(name, "prbjet_eta_%i_%i", ij, jk);
      sprintf(title, "prbjet_eta_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_eta[ij][jk] = fs->make<TH1F>(name, title, 100,-5., 5.);
      prbjet_eta[ij][jk]->Sumw2();

      sprintf(name, "prbjet_phi_%i_%i", ij, jk);
      sprintf(title, "prbjet_phi_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_phi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
      prbjet_phi[ij][jk]->Sumw2();
    }
  } 
#endif
//Trigger special

//-------------------------------------------
	if (isReconstruct) { 
		for(int ij=0; ij<nHLTmx; ij++){
			for(int jk=0; jk<njetetamn; jk++){
				sprintf(name, "jetpt_%i_%i",jk,ij);
				sprintf(title, "jetpt_%s_%g", jethlt_name[ij], etarange[jk]);
				h_jetpt[ij][jk] = fs->make<TH1F>(name, title, 300, 50, 1550);
				h_jetpt[ij][jk]->Sumw2();
				
				sprintf(name, "jetphi_%i_%i",jk, ij);
				sprintf(title, "jetphi_%s_%g", jethlt_name[ij],etarange[jk]);
				h_jetphi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
				h_jetphi[ij][jk]->Sumw2();				
			}
		}
	}

#ifdef TRIGGER
  for(int ij=0; ij<nHLTmx; ij++){

    sprintf(name, "jeteta_%i", ij);
    sprintf(title, "jetphi_%s", jethlt_name[ij]);//, jetvar[ij]);
    h_jeteta[ij] = fs->make<TH1F>(name, title, 100, -5, 5);
    h_jeteta[ij]->Sumw2();

    for (int jk=0; jk<2; jk++){ 
      sprintf(name, "angle1d_%s_%i", jethlt_name[ij], jk);
      sprintf(title, "Angle%s_%i", jethlt_name[ij], jk);
      trgjet_angle[ij][jk] = fs->make<TH1F>(name, title, 90 , 0.1, 2.5);

      sprintf(name, "angle2d_%s_%i", jethlt_name[ij], jk);
      sprintf(title, "Angle_2d_hist%s_%i", jethlt_name[ij], jk);
      trgjet_2dangle[ij][jk] = fs->make<TH2F>(name, title, njetptbin, 20, 1500, 30 , 0.1, 2.5);
    }
  }

  for (int ij=0; ij<nHLTmx; ij++) {
    for (int jk=0; jk<njetetamn; jk++) {
      sprintf(name, "hlt_dijettag_%i_%i", ij, jk);
      sprintf(title, "dijet tagged P_T : (%s) |i#eta|<%g", jethlt_name[ij], etarange[jk]);
      hlt_dijettag[ij][jk] = fs->make<TH1F>(name, title, 60, 0.4*leadingPtThreshold[ij], 2.5*leadingPtThreshold[ij]);
      hlt_dijettag[ij][jk]->Sumw2();

      sprintf(name, "hlt_dijetprob_%i_%i", ij, jk);
      sprintf(title, "dijet probed P_T : (%s) |i#eta|<%g", jethlt_name[ij], etarange[jk]);
      hlt_dijetprob[ij][jk] = fs->make<TH1F>(name, title, 60, 0.4*leadingPtThreshold[ij], 2.5*leadingPtThreshold[ij]);
      hlt_dijetprob[ij][jk]->Sumw2();
    }
  }
#endif

  counthist = fs->make<TH1F>("count","No of events",2,0,2); 

  for (int ix=0; ix<32; ix++) { mypow_2[ix] = pow(2,ix);}
  nevt = 0;
  //irun_old=-1;
  //trig_init=0;
  nreco=naa= nbb= ncc=0;
}

QCDEventShape::~QCDEventShape()
{

   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//member functions

// ------------ method called for each event  ------------
void QCDEventShape::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  //t1=clock();
  using namespace edm;
  using namespace std;
  using namespace reco;
  using namespace pat;
  
  //gRandom->SetSeed(19919925);
  //float rn=gRandom->Uniform();
  //cout << " Random Number ini = " << rn << endl;
  //if (rn >0.90) return;
  //cout << " Random Number = " << rn << endl;
  //cout << "Time = " << t1 << "; " << t2 << endl;
  
  nevt++;
  //int ievt = iEvent.id().event();
  counthist->Fill(1); 
  //if (nevt%100==1)   std::cout<<"QCDEventShape::analyze "<< nevt<<" IRUN= "<<iEvent.id().run()<<" ievt= "<< iEvent.id().event()<<" "<<ievt<<endl;
  if (nevt%1000==1)   std::cout<<"Jet Charge Analysis Run No. =  "<< nevt<<endl;
  //std::cout << "ok1"<<endl;

  //" ilumi" <<
  //iEvent.luminosityBlock() << " ibunch " << iEvent.bunchCrossing() <<std::endl;
  //cout << "NEvent = " <<  nevt << endl;
  //if(iEvent.luminosityBlock()==9881 || iEvent.luminosityBlock()==23185 || iEvent.luminosityBlock()==25334 || iEvent.luminosityBlock()== 26584 ||iEvent.luminosityBlock()== 35674 || iEvent.luminosityBlock()==32764 || iEvent.luminosityBlock()== 35675 || iEvent.luminosityBlock()==53681) return ;
  //if(iEvent.luminosityBlock()==2 || iEvent.luminosityBlock()==7175 || iEvent.luminosityBlock()==41151 || iEvent.luminosityBlock()==7389697 || iEvent.luminosityBlock()==60334 || iEvent.luminosityBlock()==51317 || iEvent.luminosityBlock()==53654 || iEvent.luminosityBlock()==10333 || iEvent.luminosityBlock()==54778 || iEvent.luminosityBlock()==10082 || iEvent.luminosityBlock()==54322 || iEvent.luminosityBlock()==64667 || iEvent.luminosityBlock()==65977 || iEvent.luminosityBlock()==55534 || iEvent.luminosityBlock()==55781 || iEvent.luminosityBlock()==55782 || iEvent.luminosityBlock()==55783 || iEvent.luminosityBlock()==61360 || iEvent.luminosityBlock()==61370 ||iEvent.luminosityBlock()==68258 || iEvent.luminosityBlock()==62147 || iEvent.luminosityBlock()==67194 || iEvent.luminosityBlock()==43070 || iEvent.luminosityBlock()==49429 || iEvent.luminosityBlock()==15102 || iEvent.luminosityBlock()==23306 || iEvent.luminosityBlock()==14242|| iEvent.luminosityBlock()==19080 || iEvent.luminosityBlock()==9312025) return;
  //npfjets = 0;
  //nchg =0;
  //if(iEvent.luminosityBlock()<4401) return; 
  //if(nevt<3442) return;
  //if(nevt!=3080) return;
  //cout << "Write test 1 = ok " << endl;
//-------------------------------------------
  
  std::vector<HepLorentzVector> recomom[njecmx][ntype][njetetamn];
  std::vector<HepLorentzVector> genmom[nGenReso][ntype][njetetamn];
  std::vector<HepLorentzVector> tmpjt4v;                                                  
  std::vector<HepLorentzVector> tmpgen4v;
  
  //recojet1_pt = 0.0, recojet2_pt = 0.0;
  //genrecojet1_pt = 0.0, genrecojet2_pt = 0.0;
 
  double RecoJCO[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double GenJCO[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};

  double recomomJCO[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

#ifdef FLAV
  double RecoJCO_gjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ujet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ubarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_djet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_dbarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  double recomomJCO_gjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ujet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ubarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_djet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_dbarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  //Second-set Flavor Tagging
  double RecoJCO_qjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_aqjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_aqgjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_aqojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  double recomomJCO_qjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_aqjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_aqgjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_aqojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

  double imatched_all_pt[njet][nkappa][njecmx] = {{{0.0}}};

#ifdef MATCHING
  double genmomJCO[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
#endif

#ifdef TRACKEFF
  double RecoJCO_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

#ifdef TRACKPTUP
  double RecoJCO_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

#ifdef TRACKPTDOWN
  double RecoJCO_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

//------------------------------------------

 //Reco JCO initialize
  double ijet1candsmom_num[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den[nkappa][njecmx] = {{0.0}}, ijet1_long_num[nkappa][njecmx] = {{0.0}}, ijet1_long_den[nkappa][njecmx] = {{0.0}}, ijet1_tran_num[nkappa][njecmx] = {{0.0}}, ijet1_tran_den[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num[nkappa][njecmx] = {{0.0}},ijet2candsmom_den[nkappa][njecmx] = {{0.0}}, ijet2_long_num[nkappa][njecmx] = {{0.0}}, ijet2_long_den[nkappa][njecmx] = {{0.0}}, ijet2_tran_num[nkappa][njecmx] = {{0.0}}, ijet2_tran_den[nkappa][njecmx] = {{0.0}}; 
 
  //Gen JCO initialize
  double igenjet1candsmom_num[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den[nkappa][nGenReso] = {{0.0}}; 
  double igenjet2candsmom_num[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den[nkappa][nGenReso] = {{0.0}};

#ifdef FLAV
  //Flavor Tagging
  //g-jet
  double ijet1candsmom_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_gjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_gjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_gjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_gjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_gjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_gjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_gjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_gjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_gjet[nkappa][njecmx] = {{0.0}};

  //u-jet
  double ijet1candsmom_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ujet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ujet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ujet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ujet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ujet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ujet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ujet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ujet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ujet[nkappa][njecmx] = {{0.0}};

  //ubar-jet
  double ijet1candsmom_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ubarjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ubarjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ubarjet[nkappa][njecmx] = {{0.0}};

  //d-jet
  double ijet1candsmom_num_djet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_djet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_djet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_djet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_djet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_djet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_djet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_djet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_djet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_djet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_djet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_djet[nkappa][njecmx] = {{0.0}};

  //dbar-jet
  double ijet1candsmom_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_dbarjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_dbarjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_dbarjet[nkappa][njecmx] = {{0.0}};

  //others
  double ijet1candsmom_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ojet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ojet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ojet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ojet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ojet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ojet[nkappa][njecmx] = {{0.0}};


  //Second-set Flavor Tagging
  //quark
  double ijet1candsmom_num_qjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_qjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_qjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_qjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_qjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_qjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_qjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_qjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_qjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_qjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_qjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_qjet[nkappa][njecmx] = {{0.0}};

  //ant-quark
  double ijet1candsmom_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_aqjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_aqjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_aqjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_aqjet[nkappa][njecmx] = {{0.0}};
  //gluon
  double ijet1candsmom_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_aqgjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_aqgjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_aqgjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_aqgjet[nkappa][njecmx] = {{0.0}};

  //others
  double ijet1candsmom_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_aqojet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_aqojet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_aqojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_aqojet[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKEFF 
  double ijet1candsmom_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackeff[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackeff[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackeff[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKPTUP
  double ijet1candsmom_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackpt1[nkappa][njecmx] = {{0.0}},ijet1_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKPTDOWN
  double ijet1candsmom_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};
#endif

  double igenjet1candsmom_alltracks[nkappa][njecmx] = {{0.0}}, igenjet2candsmom_alltracks[nkappa][njecmx] = {{0.0}};
  double ijet1candsmom_alltracks[nkappa][njecmx] = {{0.0}}, ijet2candsmom_alltracks[nkappa][njecmx] = {{0.0}};
  
  double igenjet1candsmom_matchedtracks[nkappa][njecmx] = {{0.0}};
  double igenjet2candsmom_matchedtracks[nkappa][njecmx] = {{0.0}};

//-------------------------------------------
  wtfact=1.0;
  //double px=0;
  //double py=0;
  //double ptxy=0;

  //int ncount=0;
  unsigned ncount=0;
  //double recterm=0;
  //int ithird=-1;
  int irecoht=-1;
	//#ifdef JETENERGY
	int irecohtjec[njecmx];
	for (int ij=0; ij<njecmx; ij++) { irecohtjec[ij]=-1;}
	//#endif	
  double leadingptjec[njecmx] ={0};   // jet charge 

  //int igenht=-1;
	//#ifdef  JETRESO
	int igenhtres[nGenReso];
	for (int ij=0; ij<nGenReso; ij++) { igenhtres[ij]=-1;}
	//#endif
	double leadgenptres[nGenReso]={0};// jet charge


//Handle<bool> filterGoodVertices;
//iEvent.getByToken(filterGoodVerticesToken_, filterGoodVertices);

//bool passMETFilters = (*filterGoodVertices);
//if(!passMETFilters) return;

edm::Handle<reco::VertexCollection> primaryVertices;
iEvent.getByToken(vtxToken_, primaryVertices);

//Select events with at least one good primary vertex with ndof>4 with abs(z)<24 and rho<2
bool PVEvent=false;
if (primaryVertices.isValid() && primaryVertices->size()>0) {
        for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
                if(!vert->isFake() && vert->ndof()>4 && abs(vert->position().z())<24 && vert->position().rho() < 2){
                        PVEvent=true;
                        break;
                        }
                }
        }
if(!PVEvent) return;

edm::Handle<pat::METCollection> pfmet;
iEvent.getByToken(metToken_, pfmet);

//MET should be within 0.3
double miset=0, /*misphi=0,*/ sumEt=0;
	if(pfmet.isValid()){
		miset = pfmet->begin()->corPt();
	  	//misphi = pfmet->begin()->corPhi(); 
	  	sumEt = pfmet->begin()->corSumEt() ; 
		if(sumEt<1.) { sumEt = 1.; } 
		//cout<<(miset*1.0/sumEt)<<endl;
	  }	
if((miset*1.0/sumEt)>0.3) return ;

/*
edm::Handle<reco::TrackCollection> tracks;
iEvent.getByToken(tracksToken_, tracks);

bool isGoodTrack = false;
if(tracks.isValid() && tracks->size()>1){
for(unsigned trk =0; trk !=tracks->size(); trk++){
	//cout<<" Track PT : "<<(*tracks)[trk].pt()<<" hitpattern : "<<(*tracks)[trk].hitPattern().numberOfValidHits()<<" chi2 : "<<(*tracks)[trk].normalizedChi2()<<endl;
	if((*tracks)[trk].pt()>1.0 && (*tracks)[trk].hitPattern().numberOfValidHits() >= 10 && (*tracks)[trk].normalizedChi2() < 5.0){
	isGoodTrack = true;
		}
	}
}
if (!isGoodTrack) return;
*/

#ifdef TRIGGER
  const char* variab1;
#endif
#ifndef DIJETAVE
  const char* variab2; 
#endif

  if (isMC) {
#ifdef LHAPDF
    edm::Handle<LHEEventProduct> EvtHandle ;
    iEvent.getByToken( lheEventProductToken_ , EvtHandle ) ;
		
		for ( unsigned int weightIndex = 0; weightIndex < EvtHandle->weights().size(); ++weightIndex ) {
			//cout<< EvtHandle->weights()[weightIndex].wgt <<endl;
                        //systematicWeightIDs->push_back( atoi(EvtHandle->weights()[weightIndex].id.c_str()) );
			if (weightIndex>=9 && weightIndex<=109) {
				pdfwt[weightIndex-9] = EvtHandle->weights()[weightIndex].wgt/EvtHandle->originalXWGTUP(); 
				//std::cout << weightIndex << " " << EvtHandle->weights()[weightIndex].id << " " << EvtHandle->weights()[weightIndex].wgt <<" "<<pdfwt[weightIndex-9]<< std::endl;
				}
			if (weightIndex>0 && weightIndex<10) {
				mgscale[weightIndex] = EvtHandle->weights()[weightIndex].wgt/EvtHandle->originalXWGTUP();
				//std::cout << weightIndex << " " << EvtHandle->weights()[weightIndex].id << " " << EvtHandle->weights()[weightIndex].wgt <<" "<<mgscale[weightIndex]<< std::endl;
				}
    			}
#endif

    edm::Handle<GenEventInfoProduct> eventinfo;
    iEvent.getByToken(generator1_, eventinfo);
 
#ifdef SCALEUNC 
    for(unsigned int scaleIndex = 0 ; scaleIndex < eventinfo->weights().size(); ++scaleIndex){
	scalewt[scaleIndex] = eventinfo->weights()[scaleIndex];
	//cout<<"scaleIndex : "<<scaleIndex<<" weight : "<<eventinfo->weights()[scaleIndex]<<endl;
	}
#endif

    if (eventinfo.isValid()) { 
      qscale = eventinfo->qScale(); 
      wtfact = eventinfo->weight();
      //cout<<"wtfact : "<<wtfact<<endl;
      //weight = weight2*wtfact;
      procid = eventinfo->signalProcessID();
      //cout << " qscale = " <<setw(14)<< qscale << " ; wtfact = " << wtfact << " ; procid = " << procid  << endl;

      if (eventinfo->hasPDF()) {
	const gen::PdfInfo* xpdf = eventinfo->pdf();
	
	int id1 = xpdf->id.first;
	int id2 = xpdf->id.second;
	
	idall = 100*(id1+50)+ (id2+50); 
	
	qscale = xpdf->scalePDF;
	
	xfrac1 = xpdf->x.first;
	xfrac2 = xpdf->x.second;
	
	xpdf1 = xfrac1*xpdf->xPDF.first;
	xpdf2 = xfrac2*xpdf->xPDF.second; 
      }
    }
  }

 
#ifdef PREFIRE
edm::Handle< double > theprefweight;
iEvent.getByToken(prefweight_token, theprefweight ) ;
double _prefiringweight =(*theprefweight);

edm::Handle< double > theprefweightup;
iEvent.getByToken(prefweightup_token, theprefweightup ) ;
double _prefiringweightup =(*theprefweightup);

edm::Handle< double > theprefweightdown;
iEvent.getByToken(prefweightdown_token, theprefweightdown ) ;
double _prefiringweightdown =(*theprefweightdown);

//cout << "Prefire  wt : " << _prefiringweight << endl;
//cout << "Prefire up wt : " << _prefiringweightup << endl;
//cout << "Prefire down wt : " << _prefiringweightdown << endl;
#endif
 
#ifdef TRIGGER
  edm::Handle<edm::TriggerResults> trigRes;
  iEvent.getByToken(triggerBits_, trigRes);
  
  edm::Handle<pat::TriggerObjectStandAloneCollection> triggerObjects;
  iEvent.getByToken(triggerObjects_, triggerObjects);
  
  edm::Handle<pat::PackedTriggerPrescales> triggerPrescales;
  iEvent.getByToken(triggerPrescales_, triggerPrescales);
//-------------------------------------------Trigger
  const edm::TriggerNames &names = iEvent.triggerNames(*trigRes);
  //int ihltfill = -1;
#endif
  
  tmpjt4v.clear();   //Reco level
  //tmpcand4v.clear();
  tmpgen4v.clear();  // Gen level

  //double aveleadingpt =0;  //ESVs (dijet)
  double leadingpt = 0;    //Jet charge (single jet)
  bool isInEtaRange[njetetamn]={0}; //GMA{0,0,0,0};

  recoJetpT = 0.0; 
  recojet1_pt = 0.0;  
  recojet2_pt = 0.0; 
  
  genrecojet1_pt = 0.0; 
  genrecojet2_pt = 0.0; 

#ifndef GENPART
  edm::Handle<pat::JetCollection> ak4PFJets;
  if (isReconstruct) { 
    iEvent.getByToken(jetSrcToken_, ak4PFJets);
  }
  
  if (isReconstruct && ((!ak4PFJets.isValid()) || ak4PFJets->size() <2)) return; //GMA, do we use this
  
  if (ak4PFJets.isValid() && ak4PFJets->size()>=2) {
#ifdef DIJETAVE
    for (int iet=0; iet<njetetamn; iet++) {
      isInEtaRange[iet] = true;
      }
    
    for (int ij=0; ij<1; ij++) { 
      for (int iet=0; iet<njetetamn; iet++) {
	if (abs((*ak4PFJets)[ij].eta())>etarange[iet]) { isInEtaRange[iet] = false;}
      }
      
      //Jet ID ================= 2017 & 2018 UL jetID recomendation 
      double NHF = (*ak4PFJets)[ij].neutralHadronEnergyFraction();
      double NEMF = (*ak4PFJets)[ij].neutralEmEnergyFraction();
      double CHF = (*ak4PFJets)[ij].chargedHadronEnergyFraction();
      //double MUF = (*ak4PFJets)[ij].muonEnergyFraction();
      //double CEMF = (*ak4PFJets)[ij].chargedEmEnergyFraction();
      int NumConst = (*ak4PFJets)[ij].chargedMultiplicity()+(*ak4PFJets)[ij].neutralMultiplicity();
      //int NumNeutralParticles =(*ak4PFJets)[ij].neutralMultiplicity();
      int CHM = (*ak4PFJets)[ij].chargedMultiplicity();
      bool passPUIDtight = bool((*ak4PFJets)[ij].userInt("pileupJetId:fullId") & (1 << 0)) || ((*ak4PFJets)[ij].pt() > 50.0);

      bool TightJetID =false;
      if(abs((*ak4PFJets)[ij].eta())<=2.7){
      if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0  && abs((*ak4PFJets)[ij].eta())<=2.6 )  TightJetID =true;
      if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ij].eta())>2.6 )  TightJetID =true;}
      else {TightJetID =false;}
      if (abs((*ak4PFJets)[ij].eta())>2.7) {TightJetID = false;}  //2.5 or 2.6
      if ((*ak4PFJets)[ij].pt()<30.0) {TightJetID = false;}

	/*
      if (TightJetID) { aveleadingpt +=(*ak4PFJets)[ij].pt();
			leadingpt = (*ak4PFJets)[0].pt();
      //std::cout<<"ok2"<<endl;
      std::cout << "Leading jet pt :"<<leadingpt<<endl;
      //std::cout << "Sub-Leading jet pt :"<<(*ak4PFJets)[1].pt()<<endl;
      //std::cout << "Avg. Leading jet pt :"<<aveleadingpt<<endl;
			} else {aveleadingpt -=100000;
			        leadingpt -=100000;}
	*/

	//if(!TightJetID && !passPUIDtight) continue;
	if (abs((*ak4PFJets)[ij].eta())>2.1 || (*ak4PFJets)[ij].pt()<30.0 ) continue;
	if(TightJetID && passPUIDtight){
	//aveleadingpt +=(*ak4PFJets)[ij].pt();
	leadingpt = (*ak4PFJets)[ij].pt();}
	//std::cout << "Leading jet pt TightJet ID :"<<leadingpt<<endl;}
        //std::cout << "Sub-Leading jet pt :"<<(*ak4PFJets)[1].pt()<<endl;
    }
    //aveleadingpt /=2.0;
    
#else

#endif
  }//if (ak4PFJets.isValid() && ak4PFJets->size()>=2) {
#endif
 
  if (isReconstruct && isMC && leadingpt>3*qscale) return;
  irecoht = getbinid(leadingpt, nHLTmx, leadingPtThreshold);

#ifdef TRIGGER
  bool trgpas[nHLTmx]={0,0,0,0,0,0,0,0,0};  //8 or 10
  //Calcualte Trigger Efficiency for dijet events
  bool trg_prev=false;

  //if (!isMC) {
  for (int jk=-1; jk<nHLTmx; jk++) {
    for(unsigned ij = 0; ij<trigRes->size(); ++ij) {
      std::string name = names.triggerName(ij);
      variab1 = name.c_str(); 
      if ((jk<0 && strstr(variab1,jethlt_lowest) && strlen(variab1)-strlen(jethlt_lowest)<5) || 
	  (jk>=0 && strstr(variab1,jethlt_name[jk]) && strlen(variab1)-strlen(jethlt_name[jk])<5)) {
	
	 //const std::pair<std::vector<std::pair<std::string,int> >,int> prescalesInDetail(hltConfig_.prescaleValuesInDetail(iEvent,iSetup, variab1));
	 const std::pair<std::vector<std::pair<std::string,int> >,int> prescalesInDetail(hltPrescaleProvider_.prescaleValuesInDetail(iEvent,iSetup,variab1));
	 if (jk>=0) { 
          //cout<<variab1<<endl;
	  //==============================================================================
	  //double tmpp1= prescalesInDetail.first[0].second;
	  //double tmpp2 = prescalesInDetail.first[1].second;
	  //l1pres[jk] =min(tmpp1, tmpp2);
	  //==============================================================================
	  l1pres[jk] = prescalesInDetail.first[0].second;
	  
	 //if (jk>=3 && l1pres[jk]>1) { l1pres[jk]=1.0;}
	 if(l1pres[jk]<=0){l1pres[jk]=1.0;}
         hltpres[jk] = prescalesInDetail.second;	  

	 //compres[jk] = (l1pres[jk])*(triggerPrescales->getPrescaleForIndex(ij)); 
	 //compres[jk] = triggerPrescales->getPrescaleForIndex(ij);
	 compres[jk] = (l1pres[jk])*(hltpres[jk]);
         //if (jk==9){compres[jk]=1.0;} // fix for 2017E sample pt spike
	         	//cout<<"Print Trigger : "<<variab1<< ":"<< compres[jk]<<endl;} 
	 //cout << "Prescale" << "Path " << variab1 <<" " <<   compres[jk] << endl;
	 //cout<<"Run NO= "<< iEvent.id().run()<<" ; Event No = "<< iEvent.id().event()<< " ; ilumi = " << iEvent.luminosityBlock() << 
	 //	" ; ibunch = " << iEvent.bunchCrossing()<<" ; L1 Pres0 = " << l1pres[jk] <<" "<<
	 //            " ; HLT Path= "<<name <<" ; HLT Pres = " <<hltpres[jk]<<" ; compres ="<<compres[jk] <<"; irecoht = "<< irecoht <<"; Pt=" <<aveleadingpt<<endl;
	 if (trigRes->accept(ij)) {trgpas[jk] = true;
		//cout << "Prescale" << "Path " << variab1 <<" " <<   compres[jk] << endl;//} // ihltfill = jk;}
	 }
	 //if (trg_prev && compres[jk]>0.99) {
	 if (trg_prev){
	    for (int iet=0; iet<njetetamn; iet++) {
	      if (isInEtaRange[iet]) { 
		//hlt_dijettag[jk][iet]->Fill(aveleadingpt,compres[jk]);
                hlt_dijettag[jk][iet]->Fill(leadingpt,compres[jk]);
		//if (trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(aveleadingpt, compres[jk]);} //{, (isMC) ? 1.0 : compres[jk]);}
                if (trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(leadingpt, compres[jk]);}
	      }
	    }
	  }
	  /*
 	    for (int iet=0; iet<njetetamn; iet++) {
	    if (isInEtaRange[iet]) { 
	    if(trg_prev) hlt_dijettag[jk][iet]->Fill(aveleadingpt);
	    if (trg_prev && trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(aveleadingpt);} 
	    }    
	    }*/
	  //if (trg_prev) cout << "Accept =" << " name = " <<name <<endl;
	  trg_prev = trigRes->accept(ij);
	  //trg_prev = trg_prev|trigRes->accept(ij);
	  //if (!trg_prev) { trg_prev = trigRes->accept(ij);}
	  break;
	} else {
	  trg_prev = trigRes->accept(ij);
	  break;
	}
      }
    }
  }
#endif
  //cout<<"ihltfill "<<ihltfill<<endl;
  //cout<<"3 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
  
  //if ((irecoht <0 || irecoht >=nHLTmx) || ((!isMC) && (!trgpas[irecoht]))) return; //GMA remove this condition
  //cout <<"irecoht = "<<irecoht<<endl;
  //if (irecoht==-3) return;

#ifdef TRIGGER
  if (irecoht>=0 && ((!isMC) && (!trgpas[irecoht]))) return;
  if (irecoht==-2 && ((!isMC) && (!trgpas[0]))) return; 
#endif
  
  if (!isMC) {
    if (irecoht>=0) {
      wtfact = compres[irecoht];
    } else if (irecoht==-2) {
      wtfact = compres[0];
    } else {
      return ;
    }
  }
  
  //for (int ij=0; ij<nHLTmx; ij++) {lumiwt[ij]=intlumi[nHLTmx-1]/intlumi[ij];}// cout<<"nt "<<datpileup[ij][0]<<endl;}
  if (isMC) {
#ifndef GENPART
    //Handle<std::vector< PileupSummaryInfo > >  PupInfo;
    //iEvent.getByLabel("addPileupInfo", PupInfo);
    edm::Handle<std::vector<PileupSummaryInfo> > PupInfo;
    iEvent.getByToken(pileup_, PupInfo);
    int npu = -1;
    //int tnpv  = -1;
    PShiftDown_ = reweight::PoissonMeanShifter(-0.5);
    PShiftUp_ = reweight::PoissonMeanShifter(0.5);
    if (PupInfo.isValid()) {
      std::vector<PileupSummaryInfo>::const_iterator PVI;
      for(PVI = PupInfo->begin(); PVI != PupInfo->end(); ++PVI) {
	if (PVI->getBunchCrossing()==0) {
          //npu = PVI->getPU_NumInteractions();
	  npu = PVI->getTrueNumInteractions();
          //tnpv  = PVI->getTrueNumInteractions();
	  break;
	}
      }
    }
    //double MyWeight = LumiWeights_->weight(npu);
    
    //cout << "Main weight = " <<MyWeight << endl;
    //double TotalWeight_plus = MyWeight*PShiftUp_.ShiftWeight( npu );
    //double TotalWeight_plus = PShiftUp_.ShiftWeight( npu );
    //double TotalWeight_minus = PShiftDown_.ShiftWeight( npu ); 

    //cout << "Plus " << wtfact*TotalWeight_plus << " Mi = " << endl;
    //cout << "wt= " <<  wtfact << " : weightmi" <<wtfact*TotalWeight_minus << " Mi = " << endl;
    //wtfact=wtfact*TotalWeight_plus; 
    //wtfact=wtfact-TotalWeight_minus; 
    //cout << "npu Number of interactions : " << npu << endl; 
    //cout << "tnpv Number of true interactions : " << tnpv << endl; 
    if (npu<0) return; //GMA  
    if (isFlat) {
      weight =weight2*wtfact; // for flat MC sample
    } else {
      weight =weight2;
    }
#endif
    defweight = weight;

#ifndef GENPART
    int tmprecht = (irecoht>=0) ? irecoht : 0; //GMA
   
    if (npu<npileupmx) {
          weight *=rat_pileup[tmprecht][npu]; //GMA
    } else {
            weight *=rat_pileup[tmprecht][npileupmx-1]; //GMA
    }
#endif
    
    weighttrg = weight;
    //cout <<"weight  "<<weight<<" "<< weight2<<endl;
    //sar 3D PU reweighting 111028
  } else {
    weight = weight2;
    defweight = weight2;
    weighttrg = weight*wtfact; // *lumiwt[irecoht];
    //weighttrg = weight*lumiwt[3];
    //cout <<"TEST2  weighttrg "<< weighttrg<<" ; weight "<<weight<<" ; "<< wtfact<<endl;
  }


#ifdef PREFIRE
double tmpwt = weighttrg;
weighttrg = tmpwt*_prefiringweight;
double weighttrgL1up = tmpwt*_prefiringweightup;
double weighttrgL1down = tmpwt*_prefiringweightdown;
#endif

//---------------Lumiweight------------------
/*
//cout << "before lumi " << weighttrg ;
#ifdef LUMIWEIGHT
double tmpwt = weighttrg;
weighttrg = tmpwt*lumiwtt;
#endif
//cout << "   After lumi " << weighttrg << endl;
*/

//-------------------------------------------

#ifndef GENPART
  if(!isMC){
    reco::TrackBase::Point beamPoint(0,0, 0);
    //math::XYZPoint beamPoint(0,0, 0); 
    
    edm::Handle<reco::BeamSpot> beamSpotH;
    iEvent.getByToken(beamSpot_,beamSpotH);
    if (beamSpotH.isValid()){
      beamPoint = beamSpotH->position();
    }
    //cout<<"Debugging 1 "<<endl;
    //edm::Handle<reco::VertexCollection> primaryVertices;
    //iEvent.getByToken(vtxToken_, primaryVertices);  
    int tmpvert=0;
    nprim=0;
    if (primaryVertices.isValid()) {
      tmpvert = primaryVertices->size();
      //cout<<"temp"<<tmpvert<<endl;
	//cout<<"Debugging 2 "<<endl;
      for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
	int isel = (vert->isValid() && !vert->isFake()) ? 1 : 0;
	int ngoodtrk = 0;
	int nseltrk = 0;
	double prob = ChiSquaredProbability(vert->chi2(),vert->ndof());
	for (reco::Vertex::trackRef_iterator reftrk =vert->tracks_begin(); reftrk<vert->tracks_end(); reftrk++) {
	  if ((*reftrk)->quality(TrackBase::highPurity) && vert->trackWeight(*reftrk)>0) {
	    ngoodtrk++; 
	    if ((*reftrk)->normalizedChi2()<100000 && 
		abs((*reftrk)->dxy()) < 10000 && 
		(*reftrk)->pt() >0.50) {nseltrk++; } 
	  }
	}
	prim_alltrk[isel]->Fill(vert->tracksSize());
	prim_goodtrk[isel]->Fill(ngoodtrk);
	prim_seltrk[isel]->Fill(nseltrk);
	prim_dx[isel]->Fill(vert->position().x() - beamPoint.x());
	prim_dy[isel]->Fill(vert->position().y() - beamPoint.y());
	prim_dxy[isel]->Fill(vert->position().x() - beamPoint.x(), vert->position().y() - beamPoint.y());
	prim_dz[isel]->Fill(vert->position().z() - beamPoint.z());
	prim_prob[isel]->Fill(max(-20.0, log10(prob)));
	
	if (isel==1 && nprim < nprimx-1) {
	  primpr[nprim] = prob;
	  ntkpm[nprim] = 1000*(1000*min(int(vert->tracksSize()),999) + min(ngoodtrk,999)) + min(999, nseltrk);
	  nprim++;
	}
      }
    }
    
    prim_hist[0]->Fill(tmpvert);
    prim_sel[0]->Fill(nprim);
    
    prim_hist_rewt[0]->Fill(tmpvert, weighttrg);
    prim_sel_rewt[0]->Fill(nprim, weighttrg);

    if (irecoht>=0 && irecoht<nHLTmx) { 
      prim_hist[irecoht]->Fill(tmpvert);
      prim_sel[irecoht]->Fill(nprim);
      
      prim_hist_rewt[irecoht]->Fill(tmpvert, weighttrg);
      prim_sel_rewt[irecoht]->Fill(nprim, weighttrg);   
    }
    prim_correl->Fill(tmpvert, nprim);
 } 
#endif 
  
edm::Handle<reco::GenJetCollection> genjets;
if(isMC) {
iEvent.getByToken(genjetToken_,genjets);
}

//bool tt = false;
//Jet Matching - Leading & Sub-Leading
#ifdef MATCHING
bool jet_matches = false;

if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

std::vector<bool> matched_recojets(ak4PFJets->size(), false);
std::vector<bool> matched_genjets(genjets->size(), false);

// Initialize variables to keep track of leading recojet and leading genjet
    unsigned int reco_lead_idx = 0;
    unsigned int gen_lead_idx = 0;
    double reco_lead_pt = 0;
    double gen_lead_pt = 0;
/*
// Print the pt of all recojets
    cout << "Reco Jets:" << std::endl;
    for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
        cout << "Jet " << ijet << " pt: " << (*ak4PFJets)[ijet].pt() <<endl;
    }

// Print the pt of all genjets
    cout << "Gen Jets:" << std::endl;
    for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
        cout << "Jet " << igjet << " pt: " << (*genjets)[igjet].pt() <<endl;
    }
*/
// Loop over all AK4 PFJets to find the one with the highest pt
    for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
        if ((*ak4PFJets)[ijet].pt() > reco_lead_pt) {
            reco_lead_idx = ijet;
            reco_lead_pt = (*ak4PFJets)[ijet].pt();
        }
    }

// Loop over all genjets to find the one with the highest pt
    for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
        if ((*genjets)[igjet].pt() > gen_lead_pt) {
            gen_lead_idx = igjet;
            gen_lead_pt = (*genjets)[igjet].pt();
        }
    }

// Calculate the deltaR between the leading recojet and leading genjet, and check if they are matched
    double jetdR_lead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[gen_lead_idx]);
    if (jetdR_lead < 0.2) {

// If the leading jets are matched, mark them as such in the matched_recojets and matched_genjets vectors
        matched_recojets[reco_lead_idx] = true;
        matched_genjets[gen_lead_idx] = true;

	// Initialize variables to keep track of subleading recojet and subleading genjet
        unsigned int reco_sublead_idx = 0;
        unsigned int gen_sublead_idx = 0;
        double reco_sublead_pt = 0;
        double gen_sublead_pt = 0;

// Loop over all AK4 PFJets to find the one with the highest pt, excluding the leading jet
for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	    if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
            if (ijet == reco_lead_idx || (*ak4PFJets)[ijet].pt() < reco_sublead_pt) continue;
            double jetdR_sublead = deltaR((*ak4PFJets)[ijet], (*genjets)[gen_lead_idx]);
            if (jetdR_sublead < 0.2) {
                reco_sublead_idx = ijet;
                reco_sublead_pt = (*ak4PFJets)[ijet].pt();
            }
        }

// Check if the subleading recojet is matched to the leading genjet
        for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	    if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
            if (igjet == gen_lead_idx || (*genjets)[igjet].pt() < gen_sublead_pt) continue;
            double jetdR_sublead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[igjet]);
            if (jetdR_sublead < 0.2) {
                gen_sublead_idx = igjet;
                gen_sublead_pt = (*genjets)[igjet].pt();
            }
        }

// Loop over all genjets to find the one with the highest pt, excluding the leading jet
        double jetdR_sublead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[gen_sublead_idx]);
        if (jetdR_sublead < 0.2) {
            matched_recojets[reco_sublead_idx] = true;
            matched_genjets[gen_sublead_idx] = true;
            jet_matches = true;
	}
    }
}
//#endif

//Particle matching
//bool part_matches = false;
std::vector<reco::CandidatePtr> matched_recoparts;
std::vector<reco::CandidatePtr> matched_genparts;

if(jet_matches){
if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

    std::vector<bool> matched_recojets(ak4PFJets->size(), false);
    std::vector<bool> matched_genjets(genjets->size(), false);

        for (unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
        for (unsigned igjet = 0; igjet != genjets->size(); igjet++) {
	
		if ((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1 || (*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
                if (matched_recojets[ijet] || matched_genjets[igjet]) continue;
	
	double jetdR = deltaR((*ak4PFJets)[ijet], (*genjets)[igjet]);
            if (jetdR < 0.2) {
                std::vector<reco::CandidatePtr> recodaus((*ak4PFJets)[ijet].daughterPtrVector());
                std::sort(recodaus.begin(), recodaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<reco::CandidatePtr> gendaus((*genjets)[igjet].daughterPtrVector());
                std::sort(gendaus.begin(), gendaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<bool> matched_recodaus(recodaus.size(), false);
                std::vector<bool> matched_gendaus(gendaus.size(), false);

                for (unsigned int ireco = 0; ireco < recodaus.size(); ++ireco) {
                    const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*recodaus[ireco]);

                    for (unsigned int igen = 0; igen < gendaus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*gendaus[igen]);
			if(recocand.pt()<1.0 || abs(recocand.eta())>2.5 || gencand.pt()<1.0 || abs(gencand.eta())>2.5 || recocand.charge()==0 || gencand.charge()==0) continue;
                        double partdR = deltaR(recocand, gencand);
                        if (partdR < 0.05 && recocand.charge() == gencand.charge() && !matched_recodaus[ireco] && !matched_gendaus[igen]) {
			//if (partdR < 0.05 && !matched_recodaus[ireco] && !matched_gendaus[igen]) {
                            matched_recodaus[ireco] = true;
                            matched_gendaus[igen] = true;
                            matched_recoparts.push_back(recodaus[ireco]);
                            matched_genparts.push_back(gendaus[igen]);
/*			cout<<"------Particle Matching START--------"<<endl;
			if(ijet==0){
			cout<<"Leading RecoJet pt : "<<(*ak4PFJets)[ijet].pt()<<endl;
			cout<<"Leading GenJet pt : "<<(*genjets)[igjet].pt()<<endl;
			cout << "Leading RecoJet Particle check : pt: " << recocand.pt() << " eta: " << recocand.eta() << " ID: " << recocand.pdgId() << " charge: " << recocand.charge() << endl;
			cout << "Leading GenJet Particle check : pt: " << gencand.pt() << " eta: " <<gencand.eta() << " ID: " << gencand.pdgId() << " charge: " << gencand.charge() << endl;
	}
			cout<<"------Particle Matching END--------"<<endl;
*/
						}
                    				}
                			}
				//part_matches = true;
            			}
        		}
    		}
	}
}

#endif

if(isMC) {

//    edm::Handle<reco::GenJetCollection> genjets;
//    iEvent.getByToken(genjetToken_,genjets);
}

//Reco Level work starts here 
 
  vector<double> jetptx[njecmx];
  vector<double> jetscl[njecmx];
  vector<int> jetindx[njecmx];

#ifndef GENPART
  if (ak4PFJets.isValid()) { 
    for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
      double pt = (*ak4PFJets)[ijet].pt();
      
      //#ifndef JETENERGY
      //#ifdef JETRESO
      
#if defined(JETRESO)&&(!defined(JETENERGY))
      //resolution file 
      JME::JetResolution resolution;
      //resolution = JME::JetResolution("Summer20UL16APV_JRV3_DATA_PtResolution_AK4PFchs.txt");    // for DATA APV
      //resolution = JME::JetResolution("Summer20UL16_JRV3_DATA_PtResolution_AK4PFchs.txt"); //for DATA
      //resolution = JME::JetResolution("Summer20UL16APV_JRV3_MC_PtResolution_AK4PFchs.txt"); // for MC APV
      resolution = JME::JetResolution("Summer20UL16_JRV3_MC_PtResolution_AK4PFchs.txt"); //for MC

      //Scalefactor file
      JME::JetResolutionScaleFactor res_sf;
      //cout<<"Filename="<<scalefile<<endl;
      //res_sf = JME::JetResolutionScaleFactor("Summer20UL16APV_JRV3_DATA_SF_AK4PFchs.txt");// for DATA APV
      //res_sf = JME::JetResolutionScaleFactor("Summer20UL16_JRV3_DATA_SF_AK4PFchs.txt");  // for DATA
      //res_sf = JME::JetResolutionScaleFactor("Summer20UL16APV_JRV3_MC_SF_AK4PFchs.txt"); // for MC APV
      res_sf = JME::JetResolutionScaleFactor("Summer20UL16_JRV3_MC_SF_AK4PFchs.txt"); //for MC
	 
      edm::Handle<double> rho;
      iEvent.getByToken(m_rho_token, rho);
      //cout<< "  rho=" << *rho << endl;
      
      //cout << "Write test 3 = ok " << endl;
      double eta = (*ak4PFJets)[ijet].eta();
      double reso = 1;
      JME::JetParameters parameters_5 = {{JME::Binning::JetPt, pt}, {JME::Binning::JetEta, eta}, {JME::Binning::Rho, *rho}};
      float rp = resolution.getResolution(parameters_5);
      float sf = res_sf.getScaleFactor({{JME::Binning::JetEta, eta}});
      float sf_up= res_sf.getScaleFactor({{JME::Binning::JetEta, eta}}, Variation::UP);
      float sf_dn= res_sf.getScaleFactor({{JME::Binning::JetEta, eta}}, Variation::DOWN);
      //#endif
      //#endif
#endif 
      for (int isrc = 0; isrc < njecmx; isrc++) {
	double sup = 1;
#ifdef JETENERGY
	double eta = (*ak4PFJets)[ijet].eta();
	if (isrc>0 && isrc<=nsrc) {
	  JetCorrectionUncertainty *jecUnc = vsrc[isrc-1];
	  jecUnc->setJetEta(eta);
	  jecUnc->setJetPt(pt);
	  
	  sup += jecUnc->getUncertainty(true);
	} else if (isrc>nsrc) {
	  JetCorrectionUncertainty *jecUnc = vsrc[isrc-nsrc-1];
	  jecUnc->setJetEta(eta);
	  jecUnc->setJetPt(pt);
	  sup -= jecUnc->getUncertainty(false);
	}
#elif defined(JETRESO)

	//edm::Handle<reco::GenJetCollection> genjets;
     	//iEvent.getByToken(genjetToken_,genjets);
 	//cout << "Gen Jets no " << genjets->size() <<endl;

	bool match_jet = false;
	double m_dPt_max_factor = 1.0;

	//double m_dPt_max_factor = 3.0;
        //double m_dPt_max_factor = 3.0;
        double min_dR = std::numeric_limits<double>::infinity();

	double matched_genJetPt = 0.0;

	for(unsigned igjet = 0; igjet != genjets->size(); igjet++){
   		double dR = deltaR((*genjets)[igjet], (*ak4PFJets)[ijet]);
		//cout << "dR = " << dR << endl ;

		double m_dR_max = 0.2;

	if (dR > min_dR) continue;
  	if (dR < m_dR_max) {
     	double dPt = std::abs((*genjets)[igjet].pt() - (*ak4PFJets)[ijet].pt());
      	//cout << "dPt = " << dPt << endl 
	if (dPt > m_dPt_max_factor * rp * (*ak4PFJets)[ijet].pt())    continue;
	     	min_dR = dR;
     	 	match_jet=true;
         	matched_genJetPt = (*genjets)[igjet].pt(); 
                }

		//cout << "mindR = " << min_dR << endl;
		}

	//cout << " match_jet " << match_jet <<" "<< ijet << endl;
	
#ifdef STOCHASTIC
match_jet = false;
#endif
	
	if(match_jet){

        double dPt =  std::abs((*ak4PFJets)[ijet].pt() - matched_genJetPt);

       	if (isrc==0) {
          sup= 1 + (sf - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        } else if (isrc==1) {
          sup= 1 + (sf_up - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        } else if (isrc==2) {
          sup= 1 + (sf_dn - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        }

	}else{

	/*
	if (isrc==0) {  
	  reso = sqrt(abs(sf*sf - 1))*rp;
	} else if (isrc==1) {
	  reso = sqrt(abs(sf_up*sf_up - 1))*rp;
	} else if (isrc==2) {
	  reso = sqrt(abs(sf_dn*sf_dn - 1))*rp;
	}
	sup = gRandom->Gaus(1.0, reso);			
	*/

	if (isrc==0) {
          reso = sqrt(max(sf*sf - 1.0,0.0));
        } else if (isrc==1) {
          reso = sqrt(max(sf_up*sf_up - 1.0,0.0));;
        } else if (isrc==2) {
          reso = sqrt(max(sf_dn*sf_dn - 1.0,0.0));;
        }


        sup = 1+ (gRandom->Gaus(0, rp))*reso;
	}

#endif
	//cout << "Scale " << sup <<endl;
	jetptx[isrc].push_back(sup*pt);
	jetscl[isrc].push_back(sup);
	jetindx[isrc].push_back(ijet);
      }
    }
//#if defined(JETENERGY)||defined(JETRESO)
    
    for (int isrc = 0; isrc < njecmx; isrc++) {
      for (unsigned int ij=0; ij<jetptx[isrc].size()-1; ij++) {
	for (unsigned int jk=ij+1; jk<jetptx[isrc].size(); jk++) {
	  if (jetptx[isrc][jk]>jetptx[isrc][ij]) {
	    double tmppt = jetptx[isrc][ij];
	    double tmpscl = jetscl[isrc][ij];
	    int tmpindx = jetindx[isrc][ij];
	    
	    jetptx[isrc][ij] = jetptx[isrc][jk];
	    jetscl[isrc][ij] = jetscl[isrc][jk];
	    jetindx[isrc][ij] = jetindx[isrc][jk];					
	    
	    jetptx[isrc][jk] = tmppt;
	    jetscl[isrc][jk] = tmpscl;
	    jetindx[isrc][jk] = tmpindx;
	  }
	}
      }
    }
    //#endif
    
    for (int isrc = 0; isrc < njecmx; isrc++) {
      if (jetptx[isrc].size()>=2) {
	leadingptjec[isrc] = jetptx[isrc][0];
        //irecohtjec[isrc] = getbinid(leadingptjec[isrc], nHLTmx, leadingPtThreshold);
	irecohtjec[isrc] = getbinid(leadingptjec[isrc], ngenPT, genhtbins);
	//irecohtjec[isrc] = getbinid(leadingptjec[isrc], PTbins, recohtbins2D);
	//cout<<" JEC CORRECTED PT : "<<leadingptjec[isrc]<<endl;
      } else {
	irecohtjec[isrc] = -1;
      }
    }

    //GMA Need the corection on aveleadingpt
    if (ak4PFJets.isValid() && ak4PFJets->size() >=2) { //  && aveleadingpt >leadingPtThreshold[0]) { //GMA look on this
      
      for (int iet=0; iet<njetetamn; iet++) {
	for (int isrc = 0; isrc < njecmx; isrc++) {
	  //if (aveleadingptjec[isrc] >leadingPtThreshold[0]) {
	  if (leadingptjec[isrc] >leadingPtThreshold[0]) {
	    //int njets=0;
	    ncount=0;
	    //recterm=0;
	    //ithird=-1;
	    //double sup = 1;	
	    //px=0;
	    //py=0;
	    //ptxy=0;
	    tmpjt4v.clear();
	    //tmpcand4v.clear();
	    //tmpgen4v.clear();
	    
	    //if (abs((*ak4PFJets)[0].eta())<etarange[iet] && abs((*ak4PFJets)[1].eta())<etarange[iet]) {
	    //for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
	    
	    for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
	      if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet]) {
		//if (abs((*ak4PFJets)[jetindx[isrc][ijet]].eta())<etarange[iet]) {
		//if (deltaR(((*ak4PFJets)[jetindx[isrc][0]]),((*ak4PFJets)[jetindx[isrc][ijet]]))<1.6) continue;
	        if (dPhi(((*ak4PFJets)[jetindx[isrc][0]].phi()), ((*ak4PFJets)[jetindx[isrc][1]].phi()))<2.0) continue;
		if (dPT(((*ak4PFJets)[jetindx[isrc][0]].pt()), ((*ak4PFJets)[jetindx[isrc][1]].pt()))>0.3) continue;
		//if ((((*ak4PFJets)[jetindx[isrc][0]].pt()) / ((*ak4PFJets)[jetindx[isrc][1]].pt()))>1.5) continue;
	      	//int flavour = (*ak4PFJets)[ijet].partonFlavour();
        	//cout << "Flavour : "<<flavour<<endl;
		
		int ireorjt = jetindx[isrc][ijet];
#ifdef FLAV		
		int jetflav = (*ak4PFJets)[ireorjt].partonFlavour();
		//int jetflav = (*ak4PFJets)[ireorjt].hadronFlavour();	
		//cout<<"Jet Flavor : "<<jetflav<<endl;
		//if(jetflav==5){cout << "Flavour : "<<jetflav<<endl;}	
#endif	
		double pt = jetptx[isrc][ijet];
		double sup = jetscl[isrc][ijet];
		double abseta = abs((*ak4PFJets)[ireorjt].eta());
	        if (pt<30.0 || abseta >etarange[iet]) continue;	
		//if (iet==0 && isrc==0) cout <<"pteta "<<pt<<" "<<abseta<<endl;
		//bool isEta = (abseta<2.5) ? true : false;
		bool isEta = (abseta<2.1) ? true : false;
		
		//if (isEta && pt>30.0) { njets++;}
		if (abseta>5.0) continue;
		bool isPt = (pt>30.0) ? true : false;
		if (isEta && isPt) {ncount++;}
		
		//cout<< "ncount = " << ncount << endl;
		//Jet ID ================= Tight ID 2017 Recomendation  check for 2018
		double NHF = (*ak4PFJets)[ireorjt].neutralHadronEnergyFraction();
		double NEMF = (*ak4PFJets)[ireorjt].neutralEmEnergyFraction();
		double CHF = (*ak4PFJets)[ireorjt].chargedHadronEnergyFraction();
		//double MUF = (*ak4PFJets)[ireorjt].muonEnergyFraction();
		double CEMF = (*ak4PFJets)[ireorjt].chargedEmEnergyFraction();
		int NumConst = (*ak4PFJets)[ireorjt].chargedMultiplicity()+(*ak4PFJets)[ireorjt].neutralMultiplicity();
		int NumNeutralParticles =(*ak4PFJets)[ireorjt].neutralMultiplicity();
		int CHM = (*ak4PFJets)[ireorjt].chargedMultiplicity();
                //cout<<"NHF== "<< NHF << "; NEF== " << NEMF <<" ; CHF==" <<CHF <<" ;cef==" << CEMF <<"; no= " << NumConst <<" ; nch==" << CHM <<" ; NO of part==" << NumNeutralParticles <<endl;
                bool passPUIDtight = bool((*ak4PFJets)[ireorjt].userInt("pileupJetId:fullId") & (1 << 0)) || ((*ak4PFJets)[ireorjt].pt() > 50.0);
		bool TightJetID =false;
                //if (abs((*ak4PFJets)[ireorjt].eta())<=2.6 && CEMF<0.8 && CHM>0 && CHF>0 && NumConst>1 && NEMF<0.9 && MUF <0.8 && NHF < 0.9 ) {TightJetID =true;}
      		//else {TightJetID =false;}
      		if(abs((*ak4PFJets)[ireorjt].eta())<=2.7){
                if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0 && abs((*ak4PFJets)[ireorjt].eta())<=2.6)  TightJetID =true;
                if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ireorjt].eta())>2.6)  TightJetID =true;}
                else {TightJetID =false;}
                if (abs((*ak4PFJets)[ireorjt].eta())>2.7) {TightJetID = false;}
                if ((*ak4PFJets)[ireorjt].pt()<30.0) {TightJetID = false;}
		
		if( ireorjt<=1 && !TightJetID) break;
		if (!TightJetID && !passPUIDtight) continue;
		//cout<<"ireorjt : "<<ireorjt<<endl;
			
		HepLorentzVector tmp4v((*ak4PFJets)[ireorjt].px(), (*ak4PFJets)[ireorjt].py(), (*ak4PFJets)[ireorjt].pz(), (*ak4PFJets)[ireorjt].energy()); tmp4v *=sup;
                Hep3Vector tmp3v((*ak4PFJets)[ireorjt].px(), (*ak4PFJets)[ireorjt].py(), (*ak4PFJets)[ireorjt].pz()); tmp3v *=sup;
		
		if (isEta && isPt) { tmpjt4v.push_back(tmp4v);}
		//tmpjt4v.push_back(tmp4v);	  
		//if (isEta && isPt) {allrecojetmom.push_back(tmp4v);}
		//if (ncount<=2) {  //change for all jet 26th June
		  if (isEta && isPt) {recomom[isrc][0][iet].push_back(tmp4v);}
		  //}
		  //cout <<"ncount filled "<<ncount<<" "<<isrc<<" "<<iet<<" "<<recomom[isrc][0][iet].size()<<endl;
		  //px +=tmp4v.px();
		  //py +=tmp4v.py();
		  //ptxy +=tmp4v.perp();
		  if (isrc==0) {

		    if ((isInEtaRange[iet])) {recojt_CHF->Fill(CHF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NHF->Fill(NHF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NEMF->Fill(NEMF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_CHM->Fill(CHM, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NumNeutralParticles->Fill(NumNeutralParticles, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_CEMF->Fill(CEMF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NumConst->Fill(NumConst, weighttrg);}
 
		    if ((isInEtaRange[iet])) {recojt_pt[iet]->Fill(tmp4v.perp(), weighttrg); recoJetpT = tmp4v.perp();}
		    if (isPt && iet==0) {recojt_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {recojt_phi->Fill(tmp4v.phi(), weighttrg);}
		    //if (isEta && ncount==1) {recoht2_pt[iet]->Fill(aveleadingpt,weighttrg);}
		    if (isEta && ncount==1) {recoht2_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()),weighttrg);}

#ifdef FLAV		
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
				if (isInEtaRange[iet]) {recojtg_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtg_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtg_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==2){//u-jet
				if (isInEtaRange[iet]) {recojtu_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtu_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtu_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==-2){//ubar-jet
                                if (isInEtaRange[iet]) {recojtubar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojtubar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojtubar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==1){//d-jet
				if (isInEtaRange[iet]) {recojtd_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtd_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtd_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==-1){//dbar-jet
                                if (isInEtaRange[iet]) {recojtdbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojtdbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojtdbar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else{//others
				if (isInEtaRange[iet]) {recojto_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojto_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojto_phi->Fill(tmp4v.phi(), weighttrg);}
			}

			//Second-Set Flavor Tagging
			if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
				if (isInEtaRange[iet]) {recojt_qjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_qjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_qjet_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                if (isInEtaRange[iet]) {recojt_aqjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_aqjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_aqjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(abs(jetflav==21 || jetflav==9)){
				if (isInEtaRange[iet]) {recojt_aqgjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_aqgjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_aqgjet_phi->Fill(tmp4v.phi(), weighttrg);}
			}else{
				if (isInEtaRange[iet]) {recojt_aqojet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt_aqojet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt_aqojet_phi->Fill(tmp4v.phi(), weighttrg);}
			}
#endif
		  }//if (isrc==0) {
		
		if (isrc==0) { 
		  if(ijet==0) { 
		    if (isInEtaRange[iet]) {recojt1_pt[iet]->Fill(tmp4v.perp(), weighttrg); recojet1_pt = tmp4v.perp();} 
		    if (isPt && iet==0) {recojt1_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {recojt1_phi->Fill(tmp4v.phi(), weighttrg);}
#ifdef FLAV
		    	if(abs(jetflav==21 || jetflav==9)){//gluon-jet
		  	  	if (isInEtaRange[iet]) {recojt1g_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1g_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1g_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==2){//u-jet
				if (isInEtaRange[iet]) {recojt1u_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1u_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1u_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==-2){//ubar-jet
                                if (isInEtaRange[iet]) {recojt1ubar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1ubar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1ubar_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==1){//d-jet
				if (isInEtaRange[iet]) {recojt1d_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1d_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1d_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==-1){//dbar-jet
                                if (isInEtaRange[iet]) {recojt1dbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1dbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1dbar_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{//others
				if (isInEtaRange[iet]) {recojt1o_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1o_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1o_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
			
			if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                if (isInEtaRange[iet]) {recojt1_qjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_qjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_qjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                if (isInEtaRange[iet]) {recojt1_aqjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_aqjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_aqjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(abs(jetflav==21 || jetflav==9)){
                                if (isInEtaRange[iet]) {recojt1_aqgjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_aqgjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_aqgjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{
                                if (isInEtaRange[iet]) {recojt1_aqojet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1_aqojet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1_aqojet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
#endif				
		  } else if(ijet==1){
		    if (isInEtaRange[iet]) {recojt2_pt[iet]->Fill(tmp4v.perp(), weighttrg); recojet2_pt = tmp4v.perp();}
		    if (isPt && iet==0) {recojt2_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {recojt2_phi->Fill(tmp4v.phi(), weighttrg);}

		    if (isInEtaRange[iet] && ncount==2) { 
		      if (irecoht>=0 && irecoht<nHLTmx) { 
			//recojtave_pt[iet][irecoht]->Fill(aveleadingpt, weighttrg);
			//recojtavewt1_pt[iet][irecoht]->Fill(aveleadingpt);
			recojtave_pt[iet][irecoht]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()), weighttrg);
                        recojtavewt1_pt[iet][irecoht]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()));
		      }
		      
		      //recojtallavewt1_pt[iet]->Fill(aveleadingpt);
		      //recojtallave_pt[iet]->Fill(aveleadingpt, weighttrg);
		      recojtallavewt1_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()));
                      recojtallave_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()), weighttrg);
		    }
#ifdef FLAV
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                if (isInEtaRange[iet]) {recojt2g_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2g_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2g_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==2){//u-jet
                        	if (isInEtaRange[iet]) {recojt2u_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2u_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2u_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==-2){//ubar-jet
                                if (isInEtaRange[iet]) {recojt2ubar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2ubar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2ubar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==1){//d-jet
                        	if (isInEtaRange[iet]) {recojt2d_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2d_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2d_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(jetflav==-1){//dbar-jet
                                if (isInEtaRange[iet]) {recojt2dbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2dbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2dbar_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{//others
                                if (isInEtaRange[iet]) {recojt2o_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2o_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2o_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
		    
			if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                if (isInEtaRange[iet]) {recojt2_qjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_qjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_qjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                if (isInEtaRange[iet]) {recojt2_aqjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_aqjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_aqjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(abs(jetflav==21 || jetflav==9)){
                                if (isInEtaRange[iet]) {recojt2_aqgjet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_aqgjet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_aqgjet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{
                                if (isInEtaRange[iet]) {recojt2_aqojet_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2_aqojet_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2_aqojet_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
#endif
		  } else if(ijet==2) {
		    if (isInEtaRange[iet]) {recojt3_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0 ) {recojt3_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {recojt3_phi->Fill(tmp4v.phi(), weighttrg);} 
		  }
		  
		  if (tmpjt4v.size()==2 && isInEtaRange[iet]) { 
		    double dphi = dPhi(tmpjt4v[0].phi(), tmpjt4v[1].phi());
		    double dpt = tmpjt4v[0].perp() - tmpjt4v[1].perp();
		    double dperp = fabs(tmpjt4v[1].perp()*sin(dphi))/tmpjt4v[0].perp();
		    hjetdphi[iet]->Fill(dphi, weighttrg);
		    hjetdpt[iet]->Fill(dpt, weighttrg);
		    hjetptbypl[iet]->Fill(dperp, weighttrg);
		    hjetpt2bypt1[iet]->Fill(tmpjt4v[1].perp()/tmpjt4v[0].perp(), weighttrg);
		  }
		  
		  if (tmpjt4v.size()==3) {hjetpt3bypt2[iet]->Fill(tmpjt4v[2].perp()/tmpjt4v[1].perp(), weighttrg);}
		  } //if (isrc==0) {
		
		//int nchg=0;
		nchg = 0, nchg1 = 0, nchg2 = 0;
		std::vector<reco::CandidatePtr> daus((*ak4PFJets)[ireorjt].daughterPtrVector());           
		std::sort(daus.begin(), daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });               
      		                                                                   
		for (unsigned int i2 = 0; i2< daus.size(); ++i2) { //particle loop  
		  const pat::PackedCandidate &pfcand = dynamic_cast<const pat::PackedCandidate &>(*daus[i2]);
		  int charge = pfcand.charge();
		  HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
		  //tmpcand4v.push_back(cand4v);	
                  //nchg++;
		  if(charge !=0){nchg++;}
		  //if(ijet==0 && charge !=0){nchg1++;}
		  //if(ijet==1 && charge !=0){nchg2++;}	
                  //h_nchg[iet]->Fill(nchg, weighttrg);   // need to check
		  //if (cand4v.perp()<0.5) continue;
		  //if (ncount<=2 && isEta && isPt) { 
		  //recomom[isrc][1][iet].push_back(cand4v);
		    
		    if (charge !=0) {
		      recomom[isrc][1][iet].push_back(cand4v);
                      //if(cand4v.perp()>1.0){mom[isrc][iet].push_back(cand4v);}
#ifdef TRACKSYS
		      if (gRandom->Uniform() < 0.96) {recomom[isrc][2][iet].push_back(cand4v); }
#endif
		}
		  if (isrc==0) { 
		    //if (isEta && isPt) {
		      if (charge !=0) {
			recochg_phi->Fill(cand4v.phi(), weighttrg);
			recochg_pt->Fill(cand4v.perp(), weighttrg);
			recochg_eta->Fill(cand4v.eta(), weighttrg);
		      }
		    
		      if (ijet==0 && charge !=0) {
                        recochg1_phi->Fill(cand4v.phi(), weighttrg);
                        recochg1_pt->Fill(cand4v.perp(), weighttrg);
                        recochg1_eta->Fill(cand4v.eta(), weighttrg);

                        nchg1++;
                        hchpt1->Fill(tmp4v.perp(), nchg1, weighttrg);
#ifdef FLAV
                        if(abs(jetflav==21 || jetflav==9)){hchpt1_gjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
                        if(jetflav==2){hchpt1_ujet->Fill(tmp4v.perp(), nchg1, weighttrg);}
                        if(jetflav==-2){hchpt1_ubarjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
                        if(jetflav==1){hchpt1_djet->Fill(tmp4v.perp(), nchg1, weighttrg);}
                        if(jetflav==-1){hchpt1_dbarjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
#endif
		      }
                     else if (ijet==1 && charge !=0) {
                        recochg2_phi->Fill(cand4v.phi(), weighttrg);
                        recochg2_pt->Fill(cand4v.perp(), weighttrg);
                        recochg2_eta->Fill(cand4v.eta(), weighttrg);

                        nchg2++;
                        hchpt2->Fill(tmp4v.perp(), nchg2, weighttrg);
#ifdef FLAV
                        if(abs(jetflav==21 || jetflav==9)){hchpt2_gjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(jetflav==2){hchpt2_ujet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(jetflav==-2){hchpt2_ubarjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(jetflav==1){hchpt2_djet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(jetflav==-1){hchpt2_dbarjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
#endif
                      }
                     else if (ijet==2 && charge !=0) {
                        recochg3_phi->Fill(cand4v.phi(), weighttrg);
                        recochg3_pt->Fill(cand4v.perp(), weighttrg);
                        recochg3_eta->Fill(cand4v.eta(), weighttrg);
                      }                     
		    }//if (isrc==0) {
		     //}
	} //for (unsigned int i2 = 0; i2< daus.size(); ++i2
	//cout<<" Reco particle momentum : "<<ijet1candsmomk1<<" Jet pt : "<<recojet1_test<<" JCO : "<<ijet1candsmomk1/recojet1_test<<endl;
        //cout<<"-------------"<<endl;
        h_nchg[iet]->Fill(nchg, weighttrg);    

if(ijet==0){
        for (int ik=0; ik<10; ik++){
#ifdef MATCHING
	if(jet_matches){
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

        	for (unsigned int imatched = 0; imatched < matched_recoparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recocand = static_cast<const pat::PackedCandidate&>(*matched_recoparts[imatched]);

                if (recocand.charge() == matched_recocand.charge() && deltaR(recocand, matched_recocand) < 1e-4) {
			int charge = recocand.charge();
			Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
			if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

				ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
        	                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                	        ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                      		ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#ifdef FLAV
				//Flavor Tagging
				if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                        ijet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==2){//u-jet
                                        ijet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(jetflav==-2){//ubar-jet
                                        ijet1candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==1){//d-jet
                                        ijet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(jetflav==-1){//dbar-jet
                                        ijet1candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{//others
                                        ijet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }

				//Second-Set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet1candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet1candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet1candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet1candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
				if (gRandom->Uniform() < 0.977){
					ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                	ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                	ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
			else{
				if (gRandom->Uniform() < 0.99){
					ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                	ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                	ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
			}
#endif

#ifdef TRACKPTUP
				cand3v *= 1.015;
				ijet1candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
				cand3v *= 0.985;
				ijet1candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
				}
			}
		}
	}
	}else{
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
			int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
				
				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

				ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#ifdef FLAV
				//Flavor Tagging
				if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                        ijet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==2){//u-jet
                                        ijet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(jetflav==-2){//ubar-jet
                                        ijet1candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==1){//d-jet
                                        ijet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(jetflav==-1){//dbar-jet
                                        ijet1candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{//others
                                        ijet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }

				//Second-set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet1candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet1candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet1candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet1candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }
#endif

#ifdef TRACKPTUP
                                cand3v *= 1.015;
                                ijet1candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
                                cand3v *= 0.985;
                                ijet1candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
				}
			}
		}

#else

	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

                                ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
#endif
	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                //int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
				//ijet1candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
			}
		}
	}
}

if(ijet==1){
	for (int ik=0; ik<10; ik++){
#ifdef MATCHING
	if(jet_matches){
                for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

                for (unsigned int imatched = 0; imatched < matched_recoparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recocand = static_cast<const pat::PackedCandidate&>(*matched_recoparts[imatched]);

                if (recocand.charge() == matched_recocand.charge() && deltaR(recocand, matched_recocand) < 1e-4) {
                        int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet2candsmom_den[ik][isrc] += (cand3v.perp());

				ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                	        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        	ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        	ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#ifdef FLAV	
			//Flavor Tagging	
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                ijet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==2){//u-jet
                                ijet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(jetflav==-2){//ubar-jet
                                ijet2candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==1){//d-jet
                                ijet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(jetflav==-1){//dbar-jet
                                ijet2candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else{//others
                                ijet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }

				//Second-Set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet2candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet2candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet2candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet2candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }
#endif

#ifdef TRACKPTUP
                                cand3v *= 1.015;
                                ijet2candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
                                cand3v *= 0.985;
                                ijet2candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
					}
				}
			}
		}
	}else{
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
		
			ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			ijet2candsmom_den[ik][isrc] += (cand3v.perp());

			ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

#ifdef FLAV
			//Flavor Tagging
			if(abs(jetflav==21 || jetflav==9)){//gluon-jet
                                ijet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==2){//u-jet
                                ijet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(jetflav==-2){//ubar-jet
                                ijet2candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(jetflav==1){//d-jet
                                ijet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(jetflav==-1){//dbar-jet
                                ijet2candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else{//others
                                ijet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }

				//Second-set Flavor Tagging
				if(jetflav==1 || jetflav==2 || jetflav==3 || jetflav==4 || jetflav==5){
                                        ijet2candsmom_num_qjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_qjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_qjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_qjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_qjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_qjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(jetflav==-1 || jetflav==-2 || jetflav==-3 || jetflav==-4 || jetflav==-5){
                                        ijet2candsmom_num_aqjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(abs(jetflav==21 || jetflav==9)){
                                        ijet2candsmom_num_aqgjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqgjet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqgjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqgjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqgjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqgjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{
                                        ijet2candsmom_num_aqojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_aqojet[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_aqojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_aqojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_aqojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_aqojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }
#endif

#ifdef TRACKPTUP
                                cand3v *= 1.015;
                                ijet2candsmom_num_trackpt1[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt1[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt1[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt1[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif

#ifdef TRACKPTDOWN
                                cand3v *= 0.985;
                                ijet2candsmom_num_trackpt2[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt2[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt2[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt2[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
				}
			}
		}

#else

	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
               
			ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			ijet2candsmom_den[ik][isrc] += (cand3v.perp());

                        ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
#endif
	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                //int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
                        //ijet2candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                        ijet2candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
			}
		}
	}
}

		//  if(isEta && isPt) {ncount++;}
	   	//  }//if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet])
	  	//  }//for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++)
/*	    if (ithird>=0) {
	      
	      recomom[isrc][0][iet].push_back(tmp4v);
	      //					cout <<"recomom[isrc][0][iet] "<< isrc<<" "<<iet<<" "<<recomom[isrc][0][iet].size()<<endl;
	      // tmpjt4v.push_back(tmp4v);   
	      
	      std::vector<reco::CandidatePtr> daus((*ak4PFJets)[ithird].daughterPtrVector());
	      std::sort(daus.begin(), daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2 ->pt(); });
	      for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		const pat::PackedCandidate &pfcand = dynamic_cast<const pat::PackedCandidate &>(*daus[i2]);
		int charge = pfcand.charge();
		HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
		//      if (cand4v.perp()<0.5) continue;                                                             
		recomom[isrc][1][iet].push_back(cand4v);
		
		if (charge !=0) {
		  recomom[isrc][2][iet].push_back(cand4v);
#ifdef TRACKSYS
		  if (gRandom->Uniform() < 0.96) {recomom[isrc][4][iet].push_back(cand4v); }
#endif
		  
		}
		if (charge==0){
		  if (cand4v.perp()>1.0) {
		    recomom[isrc][3][iet].push_back(cand4v);
		  }
		} else{
		  if (cand4v.perp()>0.5) {
		    recomom[isrc][3][iet].push_back(cand4v);
		  }
		}
	      }
	    }*/ //if (ithird>=0) 
	    h_njets[iet]->Fill(ncount, weighttrg);
              } //if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet])
            } // for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++)
	  } //if (aveleadingptjec[isrc] >leadingPtThreshold[0])
	} // 	for (int isrc = 0; isrc < njecmx; isrc++)
      } //for (int iet=0; iet<njetetamn; iet++)	   
    } // if (ak4PFJets.isValid() && ak4PFJets->size()>=2 && (*ak4PFJets)[0].pt()>leadingPtThreshold[0])
  } // if (ak4PFJets.isValid())
#endif 
  //cout << "Write test 1 = ok " << endl;
  //==================================***GenJets*****=================================
  //cout<<"0 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
  //double leadgenpt =0;

//Gen level work starts
  //edm::Handle<reco::GenJetCollection> genjets;
  if(isMC) {
    //edm::Handle<reco::GenJetCollection> genjets;
    //iEvent.getByToken(genjetToken_,genjets);
    
    //double avegenpt =0;
    double leadgenpt =0;
    //cout <<"HGebjet "<<endl;
    if(isMC && ((!genjets.isValid()) || genjets->size()<2)) return;

    if (genjets.isValid() &&  genjets->size()>=2) {
#ifdef DIJETAVE
	
      for (int iet=0; iet<njetetamn; iet++) {
	isInEtaRange[iet] = true;
      }
      
      for (int ij=0; ij<1; ij++) {
	for (int iet=0; iet<njetetamn; iet++) {
	  if (abs((*genjets)[ij].eta())>etarange[iet]) { isInEtaRange[iet] = false;}
	}
	
	//if (abs((*genjets)[ij].eta())<2.5 && (*genjets)[ij].pt()>30.0 ) {
/*	
	if (abs((*genjets)[ij].eta())<2.1 && (*genjets)[ij].pt()>30.0 ) { 
	  avegenpt +=(*genjets)[ij].pt();
          leadgenpt = (*genjets)[0].pt();
	} else {avegenpt -=100000;
		leadgenpt -=100000;}
*/
	
	if (abs((*genjets)[ij].eta())>2.1 || (*genjets)[ij].pt()<30.0 ) continue;
	  //avegenpt +=(*genjets)[ij].pt();
          leadgenpt = (*genjets)[ij].pt();
	//cout<<"Lead gen pt : "<<leadgenpt<<endl;
	//cout<<"Sub-Lead gen pt : "<<(*genjets)[1].pt()<<endl;
      }
        //avegenpt /=2.0;
#else 

#endif
    } 
    
    //igenht = getbinid(leadgenpt, njetptmn, leadingPtThreshold);
 
    //cout << "Write test 2 = ok " << endl;
    //cout << "Write test 321 = ok " << endl;
    vector<double> genjetptx[nGenReso];
    vector<double> genjetscl[nGenReso]; 
    vector<int> genjetindx[nGenReso];
   
  if(genjets.isValid()){
    for(unsigned ijet = 0; ijet != genjets->size(); ijet++) {
      double pt = (*genjets)[ijet].pt();
      for (int isrc = 0; isrc < nGenReso; isrc++) {
	double sup = 1.0;	
	genjetptx[isrc].push_back(sup*pt);
	genjetscl[isrc].push_back(sup);
	genjetindx[isrc].push_back(ijet);
      }
    }
  }
       //cout << "Write test 3 = ok " << endl;
       //cout << "Write test 322 = ok "<<nGenReso << endl;
//////#ifdef JETRESO
    for (int isrc = 0; isrc < nGenReso; isrc++) {
     //if(genjetptx[isrc].size()==0) break;
      for (unsigned int ij=0; ij<genjetptx[isrc].size()-1; ij++) {
	for (unsigned int jk=ij+1; jk<genjetptx[isrc].size(); jk++) {  
	  if (genjetptx[isrc][jk]>genjetptx[isrc][ij]){ 
	    double tmppt = genjetptx[isrc][ij];
	    double tmpscl = genjetscl[isrc][ij];
	    int tmpindx = genjetindx[isrc][ij];
	    
	    genjetptx[isrc][ij] = genjetptx[isrc][jk];
	    genjetscl[isrc][ij] = genjetscl[isrc][jk];
	    genjetindx[isrc][ij] = genjetindx[isrc][jk];			

	    genjetptx[isrc][jk] = tmppt;
	    genjetscl[isrc][jk] = tmpscl;
	    genjetindx[isrc][jk] = tmpindx;
	  }
	}
      }
    }
    //////#endif
    //cout << "Write test 4 = ok " << endl;
    //double avegenptres[nGenReso]={0};
    
    for (int isrc = 0; isrc < nGenReso; isrc++) {
      if (genjetptx[isrc].size()>=2) {
        leadgenptres[isrc] = (genjetptx[isrc][0]);
        //igenhtres[isrc] = getbinid(leadgenptres[isrc], njetptmn, leadingPtThreshold);
	igenhtres[isrc] = getbinid(leadgenptres[isrc], ngenPT, genhtbins);
	//igenhtres[isrc] = getbinid(leadgenptres[isrc], PTbins, recohtbins2D);
      } else {
	igenhtres[isrc] = -1;
      }
    }
     
    if(genjets.isValid() && genjets->size() >=2) { //  && avegenpt>leadingPtThreshold[0]) {
    
     for (int iet=0; iet<njetetamn; iet++) {
	for (int isrc=0; isrc<nGenReso; isrc++) { 
          if (leadgenptres[isrc] > leadingPtThreshold[0]) {
	    //double px =0;
	    //double py =0;
	    //double ptxy =0;
	    
	    ncount=0;
	    //int recterm=0;
	    //int ithird=-1;
	    tmpgen4v.clear(); 
	    for(unsigned ijet = 0; ijet != genjets->size(); ijet++) {
		if (abs((*genjets)[genjetindx[isrc][0]].eta())<etarange[iet] && abs((*genjets)[genjetindx[isrc][1]].eta())<etarange[iet]) {
	     /* if ((*genjets)[igenjt].pt()>25.0) {
		cout<<"ievt "<<ievt<<" "<<ijet<<" "<<igenjt<<" "<<genjetptx[isrc][ijet]<<" "<<(*genjets)[igenjt].pt()<<" "<<(*genjets)[igenjt].eta()<<" "<<(*genjets)[igenjt].phi()<<endl;
	      }*/

	        //if (abs((*genjets)[genjetindx[isrc][ijet]].eta())<etarange[iet]) {
		//if (deltaR(((*genjets)[genjetindx[isrc][0]]),((*genjets)[genjetindx[isrc][ijet]]))<1.6) continue;
		//cout << (deltaR(((*genjets)[genjetindx[isrc][0]]),((*genjets)[genjetindx[isrc][ijet]])))<<e
		if (dPhi(((*genjets)[genjetindx[isrc][0]].phi()), ((*genjets)[genjetindx[isrc][1]].phi()))<2.0) continue;
                if (dPT(((*genjets)[genjetindx[isrc][0]].pt()), ((*genjets)[genjetindx[isrc][1]].pt()))>0.3) continue; 
		//if ((((*genjets)[genjetindx[isrc][0]].pt()) / ((*genjets)[genjetindx[isrc][1]].pt()))>1.5) continue;
		int igenjt = genjetindx[isrc][ijet];

		//cout<<genjetindx[isrc][ijet]<<endl;
		double pt = genjetptx[isrc][ijet];
		double sup = genjetscl[isrc][ijet];
		double abseta = abs((*genjets)[igenjt].eta());
		if (pt<30.0 || abseta >etarange[iet]) continue;
		bool isEta = (abseta<2.1) ? true : false;
		
		//if (iet==0 && isrc==0) 
		//cout <<"MC:pteta "<<ijet<<" "<<pt<<" "<<abseta<<endl;
		if (abseta>5.0) continue;
		bool isPt = (pt>30.0) ? true : false;
		if (isEta && isPt) {ncount++;}	
		
		//if(igenjt<=1) continue;
		//cout<<"igenjt : "<<igenjt<<endl;
	
		HepLorentzVector tmp4v((*genjets)[igenjt].px(), (*genjets)[igenjt].py(), (*genjets)[igenjt].pz(), (*genjets)[igenjt].energy()); tmp4v *=sup;
		Hep3Vector tmp3v((*genjets)[igenjt].px(), (*genjets)[igenjt].py(), (*genjets)[igenjt].pz()); tmp3v *=sup;
		//cout<<"GenJet pt test : "<<tmp3v.perp()<<endl;
		if (isEta && isPt) { tmpgen4v.push_back(tmp4v);} 
	
		  if (isEta && isPt) {genmom[isrc][0][iet].push_back(tmp4v);}

		  if (isrc==0) { 
		    if (isInEtaRange[iet]) {genjt_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0) {genjt_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {genjt_phi->Fill(tmp4v.phi(), weighttrg);}
			//cout<<"GenJet PT : "<<tmp4v.perp()<<endl;  
		  }
		
		if (isrc==0) { 
		  if(ijet==0) {
		    //cout<<"Gen Pt= " << avegenpt <<endl;
		    if (isInEtaRange[iet]) {genjt1_pt[iet]->Fill(tmp4v.perp(), weighttrg); genrecojet1_pt = tmp4v.perp();}
		    if (isPt && iet==0) {genjt1_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {genjt1_phi->Fill(tmp4v.phi(), weighttrg);}
			//cout<<"GenJet PT : "<<tmp4v.perp()<<endl;	
		  } else if(ijet==1){
		    //cout<<"okkkkkkkk" <<endl;
		    if (isInEtaRange[iet]) {genjt2_pt[iet]->Fill(tmp4v.perp(), weighttrg); genrecojet2_pt = tmp4v.perp();}
		    if (isPt && iet==0) {genjt2_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {genjt2_phi->Fill(tmp4v.phi(), weighttrg);}
		    if (isInEtaRange[iet] && ncount==2) {
		      //cout<<"Gen Pt 1= " << avegenpt <<endl;
		      genjtallave_pt[iet]->Fill(0.5*(tmpgen4v[0].perp()+tmpgen4v[1].perp()), weighttrg);
		    }
		  } else if(ijet==2) {
		    if (isInEtaRange[iet]) {genjt3_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0 ) {genjt3_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {genjt3_phi->Fill(tmp4v.phi(), weighttrg);}
		  }
		  if (tmpgen4v.size()==2 && isInEtaRange[iet]) {
		    double dphi = dPhi(tmpgen4v[0].phi(), tmpgen4v[1].phi());
		    double dpt = tmpgen4v[0].perp() - tmpgen4v[1].perp();
		    double dperp = fabs(tmpgen4v[1].perp()*sin(dphi))/tmpgen4v[0].perp();
		    
		    genjetdphi[iet]->Fill(dphi, weighttrg);
		    genjetdpt[iet]->Fill(dpt, weighttrg);
		    genjetptbypl[iet]->Fill(dperp, weight);
		    genjetpt2bypt1[iet]->Fill(tmpgen4v[1].perp()/tmpgen4v[0].perp(), weight);
		  }
		  
		  if (tmpgen4v.size()==3) {genjetpt3bypt2[iet]->Fill(tmpgen4v[2].perp()/tmpgen4v[1].perp(), weight);}
		}
#ifdef GENPART
		
		std::vector <const GenParticle*> daus ((*genjets)[igenjt].getGenConstituents ());
		std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });  //need to check 
		for (unsigned int i2 =0; i2< daus.size(); ++i2) {
		  const GenParticle* pfcand = daus[i2];
		  int charge = pfcand->charge();
		  HepLorentzVector cand4v(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
		  //int pdgid = pfcand->pdgId();
		 //std::cout<<"GENPART loop"<<endl; 
#else		
		
		  std::vector<reco::CandidatePtr> daus((*genjets)[igenjt].daughterPtrVector());
		  std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });                               
		  for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		    const pat::PackedCandidate &pfcand = static_cast<const pat::PackedCandidate &>(*daus[i2]);
		    int charge = pfcand.charge();
		    //int pdgid = pfcand.pdgId();
		    //if(pdgid==2){//cout<<"pdgid : "<<pdgid<<endl;
		    //cout<<"True"<<endl;}
		    //std::cout<<"ALL loop"<<endl;
		    HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
#endif
		    //	    if (cand4v.perp()<0.5) continue;
		    
		    //if (ncount<=2 && isEta && isPt) {
		      //genmom[isrc][1][iet].push_back(cand4v);
		      if (charge !=0) {
			genmom[isrc][1][iet].push_back(cand4v);
#ifdef TRACKSYS
			if (gRandom->Uniform() < 0.96) {genmom[isrc][2][iet].push_back(cand4v); }
#endif
	}
	if (isrc==0) { 
               	if (charge !=0) {
			genchg_phi->Fill(cand4v.phi(), weighttrg);
			genchg_pt->Fill(cand4v.perp(), weighttrg);
			genchg_eta->Fill(cand4v.eta(), weighttrg);
		  	}
		if (ijet==0 && charge !=0) {
			genchg1_phi->Fill(cand4v.phi(), weighttrg);
                        genchg1_pt->Fill(cand4v.perp(), weighttrg);
                        genchg1_eta->Fill(cand4v.eta(), weighttrg);
			}
		else if (ijet==1 && charge !=0) {
			genchg2_phi->Fill(cand4v.phi(), weighttrg);
                        genchg2_pt->Fill(cand4v.perp(), weighttrg);
                        genchg2_eta->Fill(cand4v.eta(), weighttrg);
			}
		else if (ijet==2 && charge !=0) {
                        genchg3_phi->Fill(cand4v.phi(), weighttrg);
                        genchg3_pt->Fill(cand4v.perp(), weighttrg);
                        genchg3_eta->Fill(cand4v.eta(), weighttrg);
                        }
		}//if (isrc==0)
		} //for (unsigned int i2 = 0; i2< daus.size(); ++i2)
		//cout<<" Gen particle momentum : "<<igenjet1candsmomk1<<" Jet pt : "<<genjet1_test<<" JCO : "<<igenjet1candsmomk1/genjet1_test<<endl;
		//cout<<"-------------"<<endl;

	if (ijet==0){
		for (int ik=0; ik<10; ik++){
#ifdef MATCHING
			if(jet_matches){	
				for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                		const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

	        		for (unsigned int imatched = 0; imatched < matched_genparts.size(); ++imatched) {
                		const pat::PackedCandidate& matched_gencand = static_cast<const pat::PackedCandidate&>(*matched_genparts[imatched]);

                		if (gencand.charge() == matched_gencand.charge() && deltaR(gencand, matched_gencand) < 1e-4) {

				int charge = gencand.charge();
                        	Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());

                        	if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

					igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                	igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
		
					//igenjet1candsmom_matchedtracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet1candsmom_matchedtracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
						}
					}
				}
			}
			}else{
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);
				
                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				
				igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
			}
#else
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

				igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
#endif
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        //int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				//igenjet1candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet1candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
			}	
		}			
	}
}

	if(ijet==1){
		for (int ik=0; ik<10; ik++){
#ifdef MATCHING
			if(jet_matches){
                                for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                                const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                                for (unsigned int imatched = 0; imatched < matched_genparts.size(); ++imatched) {
                                const pat::PackedCandidate& matched_gencand = static_cast<const pat::PackedCandidate&>(*matched_genparts[imatched]);

                                if (gencand.charge() == matched_gencand.charge() && deltaR(gencand, matched_gencand) < 1e-4) {
                                int charge = gencand.charge();
                                Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                                if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

					igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

        	                        igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                	                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        	        igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					//igenjet2candsmom_matchedtracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet2candsmom_matchedtracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
						}
					}
				}
			}
		}else{
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);
                                
                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
		
				igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}
			}
		}

#else
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				
				igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
		}
		
#endif
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        //int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				//igenjet2candsmom_alltracks[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet2candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
				}
			}
	}
}

		  //  if (isEta && isPt) {ncount++;}
		} // if (abs((*genjets)[genjetindx[isrc][0]].eta())<etarange[iet] && 
		//								abs((*genjets)[genjetindx[isrc][1]].eta())<etarange[iet])
	      } //	for(unsigned ijet = 0; ijet != genjets->size(); ijet++) 
	      //cout << "Write test 324 = ok " << endl;
	     /* if (ithird>=0) {
		//							cout <<"ithird "<<isrc<<" "<< iet<<" "<< ithird<<endl;
		
		HepLorentzVector tmp4v((*genjets)[ithird].px(), (*genjets)[ithird].py(), (*genjets)[ithird].pz(), (*genjets)[ithird].energy());
		genmom[isrc][0][iet].push_back(tmp4v);
		//cout <<"thirdijxxx "<<isrc<<" "<<iet<<" "<< genmom[isrc][0][iet].size()<<" "<<genjets->size()<<" "<<ithird<<" "<<tmp4v.perp()<<" "<<tmp4v.eta()<<" "<<tmp4v.phi()<<" "<<setprecision(14)<<weighttrg<<endl;
#ifdef GENPART
		std::vector <const GenParticle*> daus ((*genjets)[ithird].getGenConstituents ());
		//								std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); }); 
		
		for (unsigned int i2 =0; i2< daus.size(); ++i2) {
		  const GenParticle* pfcand = daus[i2];
		  int charge = pfcand->charge();
		  HepLorentzVector cand4v(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
		  //								int pdgid = pfcand->pdgId();
		  
#else
		  std::vector<reco::CandidatePtr> daus((*genjets)[ithird].daughterPtrVector());
		  std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });    
		  
		  for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		    const pat::PackedCandidate &pfcand = static_cast<const pat::PackedCandidate &>(*daus[i2]);
		    
		    int charge = pfcand.charge();
		    HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
#endif
		    
		    
		    //      if (cand4v.perp()<0.5) continue;                                                                                                                     
		    genmom[isrc][1][iet].push_back(cand4v);
		    if (charge !=0) {
		      genmom[isrc][2][iet].push_back(cand4v);
#ifdef TRACKSYS
		      if (gRandom->Uniform() < 0.96) {genmom[isrc][4][iet].push_back(cand4v); }
#endif
		    }
		    
		    if(charge ==0) {
		      if (cand4v.perp()>1.0) {
			genmom[isrc][3][iet].push_back(cand4v);
		      }
		    } else {
		      if (cand4v.perp()>0.5) {
			genmom[isrc][3][iet].push_back(cand4v);
		      }
		    }
		  } //for (unsigned int i2 = 0; i2< daus.size(); ++i2) 
		}*/// if (ithird>=0)
		gen_njets[iet]->Fill(ncount,weighttrg); 
	      } // if (avegenptres[isrc] > leadingPtThreshold[0])
	    } //	for (int isrc=0; isrc<nGenReso; isrc++)
	  } //for (int iet=0; iet<njetetamn; iet++)
	} // if(genjets.isValid() && genjets->size()>=2 && (*genjets)[0].pt()>leadingPtThreshold[0])
	// } //if (genjets.isValid() &&  genjets->size()>=2) 
	//h_2ht->Fill(aveleadingpt,avegenpt, weighttrg);
	h_2ht->Fill(leadingpt,leadgenpt, weighttrg);
	///////Response
      } //isMC
      //	cout<<"22 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
      // if(isMC) h_2ht->Fill(aveleadingpt,avegenpt, weighttrg);
      //cout << "Write test 325 = ok " << endl;
      //for(int rnum=0; rnum<10; rnum++) {
      /*double rand=gRandom->Uniform();
      int k = rand/0.1;
      //cout << "Rand Number " << k << endl;*/
 
//-----------------------------------------------Calculate And Fill Jet Charge Obserables------------------------------------

for (int ik=0; ik<nkappa; ik++){
	for (int isrc = 0; isrc < njecmx; isrc++) {
		RecoJCO[0][0][ik][isrc] = (ijet1candsmom_num[ik][isrc]/(pow(ijet1candsmom_den[ik][isrc],kappa[ik])));
                RecoJCO[0][1][ik][isrc] = (ijet2candsmom_num[ik][isrc]/(pow(ijet2candsmom_den[ik][isrc],kappa[ik])));

		RecoJCO[1][0][ik][isrc] = (ijet1_long_num[ik][isrc]/ijet1_long_den[ik][isrc]);
                RecoJCO[1][1][ik][isrc] = (ijet2_long_num[ik][isrc]/ijet2_long_den[ik][isrc]);

                RecoJCO[2][0][ik][isrc] = (ijet1_tran_num[ik][isrc]/ijet1_tran_den[ik][isrc]);
                RecoJCO[2][1][ik][isrc] = (ijet2_tran_num[ik][isrc]/ijet2_tran_den[ik][isrc]);


		recomomJCO[0][0][ik][isrc] = (pow(ijet1candsmom_den[ik][isrc],kappa[ik]));
                recomomJCO[0][1][ik][isrc] = (pow(ijet2candsmom_den[ik][isrc],kappa[ik]));

                recomomJCO[1][0][ik][isrc] = (ijet1_long_den[ik][isrc]);
                recomomJCO[1][1][ik][isrc] = (ijet2_long_den[ik][isrc]);

                recomomJCO[2][0][ik][isrc] = (ijet1_tran_den[ik][isrc]);
                recomomJCO[2][1][ik][isrc] = (ijet2_tran_den[ik][isrc]);
#ifdef FLAV
		//g-jet
		RecoJCO_gjet[0][0][ik][isrc] = (ijet1candsmom_num_gjet[ik][isrc]/(pow(ijet1candsmom_den_gjet[ik][isrc],kappa[ik])));
                RecoJCO_gjet[0][1][ik][isrc] = (ijet2candsmom_num_gjet[ik][isrc]/(pow(ijet2candsmom_den_gjet[ik][isrc],kappa[ik])));

                RecoJCO_gjet[1][0][ik][isrc] = (ijet1_long_num_gjet[ik][isrc]/ijet1_long_den_gjet[ik][isrc]);
                RecoJCO_gjet[1][1][ik][isrc] = (ijet2_long_num_gjet[ik][isrc]/ijet2_long_den_gjet[ik][isrc]);

                RecoJCO_gjet[2][0][ik][isrc] = (ijet1_tran_num_gjet[ik][isrc]/ijet1_tran_den_gjet[ik][isrc]);
                RecoJCO_gjet[2][1][ik][isrc] = (ijet2_tran_num_gjet[ik][isrc]/ijet2_tran_den_gjet[ik][isrc]);

		recomomJCO_gjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_gjet[ik][isrc],kappa[ik]));
                recomomJCO_gjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_gjet[ik][isrc],kappa[ik]));

                recomomJCO_gjet[1][0][ik][isrc] = (ijet1_long_den_gjet[ik][isrc]);
                recomomJCO_gjet[1][1][ik][isrc] = (ijet2_long_den_gjet[ik][isrc]);

                recomomJCO_gjet[2][0][ik][isrc] = (ijet1_tran_den_gjet[ik][isrc]);
                recomomJCO_gjet[2][1][ik][isrc] = (ijet2_tran_den_gjet[ik][isrc]);

		//u-jet
		RecoJCO_ujet[0][0][ik][isrc] = (ijet1candsmom_num_ujet[ik][isrc]/(pow(ijet1candsmom_den_ujet[ik][isrc],kappa[ik])));
                RecoJCO_ujet[0][1][ik][isrc] = (ijet2candsmom_num_ujet[ik][isrc]/(pow(ijet2candsmom_den_ujet[ik][isrc],kappa[ik])));

                RecoJCO_ujet[1][0][ik][isrc] = (ijet1_long_num_ujet[ik][isrc]/ijet1_long_den_ujet[ik][isrc]);
                RecoJCO_ujet[1][1][ik][isrc] = (ijet2_long_num_ujet[ik][isrc]/ijet2_long_den_ujet[ik][isrc]);

                RecoJCO_ujet[2][0][ik][isrc] = (ijet1_tran_num_ujet[ik][isrc]/ijet1_tran_den_ujet[ik][isrc]);
                RecoJCO_ujet[2][1][ik][isrc] = (ijet2_tran_num_ujet[ik][isrc]/ijet2_tran_den_ujet[ik][isrc]);

		recomomJCO_ujet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ujet[ik][isrc],kappa[ik]));
                recomomJCO_ujet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ujet[ik][isrc],kappa[ik]));

                recomomJCO_ujet[1][0][ik][isrc] = (ijet1_long_den_ujet[ik][isrc]);
                recomomJCO_ujet[1][1][ik][isrc] = (ijet2_long_den_ujet[ik][isrc]);

                recomomJCO_ujet[2][0][ik][isrc] = (ijet1_tran_den_ujet[ik][isrc]);
                recomomJCO_ujet[2][1][ik][isrc] = (ijet2_tran_den_ujet[ik][isrc]);

		//ubar-jet
		RecoJCO_ubarjet[0][0][ik][isrc] = (ijet1candsmom_num_ubarjet[ik][isrc]/(pow(ijet1candsmom_den_ubarjet[ik][isrc],kappa[ik])));
                RecoJCO_ubarjet[0][1][ik][isrc] = (ijet2candsmom_num_ubarjet[ik][isrc]/(pow(ijet2candsmom_den_ubarjet[ik][isrc],kappa[ik])));

                RecoJCO_ubarjet[1][0][ik][isrc] = (ijet1_long_num_ubarjet[ik][isrc]/ijet1_long_den_ubarjet[ik][isrc]);
                RecoJCO_ubarjet[1][1][ik][isrc] = (ijet2_long_num_ubarjet[ik][isrc]/ijet2_long_den_ubarjet[ik][isrc]);

                RecoJCO_ubarjet[2][0][ik][isrc] = (ijet1_tran_num_ubarjet[ik][isrc]/ijet1_tran_den_ubarjet[ik][isrc]);
                RecoJCO_ubarjet[2][1][ik][isrc] = (ijet2_tran_num_ubarjet[ik][isrc]/ijet2_tran_den_ubarjet[ik][isrc]);

                recomomJCO_ubarjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ubarjet[ik][isrc],kappa[ik]));
                recomomJCO_ubarjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ubarjet[ik][isrc],kappa[ik]));

                recomomJCO_ubarjet[1][0][ik][isrc] = (ijet1_long_den_ubarjet[ik][isrc]);
                recomomJCO_ubarjet[1][1][ik][isrc] = (ijet2_long_den_ubarjet[ik][isrc]);

                recomomJCO_ubarjet[2][0][ik][isrc] = (ijet1_tran_den_ubarjet[ik][isrc]);
                recomomJCO_ubarjet[2][1][ik][isrc] = (ijet2_tran_den_ubarjet[ik][isrc]);

		//d-jet
		RecoJCO_djet[0][0][ik][isrc] = (ijet1candsmom_num_djet[ik][isrc]/(pow(ijet1candsmom_den_djet[ik][isrc],kappa[ik])));
                RecoJCO_djet[0][1][ik][isrc] = (ijet2candsmom_num_djet[ik][isrc]/(pow(ijet2candsmom_den_djet[ik][isrc],kappa[ik])));

                RecoJCO_djet[1][0][ik][isrc] = (ijet1_long_num_djet[ik][isrc]/ijet1_long_den_djet[ik][isrc]);
                RecoJCO_djet[1][1][ik][isrc] = (ijet2_long_num_djet[ik][isrc]/ijet2_long_den_djet[ik][isrc]);

                RecoJCO_djet[2][0][ik][isrc] = (ijet1_tran_num_djet[ik][isrc]/ijet1_tran_den_djet[ik][isrc]);
                RecoJCO_djet[2][1][ik][isrc] = (ijet2_tran_num_djet[ik][isrc]/ijet2_tran_den_djet[ik][isrc]);

		recomomJCO_djet[0][0][ik][isrc] = (pow(ijet1candsmom_den_djet[ik][isrc],kappa[ik]));
                recomomJCO_djet[0][1][ik][isrc] = (pow(ijet2candsmom_den_djet[ik][isrc],kappa[ik]));

                recomomJCO_djet[1][0][ik][isrc] = (ijet1_long_den_djet[ik][isrc]);
                recomomJCO_djet[1][1][ik][isrc] = (ijet2_long_den_djet[ik][isrc]);

                recomomJCO_djet[2][0][ik][isrc] = (ijet1_tran_den_djet[ik][isrc]);
                recomomJCO_djet[2][1][ik][isrc] = (ijet2_tran_den_djet[ik][isrc]);

		//dbar-jet
		RecoJCO_dbarjet[0][0][ik][isrc] = (ijet1candsmom_num_dbarjet[ik][isrc]/(pow(ijet1candsmom_den_dbarjet[ik][isrc],kappa[ik])));
                RecoJCO_dbarjet[0][1][ik][isrc] = (ijet2candsmom_num_dbarjet[ik][isrc]/(pow(ijet2candsmom_den_dbarjet[ik][isrc],kappa[ik])));

                RecoJCO_dbarjet[1][0][ik][isrc] = (ijet1_long_num_dbarjet[ik][isrc]/ijet1_long_den_dbarjet[ik][isrc]);
                RecoJCO_dbarjet[1][1][ik][isrc] = (ijet2_long_num_dbarjet[ik][isrc]/ijet2_long_den_dbarjet[ik][isrc]);

                RecoJCO_dbarjet[2][0][ik][isrc] = (ijet1_tran_num_dbarjet[ik][isrc]/ijet1_tran_den_dbarjet[ik][isrc]);
                RecoJCO_dbarjet[2][1][ik][isrc] = (ijet2_tran_num_dbarjet[ik][isrc]/ijet2_tran_den_dbarjet[ik][isrc]);

                recomomJCO_dbarjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_dbarjet[ik][isrc],kappa[ik]));
                recomomJCO_dbarjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_dbarjet[ik][isrc],kappa[ik]));

                recomomJCO_dbarjet[1][0][ik][isrc] = (ijet1_long_den_dbarjet[ik][isrc]);
                recomomJCO_dbarjet[1][1][ik][isrc] = (ijet2_long_den_dbarjet[ik][isrc]);

                recomomJCO_dbarjet[2][0][ik][isrc] = (ijet1_tran_den_dbarjet[ik][isrc]);
                recomomJCO_dbarjet[2][1][ik][isrc] = (ijet2_tran_den_dbarjet[ik][isrc]);

		//others
		RecoJCO_ojet[0][0][ik][isrc] = (ijet1candsmom_num_ojet[ik][isrc]/(pow(ijet1candsmom_den_ojet[ik][isrc],kappa[ik])));
                RecoJCO_ojet[0][1][ik][isrc] = (ijet2candsmom_num_ojet[ik][isrc]/(pow(ijet2candsmom_den_ojet[ik][isrc],kappa[ik])));

                RecoJCO_ojet[1][0][ik][isrc] = (ijet1_long_num_ojet[ik][isrc]/ijet1_long_den_ojet[ik][isrc]);
                RecoJCO_ojet[1][1][ik][isrc] = (ijet2_long_num_ojet[ik][isrc]/ijet2_long_den_ojet[ik][isrc]);

                RecoJCO_ojet[2][0][ik][isrc] = (ijet1_tran_num_ojet[ik][isrc]/ijet1_tran_den_ojet[ik][isrc]);
                RecoJCO_ojet[2][1][ik][isrc] = (ijet2_tran_num_ojet[ik][isrc]/ijet2_tran_den_ojet[ik][isrc]);

		recomomJCO_ojet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ojet[ik][isrc],kappa[ik]));
                recomomJCO_ojet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ojet[ik][isrc],kappa[ik]));

                recomomJCO_ojet[1][0][ik][isrc] = (ijet1_long_den_ojet[ik][isrc]);
                recomomJCO_ojet[1][1][ik][isrc] = (ijet2_long_den_ojet[ik][isrc]);

                recomomJCO_ojet[2][0][ik][isrc] = (ijet1_tran_den_ojet[ik][isrc]);
                recomomJCO_ojet[2][1][ik][isrc] = (ijet2_tran_den_ojet[ik][isrc]);

		//Second-Set Flavor Tagging
		RecoJCO_qjet[0][0][ik][isrc] = (ijet1candsmom_num_qjet[ik][isrc]/(pow(ijet1candsmom_den_qjet[ik][isrc],kappa[ik])));
                RecoJCO_qjet[0][1][ik][isrc] = (ijet2candsmom_num_qjet[ik][isrc]/(pow(ijet2candsmom_den_qjet[ik][isrc],kappa[ik])));

                RecoJCO_qjet[1][0][ik][isrc] = (ijet1_long_num_qjet[ik][isrc]/ijet1_long_den_qjet[ik][isrc]);
                RecoJCO_qjet[1][1][ik][isrc] = (ijet2_long_num_qjet[ik][isrc]/ijet2_long_den_qjet[ik][isrc]);

                RecoJCO_qjet[2][0][ik][isrc] = (ijet1_tran_num_qjet[ik][isrc]/ijet1_tran_den_qjet[ik][isrc]);
                RecoJCO_qjet[2][1][ik][isrc] = (ijet2_tran_num_qjet[ik][isrc]/ijet2_tran_den_qjet[ik][isrc]);

                recomomJCO_qjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_qjet[ik][isrc],kappa[ik]));
                recomomJCO_qjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_qjet[ik][isrc],kappa[ik]));

                recomomJCO_qjet[1][0][ik][isrc] = (ijet1_long_den_qjet[ik][isrc]);
                recomomJCO_qjet[1][1][ik][isrc] = (ijet2_long_den_qjet[ik][isrc]);

                recomomJCO_qjet[2][0][ik][isrc] = (ijet1_tran_den_qjet[ik][isrc]);
                recomomJCO_qjet[2][1][ik][isrc] = (ijet2_tran_den_qjet[ik][isrc]);

		//ant-quark
		RecoJCO_aqjet[0][0][ik][isrc] = (ijet1candsmom_num_aqjet[ik][isrc]/(pow(ijet1candsmom_den_aqjet[ik][isrc],kappa[ik])));
                RecoJCO_aqjet[0][1][ik][isrc] = (ijet2candsmom_num_aqjet[ik][isrc]/(pow(ijet2candsmom_den_aqjet[ik][isrc],kappa[ik])));

                RecoJCO_aqjet[1][0][ik][isrc] = (ijet1_long_num_aqjet[ik][isrc]/ijet1_long_den_aqjet[ik][isrc]);
                RecoJCO_aqjet[1][1][ik][isrc] = (ijet2_long_num_aqjet[ik][isrc]/ijet2_long_den_aqjet[ik][isrc]);

                RecoJCO_aqjet[2][0][ik][isrc] = (ijet1_tran_num_aqjet[ik][isrc]/ijet1_tran_den_aqjet[ik][isrc]);
                RecoJCO_aqjet[2][1][ik][isrc] = (ijet2_tran_num_aqjet[ik][isrc]/ijet2_tran_den_aqjet[ik][isrc]);

                recomomJCO_aqjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_aqjet[ik][isrc],kappa[ik]));
                recomomJCO_aqjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_aqjet[ik][isrc],kappa[ik]));

                recomomJCO_aqjet[1][0][ik][isrc] = (ijet1_long_den_aqjet[ik][isrc]);
                recomomJCO_aqjet[1][1][ik][isrc] = (ijet2_long_den_aqjet[ik][isrc]);

                recomomJCO_aqjet[2][0][ik][isrc] = (ijet1_tran_den_aqjet[ik][isrc]);
                recomomJCO_aqjet[2][1][ik][isrc] = (ijet2_tran_den_aqjet[ik][isrc]);

		//gluon
		RecoJCO_aqgjet[0][0][ik][isrc] = (ijet1candsmom_num_aqgjet[ik][isrc]/(pow(ijet1candsmom_den_aqgjet[ik][isrc],kappa[ik])));
                RecoJCO_aqgjet[0][1][ik][isrc] = (ijet2candsmom_num_aqgjet[ik][isrc]/(pow(ijet2candsmom_den_aqgjet[ik][isrc],kappa[ik])));

                RecoJCO_aqgjet[1][0][ik][isrc] = (ijet1_long_num_aqgjet[ik][isrc]/ijet1_long_den_aqgjet[ik][isrc]);
                RecoJCO_aqgjet[1][1][ik][isrc] = (ijet2_long_num_aqgjet[ik][isrc]/ijet2_long_den_aqgjet[ik][isrc]);

                RecoJCO_aqgjet[2][0][ik][isrc] = (ijet1_tran_num_aqgjet[ik][isrc]/ijet1_tran_den_aqgjet[ik][isrc]);
                RecoJCO_aqgjet[2][1][ik][isrc] = (ijet2_tran_num_aqgjet[ik][isrc]/ijet2_tran_den_aqgjet[ik][isrc]);

                recomomJCO_aqgjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_aqgjet[ik][isrc],kappa[ik]));
                recomomJCO_aqgjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_aqgjet[ik][isrc],kappa[ik]));

                recomomJCO_aqgjet[1][0][ik][isrc] = (ijet1_long_den_aqgjet[ik][isrc]);
                recomomJCO_aqgjet[1][1][ik][isrc] = (ijet2_long_den_aqgjet[ik][isrc]);

                recomomJCO_aqgjet[2][0][ik][isrc] = (ijet1_tran_den_aqgjet[ik][isrc]);
                recomomJCO_aqgjet[2][1][ik][isrc] = (ijet2_tran_den_aqgjet[ik][isrc]);

		//others
		RecoJCO_aqojet[0][0][ik][isrc] = (ijet1candsmom_num_aqojet[ik][isrc]/(pow(ijet1candsmom_den_aqojet[ik][isrc],kappa[ik])));
                RecoJCO_aqojet[0][1][ik][isrc] = (ijet2candsmom_num_aqojet[ik][isrc]/(pow(ijet2candsmom_den_aqojet[ik][isrc],kappa[ik])));

                RecoJCO_aqojet[1][0][ik][isrc] = (ijet1_long_num_aqojet[ik][isrc]/ijet1_long_den_aqojet[ik][isrc]);
                RecoJCO_aqojet[1][1][ik][isrc] = (ijet2_long_num_aqojet[ik][isrc]/ijet2_long_den_aqojet[ik][isrc]);

                RecoJCO_aqojet[2][0][ik][isrc] = (ijet1_tran_num_aqojet[ik][isrc]/ijet1_tran_den_aqojet[ik][isrc]);
                RecoJCO_aqojet[2][1][ik][isrc] = (ijet2_tran_num_aqojet[ik][isrc]/ijet2_tran_den_aqojet[ik][isrc]);

                recomomJCO_aqojet[0][0][ik][isrc] = (pow(ijet1candsmom_den_aqojet[ik][isrc],kappa[ik]));
                recomomJCO_aqojet[0][1][ik][isrc] = (pow(ijet2candsmom_den_aqojet[ik][isrc],kappa[ik]));

                recomomJCO_aqojet[1][0][ik][isrc] = (ijet1_long_den_aqojet[ik][isrc]);
                recomomJCO_aqojet[1][1][ik][isrc] = (ijet2_long_den_aqojet[ik][isrc]);

                recomomJCO_aqojet[2][0][ik][isrc] = (ijet1_tran_den_aqojet[ik][isrc]);
                recomomJCO_aqojet[2][1][ik][isrc] = (ijet2_tran_den_aqojet[ik][isrc]);
#endif

#ifdef TRACKEFF
		RecoJCO_trackeff[0][0][ik][isrc] = (ijet1candsmom_num_trackeff[ik][isrc]/(pow(ijet1candsmom_den_trackeff[ik][isrc],kappa[ik])));
                RecoJCO_trackeff[0][1][ik][isrc] = (ijet2candsmom_num_trackeff[ik][isrc]/(pow(ijet2candsmom_den_trackeff[ik][isrc],kappa[ik])));

                RecoJCO_trackeff[1][0][ik][isrc] = (ijet1_long_num_trackeff[ik][isrc]/ijet1_long_den_trackeff[ik][isrc]);
                RecoJCO_trackeff[1][1][ik][isrc] = (ijet2_long_num_trackeff[ik][isrc]/ijet2_long_den_trackeff[ik][isrc]);

                RecoJCO_trackeff[2][0][ik][isrc] = (ijet1_tran_num_trackeff[ik][isrc]/ijet1_tran_den_trackeff[ik][isrc]);
                RecoJCO_trackeff[2][1][ik][isrc] = (ijet2_tran_num_trackeff[ik][isrc]/ijet2_tran_den_trackeff[ik][isrc]);


                recomomJCO_trackeff[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackeff[ik][isrc],kappa[ik]));
                recomomJCO_trackeff[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackeff[ik][isrc],kappa[ik]));

                recomomJCO_trackeff[1][0][ik][isrc] = (ijet1_long_den_trackeff[ik][isrc]);
                recomomJCO_trackeff[1][1][ik][isrc] = (ijet2_long_den_trackeff[ik][isrc]);

                recomomJCO_trackeff[2][0][ik][isrc] = (ijet1_tran_den_trackeff[ik][isrc]);
                recomomJCO_trackeff[2][1][ik][isrc] = (ijet2_tran_den_trackeff[ik][isrc]);
#endif

#ifdef TRACKPTUP
		RecoJCO_trackpt1[0][0][ik][isrc] = (ijet1candsmom_num_trackpt1[ik][isrc]/(pow(ijet1candsmom_den_trackpt1[ik][isrc],kappa[ik])));
                RecoJCO_trackpt1[0][1][ik][isrc] = (ijet2candsmom_num_trackpt1[ik][isrc]/(pow(ijet2candsmom_den_trackpt1[ik][isrc],kappa[ik])));

                RecoJCO_trackpt1[1][0][ik][isrc] = (ijet1_long_num_trackpt1[ik][isrc]/ijet1_long_den_trackpt1[ik][isrc]);
                RecoJCO_trackpt1[1][1][ik][isrc] = (ijet2_long_num_trackpt1[ik][isrc]/ijet2_long_den_trackpt1[ik][isrc]);

                RecoJCO_trackpt1[2][0][ik][isrc] = (ijet1_tran_num_trackpt1[ik][isrc]/ijet1_tran_den_trackpt1[ik][isrc]);
                RecoJCO_trackpt1[2][1][ik][isrc] = (ijet2_tran_num_trackpt1[ik][isrc]/ijet2_tran_den_trackpt1[ik][isrc]);


                recomomJCO_trackpt1[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackpt1[ik][isrc],kappa[ik]));
                recomomJCO_trackpt1[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackpt1[ik][isrc],kappa[ik]));

                recomomJCO_trackpt1[1][0][ik][isrc] = (ijet1_long_den_trackpt1[ik][isrc]);
                recomomJCO_trackpt1[1][1][ik][isrc] = (ijet2_long_den_trackpt1[ik][isrc]);

                recomomJCO_trackpt1[2][0][ik][isrc] = (ijet1_tran_den_trackpt1[ik][isrc]);
                recomomJCO_trackpt1[2][1][ik][isrc] = (ijet2_tran_den_trackpt1[ik][isrc]);
#endif

#ifdef TRACKPTDOWN
                RecoJCO_trackpt2[0][0][ik][isrc] = (ijet1candsmom_num_trackpt2[ik][isrc]/(pow(ijet1candsmom_den_trackpt2[ik][isrc],kappa[ik])));
                RecoJCO_trackpt2[0][1][ik][isrc] = (ijet2candsmom_num_trackpt2[ik][isrc]/(pow(ijet2candsmom_den_trackpt2[ik][isrc],kappa[ik])));

                RecoJCO_trackpt2[1][0][ik][isrc] = (ijet1_long_num_trackpt2[ik][isrc]/ijet1_long_den_trackpt2[ik][isrc]);
                RecoJCO_trackpt2[1][1][ik][isrc] = (ijet2_long_num_trackpt2[ik][isrc]/ijet2_long_den_trackpt2[ik][isrc]);

                RecoJCO_trackpt2[2][0][ik][isrc] = (ijet1_tran_num_trackpt2[ik][isrc]/ijet1_tran_den_trackpt2[ik][isrc]);
                RecoJCO_trackpt2[2][1][ik][isrc] = (ijet2_tran_num_trackpt2[ik][isrc]/ijet2_tran_den_trackpt2[ik][isrc]);


                recomomJCO_trackpt2[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackpt2[ik][isrc],kappa[ik]));
                recomomJCO_trackpt2[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackpt2[ik][isrc],kappa[ik]));

                recomomJCO_trackpt2[1][0][ik][isrc] = (ijet1_long_den_trackpt2[ik][isrc]);
                recomomJCO_trackpt2[1][1][ik][isrc] = (ijet2_long_den_trackpt2[ik][isrc]);

                recomomJCO_trackpt2[2][0][ik][isrc] = (ijet1_tran_den_trackpt2[ik][isrc]);
                recomomJCO_trackpt2[2][1][ik][isrc] = (ijet2_tran_den_trackpt2[ik][isrc]);
#endif
		}
	
	for (int isrc = 0; isrc < nGenReso; isrc++) {
		GenJCO[0][0][ik][isrc] = (igenjet1candsmom_num[ik][isrc]/(pow(igenjet1candsmom_den[ik][isrc],kappa[ik])));
                GenJCO[0][1][ik][isrc] = (igenjet2candsmom_num[ik][isrc]/(pow(igenjet2candsmom_den[ik][isrc],kappa[ik])));

		GenJCO[1][0][ik][isrc] = (igenjet1_long_num[ik][isrc]/igenjet1_long_den[ik][isrc]);
		GenJCO[1][1][ik][isrc] = (igenjet2_long_num[ik][isrc]/igenjet2_long_den[ik][isrc]);

		GenJCO[2][0][ik][isrc] = (igenjet1_tran_num[ik][isrc]/igenjet1_tran_den[ik][isrc]);
		GenJCO[2][1][ik][isrc] = (igenjet2_tran_num[ik][isrc]/igenjet2_tran_den[ik][isrc]);

#ifdef MATCHING
		genmomJCO[0][0][ik][isrc] = (pow(igenjet1candsmom_den[ik][isrc],kappa[ik]));
                genmomJCO[0][1][ik][isrc] = (pow(igenjet2candsmom_den[ik][isrc],kappa[ik]));

		genmomJCO[1][0][ik][isrc] = (igenjet1_long_den[ik][isrc]);
                genmomJCO[1][1][ik][isrc] = (igenjet2_long_den[ik][isrc]);

		genmomJCO[2][0][ik][isrc] = (igenjet1_tran_den[ik][isrc]);
                genmomJCO[2][1][ik][isrc] = (igenjet2_tran_den[ik][isrc]);
#endif
		imatched_all_pt[0][ik][isrc] = igenjet1candsmom_matchedtracks[ik][isrc]/igenjet1candsmom_alltracks[ik][isrc];
                imatched_all_pt[1][ik][isrc] = igenjet2candsmom_matchedtracks[ik][isrc]/igenjet2candsmom_alltracks[ik][isrc];
		}
	}

double recojetpt[njet] = {0.0};
double genjetpt[njet] = {0.0};

for(int ij=0; ij<njet; ij++){
	recojetpt[0] = recojet1_pt;
	recojetpt[1] = recojet2_pt;

	genjetpt[0] = genrecojet1_pt;
	genjetpt[1] = genrecojet2_pt;
	}	

//Dependence of Jet pT on JCO and flavor tagged JCO
for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
	if(isReconstruct){
	for (int isrc = 0; isrc < njecmx; isrc++) {
        	if(isrc==0){
			if(recomomJCO[id][ij][ik][isrc]>0){hprof_reco_jco_pt[id][ij][ik]->Fill(recojetpt[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO[id][ij][ik][isrc]>0){hprof_reco_jco_pt_debug[id][ij][ik]->Fill(recojetpt[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}
#ifdef FLAV
			if(recomomJCO_gjet[id][ij][ik][isrc]>0){hprof_jco_pt_gjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_gjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_ujet[id][ij][ik][isrc]>0){hprof_jco_pt_ujet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ujet[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO_ubarjet[id][ij][ik][isrc]>0){hprof_jco_pt_ubarjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ubarjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_djet[id][ij][ik][isrc]>0){hprof_jco_pt_djet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_djet[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO_dbarjet[id][ij][ik][isrc]>0){hprof_jco_pt_dbarjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_dbarjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_ojet[id][ij][ik][isrc]>0){hprof_jco_pt_ojet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ojet[id][ij][ik][isrc],weighttrg);}
#endif
				}
			}
		}
#ifdef MATCHING
	if(isMC){
	for (int isrc = 0; isrc < nGenReso; isrc++) {
		if(isrc==0){
			//if(genjetpt[ij]>0 && GenJCO[id][ij][ik][isrc]>0){hprof_gen_jco_pt[id][ij][ik]->Fill(genjetpt[ij],GenJCO[id][ij][ik][isrc],weighttrg);}
			//if(GenJCO[id][ij][ik][isrc]>0){hprof_gen_jco_pt[id][ij][ik]->Fill(genjetpt[ij],GenJCO[id][ij][ik][isrc],weighttrg);}
			if(genmomJCO[id][ij][ik][isrc]>0){hprof_gen_jco_pt[id][ij][ik]->Fill(genjetpt[ij],GenJCO[id][ij][ik][isrc],weighttrg);}
					}
				}
			}
#endif
		}
	}
}

double recotrackpt[njet][nkappa][njecmx] = {{{0.0}}};
double gentrackpt[njet][nkappa][njecmx] = {{{0.0}}};

for(int ik=0; ik<nkappa; ik++){
	for (int isrc = 0; isrc < njecmx; isrc++) {
                recotrackpt[0][ik][isrc] = ijet1candsmom_alltracks[ik][isrc];
                recotrackpt[1][ik][isrc] = ijet2candsmom_alltracks[ik][isrc];
        }
        for (int isrc = 0; isrc < nGenReso; isrc++) {
		gentrackpt[0][ik][isrc] = igenjet1candsmom_alltracks[ik][isrc];
		gentrackpt[1][ik][isrc] = igenjet2candsmom_alltracks[ik][isrc];
	}
}

//Ration of Matched charged pT to All Charged pT vs particle Jet pT
//Ratio of track pT to Jet pT vs Jet pT 
//For both particle and detector level
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
	//Reco level
	if(isReconstruct){
		for (int isrc = 0; isrc < njecmx; isrc++) {
                	if(isrc==0){	
				if(pow(recojetpt[ij],kappa[ik])>0){
					hprof_reco_trackpt_R_jetpt_jetpt[ij][ik]->Fill((pow(recojetpt[ij],kappa[ik])),(recotrackpt[ij][ik][isrc]/(pow(recojetpt[ij],kappa[ik]))),weighttrg);
				}
			}	
		}
	}
	//Gen level
	if(isMC){
	for (int isrc = 0; isrc < nGenReso; isrc++) {
                if(isrc==0){
			if(gentrackpt[ij][ik][isrc]>0){
				hprof_matchedChg_R_allChg_genjetpt[ij][ik]->Fill((pow(genjetpt[ij],kappa[ik])),imatched_all_pt[ij][ik][isrc],weighttrg);
				}
			if(pow(genjetpt[ij],kappa[ik])>0){
				hprof_gen_trackpt_R_jetpt_jetpt[ij][ik]->Fill((pow(genjetpt[ij],kappa[ik])),(gentrackpt[ij][ik][isrc]/(pow(genjetpt[ij],kappa[ik]))),weighttrg);
					}
				}
			}
		}
	}
}

//Charged particle multiplicity vs Jet pT (overall, lead & sub-lead)
hchpt->Fill(recoJetpT,nchg,weighttrg);
//hchpt1->Fill(recojet1_pt, nchg1, weighttrg);
//hchpt2->Fill(recojet2_pt, nchg2, weighttrg);

//cout<<"recojet1_pt : "<<recojet1_pt<<" nchg1 : "<<nchg1<<endl;
//cout<<"recojet2_pt : "<<recojet2_pt<<" nchg2 : "<<nchg2<<endl;

//////////////////////////////////////////////////////////////////////////////////////////////    
//Histograms are filled using array for all the kappa values
//1D
bool isRecoJCO1D[ndef][njet][nkappa][njetetamn];
bool isGenJCO1D[ndef][njet][nkappa][njetetamn];
#ifdef JETRESO
bool isRecoJCO_JER_1D[ndef][njet][nkappa][njetetamn][njecmx];
#endif

#ifdef TRACKEFF
bool isRecoJCO_trackeff_1D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTUP
bool isRecoJCO_trackpt1_1D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTDOWN
bool isRecoJCO_trackpt2_1D[ndef][njet][nkappa][njetetamn];
#endif

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
	if(recomomJCO[id][ij][ik][0]<=0 || recomomJCO[id][ij][ik][1]<=0 || recomomJCO[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif
                        if (isReconstruct) {
				for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
                                        if(recomomJCO[id][ij][ik][isrc]<=0) continue;
#endif
                                        if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#ifdef JETRESO
						isRecoJCO_JER_1D[id][ij][ik][iet][isrc]=true;
#endif
                                                if (isrc==0) {
                                                        if(ak4PFJets->size()>=2){
                                                        isRecoJCO1D[id][ij][ik][iet]=true;
							h_recovar[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
							h_recovarIB[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#ifdef FLAV
							if(recomomJCO_gjet[id][ij][ik][isrc]>0){
								h_recovar_gjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_gjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_ujet[id][ij][ik][isrc]>0){
								h_recovar_ujet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ujet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_ubarjet[id][ij][ik][isrc]>0){
                                                                h_recovar_ubarjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ubarjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_djet[id][ij][ik][isrc]>0){
								h_recovar_djet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_djet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_dbarjet[id][ij][ik][isrc]>0){
                                                                h_recovar_dbarjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_dbarjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_ojet[id][ij][ik][isrc]>0){
								h_recovar_ojet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ojet[id][ij][ik][isrc],weighttrg);}

							//Second-set Flavor Tagging
							if(recomomJCO_qjet[id][ij][ik][isrc]>0){
                                                                h_recovar_qjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_qjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_aqjet[id][ij][ik][isrc]>0){
                                                                h_recovar_aqjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_aqjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_aqgjet[id][ij][ik][isrc]>0){
                                                                h_recovar_aqgjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_aqgjet[id][ij][ik][isrc],weighttrg);}
							if(recomomJCO_aqojet[id][ij][ik][isrc]>0){
                                                                h_recovar_aqojet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_aqojet[id][ij][ik][isrc],weighttrg);}
#endif

#ifdef PREFIRE
							h_recovar_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
							h_recovar_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1up);
							h_recovar_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1down);
#endif

#ifdef TRACKEFF
							if(recomomJCO_trackeff[id][ij][ik][isrc]>0){
							isRecoJCO_trackeff_1D[id][ij][ik][iet]=true;
							h_recovar_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],weighttrg);
							}
#endif

#ifdef TRACKPTUP
							if(recomomJCO_trackpt1[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt1_1D[id][ij][ik][iet]=true;
                                                        h_recovar_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],weighttrg);
                                                        }
#endif

#ifdef TRACKPTDOWN
							if(recomomJCO_trackpt2[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt2_1D[id][ij][ik][iet]=true;
                                                        h_recovar_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],weighttrg);
                                                        }
#endif
                                                                }
                                                        }
                                                else{
#ifdef JETENERGY
                                                        if(ak4PFJets->size()>=2){
                                                                h_recovarjec[id][ij][ik][iet][irecohtjec[isrc]][isrc]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
#elif defined(JETRESO)
                                                        if(ak4PFJets->size()>=2){
                                                                h_recovarres[id][ij][ik][iet][irecohtjec[isrc]][isrc]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
#endif
                                                }
                                                }
                                        }
                                }//if (isReconstruct) {
			if(isMC){
                                 for (int isrc=0; isrc<nGenReso; isrc++) {
                                        if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                                if(isrc==0){
                                                        if(genjets->size()>=2){
                                                        isGenJCO1D[id][ij][ik][iet]=true;
                                                        h_genvar[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_genvar_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
							h_genvar_prefireup[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1up);
							h_genvar_prefiredown[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif

                                                                }
#ifdef LHAPDF
                                                        for (int ix=1; ix<nnnmx; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarpdf[id][ij][ik][iet][igenhtres[isrc]][ix]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*pdfwt[ix]);
                                                                        }
                                                                }
							for (int iy=0; iy<nmgscale; iy++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarmgscale[id][ij][ik][iet][igenhtres[isrc]][iy]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*mgscale[iy]);
                                                                        }
                                                                }
#endif

#ifdef SCALEUNC
							for (int ix=0; ix<nscale; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarscaleunc[id][ij][ik][iet][igenhtres[isrc]][ix]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*scalewt[ix]);
                                                                        }
                                                                }
#endif

                                                        }
                                                }
					if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                                if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
						//if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
						if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
						//if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif

                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
							h_RM[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_RM_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
							h_RM_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrgL1up);
							h_RM_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif

                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_recofake_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
							h_recofake_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1up);
							h_recofake_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1down);
#endif

                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
							h_genmiss_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
							h_genmiss_prefireup[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1up);
							h_genmiss_prefiredown[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif

                                                        }
                                                }
						else{
                                                        if(isRecoJCO1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
								h_recofake_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
								h_recofake_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1up);
								h_recofake_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1down);
#endif

							}
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);

#ifdef PREFIRE
								h_genmiss_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
								h_genmiss_prefireup[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1up);
								h_genmiss_prefiredown[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif

                                                                }
							}//else{
#ifdef TRACKEFF
						if(recomomJCO_trackeff[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
						if(isRecoJCO_trackeff_1D && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_trackeff[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackeff_1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_trackeff[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackeff[id][ij][ik][isrc],weighttrg);
                                                        }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_trackeff[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                                }
                                                        }//else{

#endif

#ifdef TRACKPTUP
						if(recomomJCO_trackpt1[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt1_1D && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_trackpt1[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt1_1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_trackpt1[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt1[id][ij][ik][isrc],weighttrg);
                                                        }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_trackpt1[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                                }
                                                        }//else{
#endif

#ifdef TRACKPTDOWN
						if(recomomJCO_trackpt2[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt2_1D && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_trackpt2[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt2_1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_trackpt2[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_trackpt2[id][ij][ik][isrc],weighttrg);
                                                        }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_trackpt2[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
                                                                }
                                                        }//else{
#endif
						}//if (isrc==0 && isReconstruct){
#ifdef JETRESO
                        if(isrc==0 && isReconstruct){
                                for(int ijer=0 ; ijer < njecmx ; ijer++){
                                        if( isRecoJCO_JER_1D[id][ij][ik][iet][ijer] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[ijer]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_JER[id][ij][ik][iet][igenhtres[isrc]][ijer]->Fill(GenJCO[id][ij][ik][isrc], weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_JER_1D[id][ij][ik][iet][ijer] && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                                }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_JER[id][ij][ik][iet][igenhtres[isrc]][ijer]->Fill(GenJCO[id][ij][ik][isrc], weighttrg);
                                                                }
                                                        }

                                                }
                                        }
#endif
					}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
			}//for (int ik=0; ik<nkappa; ik++){
		}//for(int ij=0; ij<njet; ij++){
	}//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){

//////////////////////////////////////////////////////////////////////////////////////////////
//2D
bool isRecoJCO2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO2D[ndef][njet][nkappa][njetetamn];
#ifdef JETRESO
bool isRecoJCO_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
#endif

#ifdef TRACKEFF
bool isRecoJCO_trackeff_2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTUP
bool isRecoJCO_trackpt1_2D[ndef][njet][nkappa][njetetamn];
#endif

#ifdef TRACKPTDOWN
bool isRecoJCO_trackpt2_2D[ndef][njet][nkappa][njetetamn];
#endif

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
	if(recomomJCO[id][ij][ik][0]<=0 || recomomJCO[id][ij][ik][1]<=0 || recomomJCO[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif

                        if (isReconstruct) {
                                for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
					if(recomomJCO[id][ij][ik][isrc]<=0) continue;
#endif
					if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#ifdef JETRESO
						isRecoJCO_JER_2D[id][ij][ik][iet][isrc]=true;
#endif
                                                if (isrc==0) {
							if(ak4PFJets->size()>=2){
							isRecoJCO2D[id][ij][ik][iet]=true;
							int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
							h_recovar2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
#ifdef FLAV
							//Flavor Tagging JCO
							if(recomomJCO_gjet[id][ij][ik][isrc]>0){
								int irecbin_gjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_gjet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_gjet2D[id][ij][ik][iet]->Fill(irecbin_gjet,weighttrg);}
                                                        if(recomomJCO_ujet[id][ij][ik][isrc]>0){
								int irecbin_ujet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ujet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_ujet2D[id][ij][ik][iet]->Fill(irecbin_ujet,weighttrg);}
							if(recomomJCO_ubarjet[id][ij][ik][isrc]>0){
                                                                int irecbin_ubarjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ubarjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_ubarjet2D[id][ij][ik][iet]->Fill(irecbin_ubarjet,weighttrg);}
                                                        if(recomomJCO_djet[id][ij][ik][isrc]>0){
								int irecbin_djet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_djet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_djet2D[id][ij][ik][iet]->Fill(irecbin_djet,weighttrg);}
                                                        if(recomomJCO_dbarjet[id][ij][ik][isrc]>0){
                                                                int irecbin_dbarjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_dbarjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_dbarjet2D[id][ij][ik][iet]->Fill(irecbin_dbarjet,weighttrg);}
							if(recomomJCO_ojet[id][ij][ik][isrc]>0){
								int irecbin_ojet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ojet[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar_ojet2D[id][ij][ik][iet]->Fill(irecbin_ojet,weighttrg);}

							//Second-set Flavor Tagging
							if(recomomJCO_qjet[id][ij][ik][isrc]>0){
                                                                int irecbin_qjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_qjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_qjet2D[id][ij][ik][iet]->Fill(irecbin_qjet,weighttrg);}
							if(recomomJCO_aqjet[id][ij][ik][isrc]>0){
                                                                int irecbin_aqjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_aqjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_aqjet2D[id][ij][ik][iet]->Fill(irecbin_aqjet,weighttrg);}
							if(recomomJCO_aqgjet[id][ij][ik][isrc]>0){
                                                                int irecbin_aqgjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_aqgjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_aqgjet2D[id][ij][ik][iet]->Fill(irecbin_aqgjet,weighttrg);}
							if(recomomJCO_aqojet[id][ij][ik][isrc]>0){
                                                                int irecbin_aqojet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_aqojet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_aqojet2D[id][ij][ik][iet]->Fill(irecbin_aqojet,weighttrg);}
#endif

#ifdef PREFIRE
                                                        h_recovar_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
							h_recovar_prefireup_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1up);
							h_recovar_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1down);
#endif


#ifdef TRACKEFF				
							if(recomomJCO_trackeff[id][ij][ik][isrc]>0){
							isRecoJCO_trackeff_2D[id][ij][ik][iet]=true;
							int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
							h_recovar_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff,weighttrg);			
							}
#endif

#ifdef TRACKPTUP                         
                                                        if(recomomJCO_trackpt1[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt1_2D[id][ij][ik][iet]=true;
                                                        int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1,weighttrg);
                                                        }
#endif

#ifdef TRACKPTDOWN                         
                                                        if(recomomJCO_trackpt2[id][ij][ik][isrc]>0){
                                                        isRecoJCO_trackpt2_2D[id][ij][ik][iet]=true;
                                                        int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2,weighttrg);
                                                        }
#endif
								}
							}
						else{
#ifdef JETENERGY
							if(ak4PFJets->size()>=2){
								int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        	h_recovarjec2D[id][ij][ik][iet][isrc]->Fill(irecbin, weighttrg);
							}
#elif defined(JETRESO)
							if(ak4PFJets->size()>=2){
                                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovarres2D[id][ij][ik][iet][isrc]->Fill(irecbin, weighttrg);
                                                        }
#endif
						}

					}//if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
				}//for (int isrc=0; isrc<njecmx; isrc++) {
			}//if (isReconstruct) {
			if(isMC){
				 for (int isrc=0; isrc<nGenReso; isrc++) {
					if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
						if(isrc==0){
							if(genjets->size()>=2){
							isGenJCO2D[id][ij][ik][iet]=true;
							int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genvar2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);

#ifdef PREFIRE
                                                        h_genvar_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
							h_genvar_prefireup_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1up);
							h_genvar_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1down);
#endif

							}

#ifdef LHAPDF
                				        for (int ix=1; ix<nnnmx; ix++) {
		                        			if (genjets->size()>=2) {
                        						int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                        						h_genvarpdf2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*pdfwt[ix]);
                                                                    	}
                        					}
							for (int iy=0; iy<nmgscale; iy++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarmgscale2D[id][ij][ik][iet][iy]->Fill(igenbin, weighttrg*mgscale[iy]);
                                                                        }
                                                                }
#endif

#ifdef SCALEUNC
							for (int ix=0; ix<nscale; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarscaleunc2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*scalewt[ix]);
                                                                        }
                                                                }
#endif

							}//if(isrc==0){
						}//if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
					if (isrc==0 && isReconstruct){
#ifdef MATCHING
						if( isRecoJCO2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
						if( isRecoJCO2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
							int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
							int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_RM2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);

#ifdef PREFIRE
							h_RM_prefire2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);
							h_RM_prefireup_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrgL1up);
							h_RM_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrgL1down);
#endif

							}
						else if(ak4PFJets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);

#ifdef PREFIRE
							h_recofake_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
							h_recofake_prefireup_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1up);
							h_recofake_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1down);
#endif

							}
						else if(genjets->size()>=2){
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);

#ifdef PREFIRE
							h_genmiss_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
							h_genmiss_prefireup_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1up);
							h_genmiss_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1down);
#endif

							}
						}
						else{
							if(isRecoJCO2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
								int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        	h_recofake2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);

#ifdef PREFIRE
								h_recofake_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
								h_recofake_prefireup_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1up);
								h_recofake_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1down);
#endif

								}
							if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
								int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
	                                                        h_genmiss2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);

#ifdef PREFIRE
								h_genmiss_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
								h_genmiss_prefireup_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1up);
								h_genmiss_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1down);
#endif

								}												
							}
#ifdef TRACKEFF
						if(recomomJCO_trackeff[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
						if(isRecoJCO_trackeff_2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        int igenbin_trackeff = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff,igenbin_trackeff,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin_trackeff = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Fill(igenbin_trackeff, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackeff_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin_trackeff = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recofake_trackeff2D[id][ij][ik][iet]->Fill(irecbin_trackeff, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin_trackeff = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_trackeff2D[id][ij][ik][iet]->Fill(igenbin_trackeff, weighttrg);
                                                                }
                                                        }
#endif

#ifdef TRACKPTUP
                                                if(recomomJCO_trackpt1[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt1_2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        int igenbin_trackpt1 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1,igenbin_trackpt1,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin_trackpt1 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin_trackpt1, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt1_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin_trackpt1 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recofake_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin_trackpt1, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin_trackpt1 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin_trackpt1, weighttrg);
                                                                }
                                                        }
#endif

#ifdef TRACKPTDOWN
                                                if(recomomJCO_trackpt2[id][ij][ik][isrc]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
                                                if(isRecoJCO_trackpt2_2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        int igenbin_trackpt2 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2,igenbin_trackpt2,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin_trackpt2 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin_trackpt2, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_trackpt2_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin_trackpt2 = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recofake_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin_trackpt2, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin_trackpt2 = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin_trackpt2, weighttrg);
                                                                }
                                                        }
#endif
						}//if (isrc==0 && isReconstruct){
#ifdef JETRESO
			if(isrc==0 && isReconstruct){
				for(int ijer=0 ; ijer < njecmx ; ijer++){
					if( isRecoJCO_JER_2D[id][ij][ik][iet][ijer] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && jet_matches){
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[ijer]);
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_RM_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin,igenbin,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[ijer]);
							h_recofake_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_genmiss_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_JER_2D[id][ij][ik][iet][ijer] && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[ijer]);
								h_recofake_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
								h_genmiss_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin, weighttrg);
                                                                }
                                                        }
		
						}//for(int ijer=0 ; ijer < njecmx ; ijer++){
					}//if(isrc==0 && isReconstruct){
#endif
					}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
			}//for (int ik=0; ik<nkappa; ik++){
		}//for(int ij=0; ij<njet; ij++){
	}//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){


//cout <<"-------------"<<endl;
//cout<<"Event wt : "<<weighttrg<<endl;
	//if (nevt%1000==1) { std::cout <<"nevt "<<nevt<<" naa "<<naa<<" nbb "<<nbb<<" ncc "<<ncc<< std::endl;}
      	//if (nevt%1000==1) { std::cout <<"Reco "<< Reco << " Gen " <<Gen<< " RM " <<RM <<std::endl;}
      	//if(nevt==100){cout <<igenht <<endl;}
      	}//cout <<"END EVENT"<< endl;

// ------------ method called once each job just before starting event loop  ------------
void 
QCDEventShape::beginJob() {
//t1=clock();
  nevt = 0;
  if (isMC) {
    double dattot[nHLTmx]={0};
    double mctot=0;
    for (int ij=0; ij<npileupmx; ij++) {
      for (int jk=0; jk<nHLTmx; jk++) {
	 dattot[jk] +=datpileup[jk][ij];
	}
         mctot +=mcpileup[ij];
        }

      for (int ij=0; ij<npileupmx; ij++) {
        mcpileup[ij] /=max(1.e-6,mctot);
           for (int jk=0; jk<nHLTmx; jk++) {
                datpileup[jk][ij] /=max(1.e-6,dattot[jk]);
                rat_pileup[jk][ij] =  datpileup[jk][ij]/mcpileup[ij];
                }
        }
  }

#ifdef JETENERGY
  for (int isrc = 0; isrc < nsrc; isrc++) {
    const char *name = srcnames[isrc];
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16APV_RunBCD_V7_DATA_UncertaintySources_AK4PFchs.txt", name); // data chnage eras for different era
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16APV_RunEF_V7_DATA_UncertaintySources_AK4PFchs.txt", name);  // data chnage eras for different era
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16_RunFGH_V7_DATA_UncertaintySources_AK4PFchs.txt", name);    // data chnage eras for different era
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16APV_V7_MC_UncertaintySources_AK4PFchs.txt", name);           // for MC APV
    JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16_V7_MC_UncertaintySources_AK4PFchs.txt", name);            // for MC
    JetCorrectionUncertainty *unc = new JetCorrectionUncertainty(*p);
    //vsrc[isrc] = unc;vsrc.push_back(unc);
    vsrc.push_back(unc);
    }
#endif  

//cout << "Write test 34 = ok " << endl;
}

// ------------ method called once each job just after ending the event loop  ------------
void 
QCDEventShape::endJob() 
{
//cout<<"naa: "<<naa<<endl;
   TUnfoldBinng2D->cd(); 
  //TUnfoldBinning Jet Charge
	for(int id=0; id<ndef; id++){
		for(int ij=0; ij<njet; ij++){
			for(int ik=0; ik<nkappa; ik++){
				for (int iet=0; iet<njetetamn; iet++) {
					h_recovar2D[id][ij][ik][iet]->Write();
					h_genvar2D[id][ij][ik][iet]->Write();
					h_recofake2D[id][ij][ik][iet]->Write();
					h_genmiss2D[id][ij][ik][iet]->Write();
					h_RM2D[id][ij][ik][iet]->Write();

#ifdef FLAV
					h_recovar_gjet2D[id][ij][ik][iet]->Write();
					h_recovar_ujet2D[id][ij][ik][iet]->Write();
					h_recovar_ubarjet2D[id][ij][ik][iet]->Write();
					h_recovar_djet2D[id][ij][ik][iet]->Write();
					h_recovar_dbarjet2D[id][ij][ik][iet]->Write();
					h_recovar_ojet2D[id][ij][ik][iet]->Write();

					//Second-Set Flavor Tagging
					h_recovar_qjet2D[id][ij][ik][iet]->Write();
					h_recovar_aqjet2D[id][ij][ik][iet]->Write();
					h_recovar_aqgjet2D[id][ij][ik][iet]->Write();
					h_recovar_aqojet2D[id][ij][ik][iet]->Write();
#endif
	
#ifdef  LHAPDF
            				for (int ix=1; ix<nnnmx; ix++) {h_genvarpdf2D[id][ij][ik][iet][ix]->Write();}
					for (int iy=0; iy<nmgscale; iy++) {h_genvarmgscale2D[id][ij][ik][iet][iy]->Write();}
#endif

#ifdef  SCALEUNC
                                        for (int ix=0; ix<nscale; ix++) {h_genvarscaleunc2D[id][ij][ik][iet][ix]->Write();}
#endif

#ifdef  JETENERGY
            				for (int ix=1; ix<njecmx; ix++) {h_recovarjec2D[id][ij][ik][iet][ix]->Write();}
#elif defined(JETRESO)
            				for (int ix=0; ix<njecmx; ix++ ) {
             					h_recovarres2D[id][ij][ik][iet][ix]->Write();
             					h_RM_JER_2D[id][ij][ik][iet][ix]->Write();
             					h_recofake_JER_2D[id][ij][ik][iet][ix]->Write();
             					h_genmiss_JER_2D[id][ij][ik][iet][ix]->Write();
         					}
#endif

#ifdef PREFIRE
					h_recovar_prefire2D[id][ij][ik][iet]->Write();
                                        h_genvar_prefire2D[id][ij][ik][iet]->Write();
                                        h_recofake_prefire2D[id][ij][ik][iet]->Write();
                                        h_genmiss_prefire2D[id][ij][ik][iet]->Write();
                                        h_RM_prefire2D[id][ij][ik][iet]->Write();

					h_recovar_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_genvar_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_recofake_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_RM_prefireup_2D[id][ij][ik][iet]->Write();

					h_recovar_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_genvar_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_recofake_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_RM_prefiredown_2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKEFF
					h_recovar_trackeff2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackeff2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Write();
                                        h_RM_trackeff2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKPTUP
                                        h_recovar_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_RM_trackpt1_2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKPTDOWN
                                        h_recovar_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_RM_trackpt2_2D[id][ij][ik][iet]->Write();
#endif
					}
				}
			}
		}
}

// ------------ method called when starting to processes a run  ------------

void 
QCDEventShape::beginRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
// Initialize hltConfig

#ifdef TRIGGER

// cout << "Write test 4 = ok " << endl;
  bool changed(true);
  if (hltPrescaleProvider_.init(iRun,iSetup,theHLTTag.c_str(),changed)) {
  HLTConfigProvider const&  hltConfig = hltPrescaleProvider_.hltConfigProvider();
  hltConfig.dump("Triggers");
  hltConfig.dump("PrescaleTable");

    for (unsigned int ij=0; ij<nHLTmx; ij++) {
      l1pres[ij] = hltpres[ij]=-7;
      }
	} 
	else {
         	}

#endif
 
  std::cout<<" End of QCDEventShape::beginRun"<<std::endl; //"nevt "<<nevt<<" naa "<<naa<<" nbb "<<nbb<<" ncc "<<ncc<< std::endl;
}


// ------------ method called when ending the processing of a run  ------------
/*
void 
QCDEventShape::endRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
std::cout<<" End of QCDEventShape::beginRun"<<std::endl;
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void 
QCDEventShape::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{


}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void 
QCDEventShape::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
QCDEventShape::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  //Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

double PhiInRange(const double& phi) {
      double phiout = phi;
      
      if( phiout > 2*M_PI || phiout < -2*M_PI) {
	phiout = fmod( phiout, 2*M_PI);
      }
      if (phiout <= -M_PI) phiout += 2*M_PI;
      else if (phiout >  M_PI) phiout -= 2*M_PI;
      
      return phiout;
}

template <class T, class U>
double deltaR(const T& t, const U& u) {
return sqrt(pow(t.eta()-u.eta(),2) +pow(PhiInRange(t.phi()-u.phi()),2));
}

// Default jet charge observable NOT USED
double JetCharge1(int charge, double candspt, double jpt, double k) {
	double Q1 = 0.0;
	//double j1 = 0.0;
	Q1 +=1.0*( charge*(pow(candspt,k)));
	//j1 = Q1/pow(jpt,k);
	return Q1/pow(jpt,k);
	//return j1;
}

// For default definition Q
double candsmom(int charge, double candspt, double k){	
	//double q = 0.0;
	double q = ( charge*(pow(candspt,k)));
	return q;
}
/*
double candsmom2(double p, double k) {
    double result = pow(p, k);
    	if (p > 0 && !isnan(result) && !isinf(result)) {
    		return result;
    	          } else {continue;}
}
*/ 
// For longitudinal definition Q(L)
double dotproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k) {
	double dot = 0.0;
	//double dotresult =0.0;
	dot = (pow((((candspx*jpx) + (candspy*jpy) + (candspz*jpz))/jpt),k));
	//dotresult = (charge*(pow(dot,k)));
	return dot;
	//return dotresult;
}

// For transverse definition Q(T)
double crossproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k){
	double cross = 0.0;
	//double crossresult =0.0;
	cross = (pow(((sqrt((pow(((candspy*jpz) - (candspz*jpy)),2)) + (pow(((candspz*jpx) - (candspx*jpz)),2)) + (pow(((candspx*jpy) - (candspy*jpx)),2))))/jpt),k));
	//crossreult = (charge*(pow(cross,k)));
	return cross;
	//return crossresult;
}

double dotProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k) {
    double dotProduct = v1.dot(v2);
    double magV2 = v2.mag();
    double dotOverMag = dotProduct / magV2;
    double result = std::pow(dotOverMag, k);
    return result;
}

double crossProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k) {
    Hep3Vector crossProduct = v1.cross(v2);
    double magV2 = v2.mag();
    double crossOverMag = crossProduct.mag() / magV2;
    double result = std::pow(crossOverMag, k);
    return result;
}

//define this as a plug-in
DEFINE_FWK_MODULE(QCDEventShape);
