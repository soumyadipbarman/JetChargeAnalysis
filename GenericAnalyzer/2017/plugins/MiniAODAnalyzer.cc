// -*- C++ -*-
//
// Package:    Analysis/MiniAODAnalyzer
// Class:      MiniAODAnalyzer
//
/**\class MiniAODAnalyzer MiniAODAnalyzer.cc Analysis/MiniAODAnalyzer/plugins/MiniAODAnalyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Soumyadip Barman
//         Created:  Mon, 01 Jul 2024 08:16:54 GMT
//
//
//////////////////////////////////////////////////

////////////////////
//----YEAR/ERA----//
////////////////////

//#define SIXTEEN
#define SEVENTEEN
//#define EIGHTEEN

//////////////////////////
//--2016APV -> preVFP---//
//--2016    -> postVFP--//
//////////////////////////

/*For preVFP otherwise 
postVFP b-tagging SF
Only for SIXTEEN ERA
*/

//#define APV
//#define NONAPV

#define DIJETAVE 

////For Data
//#define JETENERGY
//#define TRIGGER

////For Madgraph
#define LHAPDF
#define JETRESO
#define TRIGGER
#define MATCHING

////For Pythia8 & Herwig7
//#define JETRESO
//#define TRIGGER
//#define MATCHING

////For MC Reco Flavour
#define FLAV

////For PileUp Cleaning
#define PUCLEAN

////For PileUp
#define PUNOMI
//#define PUUP
//#define PUDOWN

///////////////////
//--Uncertainty--//
///////////////////

////For Hybrid JER
#define STOCHASTIC

/* For 2016 & 2017
not required for 2018
*/

////For L1 PreFiring
#define PREFIRE

////For Track Reconstruction Efficiency
#define TRACKEFF

////For Track pT Resolution
#define TRACKPTUP
#define TRACKPTDOWN

////For Scale Variation PY8Flat Only
#define SCALEUNC

////For BTag Scale Factor (efficiency)
#define BTAGUNC

////////////////////
//--Not Required--//
////////////////////

/*Track Reconstruction Efficiency 
Uncertainty by Matching
*/
//#define TRACKEFFMATCHING
//#define TRACKEFFDEBUG

/*Change the "bool Flat" 
later part of the code
This switch don't work
*/
////For MC Flat Sample
//#define FLAT

////For GenParticle only
//#define GENPART

//#define LUMIWEIGHT
//#define MERGE_BIN
//#define TRACKSYS


#include <memory>
#include <map>
#include <string>
#include <vector>
#include "TCanvas.h"
#include "TFormula.h"
#include "TFile.h"
#include "TH1F.h"
#include "TTree.h"
#include <cmath>
#include "TMath.h"
#include "CLHEP/Vector/LorentzVector.h"
#include "TRandom.h"
#include "TUnfoldBinning.h"
#include "TUnfoldDensity.h"
#include "TUnfoldBinningXML.h"
#include "TUnfold.h"
#include "TUnfoldSys.h"

#include "TH2F.h"
#include "TProfile.h"
#include <fstream>
#include <iostream>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include <time.h>
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "DataFormats/PatCandidates/interface/Electron.h"
#include "DataFormats/PatCandidates/interface/Photon.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/PatCandidates/interface/Tau.h"

//BJet info
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/MET.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/PatCandidates/interface/PackedGenParticle.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "DataFormats/Math/interface/deltaR.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "L1Trigger/GlobalTriggerAnalyzer/interface/L1GtTrigReport.h"
#include "CondFormats/L1TObjects/interface/L1GtTriggerMenu.h"
#include "CondFormats/DataRecord/interface/L1GtTriggerMenuRcd.h"
#include "L1Trigger/GlobalTriggerAnalyzer/interface/L1GtTrigReportEntry.h"
#include "CondFormats/DataRecord/interface/L1GtStableParametersRcd.h"
#include "DataFormats/PatCandidates/interface/TriggerObjectStandAlone.h"
#include "DataFormats/PatCandidates/interface/PackedTriggerPrescales.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"

#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "SimDataFormats/GeneratorProducts/interface/PdfInfo.h"
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/LHERunInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/LHEEventProduct.h"

#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "DataFormats/HLTReco/interface/TriggerEvent.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
//#include "FWCore/Framework/interface/TriggerNames.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "DataFormats/Luminosity/interface/LumiDetails.h"

//#include "Test/QCDEventShape/plugins/EventShape_vector.h" 

#include "DataFormats/Common/interface/View.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/TrackReco/interface/TrackBase.h"
#include "DataFormats/BeamSpot/interface/BeamSpot.h"
#include "CommonTools/Statistics/interface/ChiSquaredProbability.h"

#include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"

//#include "HLTrigger/HLTcore/interface/HLTPrescaleProvider.h"
#include "JetMETCorrections/Modules/interface/JetResolution.h"
#include "CondFormats/JetMETObjects/interface/JetResolutionObject.h"
#include <JetMETCorrections/Modules/interface/JetResolution.h>
#include <FWCore/Framework/interface/EventSetup.h>
#include <FWCore/Framework/interface/ESHandle.h>
#include <CondFormats/DataRecord/interface/JetResolutionRcd.h>
#include <CondFormats/DataRecord/interface/JetResolutionScaleFactorRcd.h>
#include "FWCore/Utilities/interface/typelookup.h"
#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
#include "CondFormats/JetMETObjects/interface/JetCorrectionUncertainty.h"
#include "HLTrigger/HLTcore/interface/HLTPrescaleProvider.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
#include "PhysicsTools/Utilities/interface/LumiReWeighting.h"
#include "CLHEP/Vector/ThreeVector.h"

//GenJet Flavor Info
#include "SimDataFormats/JetMatching/interface/JetFlavourInfo.h"
#include "SimDataFormats/JetMatching/interface/JetFlavourInfoMatching.h"

//b-Tagged Jet Calibration Info
#include "CondFormats/BTauObjects/interface/BTagEntry.h"
#include "CondFormats/BTauObjects/interface/BTagCalibration.h"
#include "CondTools/BTau/interface/BTagCalibrationReader.h"

//Module for loading json corrections
#include "correction.h"

using namespace edm;
using namespace reco;
using namespace std;
using namespace CLHEP;
using namespace trigger;
using namespace math;
using namespace correction;
using correction::CorrectionSet;

static const int nhist=10; 
#ifdef SIXTEEN
static const int nHLTmx=9;  //9 triggers
#elif defined(SEVENTEEN)
static const int nHLTmx=10; //10 triggers
#elif defined(EIGHTEEN)
static const int nHLTmx=10; //10 triggers
#endif
static const int ngenPT=5;  // event PT bins : merged two trigger phase-space into one

const int ndef=3;    // 3 JCO definition
const int njet=2;    // 2 Jets 
const int nkappa=10; // 10 kappas
const int range=200; // bin-edge range

const char* jcodef[ndef]={"D","L","T"}; // 3 JCO definitions
double jetname[njet]={1,2};             // 2 Jets
double kappa[nkappa]={0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0}; // 10 kappa values

double recoJetpT, recojet1_pt, recojet2_pt, recobjet1_pt_deepJETT, recobjet2_pt_deepJETT, genrecojet1_pt, genrecojet2_pt, genrecobjet1_pt, genrecobjet2_pt;
double recoCandX1_J1, recoCandX2_J1, recoCandX3_J1,recoCandX1_J2, recoCandX2_J2, recoCandX3_J2;
double recoCandX1_bjet_deepJETT_J1, recoCandX2_bjet_deepJETT_J1, recoCandX3_bjet_deepJETT_J1,recoCandX1_bjet_deepJETT_J2, recoCandX2_bjet_deepJETT_J2, recoCandX3_bjet_deepJETT_J2;

#ifdef FLAV
double recobjet1_pt, recobjet2_pt;
double recoCandX1_bjet_J1, recoCandX2_bjet_J1, recoCandX3_bjet_J1,recoCandX1_bjet_J2, recoCandX2_bjet_J2, recoCandX3_bjet_J2;
#endif

///////////////////
//----Binning----//
///////////////////

/* Fixed Binning for final 
binning using Purity(Stability) 
scheme for Inclusive & b-Jets
*/

//Date: 26Jul2023

double recobins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};

double genbins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};

double recomin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double recomax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};

double genmin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double genmax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};

/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Date_02Jun2023 : Some bins and range modifed by hand as there are some bins with zero entries at reco level
//Inclusive Jets

double nrecobins[ndef][njet][nkappa]={{{40,32,24,20,16,16,24,20,20,16},{52,36,32,28,24,20,24,24,20,16}},{{24,24,20,20,20,20,20,16,16,16},{24,24,20,20,20,24,24,20,20,16}},{{24,24,20,16,20,20,16,16,16,16},{24,24,24,20,24,20,20,20,20,20}}};

double ngenbins[ndef][njet][nkappa]={{{20,16,12,10,8,8,12,10,10,8},{26,18,16,14,12,10,12,12,10,8}},{{12,12,10,10,10,10,10,8,8,8},{12,12,10,10,10,12,12,10,10,8}},{{12,12,10,8,10,10,8,8,8,8},{12,12,12,10,12,10,10,10,10,10}}};

double recorng[ndef][njet][nkappa][range]={{{{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//40
{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//32
{-4.00,-3.33,-2.67,-2.27,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.27,2.67,3.33,4.00},//24
{-2.93,-2.40,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.40,2.93},//20
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13},//16
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24 done
{-1.33,-1.20,-1.07,-0.94,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,0.94,1.07,1.20,1.33}, //20 done
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-3.73,-3.60,-3.47,-3.20,-2.93,-2.80,-2.67,-2.53,-2.40,-2.27,-2.13,-2.00,-1.87,-1.73,-1.60,-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47,1.60,1.73,1.87,2.00,2.13,2.27,2.40,2.53,2.67,2.80,2.93,3.20,3.47,3.60,3.73},//52
{-3.73,-3.47,-3.20,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.20,3.47,3.73},//36
{-3.60,-3.27,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.27,3.60},//32 done
{-2.67,-2.40,-2.13,-1.86,-1.60,-1.33,-1.07,-0.87,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.87,1.07,1.33,1.60,1.86,2.13,2.40,2.67},//28 done
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24 done
{-1.87,-1.60,-1.33,-1.06,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,1.06,1.33,1.60,1.87},//20 done
{-1.47,-1.33,-1.20,-1.06,-0.93,-0.80,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.80,0.93,1.06,1.20,1.33,1.47}, //24 done
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24
{-1.20,-1.13,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.13,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done 
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.67,0.80,0.93,1.07},//24
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done
{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80},//20 done
{-0.87,-0.77,-0.67,-0.54,-0.40,-0.30,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.30,0.40,0.54,0.67,0.77,0.87}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-0.73,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.73}, //24 done
{-1.07,-0.87,-0.67,-0.60,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.60,0.67,0.87,1.07},//24
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.80,1.07},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00}},//16

{{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-0.80,-0.74,-0.67,-0.60,-0.53,-0.47,-0.40,-0.34,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.34,0.40,0.47,0.53,0.60,0.67,0.74,0.80}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.47,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.47,0.53,0.67,0.80,0.93,1.07}, //24
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-0.87,-0.80,-0.73,-0.60,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.60,0.73,0.80,0.87}, //24 done
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.83,-0.67,-0.57,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.57,0.67,0.83,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00}}}};//20


double genrng[ndef][njet][nkappa][range]={{{{-3.73,-3.20,-2.67,-2.13,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.13,2.67,3.20,3.73},
{-3.73,-3.20,-2.67,-2.13,-1.60,-1.07,-0.53,-0.27,0.00,0.27,0.53,1.07,1.60,2.13,2.67,3.20,3.73},
{-4.00,-2.67,-1.87,-1.33,-0.80,-0.27,0.00,0.27,0.80,1.33,1.87,2.67,4.00},
{-2.93,-1.87,-1.33,-0.80,-0.27,0.00,0.27,0.80,1.33,1.87,2.93},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.13,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.13},
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47}, //12 done
{-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33},//10 done
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-3.73,-3.47,-2.93,-2.67,-2.40,-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13,2.40,2.67,2.93,3.47,3.73},
{-3.73,-3.20,-2.67,-2.13,-1.60,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.60,2.13,2.67,3.20,3.73},
{-3.60,-2.93,-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40,2.93,3.60}, //16 done
{-2.67,-2.13,-1.60,-1.07,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,1.07,1.60,2.13,2.67},//14 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//12 done
{-1.87,-1.33,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.33,1.87},//10 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},//12 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},
{-1.20,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73},//12 done
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73}, //12 done
{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80},//10 done
{-0.87,-0.67,-0.40,-0.20,-0.07,0.00,0.07,0.20,0.40,0.67,0.87},//10 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //10 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-0.73,-0.60,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.60,0.73}, //12 done
{-1.07,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,1.07},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,1.07},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00}},

{{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80},//12 done
{-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80}, //12 done
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-0.87,-0.73,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.73,0.87}, //12 done
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.67,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.67,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00}}}};
*/

//////////////////////
//--Inclusive Jets--//
//////////////////////

//Date: 26Jul2023

/*
Some bins and range modifed by hand 
as there are some bins with zero 
entries at reco level : bins changed 
for lower kappa values
*/

double nrecobins[ndef][njet][nkappa]={{{28,20,20,16,16,16,24,20,20,16},{28,24,24,24,24,20,24,24,20,16}},{{20,20,20,20,20,20,20,16,16,16},{20,20,20,20,20,24,24,20,20,16}},{{20,20,20,16,20,20,16,16,16,16},{20,20,20,20,24,20,20,20,20,20}}};

double ngenbins[ndef][njet][nkappa]={{{14,10,10,8,8,8,12,10,10,8},{14,12,12,12,12,10,12,12,10,8}},{{10,10,10,10,10,10,10,8,8,8},{10,10,10,10,10,12,12,10,10,8}},{{10,10,10,8,10,10,8,8,8,8},{10,10,10,10,12,10,10,10,10,10}}};

double recorng[ndef][njet][nkappa][range]={{{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},//28
{-3.33,-2.83,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,-0.17,0.00,0.17,0.33,0.67,1.00,1.33,1.67,2.00,2.33,2.83,3.33},//20
{-3.33,-2.83,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,-0.17,0.00,0.17,0.33,0.67,1.00,1.33,1.67,2.00,2.33,2.83,3.33},//20
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,2.00,2.40},//16
{-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60,1.87,2.13},//16
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24 done
{-1.33,-1.20,-1.07,-0.94,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,0.94,1.07,1.20,1.33}, //20 done
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},//28
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24
{-2.40,-2.13,-1.87,-1.60,-1.33,-1.06,-0.80,-0.60,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.60,0.80,1.06,1.33,1.60,1.87,2.13,2.40},//24 done
{-1.87,-1.60,-1.33,-1.06,-0.80,-0.67,-0.53,-0.40,-0.27,-0.14,0.00,0.14,0.27,0.40,0.53,0.67,0.80,1.06,1.33,1.60,1.87},//20 done
{-1.47,-1.33,-1.20,-1.06,-0.93,-0.80,-0.67,-0.54,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.54,0.67,0.80,0.93,1.06,1.20,1.33,1.47}, //24 done
{-1.47,-1.33,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.33,1.47},//24
{-1.20,-1.13,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.13,1.20},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20 done 
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//16
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},//16

{{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80},//20 done
{-0.87,-0.77,-0.67,-0.54,-0.40,-0.30,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.30,0.40,0.54,0.67,0.77,0.87}, //20 done
{-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80}, //20 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.43,0.53,0.67,0.80,0.90,1.00}, //24 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},//16


{{{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07}, //20 done
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},//20
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.80,1.07},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.47,0.60,0.80,1.00},//20
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.80,-0.60,-0.47,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.47,0.60,0.80,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00},//16
{-1.00,-0.83,-0.67,-0.53,-0.40,-0.30,-0.20,-0.10,0.00,0.10,0.20,0.30,0.40,0.53,0.67,0.83,1.00}},//16

{{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20 done
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07}, //20
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},//20
{-0.87,-0.80,-0.73,-0.60,-0.47,-0.40,-0.33,-0.27,-0.20,-0.14,-0.07,-0.04,0.00,0.04,0.07,0.14,0.20,0.27,0.33,0.40,0.47,0.60,0.73,0.80,0.87}, //24 done
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.87,-0.73,-0.60,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.60,0.73,0.87,1.00},//20
{-1.00,-0.83,-0.67,-0.57,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.57,0.67,0.83,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00},//20
{-1.00,-0.90,-0.80,-0.67,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.67,0.80,0.90,1.00}}}};//20


double genrng[ndef][njet][nkappa][range]={{{{-3.67,-3.00,-2.33,-1.67,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.67,2.33,3.00,3.67},
{-3.33,-2.33,-1.67,-1.00,-0.33,0.00,0.33,1.00,1.67,2.33,3.33},
{-3.33,-2.33,-1.67,-1.00,-0.33,0.00,0.33,1.00,1.67,2.33,3.33},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.40,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.40},
{-2.13,-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60,2.13},
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47}, //12 done
{-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33},//10 done
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-3.67,-3.00,-2.33,-1.67,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.67,2.33,3.00,3.67},
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40}, //16 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//14 done
{-2.40,-1.87,-1.33,-0.80,-0.40,-0.13,0.00,0.13,0.40,0.80,1.33,1.87,2.40},//12 done
{-1.87,-1.33,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.33,1.87},//10 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},//12 done
{-1.47,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.47},
{-1.20,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},//12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //12 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80},//10 done
{-0.87,-0.67,-0.40,-0.20,-0.07,0.00,0.07,0.20,0.40,0.67,0.87},//10 done
{-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80}, //10 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.00,-0.80,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,0.80,1.00}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07}, //12 done
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,1.07},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.60,-0.33,-0.13,0.00,0.13,0.33,0.60,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00},
{-1.00,-0.67,-0.40,-0.20,0.00,0.20,0.40,0.67,1.00}},

{{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},//12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07}, //12 done
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-0.87,-0.73,-0.47,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.47,0.73,0.87}, //12 done
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.73,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.73,1.00},
{-1.00,-0.67,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,0.67,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00},
{-1.00,-0.80,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.80,1.00}}}};


//////////////////
//----b-Jets----//
//////////////////

//Date: 02Apr2024

double nrecobins_bjet[ndef][njet][nkappa]={{{36,28,24,16,12,12,20,16,16,16},{44,32,28,20,20,20,24,20,20,16}},{{12,12,20,20,20,20,20,16,16,16},{12,12,24,24,24,20,20,20,20,16}},{{12,12,20,16,16,20,16,16,16,16},{12,12,20,20,20,20,20,20,20,20}}};

double ngenbins_bjet[ndef][njet][nkappa]={{{18,14,12,8,6,6,10,8,8,8},{22,16,14,10,10,10,12,10,10,8}},{{6,6,10,10,10,10,10,8,8,8},{6,6,12,12,12,10,10,10,10,8}},{{6,6,10,8,8,10,8,8,8,8},{6,6,10,10,10,10,10,10,10,10}}};

double recorng_bjet[ndef][njet][nkappa][range]={{{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.17,-2.00,-1.83,-1.67,-1.50,-1.33,-1.17,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.17,1.33,1.50,1.67,1.83,2.00,2.17,2.33,2.67,3.00,3.33,3.67},
{-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.17,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.17,1.33,1.67,2.00,2.33,2.67,3.00,3.33},
{-3.67,-3.33,-3.00,-2.50,-2.00,-1.67,-1.33,-1.00,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,1.00,1.33,1.67,2.00,2.50,3.00,3.33,3.67},
{-2.00,-1.60,-1.20,-1.00,-0.80,-0.60,-0.40,-0.20,0.00,0.20,0.40,0.60,0.80,1.00,1.20,1.60,2.00},
{-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60},
{-1.60,-1.33,-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07,1.33,1.60},
{-1.33,-1.13,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.13,1.33},
{-1.20,-1.00,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,1.00,1.20},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},

{{-3.67,-3.50,-3.33,-3.17,-3.00,-2.83,-2.67,-2.50,-2.33,-2.17,-2.00,-1.83,-1.67,-1.50,-1.33,-1.17,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.17,1.33,1.50,1.67,1.83,2.00,2.17,2.33,2.50,2.67,2.83,3.00,3.17,3.33,3.50,3.67},
{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.50,-1.33,-1.17,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.17,1.33,1.50,1.67,2.00,2.33,2.67,3.00,3.33,3.67},
{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},
{-3.20,-2.80,-2.40,-2.00,-1.60,-1.20,-0.80,-0.60,-0.40,-0.20,0.00,0.20,0.40,0.60,0.80,1.20,1.60,2.00,2.40,2.80,3.20},
{-2.40,-2.00,-1.60,-1.33,-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07,1.33,1.60,2.00,2.40},
{-2.13,-1.87,-1.60,-1.33,-1.07,-0.80,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.80,1.07,1.33,1.60,1.87,2.13},
{-1.60,-1.40,-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20,1.40,1.60},
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},
{-1.20,-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,-0.07,0.00,0.07,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07,1.20},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},


{{{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-1.00,-0.93,-0.73,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.73,0.93,1.00,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}},

{{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.07,-1.00,-0.93,-0.87,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.87,0.93,1.00,1.07},
{-1.07,-1.00,-0.93,-0.80,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.80,0.93,1.00,1.07},
{-1.07,-1.00,-0.93,-0.80,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.80,0.93,1.00,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.67,0.80,0.93,1.07},
{-1.07,-0.93,-0.80,-0.67,-0.53,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.53,0.67,0.80,0.93,1.07}}},


{{{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},
{-1.07,-0.80,-0.53,-0.40,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.40,0.53,0.80,1.07},
{-1.00,-0.73,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.73,1.00},
{-1.00,-0.77,-0.53,-0.43,-0.33,-0.27,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.27,0.33,0.43,0.53,0.77,1.00},
{-1.00,-0.73,-0.47,-0.37,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.37,0.47,0.73,1.00},
{-1.00,-0.77,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.77,1.00},
{-1.00,-0.77,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.77,1.00},
{-1.00,-0.77,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.77,1.00}},

{{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.00,-0.83,-0.67,-0.50,-0.33,-0.17,0.00,0.17,0.33,0.50,0.67,0.83,1.00},
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},
{-1.07,-0.87,-0.67,-0.53,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.53,0.67,0.87,1.07},
{-1.00,-0.80,-0.60,-0.50,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.50,0.60,0.80,1.00},
{-1.00,-0.80,-0.60,-0.50,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.50,0.60,0.80,1.00},
{-1.00,-0.80,-0.60,-0.50,-0.40,-0.33,-0.27,-0.20,-0.13,-0.07,0.00,0.07,0.13,0.20,0.27,0.33,0.40,0.50,0.60,0.80,1.00},
{-1.00,-0.80,-0.60,-0.50,-0.40,-0.30,-0.20,-0.13,-0.07,-0.03,0.00,0.03,0.07,0.13,0.20,0.30,0.40,0.50,0.60,0.80,1.00},
{-1.00,-0.83,-0.67,-0.57,-0.47,-0.37,-0.27,-0.17,-0.07,-0.03,0.00,0.03,0.07,0.17,0.27,0.37,0.47,0.57,0.67,0.83,1.00},
{-1.00,-0.87,-0.73,-0.63,-0.53,-0.43,-0.33,-0.23,-0.13,-0.07,0.00,0.07,0.13,0.23,0.33,0.43,0.53,0.63,0.73,0.87,1.00}}}};


double genrng_bjet[ndef][njet][nkappa][range]={{{{-3.67,-3.00,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.33,1.67,2.00,2.33,3.00,3.67},
{-3.33,-2.67,-2.00,-1.33,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.33,2.00,2.67,3.33},
{-3.67,-3.00,-2.00,-1.33,-0.67,-0.33,0.00,0.33,0.67,1.33,2.00,3.00,3.67},
{-2.00,-1.20,-0.80,-0.40,0.00,0.40,0.80,1.20,2.00},
{-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60},
{-1.60,-1.07,-0.53,0.00,0.53,1.07,1.60},
{-1.33,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.33},
{-1.20,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-3.67,-3.33,-3.00,-2.67,-2.33,-2.00,-1.67,-1.33,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.33,1.67,2.00,2.33,2.67,3.00,3.33,3.67},
{-3.67,-3.00,-2.33,-1.67,-1.33,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.33,1.67,2.33,3.00,3.67},
{-3.67,-3.00,-2.33,-1.67,-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00,1.67,2.33,3.00,3.67},
{-3.20,-2.40,-1.60,-0.80,-0.40,0.00,0.40,0.80,1.60,2.40,3.20},
{-2.40,-1.60,-1.07,-0.53,-0.27,0.00,0.27,0.53,1.07,1.60,2.40},
{-2.13,-1.60,-1.07,-0.53,-0.27,0.00,0.27,0.53,1.07,1.60,2.13},
{-1.60,-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20,1.60},
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.20,-0.93,-0.67,-0.40,-0.13,0.00,0.13,0.40,0.67,0.93,1.20},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.93,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.93,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}},

{{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.07,-0.93,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,0.93,1.07},
{-1.07,-0.93,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,0.93,1.07},
{-1.07,-0.93,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,0.93,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,0.80,1.07},
{-1.07,-0.80,-0.53,-0.27,0.00,0.27,0.53,0.80,1.07}}},


{{{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.53,-0.27,-0.13,0.00,0.13,0.27,0.53,1.07},
{-1.00,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,1.00},
{-1.00,-0.53,-0.33,-0.20,-0.07,0.00,0.07,0.20,0.33,0.53,1.00},
{-1.00,-0.47,-0.27,-0.13,0.00,0.13,0.27,0.47,1.00},
{-1.00,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,1.00},
{-1.00,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,1.00},
{-1.00,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,1.00}},

{{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.00,-0.67,-0.33,0.00,0.33,0.67,1.00},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.07,-0.67,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.67,1.07},
{-1.00,-0.60,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.60,1.00},
{-1.00,-0.60,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.60,1.00},
{-1.00,-0.60,-0.40,-0.27,-0.13,0.00,0.13,0.27,0.40,0.60,1.00},
{-1.00,-0.60,-0.40,-0.20,-0.07,0.00,0.07,0.20,0.40,0.60,1.00},
{-1.00,-0.67,-0.47,-0.27,-0.07,0.00,0.07,0.27,0.47,0.67,1.00},
{-1.00,-0.73,-0.53,-0.33,-0.13,0.00,0.13,0.33,0.53,0.73,1.00}}}};


/*
Binning for plotting 
all kappa in one canvas
*/

double recobinskappa[ndef][njet][nkappa]={{{30,30,30,30,30,30,30,30,30,30},{30,30,30,30,30,30,30,30,30,30}},
                                        {{20,20,20,20,20,20,20,20,20,20},{20,20,20,20,20,20,20,20,20,20}},
                                        {{20,20,20,20,20,20,20,20,20,20},{20,20,20,20,20,20,20,20,20,20}}};
/*
double genbins[ndef][njet][nkappa]={{{24,24,24,20,30,30,60,60,60,60},{24,24,24,20,30,30,60,60,60,60}},
                                        {{24,24,60,60,60,60,60,60,60,60},{24,24,60,60,60,60,60,60,60,60}},
                                        {{24,24,60,60,120,120,120,120,120,120},{24,24,60,60,120,120,120,120,120,120}}};
*/
double recominkappa[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0},{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0}},
                                        {{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0},{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0}}};

double recomaxkappa[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0},{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0}},
                                        {{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0},{2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0}}};
/*
double genmin[ndef][njet][nkappa]={{{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}},
                                        {{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0},{-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0,-4.0}}};

double genmax[ndef][njet][nkappa]={{{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}},
                                        {{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0},{4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0}}};
*/

//BJet Stuff
static const int BJetEffnbins = 9;
double BJetEffPT[BJetEffnbins+1] = {0, 30, 50, 70, 100, 140, 200, 300, 600, 1000};

//PT Binning For 2D unfolding 
#ifdef SIXTEEN
double recohtbins[nHLTmx+1] = {92, 119, 185, 251, 319, 388, 467, 518, 579, 3000.0};      // 9 trigger phase-space
#elif defined(SEVENTEEN)
double recohtbins[nHLTmx+1] = {92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0}; // 10 trigger phase-space
#elif defined(EIGHTEEN)
double recohtbins[nHLTmx+1] = {92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0}; // 10 trigger phase-space
#endif

double genhtbins[ngenPT+1] = {92, 185, 319, 467, 579, 3000.0};   // 5 PT binning
//double genhtbins[ngenPT+1] = {100, 200, 400, 800, 1600, 3000.0};
//double genhtbins[ngenPT+1] = {100, 400, 700, 1000, 1400, 3000.0};

/*
#ifdef MERGE_BIN
double recohtbins[nHLTmx+1] = {83, 109, 176, 247, 318, 387, 477, 573, 3000.0}; //For 2018
#else
double recohtbins[nHLTmx+1] = {66, 95, 155, 227, 286, 350, 444, 557, 3000.0}; // For 2016 Trigger
#endif
*/

//Lumiweight
/*
int iera = 2;// 0 for Run 2016, 1 for Run 2017 , 2 for Run 2018
double lumi[3] = {36330, 41480, 59830};
double total_lumi = lumi[0]+lumi[1]+lumi[2];
double lumiwtt = lumi[iera]/total_lumi;
*/

///////////////
//--Pile Up--//
///////////////

const int npileupmx=99; //49;
double rat_pileup[nHLTmx][npileupmx]={{0}};
//clock_t t1,t2;

#ifdef SIXTEEN
//2016UL PU
double mcpileup[npileupmx] = {1.00402e-05, 5.76499e-05, 7.37891e-05, 0.000110933, 0.000158858, 0.000368637, 0.000893114, 0.00189701, 0.0035888, 0.00636053, 0.0104174, 0.0158123, 0.0223786, 0.0299187, 0.0380276, 0.0454314, 0.0511181, 0.0547435, 0.0567906, 0.0577145, 0.0578177, 0.0571252, 0.0555457, 0.0531344, 0.0501519, 0.0466816, 0.0429245, 0.0389567, 0.0348507, 0.0307357, 0.0267712, 0.022972, 0.0193389, 0.0159603, 0.0129311, 0.0102889, 0.00798783, 0.00606652, 0.00447821, 0.0032159, 0.00224504, 0.00151447, 0.000981184, 0.00060967, 0.000362193, 0.000211573, 0.000119152, 6.49134e-05, 3.57796e-05, 1.99044e-05, 1.13639e-05, 6.49624e-06, 3.96626e-06, 2.3791e-06, 1.50997e-06, 1.09817e-06, 7.31299e-07, 6.10399e-07, 3.74846e-07, 2.65177e-07, 2.01924e-07, 1.39348e-07, 8.326e-08, 6.04932e-08, 6.52537e-08, 5.90575e-08, 2.29162e-08, 1.97295e-08, 1.77311e-08, 3.57548e-09, 1.3504e-09, 8.50071e-09, 5.02792e-09, 4.93737e-10, 8.1392e-10, 5.62779e-09, 5.15141e-10, 8.21677e-10, 0, 1.49167e-09, 8.43518e-09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#elif defined(SEVENTEEN)
//2017UL PU
double mcpileup[npileupmx] ={ 1.1840841518e-05, 3.46661037703e-05, 8.98772521472e-05, 7.47400487733e-05, 0.000123005176624,0.000156501700614, 0.000154660478659, 0.000177496185603, 0.000324149805611, 0.000737524009713,0.00140432980253, 0.00244424508696, 0.00380027898037, 0.00541093042612, 0.00768803501793,0.010828224552, 0.0146608623707, 0.01887739113, 0.0228418813823, 0.0264817796874,0.0294637401336, 0.0317960986171, 0.0336645950831, 0.0352638818387, 0.036869429333,0.0382797316998, 0.039386705577, 0.0398389681346, 0.039646211131, 0.0388392805703,0.0374195678161, 0.0355377892706, 0.0333383902828, 0.0308286549265, 0.0282914440969,0.0257860718304, 0.02341635055, 0.0213126338243, 0.0195035612803, 0.0181079838989,0.0171991315458, 0.0166377598339, 0.0166445341361, 0.0171943735369, 0.0181980997278,0.0191339792146, 0.0198518804356, 0.0199714909193, 0.0194616474094, 0.0178626975229,0.0153296785464, 0.0126789254325, 0.0100766041988, 0.00773867100481, 0.00592386091874,0.00434706240169, 0.00310217013427, 0.00213213401899, 0.0013996000761, 0.000879148859271,0.000540866009427, 0.000326115560156, 0.000193965828516, 0.000114607606623, 6.74262828734e-05,3.97805301078e-05, 2.19948704638e-05, 9.72007976207e-06, 4.26179259146e-06, 2.80015581327e-06,1.14675436465e-06, 2.52452411995e-07, 9.08394910044e-08, 1.14291987912e-08, 0.0,0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.0};
#elif defined(EIGHTEEN)
//2018UL PU
double mcpileup[npileupmx] ={8.89375e-07, 1.17771e-05, 3.99726e-05, 0.000129888, 0.000265225, 0.000313089, 0.000353782, 0.000508787, 0.00087367, 0.00147167, 0.00228231, 0.00330376, 0.00466048, 0.00624959, 0.00810376, 0.0103065, 0.0129512, 0.0160304, 0.0192913, 0.0223109, 0.0249799, 0.0273974, 0.0294402, 0.0310299, 0.0324584, 0.0338264, 0.0351267, 0.036032, 0.036749, 0.0374133, 0.0380353, 0.0386201, 0.0391244, 0.0394202, 0.0394673, 0.0391705, 0.0384759, 0.0372985, 0.0356498, 0.0334655, 0.0308236, 0.0278341, 0.024601, 0.0212676, 0.0180251, 0.014913, 0.0120582, 0.009534, 0.00738547, 0.00563442, 0.00422053, 0.00312446, 0.00228718, 0.00164065, 0.00118425, 0.000847786, 0.000603466, 0.000419347, 0.000291769, 0.000199761, 0.000136625, 9.46855e-05, 6.80243e-05, 4.94806e-05, 3.53123e-05, 2.55677e-05, 1.75846e-05, 1.23828e-05, 9.3167e-06, 6.07133e-06, 3.95387e-06, 2.02761e-06, 1.22535e-06, 9.79612e-07, 7.6173e-07, 4.27488e-07, 2.4117e-07, 1.38701e-07, 3.37678e-08, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#endif

#ifdef SIXTEEN
//HLT Path PileUP
#ifdef PUNOMI
double datpileup[nHLTmx][npileupmx] = {{5.2228e-06, 4.78698e-05, 0.00031893, 0.00015203, 0.000324416, 0.00151584, 0.00516684, 0.00772539, 0.00854466, 0.0114081, 0.0168755, 0.0239617, 0.0320735, 0.0408648, 0.0499775, 0.0580075, 0.0630094, 0.0644992, 0.0632582, 0.0603569, 0.0568499, 0.0534058, 0.0500768, 0.0465926, 0.042772, 0.0386465, 0.0343659, 0.0301007, 0.0260019, 0.0221828, 0.0187114, 0.0156125, 0.0128799, 0.0104923, 0.00842414, 0.00665175, 0.00515313, 0.00390718, 0.0028921, 0.0020846, 0.0014596, 0.000990586, 0.000650469, 0.000412764, 0.000252968, 0.000149756, 8.57179e-05, 4.75242e-05, 2.55932e-05, 1.34397e-05, 6.91719e-06, 3.51216e-06, 1.77333e-06, 8.98744e-07, 4.61913e-07, 2.43173e-07, 1.32199e-07, 7.45422e-08, 4.35795e-08, 2.62928e-08, 1.6251e-08, 1.02079e-08, 6.46951e-09, 4.11319e-09, 2.61233e-09, 1.65257e-09, 1.03933e-09, 6.49073e-10, 4.02229e-10, 2.4724e-10, 1.50709e-10, 9.10956e-11, 5.45988e-11, 3.24493e-11, 1.91242e-11, 1.11773e-11, 6.47884e-12, 3.72464e-12, 2.12385e-12, 1.20126e-12, 6.73976e-13, 3.75116e-13, 2.07118e-13, 1.13453e-13, 6.16558e-14, 3.32436e-14, 1.7784e-14, 9.43963e-15, 4.9716e-15, 2.59815e-15, 1.34733e-15, 6.93321e-16, 3.5404e-16, 1.79404e-16, 9.02143e-17, 4.50171e-17, 2.22908e-17, 1.09521e-17, 5.33933e-18},
{4.89492e-06, 4.76567e-05, 0.000263877, 0.000188908, 0.000418299, 0.00171571, 0.00593946, 0.0112904, 0.0168787, 0.0240734, 0.0314472, 0.0370343, 0.0411121, 0.0454532, 0.0513282, 0.0576159, 0.0618456, 0.0629171, 0.0613305, 0.0581588, 0.0543907, 0.05055, 0.0466628, 0.0425628, 0.0381995, 0.0337011, 0.0292685, 0.0250796, 0.0212552, 0.0178546, 0.0148856, 0.0123194, 0.0101101, 0.0082103, 0.00658029, 0.00519021, 0.00401753, 0.00304362, 0.00225084, 0.0016208, 0.00113373, 0.000768708, 0.000504346, 0.0003198, 0.000195861, 0.000115874, 6.62793e-05, 3.67184e-05, 1.97554e-05, 1.03619e-05, 5.32531e-06, 2.69906e-06, 1.35991e-06, 6.87579e-07, 3.52505e-07, 1.85139e-07, 1.00455e-07, 5.65722e-08, 3.3059e-08, 1.99515e-08, 1.23426e-08, 7.76261e-09, 4.92681e-09, 3.13702e-09, 1.99524e-09, 1.26392e-09, 7.95901e-10, 4.97621e-10, 3.08696e-10, 1.89927e-10, 1.15872e-10, 7.00926e-11, 4.20403e-11, 2.50018e-11, 1.47439e-11, 8.62222e-12, 5.00056e-12, 2.87634e-12, 1.64102e-12, 9.28672e-13, 5.21328e-13, 2.90323e-13, 1.60395e-13, 8.7914e-14, 4.78078e-14, 2.57945e-14, 1.38088e-14, 7.33499e-15, 3.86607e-15, 2.02199e-15, 1.04938e-15, 5.40438e-16, 2.76197e-16, 1.40073e-16, 7.04936e-17, 3.52045e-17, 1.74457e-17, 8.57807e-18, 4.185e-18},
{1.33191e-05, 8.41562e-05, 0.000336949, 0.000247009, 0.000854888, 0.00689466, 0.0245049, 0.0281708, 0.0163041, 0.0147222, 0.0200221, 0.0265182, 0.0330448, 0.0396851, 0.0467685, 0.0533749, 0.0577262, 0.0592521, 0.0585386, 0.0564231, 0.0537013, 0.0508362, 0.0478055, 0.0443781, 0.0404634, 0.0361914, 0.0317973, 0.0275112, 0.0235081, 0.0198888, 0.0166845, 0.0138762, 0.0114237, 0.00928747, 0.00743786, 0.00585427, 0.00451961, 0.00341603, 0.00252284, 0.00181673, 0.00127275, 0.000865498, 0.000570098, 0.000363126, 0.00022341, 0.00013271, 7.61446e-05, 4.22573e-05, 2.27382e-05, 1.19075e-05, 6.10035e-06, 3.07864e-06, 1.54393e-06, 7.77484e-07, 3.97689e-07, 2.08932e-07, 1.13713e-07, 6.43742e-08, 3.78546e-08, 2.29865e-08, 1.42947e-08, 9.02658e-09, 5.74521e-09, 3.66472e-09, 2.33321e-09, 1.47862e-09, 9.31075e-10, 5.8194e-10, 3.60809e-10, 2.21846e-10, 1.35255e-10, 8.17682e-11, 4.90207e-11, 2.91468e-11, 1.71902e-11, 1.00581e-11, 5.83928e-12, 3.36418e-12, 1.92369e-12, 1.09188e-12, 6.15244e-13, 3.44179e-13, 1.91168e-13, 1.05427e-13, 5.77308e-14, 3.1389e-14, 1.69454e-14, 9.08272e-15, 4.83332e-15, 2.55336e-15, 1.339e-15, 6.96971e-16, 3.60058e-16, 1.84589e-16, 9.39012e-17, 4.73931e-17, 2.37293e-17, 1.17847e-17, 5.80466e-18},
{4.16221e-06, 4.20045e-05, 0.000224165, 0.000160465, 0.000332433, 0.00117499, 0.00383611, 0.00717808, 0.0107503, 0.0159182, 0.0226394, 0.0297432, 0.0367484, 0.0439936, 0.0518253, 0.0591955, 0.0641381, 0.0659295, 0.065037, 0.0623062, 0.0586976, 0.0548553, 0.0508768, 0.0465898, 0.041915, 0.0369678, 0.0319664, 0.0271353, 0.02266, 0.0186647, 0.0152061, 0.0122793, 0.00983689, 0.00781234, 0.00613877, 0.00475928, 0.00362906, 0.00271327, 0.00198322, 0.0014134, 0.000979767, 0.000659182, 0.00042967, 0.00027098, 0.000165231, 9.74029e-05, 5.55513e-05, 3.07016e-05, 1.6486e-05, 8.63383e-06, 4.43255e-06, 2.2456e-06, 1.13185e-06, 5.73032e-07, 2.94462e-07, 1.55134e-07, 8.44596e-08, 4.77086e-08, 2.79384e-08, 1.68768e-08, 1.04382e-08, 6.55754e-09, 4.15476e-09, 2.63991e-09, 1.67527e-09, 1.05878e-09, 6.65204e-10, 4.14986e-10, 2.5689e-10, 1.57737e-10, 9.60534e-11, 5.8004e-11, 3.47353e-11, 2.06288e-11, 1.21506e-11, 7.09863e-12, 4.11381e-12, 2.36506e-12, 1.34898e-12, 7.63414e-13, 4.28685e-13, 2.38871e-13, 1.32086e-13, 7.24827e-14, 3.94739e-14, 2.13351e-14, 1.14445e-14, 6.09285e-15, 3.21936e-15, 1.68827e-15, 8.78695e-16, 4.5389e-16, 2.32685e-16, 1.18381e-16, 5.97683e-17, 2.99443e-17, 1.48862e-17, 7.34246e-18, 3.59306e-18},
{4.19508e-06, 4.54036e-05, 0.000294051, 0.000155697, 0.000292895, 0.000836147, 0.00260713, 0.00564786, 0.00970735, 0.0149791, 0.0218178, 0.0289569, 0.0354815, 0.04158, 0.0480195, 0.0543231, 0.0588081, 0.0606926, 0.060364, 0.0585843, 0.0561192, 0.0534228, 0.0504891, 0.0471161, 0.0432365, 0.0389841, 0.0345794, 0.0302318, 0.0261045, 0.0223035, 0.0188796, 0.0158385, 0.0131593, 0.0108113, 0.00876475, 0.0069947, 0.00548052, 0.00420426, 0.00314862, 0.00229557, 0.00162496, 0.00111422, 0.000738753, 0.000473053, 0.000292403, 0.000174502, 0.000100637, 5.61783e-05, 3.04302e-05, 1.60479e-05, 8.27602e-06, 4.19719e-06, 2.10821e-06, 1.05797e-06, 5.35915e-07, 2.77058e-07, 1.47681e-07, 8.17357e-08, 4.70595e-08, 2.80849e-08, 1.7244e-08, 1.07962e-08, 6.83529e-09, 4.34712e-09, 2.76377e-09, 1.75078e-09, 1.10276e-09, 6.8974e-10, 4.28074e-10, 2.63508e-10, 1.60848e-10, 9.73512e-11, 5.84192e-11, 3.47587e-11, 2.05059e-11, 1.19955e-11, 6.95829e-12, 4.00266e-12, 2.28336e-12, 1.29181e-12, 7.24831e-13, 4.03368e-13, 2.22641e-13, 1.21889e-13, 6.61894e-14, 3.56528e-14, 1.90499e-14, 1.00973e-14, 5.30938e-15, 2.76968e-15, 1.43344e-15, 7.3606e-16, 3.75013e-16, 1.89581e-16, 9.50975e-17, 4.73344e-17, 2.33787e-17, 1.14574e-17, 5.57155e-18},
{4.356e-06, 4.44041e-05, 0.000283907, 0.000154777, 0.000305286, 0.00104224, 0.00347718, 0.00693546, 0.01064, 0.0150729, 0.02068, 0.0268104, 0.033288, 0.0403348, 0.0479969, 0.0550832, 0.0597774, 0.061566, 0.0610849, 0.0591776, 0.0566076, 0.0538174, 0.0507929, 0.0473282, 0.0433585, 0.039024, 0.0345511, 0.0301509, 0.0259852, 0.0221578, 0.0187173, 0.0156678, 0.0129867, 0.0106418, 0.00860174, 0.00684094, 0.00533838, 0.004076, 0.00303621, 0.00220028, 0.00154714, 0.00105316, 0.0006928, 0.000439929, 0.000269546, 0.000159403, 9.10872e-05, 5.03923e-05, 2.70691e-05, 1.41746e-05, 7.27316e-06, 3.68106e-06, 1.8526e-06, 9.36045e-07, 4.79841e-07, 2.52168e-07, 1.37e-07, 7.72906e-08, 4.52558e-08, 2.73636e-08, 1.69541e-08, 1.06754e-08, 6.78113e-09, 4.32017e-09, 2.74889e-09, 1.74192e-09, 1.09726e-09, 6.86269e-10, 4.25881e-10, 2.62131e-10, 1.5999e-10, 9.68217e-11, 5.80953e-11, 3.45622e-11, 2.03875e-11, 1.19246e-11, 6.916e-12, 3.97757e-12, 2.26853e-12, 1.28308e-12, 7.19701e-13, 4.00366e-13, 2.20892e-13, 1.20874e-13, 6.56036e-14, 3.53166e-14, 1.88582e-14, 9.98875e-15, 5.24842e-15, 2.73572e-15, 1.4147e-15, 7.25812e-16, 3.69465e-16, 1.86607e-16, 9.35203e-17, 4.65067e-17, 2.29489e-17, 1.12367e-17, 5.45945e-18},
{4.24547e-06, 3.80708e-05, 0.000159027, 0.000147613, 0.000277688, 0.00088616, 0.00283265, 0.00544837, 0.00846445, 0.0128465, 0.0189894, 0.0259604, 0.0330516, 0.040244, 0.0478646, 0.0551157, 0.0602123, 0.0624065, 0.0621714, 0.0603534, 0.0577819, 0.054945, 0.0518418, 0.0482671, 0.0441596, 0.0396701, 0.0350384, 0.0304891, 0.0261943, 0.022264, 0.0187483, 0.0156489, 0.0129382, 0.0105782, 0.00853271, 0.00677207, 0.00527306, 0.0040163, 0.00298352, 0.00215541, 0.00151038, 0.00102426, 0.000671052, 0.000424272, 0.000258769, 0.00015231, 8.66201e-05, 4.76974e-05, 2.55096e-05, 1.33072e-05, 6.80862e-06, 3.44087e-06, 1.73235e-06, 8.77557e-07, 4.52065e-07, 2.392e-07, 1.30988e-07, 7.44832e-08, 4.39109e-08, 2.66898e-08, 1.65961e-08, 1.04732e-08, 6.66081e-09, 4.24601e-09, 2.70228e-09, 1.7124e-09, 1.07856e-09, 6.74493e-10, 4.18516e-10, 2.57565e-10, 1.57185e-10, 9.51131e-11, 5.70639e-11, 3.39447e-11, 2.00207e-11, 1.17083e-11, 6.78935e-12, 3.90388e-12, 2.22592e-12, 1.25857e-12, 7.05687e-13, 3.92394e-13, 2.16381e-13, 1.18334e-13, 6.41814e-14, 3.45246e-14, 1.84198e-14, 9.74752e-15, 5.11656e-15, 2.66414e-15, 1.37612e-15, 7.0518e-16, 3.58519e-16, 1.80848e-16, 9.05161e-17, 4.49537e-17, 2.21534e-17, 1.0833e-17, 5.25658e-18},
{2.6023e-06, 2.0996e-05, 6.51172e-05, 9.41871e-05, 0.000148034, 0.000291241, 0.000704223, 0.00141856, 0.00252469, 0.00439193, 0.00751877, 0.0120581, 0.017926, 0.0248897, 0.0326516, 0.0404338, 0.0470294, 0.0518213, 0.0548712, 0.0565006, 0.0571406, 0.0570952, 0.0563517, 0.05476, 0.0523059, 0.0491505, 0.0455113, 0.0415816, 0.0375179, 0.0334442, 0.0294538, 0.0256111, 0.0219607, 0.018538, 0.0153747, 0.0125008, 0.00994118, 0.00771318, 0.00582371, 0.00426785, 0.00302825, 0.00207592, 0.00137259, 0.000874405, 0.000536469, 0.000317084, 0.000180748, 9.95605e-05, 5.31458e-05, 2.7603e-05, 1.4023e-05, 7.0154e-06, 3.48514e-06, 1.7364e-06, 8.77271e-07, 4.54445e-07, 2.43627e-07, 1.35898e-07, 7.88916e-08, 4.74368e-08, 2.93109e-08, 1.84476e-08, 1.17316e-08, 7.49018e-09, 4.77875e-09, 3.0369e-09, 1.91841e-09, 1.20307e-09, 7.48437e-10, 4.61708e-10, 2.8239e-10, 1.71234e-10, 1.02945e-10, 6.13675e-11, 3.62783e-11, 2.1271e-11, 1.23716e-11, 7.13865e-12, 4.08711e-12, 2.32207e-12, 1.30928e-12, 7.32698e-13, 4.06981e-13, 2.24387e-13, 1.22802e-13, 6.67108e-14, 3.59722e-14, 1.92533e-14, 1.02282e-14, 5.39289e-15, 2.82199e-15, 1.46546e-15, 7.55173e-16, 3.86138e-16, 1.95897e-16, 9.85978e-17, 4.92291e-17, 2.43805e-17, 1.19758e-17},
{2.6023e-06, 2.0996e-05, 6.51172e-05, 9.41871e-05, 0.000148034, 0.000291241, 0.000704223, 0.00141856, 0.00252469, 0.00439193, 0.00751877, 0.0120581, 0.017926, 0.0248897, 0.0326516, 0.0404338, 0.0470294, 0.0518213, 0.0548712, 0.0565006, 0.0571406, 0.0570952, 0.0563517, 0.05476, 0.0523059, 0.0491505, 0.0455113, 0.0415816, 0.0375179, 0.0334442, 0.0294538, 0.0256111, 0.0219607, 0.018538, 0.0153747, 0.0125008, 0.00994118, 0.00771318, 0.00582371, 0.00426785, 0.00302825, 0.00207592, 0.00137259, 0.000874405, 0.000536469, 0.000317084, 0.000180748, 9.95605e-05, 5.31458e-05, 2.7603e-05, 1.4023e-05, 7.0154e-06, 3.48514e-06, 1.7364e-06, 8.77271e-07, 4.54445e-07, 2.43627e-07, 1.35898e-07, 7.88916e-08, 4.74368e-08, 2.93109e-08, 1.84476e-08, 1.17316e-08, 7.49018e-09, 4.77875e-09, 3.0369e-09, 1.91841e-09, 1.20307e-09, 7.48437e-10, 4.61708e-10, 2.8239e-10, 1.71234e-10, 1.02945e-10, 6.13675e-11, 3.62783e-11, 2.1271e-11, 1.23716e-11, 7.13865e-12, 4.08711e-12, 2.32207e-12, 1.30928e-12, 7.32698e-13, 4.06981e-13, 2.24387e-13, 1.22802e-13, 6.67108e-14, 3.59722e-14, 1.92533e-14, 1.02282e-14, 5.39289e-15, 2.82199e-15, 1.46546e-15, 7.55173e-16, 3.86138e-16, 1.95897e-16, 9.85978e-17, 4.92291e-17, 2.43805e-17, 1.19758e-17}};
//#endif

//Scale Down
//#ifdef PUDOWN
#elif defined(PUDOWN)
double datpileup[nHLTmx][npileupmx] = {{6.03667e-06, 7.60574e-05, 0.000307637, 0.000176086, 0.000453516, 0.00239672, 0.00661466, 0.00837479, 0.00981379, 0.0143308, 0.0212881, 0.0297347, 0.039106, 0.0490753, 0.0585196, 0.06507, 0.0675457, 0.0666481, 0.0636412, 0.0598129, 0.0560218, 0.052361, 0.0485117, 0.0442723, 0.0397016, 0.0349882, 0.0303351, 0.0259142, 0.0218463, 0.0181943, 0.0149712, 0.0121595, 0.00972992, 0.00765254, 0.00590003, 0.00444671, 0.00326666, 0.00233228, 0.00161376, 0.00107933, 0.000696324, 0.000432685, 0.000258784, 0.000149002, 8.2688e-05, 4.43251e-05, 2.303e-05, 1.16532e-05, 5.7788e-06, 2.83109e-06, 1.3837e-06, 6.82335e-07, 3.43538e-07, 1.78489e-07, 9.63896e-08, 5.42021e-08, 3.16176e-08, 1.8985e-08, 1.16271e-08, 7.20079e-09, 4.4785e-09, 2.78314e-09, 1.72226e-09, 1.05894e-09, 6.46049e-10, 3.90789e-10, 2.34271e-10, 1.39155e-10, 8.18937e-11, 4.77496e-11, 2.75848e-11, 1.57897e-11, 8.95597e-12, 5.03398e-12, 2.80415e-12, 1.54813e-12, 8.47137e-13, 4.59476e-13, 2.47033e-13, 1.31658e-13, 6.95603e-14, 3.64342e-14, 1.89194e-14, 9.7403e-15, 4.97187e-15, 2.5163e-15, 1.26275e-15, 6.28336e-16, 3.10025e-16, 1.51682e-16, 7.35877e-17, 3.53995e-17, 1.68852e-17, 7.98517e-18, 3.74397e-18, 1.74022e-18, 8.01599e-19, 3.66134e-19, 1.65602e-19},
{5.68913e-06, 6.98388e-05, 0.000261857, 0.000221571, 0.000572431, 0.00266489, 0.00802858, 0.0138155, 0.0205967, 0.0289207, 0.0361908, 0.0412809, 0.0456847, 0.0514923, 0.0585242, 0.0639995, 0.065968, 0.0646799, 0.0613645, 0.0572535, 0.0530333, 0.0487584, 0.0442347, 0.039416, 0.0344717, 0.0296437, 0.0251339, 0.0210687, 0.0174998, 0.0144189, 0.0117807, 0.00952727, 0.00760525, 0.00597332, 0.00460108, 0.00346477, 0.00254293, 0.00181372, 0.00125365, 0.00083765, 0.000539922, 0.000335235, 0.000200358, 0.000115284, 6.39299e-05, 3.42411e-05, 1.77723e-05, 8.98105e-06, 4.44641e-06, 2.17398e-06, 1.06005e-06, 5.21396e-07, 2.61834e-07, 1.35732e-07, 7.31807e-08, 4.11197e-08, 2.39886e-08, 1.44155e-08, 8.83962e-09, 5.48262e-09, 3.4152e-09, 2.12559e-09, 1.31724e-09, 8.10975e-10, 4.9536e-10, 2.99963e-10, 1.79996e-10, 1.0701e-10, 6.30261e-11, 3.6775e-11, 2.1259e-11, 1.21764e-11, 6.91054e-12, 3.88652e-12, 2.16618e-12, 1.19659e-12, 6.55154e-13, 3.55558e-13, 1.91281e-13, 1.0201e-13, 5.39325e-14, 2.82687e-14, 1.46901e-14, 7.56874e-15, 3.86649e-15, 1.95847e-15, 9.83637e-16, 4.89868e-16, 2.41911e-16, 1.18458e-16, 5.75181e-17, 2.76923e-17, 1.32196e-17, 6.25659e-18, 2.93569e-18, 1.3655e-18, 6.29411e-19, 2.87665e-19, 1.30187e-19},
{1.52847e-05, 0.000111846, 0.000336401, 0.000291758, 0.0014372, 0.011372, 0.0299606, 0.0249232, 0.0149156, 0.0176394, 0.0244016, 0.0316021, 0.038788, 0.0464026, 0.0540322, 0.0596326, 0.061991, 0.0615915, 0.0594243, 0.0564671, 0.0533219, 0.0499853, 0.046186, 0.0418328, 0.0371019, 0.0322809, 0.0276367, 0.0233584, 0.019541, 0.0161978, 0.0132923, 0.0107741, 0.00860099, 0.00674377, 0.00518075, 0.00389105, 0.00285084, 0.00203273, 0.00140694, 0.000942806, 0.000610182, 0.000380648, 0.000228584, 0.000132078, 7.34698e-05, 3.9412e-05, 2.0451e-05, 1.03128e-05, 5.08671e-06, 2.47528e-06, 1.20124e-06, 5.88768e-07, 2.95341e-07, 1.53398e-07, 8.30944e-08, 4.69863e-08, 2.7592e-08, 1.6677e-08, 1.02723e-08, 6.39131e-09, 3.98919e-09, 2.48557e-09, 1.541e-09, 9.48696e-10, 5.79267e-10, 3.50568e-10, 2.10218e-10, 1.24891e-10, 7.35132e-11, 4.28766e-11, 2.47835e-11, 1.41991e-11, 8.06489e-12, 4.54199e-12, 2.53675e-12, 1.40525e-12, 7.72205e-13, 4.20975e-13, 2.27698e-13, 1.22197e-13, 6.50691e-14, 3.43794e-14, 1.80229e-14, 9.37413e-15, 4.83719e-15, 2.47616e-15, 1.25732e-15, 6.33215e-16, 3.16261e-16, 1.5663e-16, 7.69108e-17, 3.74383e-17, 1.80638e-17, 8.63738e-18, 4.09257e-18, 1.92121e-18, 8.93255e-19, 4.11503e-19, 1.87625e-19},
{4.84534e-06, 6.10393e-05, 0.000222315, 0.000187603, 0.000438987, 0.00178142, 0.00514768, 0.00877275, 0.0132406, 0.0197982, 0.0275065, 0.0352553, 0.0430316, 0.0514189, 0.0599025, 0.0662226, 0.0689664, 0.0684633, 0.0656768, 0.0617635, 0.0575465, 0.05317, 0.0484331, 0.0432556, 0.0377955, 0.0323212, 0.0270968, 0.0223287, 0.0181424, 0.0145787, 0.0116083, 0.00916091, 0.00715392, 0.00551242, 0.00417646, 0.00310006, 0.00224665, 0.00158467, 0.00108476, 0.000718813, 0.000460119, 0.000284063, 0.000168995, 9.68777e-05, 5.35625e-05, 2.86187e-05, 1.48251e-05, 7.48065e-06, 3.70018e-06, 1.80881e-06, 8.82677e-07, 4.34967e-07, 2.19062e-07, 1.13956e-07, 6.16495e-08, 3.47306e-08, 2.02888e-08, 1.2193e-08, 7.46926e-09, 4.62466e-09, 2.87455e-09, 1.78487e-09, 1.10342e-09, 6.77713e-10, 4.13005e-10, 2.49542e-10, 1.49431e-10, 8.86677e-11, 5.21309e-11, 3.03697e-11, 1.75319e-11, 1.003e-11, 5.68713e-12, 3.19634e-12, 1.78081e-12, 9.83622e-13, 5.38663e-13, 2.92492e-13, 1.57486e-13, 8.40863e-14, 4.45224e-14, 2.33784e-14, 1.21742e-14, 6.28736e-15, 3.2203e-15, 1.63578e-15, 8.24047e-16, 4.11689e-16, 2.0397e-16, 1.00213e-16, 4.88233e-17, 2.35852e-17, 1.12963e-17, 5.36362e-18, 2.52455e-18, 1.17776e-18, 5.44416e-19, 2.49472e-19, 1.13184e-19},
{4.8764e-06, 7.16538e-05, 0.000284733, 0.000181053, 0.000368628, 0.00122226, 0.00361646, 0.00735906, 0.0122213, 0.0188597, 0.0267006, 0.0342401, 0.0410422, 0.0479282, 0.0550715, 0.0606993, 0.0634176, 0.0634441, 0.061655, 0.0589878, 0.0560314, 0.0528009, 0.0490598, 0.0447435, 0.0400301, 0.0351876, 0.0304588, 0.0260235, 0.021989, 0.0183959, 0.0152356, 0.0124761, 0.0100796, 0.00801334, 0.00625054, 0.00476854, 0.00354639, 0.00256272, 0.00179379, 0.00121285, 0.000790459, 0.000495872, 0.000299238, 0.000173749, 9.71777e-05, 5.2459e-05, 2.74146e-05, 1.39262e-05, 6.91395e-06, 3.37826e-06, 1.63897e-06, 7.98087e-07, 3.94914e-07, 2.01073e-07, 1.06405e-07, 5.87983e-08, 3.38607e-08, 2.01694e-08, 1.23021e-08, 7.60828e-09, 4.73293e-09, 2.94434e-09, 1.82464e-09, 1.12366e-09, 6.86638e-10, 4.15995e-10, 2.49757e-10, 1.48567e-10, 8.75502e-11, 5.11112e-11, 2.95602e-11, 1.69375e-11, 9.61524e-12, 5.40835e-12, 3.01429e-12, 1.66471e-12, 9.11056e-13, 4.94108e-13, 2.65572e-13, 1.41464e-13, 7.46829e-14, 3.90777e-14, 2.02668e-14, 1.04185e-14, 5.30902e-15, 2.68182e-15, 1.34299e-15, 6.66751e-16, 3.28188e-16, 1.60165e-16, 7.75011e-17, 3.71833e-17, 1.76886e-17, 8.34289e-18, 3.90144e-18, 1.80878e-18, 8.31133e-19, 3.78738e-19, 1.70917e-19},
{5.05871e-06, 6.9425e-05, 0.000275673, 0.000180265, 0.000397481, 0.00158111, 0.0047502, 0.00864372, 0.0128969, 0.0183925, 0.0248882, 0.0318179, 0.0392581, 0.0474807, 0.055688, 0.061702, 0.064364, 0.0642236, 0.0622901, 0.059506, 0.0564461, 0.0531158, 0.0492739, 0.0448592, 0.0400578, 0.0351438, 0.0303614, 0.0258882, 0.0218287, 0.0182211, 0.0150551, 0.0122963, 0.00990536, 0.00784815, 0.0060972, 0.00462968, 0.00342443, 0.00245934, 0.00170961, 0.00114723, 0.000741589, 0.000461159, 0.000275733, 0.000158579, 8.78428e-05, 4.69787e-05, 2.43423e-05, 1.22799e-05, 6.06975e-06, 2.96355e-06, 1.44359e-06, 7.09719e-07, 3.56498e-07, 1.84996e-07, 9.99105e-08, 5.62538e-08, 3.2884e-08, 1.97952e-08, 1.21543e-08, 7.54542e-09, 4.70307e-09, 2.92843e-09, 1.81541e-09, 1.11806e-09, 6.83177e-10, 4.13857e-10, 2.48446e-10, 1.4777e-10, 8.70713e-11, 5.08259e-11, 2.93917e-11, 1.68386e-11, 9.55763e-12, 5.37495e-12, 2.995e-12, 1.65362e-12, 9.04703e-13, 4.90481e-13, 2.63511e-13, 1.40298e-13, 7.4027e-14, 3.8711e-14, 2.00632e-14, 1.03064e-14, 5.24778e-15, 2.64869e-15, 1.32524e-15, 6.57344e-16, 3.23256e-16, 1.57608e-16, 7.61906e-17, 3.65195e-17, 1.73563e-17, 8.17856e-18, 3.82114e-18, 1.77002e-18, 8.12647e-19, 3.70028e-19, 1.66863e-19},
{4.93089e-06, 5.04559e-05, 0.000162791, 0.000170641, 0.000356242, 0.00132683, 0.00381935, 0.00676648, 0.0105169, 0.0162489, 0.0235579, 0.0313403, 0.0391504, 0.0473491, 0.0556381, 0.0620408, 0.0651684, 0.0653339, 0.0635179, 0.0607384, 0.0576286, 0.0542115, 0.0502467, 0.0456779, 0.0407046, 0.0356174, 0.0306759, 0.0260691, 0.0219073, 0.0182286, 0.0150184, 0.0122357, 0.0098346, 0.00777539, 0.00602719, 0.00456524, 0.00336735, 0.0024107, 0.00166986, 0.00111618, 0.000718461, 0.00044475, 0.000264652, 0.000151455, 8.34788e-05, 4.44283e-05, 2.29178e-05, 1.15179e-05, 5.6783e-06, 2.76992e-06, 1.35102e-06, 6.66753e-07, 3.37008e-07, 1.76273e-07, 9.60038e-08, 5.44685e-08, 3.20327e-08, 1.93636e-08, 1.19202e-08, 7.41063e-09, 4.62218e-09, 2.87876e-09, 1.78464e-09, 1.099e-09, 6.71444e-10, 4.06692e-10, 2.44112e-10, 1.45175e-10, 8.5532e-11, 4.99216e-11, 2.88651e-11, 1.65346e-11, 9.38349e-12, 5.27592e-12, 2.93908e-12, 1.62224e-12, 8.87199e-13, 4.80775e-13, 2.5816e-13, 1.37364e-13, 7.24284e-14, 3.78451e-14, 1.95972e-14, 1.00573e-14, 5.11556e-15, 2.57904e-15, 1.28885e-15, 6.38491e-16, 3.13575e-16, 1.52682e-16, 7.37084e-17, 3.5281e-17, 1.67447e-17, 7.87964e-18, 3.6766e-18, 1.70088e-18, 7.7994e-19, 3.54722e-19, 1.59784e-19},
{2.99217e-06, 2.52593e-05, 7.14212e-05, 0.000106816, 0.000174403, 0.000387792, 0.000942178, 0.00184863, 0.00332001, 0.00593168, 0.0101122, 0.0158988, 0.0230743, 0.0313282, 0.0400039, 0.047714, 0.0534434, 0.0571211, 0.0590952, 0.0598755, 0.0598503, 0.0590208, 0.0572121, 0.0544219, 0.0508574, 0.0467788, 0.04241, 0.0379298, 0.0334765, 0.0291501, 0.0250173, 0.021126, 0.0175161, 0.0142249, 0.0112856, 0.00872254, 0.00654829, 0.00476076, 0.00334224, 0.00225997, 0.00146894, 0.00091659, 0.000548788, 0.000315396, 0.000174222, 9.27188e-05, 4.77072e-05, 2.38495e-05, 1.16595e-05, 5.62082e-06, 2.69965e-06, 1.30746e-06, 6.46804e-07, 3.30784e-07, 1.76371e-07, 9.83087e-08, 5.70788e-08, 3.42368e-08, 2.10021e-08, 1.30509e-08, 8.15233e-09, 5.09034e-09, 3.16512e-09, 1.95509e-09, 1.19797e-09, 7.2757e-10, 4.37795e-10, 2.60953e-10, 1.54079e-10, 9.01254e-11, 5.22307e-11, 2.99947e-11, 1.70717e-11, 9.6314e-12, 5.38703e-12, 2.98756e-12, 1.64302e-12, 8.96124e-13, 4.84758e-13, 2.60097e-13, 1.38423e-13, 7.30718e-14, 3.82607e-14, 1.98703e-14, 1.0235e-14, 5.22856e-15, 2.64884e-15, 1.33071e-15, 6.62865e-16, 3.27377e-16, 1.60293e-16, 7.7799e-17, 3.74276e-17, 1.78444e-17, 8.43083e-18, 3.9468e-18, 1.83014e-18, 8.41012e-19, 3.82495e-19},
{2.99217e-06, 2.52593e-05, 7.14212e-05, 0.000106816, 0.000174403, 0.000387792, 0.000942178, 0.00184863, 0.00332001, 0.00593168, 0.0101122, 0.0158988, 0.0230743, 0.0313282, 0.0400039, 0.047714, 0.0534434, 0.0571211, 0.0590952, 0.0598755, 0.0598503, 0.0590208, 0.0572121, 0.0544219, 0.0508574, 0.0467788, 0.04241, 0.0379298, 0.0334765, 0.0291501, 0.0250173, 0.021126, 0.0175161, 0.0142249, 0.0112856, 0.00872254, 0.00654829, 0.00476076, 0.00334224, 0.00225997, 0.00146894, 0.00091659, 0.000548788, 0.000315396, 0.000174222, 9.27188e-05, 4.77072e-05, 2.38495e-05, 1.16595e-05, 5.62082e-06, 2.69965e-06, 1.30746e-06, 6.46804e-07, 3.30784e-07, 1.76371e-07, 9.83087e-08, 5.70788e-08, 3.42368e-08, 2.10021e-08, 1.30509e-08, 8.15233e-09, 5.09034e-09, 3.16512e-09, 1.95509e-09, 1.19797e-09, 7.2757e-10, 4.37795e-10, 2.60953e-10, 1.54079e-10, 9.01254e-11, 5.22307e-11, 2.99947e-11, 1.70717e-11, 9.6314e-12, 5.38703e-12, 2.98756e-12, 1.64302e-12, 8.96124e-13, 4.84758e-13, 2.60097e-13, 1.38423e-13, 7.30718e-14, 3.82607e-14, 1.98703e-14, 1.0235e-14, 5.22856e-15, 2.64884e-15, 1.33071e-15, 6.62865e-16, 3.27377e-16, 1.60293e-16, 7.7799e-17, 3.74276e-17, 1.78444e-17, 8.43083e-18, 3.9468e-18, 1.83014e-18, 8.41012e-19, 3.82495e-19}};
//#endif

//Scale Up
//#ifdef PUUP
#elif defined(PUUP)
double datpileup[nHLTmx][npileupmx] = {{4.54124e-06, 3.5788e-05, 0.000315953, 0.000134202, 0.000251532, 0.000961422, 0.00380107, 0.00694896, 0.00779576, 0.00939423, 0.0134776, 0.0193236, 0.0263027, 0.0340081, 0.0422286, 0.0504414, 0.057123, 0.0608594, 0.0616189, 0.0601587, 0.057385, 0.0541653, 0.0510229, 0.0479824, 0.0448132, 0.0413532, 0.0376144, 0.0337154, 0.0297995, 0.0259986, 0.022417, 0.019124, 0.0161524, 0.0135058, 0.0111705, 0.00912579, 0.00735094, 0.00582673, 0.00453526, 0.00345884, 0.00257897, 0.00187582, 0.00132817, 0.000913739, 0.000609871, 0.000394503, 0.000247197, 0.000150063, 8.83231e-05, 5.04781e-05, 2.80775e-05, 1.52486e-05, 8.11973e-06, 4.26198e-06, 2.21966e-06, 1.15594e-06, 6.07218e-07, 3.24662e-07, 1.7813e-07, 1.00875e-07, 5.90902e-08, 3.57393e-08, 2.22066e-08, 1.40797e-08, 9.0462e-09, 5.85395e-09, 3.79702e-09, 2.45982e-09, 1.58767e-09, 1.01929e-09, 6.5022e-10, 4.11881e-10, 2.58982e-10, 1.61609e-10, 1.00073e-10, 6.1491e-11, 3.74934e-11, 2.26861e-11, 1.36221e-11, 8.11768e-12, 4.80113e-12, 2.81838e-12, 1.64219e-12, 9.49794e-13, 5.45304e-13, 3.10789e-13, 1.75843e-13, 9.87709e-14, 5.50798e-14, 3.04948e-14, 1.67627e-14, 9.14862e-15, 4.95763e-15, 2.66754e-15, 1.4252e-15, 7.56094e-16, 3.9831e-16, 2.08361e-16, 1.08233e-16},
{4.23809e-06, 3.71855e-05, 0.000256953, 0.000164245, 0.000326106, 0.00112217, 0.00424432, 0.0091646, 0.0139831, 0.0199681, 0.0269579, 0.0329586, 0.037257, 0.0408516, 0.0453136, 0.0510585, 0.0564788, 0.0596405, 0.0600408, 0.0582738, 0.0552609, 0.0517984, 0.0482883, 0.0447382, 0.0410049, 0.0370369, 0.0329308, 0.0288533, 0.0249604, 0.0213651, 0.0181304, 0.0152752, 0.0127848, 0.0106242, 0.00875313, 0.00713455, 0.0057392, 0.00454508, 0.00353494, 0.00269375, 0.00200671, 0.00145821, 0.00103151, 0.000709017, 0.000472851, 0.000305651, 0.000191398, 0.000116118, 6.83e-05, 3.90063e-05, 2.16778e-05, 1.17605e-05, 6.2541e-06, 3.27745e-06, 1.70365e-06, 8.85284e-07, 4.63948e-07, 2.47476e-07, 1.35495e-07, 7.66079e-08, 4.48341e-08, 2.71119e-08, 1.68539e-08, 1.0696e-08, 6.88076e-09, 4.45884e-09, 2.89622e-09, 1.87885e-09, 1.21426e-09, 7.80504e-10, 4.98448e-10, 3.1606e-10, 1.98914e-10, 1.24229e-10, 7.69845e-11, 4.73369e-11, 2.88816e-11, 1.74858e-11, 1.05054e-11, 6.26376e-12, 3.70658e-12, 2.17698e-12, 1.26911e-12, 7.34403e-13, 4.21867e-13, 2.4057e-13, 1.36192e-13, 7.65446e-14, 4.27119e-14, 2.36628e-14, 1.3016e-14, 7.10876e-15, 3.85502e-15, 2.07581e-15, 1.10989e-15, 5.89275e-16, 3.10672e-16, 1.62643e-16, 8.4551e-17},
{1.16144e-05, 6.97547e-05, 0.00032729, 0.000217345, 0.000558157, 0.00407368, 0.0183632, 0.0289122, 0.0193457, 0.0133109, 0.0164923, 0.0221777, 0.0281727, 0.0341295, 0.0403522, 0.0468613, 0.0524473, 0.0557621, 0.0566656, 0.0557435, 0.0537023, 0.0511925, 0.0485718, 0.0458064, 0.0426988, 0.0391617, 0.0352901, 0.0312762, 0.0273182, 0.0235753, 0.0201491, 0.0170828, 0.0143729, 0.0119898, 0.00989839, 0.00806957, 0.00648252, 0.00512191, 0.00397357, 0.0030219, 0.00224893, 0.00163475, 0.00115837, 0.000798544, 0.000534603, 0.000347064, 0.00021828, 0.000132947, 7.84405e-05, 4.4882e-05, 2.4954e-05, 1.35225e-05, 7.17226e-06, 3.7443e-06, 1.9377e-06, 1.00264e-06, 5.23838e-07, 2.79136e-07, 1.5306e-07, 8.68763e-08, 5.11243e-08, 3.11037e-08, 1.94457e-08, 1.23996e-08, 8.00558e-09, 5.20094e-09, 3.38378e-09, 2.19717e-09, 1.42053e-09, 9.13072e-10, 5.82932e-10, 3.69448e-10, 2.32372e-10, 1.45032e-10, 8.98219e-11, 5.52036e-11, 3.36713e-11, 2.03851e-11, 1.22513e-11, 7.31016e-12, 4.33116e-12, 2.54841e-12, 1.48925e-12, 8.64466e-13, 4.98473e-13, 2.85548e-13, 1.6251e-13, 9.18879e-14, 5.162e-14, 2.88109e-14, 1.59759e-14, 8.80099e-15, 4.81651e-15, 2.61845e-15, 1.41396e-15, 7.58367e-16, 4.03956e-16, 2.13679e-16, 1.12233e-16},
{3.60067e-06, 3.28671e-05, 0.000218448, 0.000139725, 0.000266143, 0.000792015, 0.00276824, 0.00584383, 0.00888059, 0.0129095, 0.018569, 0.0250048, 0.0314576, 0.0378846, 0.0447184, 0.0519352, 0.0581912, 0.0619841, 0.0630535, 0.0618967, 0.0592524, 0.0559193, 0.0524041, 0.0487714, 0.0448731, 0.0406327, 0.036134, 0.0315543, 0.0270846, 0.02289, 0.0190891, 0.0157476, 0.0128784, 0.0104537, 0.00842259, 0.00672762, 0.00531607, 0.0041447, 0.00317955, 0.0023936, 0.00176387, 0.00126946, 0.000890438, 0.000607606, 0.000402726, 0.000258987, 0.000161492, 9.76341e-05, 5.72644e-05, 3.26269e-05, 1.80972e-05, 9.80262e-06, 5.20698e-06, 2.72701e-06, 1.41759e-06, 7.37279e-07, 3.87077e-07, 2.07016e-07, 1.13702e-07, 6.44906e-08, 3.78419e-08, 2.29218e-08, 1.42573e-08, 9.0442e-09, 5.81112e-09, 3.75922e-09, 2.43685e-09, 1.57742e-09, 1.01721e-09, 6.52413e-10, 4.15762e-10, 2.63094e-10, 1.6526e-10, 1.03024e-10, 6.37362e-11, 3.91303e-11, 2.38414e-11, 1.44168e-11, 8.65266e-12, 5.15478e-12, 3.04847e-12, 1.78976e-12, 1.04323e-12, 6.03755e-13, 3.46947e-13, 1.97973e-13, 1.12178e-13, 6.31221e-14, 3.52728e-14, 1.95745e-14, 1.0788e-14, 5.90466e-15, 3.20963e-15, 1.7327e-15, 9.28953e-16, 4.94612e-16, 2.61534e-16, 1.37332e-16, 7.16117e-17},
{3.63629e-06, 3.38513e-05, 0.000290806, 0.000136226, 0.000243195, 0.000590907, 0.00185786, 0.00432411, 0.0077362, 0.0119917, 0.0177219, 0.0242713, 0.0305845, 0.0362939, 0.0419249, 0.0479156, 0.0533514, 0.0568649, 0.0581128, 0.0575382, 0.0557966, 0.0535153, 0.0510462, 0.0483699, 0.0453133, 0.0418096, 0.0379584, 0.0339417, 0.0299398, 0.0260993, 0.0225223, 0.0192651, 0.0163446, 0.01375, 0.0114579, 0.0094422, 0.00767968, 0.00615126, 0.00484072, 0.00373344, 0.00281492, 0.00206976, 0.00148074, 0.00102871, 0.000692946, 0.000452135, 0.000285636, 0.000174742, 0.000103598, 5.96036e-05, 3.33458e-05, 1.81912e-05, 9.71186e-06, 5.09751e-06, 2.64565e-06, 1.36743e-06, 7.09818e-07, 3.73568e-07, 2.01239e-07, 1.11847e-07, 6.44224e-08, 3.84487e-08, 2.3671e-08, 1.4926e-08, 9.56456e-09, 6.18479e-09, 4.01321e-09, 2.60253e-09, 1.68199e-09, 1.0814e-09, 6.90857e-10, 4.38255e-10, 2.75951e-10, 1.72428e-10, 1.06908e-10, 6.57691e-11, 4.01461e-11, 2.43156e-11, 1.46137e-11, 8.71535e-12, 5.15795e-12, 3.02937e-12, 1.76573e-12, 1.02144e-12, 5.8644e-13, 3.34174e-13, 1.89004e-13, 1.06104e-13, 5.9124e-14, 3.27024e-14, 1.79553e-14, 9.78629e-15, 5.29504e-15, 2.84422e-15, 1.51675e-15, 8.03045e-16, 4.22139e-16, 2.2033e-16, 1.14184e-16},
{3.77688e-06, 3.34107e-05, 0.000280257, 0.000135325, 0.000248039, 0.000704387, 0.0024785, 0.00551712, 0.00881796, 0.0124743, 0.017201, 0.0226255, 0.0283711, 0.0344763, 0.0411728, 0.0481983, 0.0541819, 0.0577859, 0.0589205, 0.0582082, 0.0563531, 0.0539771, 0.0514225, 0.0486633, 0.0455229, 0.0419363, 0.0380087, 0.033927, 0.0298737, 0.0259949, 0.0223904, 0.019115, 0.0161839, 0.0135852, 0.0112938, 0.00928246, 0.00752704, 0.00600791, 0.00470868, 0.00361463, 0.00271096, 0.00198159, 0.0014085, 0.000971664, 0.000649599, 0.000420468, 0.000263405, 0.000159748, 9.38787e-05, 5.3546e-05, 2.97138e-05, 1.60946e-05, 8.5457e-06, 4.47198e-06, 2.3218e-06, 1.20547e-06, 6.31516e-07, 3.36938e-07, 1.84639e-07, 1.04545e-07, 6.1295e-08, 3.71362e-08, 2.31251e-08, 1.46966e-08, 9.46422e-09, 6.13754e-09, 3.9887e-09, 2.58857e-09, 1.67348e-09, 1.07601e-09, 6.87385e-10, 4.36016e-10, 2.74513e-10, 1.71512e-10, 1.06329e-10, 6.54066e-11, 3.99207e-11, 2.41764e-11, 1.45282e-11, 8.66312e-12, 5.12617e-12, 3.0101e-12, 1.7541e-12, 1.01443e-12, 5.82231e-13, 3.31656e-13, 1.87503e-13, 1.05212e-13, 5.8597e-14, 3.23927e-14, 1.77743e-14, 9.68123e-15, 5.23449e-15, 2.80959e-15, 1.49711e-15, 7.91999e-16, 4.15982e-16, 2.1693e-16, 1.12324e-16},
{3.6811e-06, 3.12872e-05, 0.000151815, 0.000129651, 0.000228128, 0.000607751, 0.00204322, 0.00437658, 0.00691994, 0.0102917, 0.0152837, 0.0214018, 0.0278768, 0.0343567, 0.0410684, 0.0480895, 0.0543031, 0.0582994, 0.0597817, 0.0592674, 0.0574802, 0.0550983, 0.0524999, 0.0496692, 0.0464298, 0.0427193, 0.0386514, 0.0344242, 0.0302316, 0.0262289, 0.0225224, 0.0191692, 0.0161836, 0.01355, 0.011239, 0.00921853, 0.00746059, 0.00594296, 0.0046477, 0.00355921, 0.00266217, 0.00194005, 0.00137437, 0.000944672, 0.000629084, 0.000405499, 0.000252922, 0.000152701, 8.93292e-05, 5.07226e-05, 2.80273e-05, 1.51236e-05, 8.0058e-06, 4.18152e-06, 2.17023e-06, 1.12855e-06, 5.93396e-07, 3.18402e-07, 1.75731e-07, 1.0027e-07, 5.92169e-08, 3.60958e-08, 2.25799e-08, 1.43945e-08, 9.28737e-09, 6.02926e-09, 3.92035e-09, 2.54469e-09, 1.64512e-09, 1.05769e-09, 6.75599e-10, 4.28485e-10, 2.69738e-10, 1.68509e-10, 1.04456e-10, 6.42476e-11, 3.92091e-11, 2.37427e-11, 1.42657e-11, 8.50525e-12, 5.03181e-12, 2.95403e-12, 1.72095e-12, 9.94935e-13, 5.70824e-13, 3.25012e-13, 1.83652e-13, 1.02991e-13, 5.7322e-14, 3.16645e-14, 1.73607e-14, 9.44761e-15, 5.10332e-15, 2.7364e-15, 1.45654e-15, 7.69667e-16, 4.03778e-16, 2.10311e-16, 1.08762e-16},
{2.282e-06, 1.79548e-05, 5.91763e-05, 8.35976e-05, 0.000128726, 0.000227305, 0.000527097, 0.00109868, 0.00195866, 0.00332254, 0.00563848, 0.00915959, 0.0139046, 0.0197265, 0.0264166, 0.0336394, 0.0405456, 0.0461809, 0.0502114, 0.0527589, 0.0541148, 0.0546434, 0.054583, 0.0539129, 0.0525033, 0.0503328, 0.047527, 0.0442679, 0.0407226, 0.0370288, 0.0332972, 0.0296138, 0.0260406, 0.0226203, 0.019385, 0.0163622, 0.013578, 0.0110559, 0.00881474, 0.00686635, 0.00521379, 0.00385045, 0.00275983, 0.00191633, 0.00128726, 0.000835734, 0.000524241, 0.00031781, 0.000186367, 0.000105886, 5.84273e-05, 3.14145e-05, 1.65296e-05, 8.5587e-06, 4.39074e-06, 2.25012e-06, 1.16269e-06, 6.1176e-07, 3.30775e-07, 1.85043e-07, 1.07419e-07, 6.46086e-08, 4.00508e-08, 2.5401e-08, 1.6356e-08, 1.06205e-08, 6.91685e-09, 4.50049e-09, 2.91751e-09, 1.88098e-09, 1.20472e-09, 7.65993e-10, 4.83323e-10, 3.02587e-10, 1.87948e-10, 1.15829e-10, 7.08296e-11, 4.29814e-11, 2.58859e-11, 1.54746e-11, 9.18326e-12, 5.41066e-12, 3.16537e-12, 1.8389e-12, 1.06093e-12, 6.07907e-13, 3.45962e-13, 1.95557e-13, 1.09794e-13, 6.12273e-14, 3.39131e-14, 1.86567e-14, 1.01938e-14, 5.53159e-15, 2.98099e-15, 1.5953e-15, 8.4776e-16, 4.47326e-16, 2.34351e-16},
{2.282e-06, 1.79548e-05, 5.91763e-05, 8.35976e-05, 0.000128726, 0.000227305, 0.000527097, 0.00109868, 0.00195866, 0.00332254, 0.00563848, 0.00915959, 0.0139046, 0.0197265, 0.0264166, 0.0336394, 0.0405456, 0.0461809, 0.0502114, 0.0527589, 0.0541148, 0.0546434, 0.054583, 0.0539129, 0.0525033, 0.0503328, 0.047527, 0.0442679, 0.0407226, 0.0370288, 0.0332972, 0.0296138, 0.0260406, 0.0226203, 0.019385, 0.0163622, 0.013578, 0.0110559, 0.00881474, 0.00686635, 0.00521379, 0.00385045, 0.00275983, 0.00191633, 0.00128726, 0.000835734, 0.000524241, 0.00031781, 0.000186367, 0.000105886, 5.84273e-05, 3.14145e-05, 1.65296e-05, 8.5587e-06, 4.39074e-06, 2.25012e-06, 1.16269e-06, 6.1176e-07, 3.30775e-07, 1.85043e-07, 1.07419e-07, 6.46086e-08, 4.00508e-08, 2.5401e-08, 1.6356e-08, 1.06205e-08, 6.91685e-09, 4.50049e-09, 2.91751e-09, 1.88098e-09, 1.20472e-09, 7.65993e-10, 4.83323e-10, 3.02587e-10, 1.87948e-10, 1.15829e-10, 7.08296e-11, 4.29814e-11, 2.58859e-11, 1.54746e-11, 9.18326e-12, 5.41066e-12, 3.16537e-12, 1.8389e-12, 1.06093e-12, 6.07907e-13, 3.45962e-13, 1.95557e-13, 1.09794e-13, 6.12273e-14, 3.39131e-14, 1.86567e-14, 1.01938e-14, 5.53159e-15, 2.98099e-15, 1.5953e-15, 8.4776e-16, 4.47326e-16, 2.34351e-16}};
#endif

#elif defined(SEVENTEEN)
//HLT Path PileUP
#ifdef PUNOMI
double datpileup[nHLTmx][npileupmx] ={{1.2261e-05, 3.25983e-05, 9.35687e-05, 0.0001699, 0.000139256, 0.000180311, 0.000187726, 0.000187903, 0.000305346, 0.00106055, 0.00224675, 0.0041572, 0.0056444, 0.00624168, 0.00810533, 0.0122968, 0.019227, 0.0280904, 0.0373568, 0.0467056, 0.0556469, 0.0618341, 0.0629647, 0.0592638, 0.0532431, 0.0475882, 0.043455, 0.0406739, 0.0386113, 0.0367205, 0.0347792, 0.0327671, 0.0306462, 0.0283367, 0.02581, 0.0231219, 0.0203712, 0.0176587, 0.0150804, 0.0127326, 0.0107031, 0.00904938, 0.00778586, 0.00688539, 0.00628898, 0.00591491, 0.00566643, 0.00544368, 0.00516112, 0.00476436, 0.00424043, 0.00361885, 0.00295392, 0.00230621, 0.00172573, 0.00124209, 0.000863727, 0.000583162, 0.000384216, 0.000248216, 0.000157935, 9.93742e-05, 6.20605e-05, 3.86037e-05, 2.39999e-05, 1.49631e-05, 9.38534e-06, 5.93849e-06, 3.79797e-06, 2.45746e-06, 1.60848e-06, 1.06377e-06, 7.09552e-07, 4.76282e-07, 3.20995e-07, 2.1675e-07, 1.46363e-07, 9.86812e-08, 6.63442e-08, 4.443e-08, 2.96124e-08, 1.96278e-08, 1.29301e-08, 8.46096e-09, 5.49688e-09, 3.54407e-09, 2.26679e-09, 1.43778e-09, 9.0409e-10, 5.63447e-10, 3.47948e-10, 2.12864e-10, 1.28986e-10, 7.74034e-11, 4.59938e-11, 2.70587e-11, 1.57592e-11, 9.08545e-12, 5.18446e-12},
{9.4803e-06, 2.43905e-05, 6.70879e-05, 0.000127414, 0.000117507, 0.000162817, 0.000201244, 0.000203821, 0.000302931, 0.000881722, 0.00181937, 0.00337518, 0.00470357, 0.00543067, 0.00697829, 0.00975552, 0.0137474, 0.0185058, 0.0233242, 0.028136, 0.0331135, 0.0378768, 0.0418185, 0.0447997, 0.0471482, 0.0491591, 0.0507096, 0.0514705, 0.05121, 0.0498862, 0.0476408, 0.0446857, 0.0411886, 0.0372795, 0.0331211, 0.0289208, 0.0248784, 0.0211437, 0.0178131, 0.0149509, 0.0125983, 0.0107695, 0.00944514, 0.00857149, 0.00806291, 0.00780614, 0.00766833, 0.00751382, 0.00722893, 0.00674512, 0.0060521, 0.00519882, 0.00426791, 0.00334978, 0.00251928, 0.00182181, 0.00127217, 0.000861816, 0.000569053, 0.000367888, 0.00023384, 0.0001467, 9.11635e-05, 5.63139e-05, 3.4702e-05, 2.14091e-05, 1.32703e-05, 8.29051e-06, 5.23356e-06, 3.34337e-06, 2.16219e-06, 1.41444e-06, 9.34406e-07, 6.21997e-07, 4.16207e-07, 2.79319e-07, 1.87618e-07, 1.25915e-07, 8.43107e-08, 5.62583e-08, 3.73741e-08, 2.46996e-08, 1.62275e-08, 1.05924e-08, 6.866e-09, 4.41749e-09, 2.8199e-09, 1.78534e-09, 1.12072e-09, 6.97335e-10, 4.29974e-10, 2.62666e-10, 1.58944e-10, 9.52561e-11, 5.65307e-11, 3.32173e-11, 1.93235e-11, 1.11277e-11, 6.34289e-12},
{1.30648e-05, 3.37663e-05, 9.12109e-05, 0.000170794, 0.000133763, 0.000188243, 0.000206265, 0.000198962, 0.000349243, 0.00119873, 0.00263237, 0.00502284, 0.00704542, 0.00811181, 0.0102334, 0.0138368, 0.0187139, 0.0241071, 0.0288303, 0.0325694, 0.0358095, 0.0387399, 0.0410596, 0.042627, 0.0437118, 0.0446279, 0.0453181, 0.0454978, 0.0449377, 0.0435849, 0.0415752, 0.0390991, 0.0362649, 0.0331213, 0.0297665, 0.0263672, 0.0230922, 0.0200491, 0.0172941, 0.0148753, 0.0128537, 0.0112901, 0.010217, 0.00961726, 0.00941714, 0.00948889, 0.00966428, 0.00976155, 0.00962373, 0.0091542, 0.00833831, 0.00724787, 0.00600549, 0.00474767, 0.00359006, 0.00260609, 0.00182396, 0.00123648, 0.000815649, 0.000525855, 0.000332673, 0.000207274, 0.000127623, 7.79163e-05, 4.73332e-05, 2.87189e-05, 1.74725e-05, 1.07015e-05, 6.62187e-06, 4.15074e-06, 2.63935e-06, 1.7025e-06, 1.11256e-06, 7.3488e-07, 4.89303e-07, 3.2748e-07, 2.19741e-07, 1.47498e-07, 9.88584e-08, 6.60615e-08, 4.39621e-08, 2.91067e-08, 1.91581e-08, 1.25279e-08, 8.13458e-09, 5.2422e-09, 3.35148e-09, 2.12495e-09, 1.33571e-09, 8.32159e-10, 5.1372e-10, 3.14182e-10, 1.90323e-10, 1.14179e-10, 6.78275e-11, 3.9893e-11, 2.32281e-11, 1.3388e-11, 7.63778e-12},
{1.28126e-05, 3.34441e-05, 8.92851e-05, 0.000170918, 0.000137532, 0.000210186, 0.00023046, 0.000215237, 0.000375096, 0.00120188, 0.00258399, 0.0048825, 0.00662783, 0.00716984, 0.00856015, 0.0111956, 0.0148646, 0.0190208, 0.022816, 0.0261005, 0.0294923, 0.0332697, 0.0369061, 0.0399426, 0.0425614, 0.0450982, 0.0474048, 0.0489871, 0.0494621, 0.0487723, 0.0471259, 0.0447763, 0.041865, 0.0384599, 0.0346883, 0.0307604, 0.0268976, 0.023252, 0.0199101, 0.0169348, 0.0143851, 0.0123128, 0.0107426, 0.00965859, 0.00899747, 0.00864905, 0.00846704, 0.00829293, 0.00798951, 0.00747089, 0.00671881, 0.00578429, 0.00475809, 0.00374104, 0.00281748, 0.00203933, 0.00142442, 0.000964327, 0.000635579, 0.000409543, 0.000258998, 0.00016132, 9.92926e-05, 6.05896e-05, 3.67804e-05, 2.22931e-05, 1.35443e-05, 8.2809e-06, 5.11303e-06, 3.19702e-06, 2.02737e-06, 1.30401e-06, 8.49702e-07, 5.59682e-07, 3.71656e-07, 2.4812e-07, 1.66104e-07, 1.11257e-07, 7.44217e-08, 4.96423e-08, 3.29811e-08, 2.18032e-08, 1.4331e-08, 9.35941e-09, 6.07006e-09, 3.90752e-09, 2.49568e-09, 1.58087e-09, 9.92849e-10, 6.18053e-10, 3.81255e-10, 2.33001e-10, 1.41049e-10, 8.45636e-11, 5.02034e-11, 2.95098e-11, 1.71725e-11, 9.89228e-12, 5.64048e-12},
{1.40344e-05, 3.64128e-05, 9.89987e-05, 0.000182249, 0.000136458, 0.000175894, 0.000187971, 0.00018103, 0.000327709, 0.0012372, 0.00274328, 0.00521054, 0.0073317, 0.00851708, 0.010838, 0.0148209, 0.0202994, 0.0263458, 0.0314896, 0.035271, 0.0381437, 0.0403982, 0.0420175, 0.0430443, 0.0436453, 0.0439649, 0.0439474, 0.0434663, 0.0424258, 0.0407842, 0.0386302, 0.036122, 0.0333579, 0.0303821, 0.0272792, 0.0241946, 0.021273, 0.0186067, 0.0162464, 0.0142361, 0.0126261, 0.011458, 0.0107435, 0.0104501, 0.0104952, 0.010745, 0.0110258, 0.0111518, 0.010967, 0.0103857, 0.00941182, 0.00814097, 0.006718, 0.00529534, 0.00399742, 0.0029002, 0.00203045, 0.00137756, 0.000909539, 0.000586819, 0.000371421, 0.000231511, 0.000142654, 8.72417e-05, 5.31722e-05, 3.24355e-05, 1.98865e-05, 1.23009e-05, 7.69906e-06, 4.8844e-06, 3.14202e-06, 2.04746e-06, 1.34893e-06, 8.96297e-07, 5.99031e-07, 4.01697e-07, 2.69677e-07, 1.80921e-07, 1.21111e-07, 8.07983e-08, 5.36685e-08, 3.54637e-08, 2.32968e-08, 1.52054e-08, 9.85528e-09, 6.34024e-09, 4.04699e-09, 2.56206e-09, 1.60819e-09, 1.00059e-09, 6.16922e-10, 3.7685e-10, 2.28027e-10, 1.36651e-10, 8.10928e-11, 4.76477e-11, 2.77168e-11, 1.59604e-11, 9.09719e-12},
{1.50897e-05, 3.93997e-05, 0.00010682, 0.000196268, 0.000143931, 0.000183437, 0.000195187, 0.000185572, 0.000341132, 0.00131967, 0.00293127, 0.00555634, 0.00776068, 0.0088927, 0.0111914, 0.0152094, 0.0207495, 0.026851, 0.032001, 0.0357213, 0.0385119, 0.0407166, 0.042307, 0.0432853, 0.0437876, 0.0439548, 0.0437578, 0.0431164, 0.0419738, 0.040301, 0.0381741, 0.0357292, 0.0330441, 0.0301501, 0.0271253, 0.0241123, 0.0212519, 0.0186327, 0.0163021, 0.0143035, 0.0126882, 0.0114998, 0.0107508, 0.0104102, 0.0103979, 0.0105858, 0.0108087, 0.0108898, 0.0106804, 0.0100967, 0.00914045, 0.00790102, 0.00651628, 0.00513302, 0.00387185, 0.00280673, 0.00196362, 0.00133182, 0.000879676, 0.000568294, 0.000360544, 0.000225492, 0.000139532, 8.5738e-05, 5.2511e-05, 3.21793e-05, 1.98067e-05, 1.22881e-05, 7.70578e-06, 4.89312e-06, 3.14789e-06, 2.05028e-06, 1.34968e-06, 8.9595e-07, 5.98245e-07, 4.00832e-07, 2.68902e-07, 1.8029e-07, 1.20627e-07, 8.0441e-08, 5.34116e-08, 3.52827e-08, 2.31714e-08, 1.51199e-08, 9.79765e-09, 6.30189e-09, 4.02176e-09, 2.54565e-09, 1.59764e-09, 9.93873e-10, 6.12696e-10, 3.74219e-10, 2.26407e-10, 1.35664e-10, 8.04981e-11, 4.72931e-11, 2.75077e-11, 1.58384e-11, 9.02676e-12},
{1.3538e-05, 3.51595e-05, 9.54755e-05, 0.000176364, 0.00013294, 0.00017296, 0.000185989, 0.00018022, 0.000328806, 0.0012275, 0.00273387, 0.00520954, 0.00738149, 0.0086785, 0.011099, 0.0151369, 0.0206256, 0.0267004, 0.0319878, 0.0360219, 0.0391458, 0.0415667, 0.0432558, 0.0442686, 0.0447952, 0.0450095, 0.0448818, 0.0442959, 0.0431527, 0.0414022, 0.0391214, 0.0364629, 0.0335337, 0.0303975, 0.0271591, 0.023976, 0.0209928, 0.0182929, 0.0159137, 0.0138867, 0.0122515, 0.0110414, 0.0102615, 0.00987638, 0.00980622, 0.00992878, 0.0100896, 0.0101254, 0.00989974, 0.00933577, 0.00843501, 0.00727919, 0.00599442, 0.00471506, 0.00355142, 0.00257079, 0.00179617, 0.00121689, 0.000803132, 0.000518657, 0.000329085, 0.000205925, 0.000127535, 7.84492e-05, 4.80993e-05, 2.95043e-05, 1.81737e-05, 1.12801e-05, 7.07519e-06, 4.49287e-06, 2.89032e-06, 1.88256e-06, 1.23946e-06, 8.23038e-07, 5.49823e-07, 3.68617e-07, 2.47469e-07, 1.66052e-07, 1.11191e-07, 7.42096e-08, 4.93136e-08, 3.26007e-08, 2.14257e-08, 1.39903e-08, 9.07146e-09, 5.83827e-09, 3.72795e-09, 2.3609e-09, 1.4824e-09, 9.22599e-10, 5.68999e-10, 3.4767e-10, 2.10424e-10, 1.26133e-10, 7.48684e-11, 4.40002e-11, 2.56006e-11, 1.47448e-11, 8.40601e-12},
{8.21463e-06, 2.13834e-05, 5.97399e-05, 0.000113044, 9.91145e-05, 0.000143799, 0.000163109, 0.000174258, 0.000300787, 0.000951537, 0.00213666, 0.00412879, 0.00619767, 0.00798274, 0.0104905, 0.0141701, 0.0192486, 0.0251988, 0.0308561, 0.0356524, 0.0396484, 0.0428207, 0.0450378, 0.0464128, 0.0472937, 0.0479609, 0.0483734, 0.048296, 0.0474884, 0.045818, 0.0433431, 0.0402448, 0.0366963, 0.03284, 0.0288474, 0.0249247, 0.0212587, 0.0179685, 0.0151122, 0.0127183, 0.0108027, 0.00936726, 0.00838952, 0.00781723, 0.00756684, 0.007526, 0.00756181, 0.0075387, 0.00734445, 0.00691409, 0.00624294, 0.00538744, 0.0044382, 0.00349306, 0.00263292, 0.00190743, 0.00133378, 0.000904348, 0.000597316, 0.000386009, 0.000245065, 0.000153418, 9.50392e-05, 5.84592e-05, 3.58302e-05, 2.1962e-05, 1.35119e-05, 8.37307e-06, 5.24122e-06, 3.32051e-06, 2.13074e-06, 1.38421e-06, 9.09011e-07, 6.02127e-07, 4.01319e-07, 2.68484e-07, 1.79893e-07, 1.20492e-07, 8.05513e-08, 5.36795e-08, 3.56219e-08, 2.35194e-08, 1.54394e-08, 1.00707e-08, 6.52352e-09, 4.19465e-09, 2.67619e-09, 1.69351e-09, 1.06258e-09, 6.60873e-10, 4.07326e-10, 2.48736e-10, 1.50461e-10, 9.01409e-11, 5.34775e-11, 3.14134e-11, 1.82686e-11, 1.05172e-11, 5.9932e-12},
{4.24759e-06, 1.09596e-05, 3.12109e-05, 6.1272e-05, 6.43298e-05, 0.000106733, 0.000125148, 0.000138472, 0.000199589, 0.000507884, 0.00103917, 0.00198071, 0.00316141, 0.0045428, 0.00643408, 0.00907755, 0.0126714, 0.016877, 0.0210418, 0.0248802, 0.0282544, 0.0309868, 0.033079, 0.0347016, 0.0360907, 0.0374025, 0.0385229, 0.0392181, 0.0393333, 0.0388254, 0.0377583, 0.0362433, 0.0343571, 0.0321569, 0.0297518, 0.0273015, 0.0249464, 0.022769, 0.0208224, 0.0191734, 0.0179099, 0.0171132, 0.0168239, 0.0170182, 0.0175927, 0.0183597, 0.0190611, 0.0194126, 0.0191731, 0.0182099, 0.0165386, 0.0143293, 0.0118379, 0.00933643, 0.00704939, 0.00511515, 0.00358324, 0.00243512, 0.00161331, 0.00104688, 0.00066824, 0.000421236, 0.00026318, 0.000163541, 0.000101421, 6.2984e-05, 3.92956e-05, 2.47007e-05, 1.56773e-05, 1.00592e-05, 6.52612e-06, 4.27749e-06, 2.82796e-06, 1.88202e-06, 1.25805e-06, 8.42925e-07, 5.65057e-07, 3.78376e-07, 2.52763e-07, 1.68264e-07, 1.11524e-07, 7.35393e-08, 4.82121e-08, 3.14073e-08, 2.03198e-08, 1.30504e-08, 8.31695e-09, 5.25748e-09, 3.29549e-09, 2.0477e-09, 1.26095e-09, 7.69349e-10, 4.64998e-10, 2.78361e-10, 1.65016e-10, 9.68619e-11, 5.62905e-11, 3.2384e-11, 1.84417e-11},
{4.24759e-06, 1.09596e-05, 3.12109e-05, 6.1272e-05, 6.43298e-05, 0.000106733, 0.000125148, 0.000138472, 0.000199589, 0.000507884, 0.00103917, 0.00198071, 0.00316141, 0.0045428, 0.00643408, 0.00907755, 0.0126714, 0.016877, 0.0210418, 0.0248802, 0.0282544, 0.0309868, 0.033079, 0.0347016, 0.0360907, 0.0374025, 0.0385229, 0.0392181, 0.0393333, 0.0388254, 0.0377583, 0.0362433, 0.0343571, 0.0321569, 0.0297518, 0.0273015, 0.0249464, 0.022769, 0.0208224, 0.0191734, 0.0179099, 0.0171132, 0.0168239, 0.0170182, 0.0175927, 0.0183597, 0.0190611, 0.0194126, 0.0191731, 0.0182099, 0.0165386, 0.0143293, 0.0118379, 0.00933643, 0.00704939, 0.00511515, 0.00358324, 0.00243512, 0.00161331, 0.00104688, 0.00066824, 0.000421236, 0.00026318, 0.000163541, 0.000101421, 6.2984e-05, 3.92956e-05, 2.47007e-05, 1.56773e-05, 1.00592e-05, 6.52612e-06, 4.27749e-06, 2.82796e-06, 1.88202e-06, 1.25805e-06, 8.42925e-07, 5.65057e-07, 3.78376e-07, 2.52763e-07, 1.68264e-07, 1.11524e-07, 7.35393e-08, 4.82121e-08, 3.14073e-08, 2.03198e-08, 1.30504e-08, 8.31695e-09, 5.25748e-09, 3.29549e-09, 2.0477e-09, 1.26095e-09, 7.69349e-10, 4.64998e-10, 2.78361e-10, 1.65016e-10, 9.68619e-11, 5.62905e-11, 3.2384e-11, 1.84417e-11}};
//#endif

//Scale Down
//#ifdef PUDOWN
#elif defined(PUDOWN)
double datpileup[nHLTmx][npileupmx] ={{1.27971e-05, 3.73259e-05, 0.000125104, 0.000153774, 0.000158972, 0.000196566, 0.000191081, 0.000214163, 0.000537681, 0.00165756, 0.0032625, 0.00541376, 0.00625785, 0.00757769, 0.0112887, 0.0180738, 0.0274768, 0.037643, 0.0478978, 0.0578118, 0.0647473, 0.0659155, 0.0616245, 0.0549557, 0.0489776, 0.0447822, 0.0419905, 0.0398255, 0.037738, 0.0355741, 0.0333191, 0.030895, 0.0282253, 0.0253332, 0.0223233, 0.0193192, 0.0164379, 0.0137957, 0.0115022, 0.00963434, 0.00821593, 0.00721758, 0.006569, 0.00617105, 0.00590633, 0.00565551, 0.0053209, 0.00484688, 0.00423256, 0.00352513, 0.00279507, 0.00211211, 0.00152598, 0.00105905, 0.000709899, 0.000462285, 0.000294113, 0.000183777, 0.000113319, 6.92513e-05, 4.21146e-05, 2.55882e-05, 1.55934e-05, 9.56592e-06, 5.92583e-06, 3.7149e-06, 2.35897e-06, 1.51671e-06, 9.85904e-07, 6.46441e-07, 4.26438e-07, 2.82289e-07, 1.8708e-07, 1.23876e-07, 8.18206e-08, 5.38358e-08, 3.52486e-08, 2.29448e-08, 1.48378e-08, 9.52598e-09, 6.06818e-09, 3.83349e-09, 2.40061e-09, 1.48959e-09, 9.1554e-10, 5.5721e-10, 3.35717e-10, 2.00189e-10, 1.18121e-10, 6.89543e-11, 3.98176e-11, 2.2741e-11, 1.28445e-11, 7.17381e-12, 3.96161e-12, 2.16295e-12, 1.16747e-12, 6.22931e-13, 3.28552e-13},
{9.90119e-06, 2.77532e-05, 9.0269e-05, 0.000118194, 0.000132294, 0.000189324, 0.000207481, 0.000231412, 0.000483223, 0.00135054, 0.00264132, 0.00444251, 0.00536162, 0.00660808, 0.00922, 0.0132508, 0.0183578, 0.0236682, 0.0289421, 0.0343989, 0.0396475, 0.0439634, 0.047187, 0.0497208, 0.0518688, 0.0534198, 0.0539857, 0.053341, 0.0515082, 0.0487051, 0.0451745, 0.0410905, 0.0366219, 0.0319989, 0.0274739, 0.023252, 0.019468, 0.016208, 0.0135275, 0.0114497, 0.00995635, 0.00898537, 0.00843429, 0.00816577, 0.00801865, 0.00783118, 0.0074743, 0.0068795, 0.00605498, 0.00507569, 0.00404783, 0.0030754, 0.00223336, 0.00155722, 0.00104791, 0.000684287, 0.000435896, 0.000272208, 0.0001674, 0.000101805, 6.14763e-05, 3.70118e-05, 2.23081e-05, 1.35157e-05, 8.26133e-06, 5.10879e-06, 3.20129e-06, 2.03301e-06, 1.30695e-06, 8.48703e-07, 5.5525e-07, 3.6498e-07, 2.40434e-07, 1.58385e-07, 1.04145e-07, 6.82544e-08, 4.45317e-08, 2.88956e-08, 1.86322e-08, 1.19306e-08, 7.58161e-09, 4.77894e-09, 2.98651e-09, 1.84961e-09, 1.13478e-09, 6.89487e-10, 4.14757e-10, 2.4695e-10, 1.45505e-10, 8.48245e-11, 4.89179e-11, 2.79035e-11, 1.57413e-11, 8.78146e-12, 4.84394e-12, 2.6418e-12, 1.42443e-12, 7.59259e-13, 4.00058e-13},
{1.36482e-05, 3.83915e-05, 0.000122719, 0.000156065, 0.000149834, 0.000214936, 0.000202747, 0.000236956, 0.00060905, 0.00189697, 0.00389519, 0.0066417, 0.00802949, 0.00977072, 0.013223, 0.0182292, 0.0241365, 0.029518, 0.0337512, 0.0373409, 0.0405739, 0.0431107, 0.0447915, 0.0459548, 0.046936, 0.047603, 0.0476098, 0.0467266, 0.0449646, 0.0425318, 0.0396277, 0.0363377, 0.0327395, 0.0290017, 0.0253375, 0.0219065, 0.0187914, 0.0160494, 0.0137507, 0.0119704, 0.0107529, 0.0100822, 0.00987082, 0.00996323, 0.0101544, 0.0102266, 0.0100011, 0.00938094, 0.00837828, 0.00710343, 0.00571493, 0.00437109, 0.00318966, 0.00223092, 0.00150336, 0.00098131, 0.000623658, 0.000387747, 0.000236855, 0.000142716, 8.51526e-05, 5.05128e-05, 2.99191e-05, 1.77753e-05, 1.06409e-05, 6.44439e-06, 3.95995e-06, 2.47221e-06, 1.56748e-06, 1.00746e-06, 6.54533e-07, 4.28457e-07, 2.81697e-07, 1.85499e-07, 1.22058e-07, 8.01026e-08, 5.23522e-08, 3.40346e-08, 2.19884e-08, 1.41064e-08, 8.98058e-09, 5.67047e-09, 3.54937e-09, 2.20151e-09, 1.35259e-09, 8.22914e-10, 4.95637e-10, 2.95454e-10, 1.74279e-10, 1.01707e-10, 5.87137e-11, 3.35239e-11, 1.89297e-11, 1.05698e-11, 5.8355e-12, 3.18528e-12, 1.71887e-12, 9.16932e-13, 4.83508e-13},
{1.33833e-05, 3.7997e-05, 0.00012043, 0.000158368, 0.000153331, 0.000245872, 0.000219392, 0.000262036, 0.000628665, 0.001879, 0.00380674, 0.00636655, 0.0072861, 0.00830893, 0.0107871, 0.0145301, 0.0190544, 0.0233371, 0.0269968, 0.030692, 0.0348285, 0.0388129, 0.0421118, 0.044971, 0.0477427, 0.0501551, 0.051609, 0.0517342, 0.0505762, 0.0484329, 0.0455651, 0.0420875, 0.0381045, 0.0338297, 0.0295371, 0.0254451, 0.0216785, 0.0183175, 0.0154339, 0.0130925, 0.011328, 0.0101249, 0.00940796, 0.00904313, 0.00885198, 0.00864468, 0.00826469, 0.00762484, 0.00672714, 0.00565182, 0.00451631, 0.00343709, 0.0024991, 0.00174356, 0.00117299, 0.000764849, 0.000485775, 0.000301897, 0.000184354, 0.000111041, 6.62201e-05, 3.92524e-05, 2.32245e-05, 1.37777e-05, 8.23225e-06, 4.97417e-06, 3.04842e-06, 1.89763e-06, 1.19955e-06, 7.68674e-07, 4.97952e-07, 3.2507e-07, 2.13182e-07, 1.40054e-07, 9.19591e-08, 6.02318e-08, 3.92952e-08, 2.55045e-08, 1.64529e-08, 1.05408e-08, 6.70227e-09, 4.22707e-09, 2.6431e-09, 1.63779e-09, 1.00534e-09, 6.11129e-10, 3.67788e-10, 2.19079e-10, 1.29136e-10, 7.53116e-11, 4.34483e-11, 2.47925e-11, 1.39912e-11, 7.80779e-12, 4.30826e-12, 2.3504e-12, 1.26769e-12, 6.75916e-13, 3.56247e-13},
{1.4662e-05, 4.1421e-05, 0.000133133, 0.0001642, 0.000152809, 0.000195241, 0.000188269, 0.000211229, 0.000604685, 0.0019761, 0.0040471, 0.00689514, 0.00839947, 0.0103164, 0.0141106, 0.0197159, 0.0263539, 0.0322594, 0.0365972, 0.0398203, 0.0423209, 0.0440915, 0.0451865, 0.0458101, 0.046111, 0.0459961, 0.0453193, 0.0439756, 0.0419575, 0.0394176, 0.0365289, 0.0333701, 0.0300089, 0.0265917, 0.0233029, 0.0202788, 0.0175927, 0.0152968, 0.0134509, 0.0121083, 0.0112882, 0.0109555, 0.0110116, 0.0112939, 0.0115907, 0.01168, 0.0113861, 0.0106274, 0.00944071, 0.00796524, 0.00638388, 0.00487062, 0.00355011, 0.00248294, 0.00167434, 0.00109395, 0.000695835, 0.000432868, 0.000264529, 0.000159503, 9.53257e-05, 5.67355e-05, 3.37937e-05, 2.02419e-05, 1.22456e-05, 7.50665e-06, 4.6712e-06, 2.95106e-06, 1.89012e-06, 1.22433e-06, 7.99684e-07, 5.25096e-07, 3.45675e-07, 2.2761e-07, 1.49617e-07, 9.80334e-08, 6.39495e-08, 4.14895e-08, 2.67497e-08, 1.71266e-08, 1.08826e-08, 6.85905e-09, 4.28611e-09, 2.65428e-09, 1.62836e-09, 9.89319e-10, 5.95083e-10, 3.54297e-10, 2.08744e-10, 1.21684e-10, 7.01711e-11, 4.00247e-11, 2.25782e-11, 1.25949e-11, 6.94719e-12, 3.78872e-12, 2.04274e-12, 1.08879e-12, 5.73669e-13},
{1.57666e-05, 4.48165e-05, 0.000143718, 0.000176346, 0.000160672, 0.000203428, 0.000194711, 0.00021661, 0.000638342, 0.0021122, 0.00432088, 0.00732961, 0.00881981, 0.0106867, 0.0145028, 0.0201703, 0.0268742, 0.032799, 0.0370784, 0.0402109, 0.0426551, 0.0443937, 0.0454324, 0.0459407, 0.0460669, 0.0457553, 0.0449159, 0.0434835, 0.0414558, 0.0389644, 0.0361552, 0.033086, 0.0298128, 0.0264775, 0.0232606, 0.0202936, 0.0176452, 0.0153664, 0.0135177, 0.0121546, 0.0112978, 0.0109135, 0.0109064, 0.0111208, 0.0113553, 0.0113987, 0.011083, 0.010328, 0.00916623, 0.00772878, 0.00619055, 0.00471961, 0.00343705, 0.00240187, 0.00161883, 0.00105781, 0.000673557, 0.000419927, 0.000257475, 0.000155918, 9.36435e-05, 5.60198e-05, 3.35281e-05, 2.01647e-05, 1.22359e-05, 7.51472e-06, 4.67989e-06, 2.95633e-06, 1.8923e-06, 1.22461e-06, 7.99075e-07, 5.24204e-07, 3.44803e-07, 2.26878e-07, 1.4905e-07, 9.76144e-08, 6.36503e-08, 4.12811e-08, 2.66073e-08, 1.70309e-08, 1.08192e-08, 6.81765e-09, 4.25941e-09, 2.63727e-09, 1.61766e-09, 9.82663e-10, 5.90994e-10, 3.51815e-10, 2.07254e-10, 1.20801e-10, 6.96538e-11, 3.97251e-11, 2.24068e-11, 1.2498e-11, 6.89304e-12, 3.75883e-12, 2.02644e-12, 1.08e-12, 5.68988e-13},
{1.41438e-05, 3.99809e-05, 0.000128471, 0.000159141, 0.000148897, 0.000192653, 0.000186313, 0.000211544, 0.000602894, 0.00196266, 0.00404161, 0.00691352, 0.00851965, 0.010558, 0.0144298, 0.0200575, 0.0267127, 0.0327493, 0.0373535, 0.0408568, 0.043544, 0.0453901, 0.046465, 0.0470018, 0.0471847, 0.0469498, 0.0461591, 0.0447016, 0.0425583, 0.0398686, 0.0368055, 0.0334651, 0.0299403, 0.0263975, 0.0230271, 0.0199579, 0.017248, 0.0149343, 0.0130629, 0.0116766, 0.0107866, 0.0103538, 0.0102828, 0.0104253, 0.0105931, 0.0105915, 0.0102663, 0.00954382, 0.00845388, 0.0071163, 0.00569116, 0.00433228, 0.00315021, 0.00219823, 0.0014797, 0.000965973, 0.000614761, 0.000383262, 0.000235104, 0.000142494, 8.56746e-05, 5.13112e-05, 3.07413e-05, 1.85027e-05, 1.12326e-05, 6.89986e-06, 4.29706e-06, 2.71443e-06, 1.73755e-06, 1.12471e-06, 7.34172e-07, 4.819e-07, 3.17201e-07, 2.08883e-07, 1.37344e-07, 9.0026e-08, 5.87521e-08, 3.81355e-08, 2.45989e-08, 1.57568e-08, 1.00165e-08, 6.31583e-09, 3.94818e-09, 2.44589e-09, 1.50102e-09, 9.12241e-10, 5.48883e-10, 3.26882e-10, 1.92642e-10, 1.12326e-10, 6.47903e-11, 3.6964e-11, 2.08563e-11, 1.16369e-11, 6.42005e-12, 3.50194e-12, 1.88849e-12, 1.00676e-12, 5.30543e-13},
{8.58429e-06, 2.43262e-05, 8.03565e-05, 0.000104264, 0.000113364, 0.000163531, 0.000167473, 0.00020783, 0.000502785, 0.00151195, 0.00318468, 0.00560803, 0.00758685, 0.00995961, 0.0135514, 0.0187089, 0.0251281, 0.031471, 0.0368698, 0.0413305, 0.0448498, 0.0472735, 0.0487424, 0.0496777, 0.0503773, 0.0507409, 0.0504724, 0.0493041, 0.0471427, 0.0441261, 0.0404817, 0.0363963, 0.0320527, 0.0276854, 0.0235375, 0.0197848, 0.0165171, 0.0137755, 0.0115822, 0.00994263, 0.00883375, 0.00819501, 0.00792643, 0.00789174, 0.00792971, 0.00787883, 0.00761223, 0.00706625, 0.00625655, 0.00526746, 0.00421468, 0.00321058, 0.00233645, 0.00163177, 0.00109933, 0.000718251, 0.00045745, 0.000285375, 0.000175145, 0.000106184, 6.38441e-05, 3.82235e-05, 2.28825e-05, 1.37554e-05, 8.33611e-06, 5.10956e-06, 3.1742e-06, 1.99976e-06, 1.27659e-06, 8.24132e-07, 5.36612e-07, 3.51401e-07, 2.30807e-07, 1.51693e-07, 9.95627e-08, 6.51548e-08, 4.24576e-08, 2.75214e-08, 1.77303e-08, 1.13442e-08, 7.20398e-09, 4.53805e-09, 2.83435e-09, 1.75445e-09, 1.07588e-09, 6.53403e-10, 3.92885e-10, 2.33835e-10, 1.37726e-10, 8.02611e-11, 4.62706e-11, 2.63849e-11, 1.48799e-11, 8.29848e-12, 4.5762e-12, 2.49509e-12, 1.34496e-12, 7.16712e-13, 3.77544e-13},
{4.44953e-06, 1.24027e-05, 4.21673e-05, 5.77757e-05, 7.6623e-05, 0.000121611, 0.000132746, 0.000157362, 0.000299966, 0.000764843, 0.00152449, 0.00275763, 0.00413773, 0.00598121, 0.00858548, 0.0122475, 0.0167761, 0.0213937, 0.0256648, 0.0294213, 0.0324502, 0.0347427, 0.0365042, 0.0380189, 0.039441, 0.0405936, 0.0412056, 0.0411245, 0.0403392, 0.0389575, 0.0371038, 0.0348511, 0.0322927, 0.0296005, 0.0269623, 0.0245027, 0.0222914, 0.0204022, 0.018937, 0.0179974, 0.0176398, 0.0178414, 0.0184793, 0.0193247, 0.0200624, 0.0203521, 0.0199216, 0.0186466, 0.0165997, 0.0140269, 0.0112526, 0.00858867, 0.0062609, 0.0043803, 0.0029574, 0.00193782, 0.00123907, 0.000777091, 0.000480232, 0.00029368, 0.000178439, 0.000108145, 6.56334e-05, 4.00373e-05, 2.4629e-05, 1.5315e-05, 9.63889e-06, 6.13991e-06, 3.95376e-06, 2.56863e-06, 1.6795e-06, 1.10248e-06, 7.24885e-07, 4.76448e-07, 3.12529e-07, 2.04317e-07, 1.32978e-07, 8.60822e-08, 5.53816e-08, 3.53867e-08, 2.24426e-08, 1.412e-08, 8.80871e-09, 5.44653e-09, 3.3365e-09, 2.02433e-09, 1.21607e-09, 7.23129e-10, 4.25552e-10, 2.47792e-10, 1.4274e-10, 8.13328e-11, 4.58347e-11, 2.55436e-11, 1.40764e-11, 7.66975e-12, 4.13164e-12, 2.20031e-12, 1.15836e-12},
{4.44953e-06, 1.24027e-05, 4.21673e-05, 5.77757e-05, 7.6623e-05, 0.000121611, 0.000132746, 0.000157362, 0.000299966, 0.000764843, 0.00152449, 0.00275763, 0.00413773, 0.00598121, 0.00858548, 0.0122475, 0.0167761, 0.0213937, 0.0256648, 0.0294213, 0.0324502, 0.0347427, 0.0365042, 0.0380189, 0.039441, 0.0405936, 0.0412056, 0.0411245, 0.0403392, 0.0389575, 0.0371038, 0.0348511, 0.0322927, 0.0296005, 0.0269623, 0.0245027, 0.0222914, 0.0204022, 0.018937, 0.0179974, 0.0176398, 0.0178414, 0.0184793, 0.0193247, 0.0200624, 0.0203521, 0.0199216, 0.0186466, 0.0165997, 0.0140269, 0.0112526, 0.00858867, 0.0062609, 0.0043803, 0.0029574, 0.00193782, 0.00123907, 0.000777091, 0.000480232, 0.00029368, 0.000178439, 0.000108145, 6.56334e-05, 4.00373e-05, 2.4629e-05, 1.5315e-05, 9.63889e-06, 6.13991e-06, 3.95376e-06, 2.56863e-06, 1.6795e-06, 1.10248e-06, 7.24885e-07, 4.76448e-07, 3.12529e-07, 2.04317e-07, 1.32978e-07, 8.60822e-08, 5.53816e-08, 3.53867e-08, 2.24426e-08, 1.412e-08, 8.80871e-09, 5.44653e-09, 3.3365e-09, 2.02433e-09, 1.21607e-09, 7.23129e-10, 4.25552e-10, 2.47792e-10, 1.4274e-10, 8.13328e-11, 4.58347e-11, 2.55436e-11, 1.40764e-11, 7.66975e-12, 4.13164e-12, 2.20031e-12, 1.15836e-12}};
//#endif

//Scale Up
//#ifdef PUUP
#elif defined(PUUP)
double datpileup[nHLTmx][npileupmx] ={{1.18925e-05, 2.81629e-05, 7.27629e-05, 0.000178105, 0.000119669, 0.00016591, 0.000184168, 0.000172988, 0.000216189, 0.000609776, 0.00159999, 0.00294406, 0.00479999, 0.00561468, 0.00638555, 0.00874899, 0.0133037, 0.0202258, 0.028505, 0.0369784, 0.0455354, 0.0536264, 0.0591723, 0.060261, 0.0570574, 0.051621, 0.0462927, 0.0422423, 0.0394651, 0.0374631, 0.0357239, 0.0339732, 0.0321609, 0.0302764, 0.0282593, 0.0260551, 0.023674, 0.021184, 0.0186709, 0.0162172, 0.0139027, 0.0118079, 0.0100027, 0.00853015, 0.00739825, 0.00658214, 0.006032, 0.00567981, 0.00544523, 0.00524425, 0.00500226, 0.00466785, 0.00422085, 0.00367719, 0.00307735, 0.00247197, 0.00190813, 0.00141902, 0.0010203, 0.000712234, 0.00048482, 0.000323217, 0.000211912, 0.000137153, 8.79295e-05, 5.60181e-05, 3.55723e-05, 2.25834e-05, 1.4376e-05, 9.20177e-06, 5.93646e-06, 3.86703e-06, 2.54584e-06, 1.69393e-06, 1.13818e-06, 7.71138e-07, 5.25835e-07, 3.60158e-07, 2.47299e-07, 1.69935e-07, 1.16687e-07, 7.99645e-08, 5.46331e-08, 3.71814e-08, 2.51881e-08, 1.69745e-08, 1.13737e-08, 7.57368e-09, 5.0099e-09, 3.29085e-09, 2.14584e-09, 1.38857e-09, 8.91463e-10, 5.67675e-10, 3.58482e-10, 2.24453e-10, 1.39316e-10, 8.57109e-11, 5.22605e-11},
{9.18596e-06, 2.11954e-05, 5.19332e-05, 0.000131846, 0.000102048, 0.000141352, 0.000192141, 0.000188055, 0.000230153, 0.000531784, 0.00130108, 0.00238326, 0.00392664, 0.00476637, 0.0055897, 0.00738517, 0.0102588, 0.0141531, 0.018559, 0.0229483, 0.0273605, 0.0319177, 0.0362589, 0.0398729, 0.0426384, 0.0448229, 0.0467034, 0.0482242, 0.0491127, 0.049144, 0.0482364, 0.0464667, 0.0440065, 0.0410175, 0.0376148, 0.033914, 0.030072, 0.0262662, 0.0226507, 0.0193346, 0.0163888, 0.013862, 0.0117849, 0.0101652, 0.00898381, 0.00819384, 0.0077232, 0.00747767, 0.00734682, 0.00721635, 0.00698664, 0.0065919, 0.00601049, 0.00527118, 0.00443651, 0.00358234, 0.0027789, 0.00207628, 0.00149933, 0.00105052, 0.00071713, 0.000478895, 0.000314056, 0.000202977, 0.000129717, 8.22264e-05, 5.18592e-05, 3.26428e-05, 2.05713e-05, 1.30192e-05, 8.2981e-06, 5.33851e-06, 3.47164e-06, 2.28312e-06, 1.5177e-06, 1.01847e-06, 6.88683e-07, 4.6828e-07, 3.1953e-07, 2.18382e-07, 1.49247e-07, 1.01853e-07, 6.93307e-08, 4.70275e-08, 3.17624e-08, 2.13462e-08, 1.42669e-08, 9.47816e-09, 6.25621e-09, 4.1013e-09, 2.66932e-09, 1.7243e-09, 1.10519e-09, 7.02687e-10, 4.43091e-10, 2.77042e-10, 1.7173e-10, 1.05518e-10, 6.42592e-11},
{1.2656e-05, 2.93574e-05, 7.06733e-05, 0.000177668, 0.000118513, 0.000163981, 0.000206765, 0.000179312, 0.000245517, 0.000688755, 0.00183538, 0.00351368, 0.00586683, 0.00714223, 0.00831109, 0.0107314, 0.0143951, 0.0190795, 0.0239658, 0.0281259, 0.0314567, 0.0343977, 0.0370656, 0.0391948, 0.0406599, 0.0416761, 0.0425301, 0.0432196, 0.0435166, 0.0432044, 0.042192, 0.0405508, 0.0384426, 0.0359931, 0.0332529, 0.030274, 0.0271692, 0.024088, 0.0211561, 0.0184453, 0.0159965, 0.0138522, 0.0120649, 0.0106838, 0.0097323, 0.00919327, 0.00900399, 0.00905856, 0.00921783, 0.00932928, 0.00925582, 0.00890501, 0.00824594, 0.00732069, 0.00622162, 0.00506245, 0.00395048, 0.00296473, 0.0021473, 0.00150688, 0.00102876, 0.000685993, 0.000448458, 0.000288404, 0.000183028, 0.000114962, 7.16789e-05, 4.45004e-05, 2.75995e-05, 1.71596e-05, 1.07322e-05, 6.77345e-06, 4.32456e-06, 2.7971e-06, 1.83322e-06, 1.21639e-06, 8.15655e-07, 5.5146e-07, 3.74991e-07, 2.55856e-07, 1.74792e-07, 1.19351e-07, 8.13343e-08, 5.52525e-08, 3.73806e-08, 2.51663e-08, 1.68496e-08, 1.12131e-08, 7.4135e-09, 4.8675e-09, 3.17263e-09, 2.05224e-09, 1.31708e-09, 8.38433e-10, 5.29299e-10, 3.31306e-10, 2.05581e-10, 1.26444e-10, 7.70759e-11},
{1.24146e-05, 2.90817e-05, 6.90723e-05, 0.000176086, 0.000123338, 0.000176586, 0.000236803, 0.000190481, 0.000271985, 0.000703134, 0.00181512, 0.00343456, 0.00564543, 0.00656498, 0.00718128, 0.00886462, 0.0115735, 0.0151167, 0.0189066, 0.0222828, 0.0252559, 0.0283833, 0.031846, 0.0351779, 0.0379827, 0.0403935, 0.0427194, 0.0449015, 0.0465439, 0.0472765, 0.0469721, 0.0457538, 0.043844, 0.0414055, 0.0385074, 0.0352196, 0.0316853, 0.028095, 0.0246172, 0.0213574, 0.0183783, 0.0157309, 0.0134643, 0.0116197, 0.0102145, 0.00923308, 0.00862169, 0.00828901, 0.00811404, 0.00796383, 0.00771862, 0.00729678, 0.00666789, 0.00586037, 0.00494227, 0.00399785, 0.00310588, 0.00232322, 0.00167869, 0.0011761, 0.000802051, 0.000534447, 0.000349229, 0.000224518, 0.000142442, 8.94378e-05, 5.57366e-05, 3.45782e-05, 2.14244e-05, 1.33029e-05, 8.3062e-06, 5.23177e-06, 3.3325e-06, 2.14992e-06, 1.40525e-06, 9.29849e-07, 6.21822e-07, 4.19314e-07, 2.84429e-07, 1.9362e-07, 1.31993e-07, 8.99495e-08, 6.11869e-08, 4.14964e-08, 2.80309e-08, 1.88449e-08, 1.26008e-08, 8.37554e-09, 5.53129e-09, 3.62796e-09, 2.36244e-09, 1.52681e-09, 9.79057e-10, 6.22766e-10, 3.92861e-10, 2.45734e-10, 1.52381e-10, 9.36641e-11, 5.70602e-11},
{1.35952e-05, 3.16467e-05, 7.67198e-05, 0.000191347, 0.000120205, 0.000158866, 0.000185578, 0.000167133, 0.000219745, 0.000694407, 0.00191352, 0.00365094, 0.00608815, 0.00745739, 0.00875379, 0.0114011, 0.0154741, 0.0207453, 0.0262054, 0.0306989, 0.0340236, 0.0366009, 0.0386436, 0.0401299, 0.0410941, 0.0416726, 0.042001, 0.042053, 0.0417206, 0.0409181, 0.0395902, 0.0377743, 0.035597, 0.0331698, 0.0305398, 0.027752, 0.0249041, 0.0221262, 0.0195254, 0.017164, 0.0150796, 0.0133103, 0.0118983, 0.010876, 0.0102496, 0.0099895, 0.0100257, 0.0102473, 0.0105106, 0.0106592, 0.0105561, 0.0101159, 0.00932235, 0.00823637, 0.00697012, 0.00565284, 0.00440164, 0.00329983, 0.00238974, 0.00167792, 0.0011465, 0.000765147, 0.000500522, 0.000322022, 0.000204448, 0.000128521, 8.02729e-05, 4.99972e-05, 3.11692e-05, 1.95211e-05, 1.23233e-05, 7.86213e-06, 5.07765e-06, 3.32133e-06, 2.19897e-06, 1.47139e-06, 9.92958e-07, 6.74265e-07, 4.59669e-07, 3.13969e-07, 2.14484e-07, 1.4633e-07, 9.95844e-08, 6.75374e-08, 4.56084e-08, 3.0648e-08, 2.04817e-08, 1.36057e-08, 8.97991e-09, 5.88639e-09, 3.83088e-09, 2.47447e-09, 1.58591e-09, 1.00827e-09, 6.35748e-10, 3.9748e-10, 2.46373e-10, 1.51375e-10, 9.21808e-11},
{1.46161e-05, 3.42395e-05, 8.27648e-05, 0.00020638, 0.000127166, 0.000165947, 0.000193131, 0.000171907, 0.000226114, 0.000736001, 0.0020456, 0.00389809, 0.00647741, 0.00785288, 0.00909688, 0.0117452, 0.0158602, 0.0211898, 0.0266944, 0.0311834, 0.0344461, 0.0369492, 0.0389475, 0.0404078, 0.0413298, 0.0418233, 0.0420183, 0.0419076, 0.0414206, 0.0405077, 0.039131, 0.0373227, 0.0351926, 0.0328332, 0.0302778, 0.0275636, 0.024785, 0.0220694, 0.0195207, 0.017198, 0.0151367, 0.0133749, 0.011956, 0.0109136, 0.0102549, 0.00995142, 0.00993528, 0.0101004, 0.0103098, 0.010415, 0.0102853, 0.0098382, 0.00905593, 0.00799528, 0.00676237, 0.0054812, 0.00426505, 0.00319489, 0.00231195, 0.0016224, 0.00110847, 0.000740234, 0.000484962, 0.000312788, 0.000199262, 0.000125779, 7.89199e-05, 4.93839e-05, 3.09219e-05, 1.94393e-05, 1.23075e-05, 7.8674e-06, 5.08623e-06, 3.32769e-06, 2.20239e-06, 1.47262e-06, 9.92916e-07, 6.73628e-07, 4.58847e-07, 3.13174e-07, 2.13804e-07, 1.45788e-07, 9.91699e-08, 6.72301e-08, 4.53857e-08, 3.04894e-08, 2.03705e-08, 1.35287e-08, 8.92719e-09, 5.8507e-09, 3.80698e-09, 2.45863e-09, 1.57552e-09, 1.00152e-09, 6.31407e-10, 3.94715e-10, 2.4463e-10, 1.50287e-10, 9.15081e-11},
{1.31146e-05, 3.05655e-05, 7.39405e-05, 0.000185011, 0.000117146, 0.000155558, 0.000183615, 0.000165685, 0.000220779, 0.000690903, 0.00190108, 0.00364594, 0.00609929, 0.00754508, 0.00894679, 0.0116726, 0.0157824, 0.0210579, 0.0265595, 0.0312047, 0.0347672, 0.0375703, 0.0397622, 0.0413132, 0.0422682, 0.0427828, 0.0430171, 0.0429679, 0.0425386, 0.0416424, 0.040218, 0.0382933, 0.0359872, 0.0334133, 0.0306319, 0.0277058, 0.0247475, 0.0218927, 0.0192453, 0.0168583, 0.0147582, 0.0129729, 0.0115361, 0.0104733, 0.00978559, 0.00944114, 0.00937236, 0.00947779, 0.00962943, 0.00969, 0.00953943, 0.00910212, 0.0083617, 0.00737014, 0.00622443, 0.00503811, 0.00391483, 0.0029285, 0.00211635, 0.00148336, 0.0010125, 0.000675717, 0.000442594, 0.000285518, 0.000181994, 0.000114978, 7.2217e-05, 4.52366e-05, 2.83513e-05, 1.7836e-05, 1.12976e-05, 7.22347e-06, 4.67018e-06, 3.05542e-06, 2.0222e-06, 1.35227e-06, 9.11991e-07, 6.18972e-07, 4.21845e-07, 2.88107e-07, 1.96833e-07, 1.3432e-07, 9.14408e-08, 6.20388e-08, 4.19129e-08, 2.81769e-08, 1.88384e-08, 1.25192e-08, 8.26609e-09, 5.42049e-09, 3.5289e-09, 2.28016e-09, 1.46183e-09, 9.29656e-10, 5.86339e-10, 3.66683e-10, 2.2734e-10, 1.39714e-10, 8.50989e-11},
{7.95688e-06, 1.85901e-05, 4.61551e-05, 0.000117193, 8.57361e-05, 0.000125811, 0.0001589, 0.00015486, 0.000215005, 0.000559872, 0.00146532, 0.00287289, 0.00491261, 0.00659166, 0.0083847, 0.0110097, 0.0147414, 0.0196774, 0.0251508, 0.0302081, 0.0344956, 0.038095, 0.0409684, 0.0430039, 0.0442936, 0.0451261, 0.0457593, 0.0461955, 0.0462511, 0.0457162, 0.044444, 0.0424319, 0.0398093, 0.036734, 0.0333309, 0.0297255, 0.0260782, 0.0225622, 0.0193151, 0.016417, 0.0139063, 0.0118035, 0.0101202, 0.00885545, 0.00798808, 0.00747268, 0.00723889, 0.0071933, 0.00722542, 0.00722097, 0.0070813, 0.00674323, 0.00618938, 0.00545447, 0.00460767, 0.00373133, 0.00290128, 0.00217191, 0.0015708, 0.00110184, 0.000752654, 0.000502662, 0.000329453, 0.000212644, 0.000135596, 8.56829e-05, 5.38142e-05, 3.36971e-05, 2.11039e-05, 1.32618e-05, 8.38752e-06, 5.3527e-06, 3.45312e-06, 2.25378e-06, 1.48794e-06, 9.92543e-07, 6.67786e-07, 4.52204e-07, 3.0754e-07, 2.09631e-07, 1.42962e-07, 9.73974e-08, 6.62049e-08, 4.48547e-08, 3.02646e-08, 2.0322e-08, 1.3572e-08, 9.01032e-09, 5.94373e-09, 3.89425e-09, 2.53326e-09, 1.63562e-09, 1.04788e-09, 6.65975e-10, 4.19778e-10, 2.62369e-10, 1.62578e-10, 9.98617e-11, 6.0795e-11},
{4.11131e-06, 9.59546e-06, 2.39406e-05, 6.27654e-05, 5.38044e-05, 9.21552e-05, 0.000118942, 0.000125317, 0.000155545, 0.000322093, 0.000736164, 0.0013749, 0.00239761, 0.00351329, 0.00492984, 0.0068615, 0.0095278, 0.0130122, 0.0168947, 0.0206621, 0.0241282, 0.0271736, 0.0296505, 0.0315676, 0.0330675, 0.0343473, 0.0355576, 0.0366327, 0.0373755, 0.0376355, 0.0373508, 0.036549, 0.035319, 0.0337419, 0.0318642, 0.0297496, 0.0275148, 0.0252948, 0.0231892, 0.0212539, 0.0195333, 0.0180884, 0.0169941, 0.0163154, 0.0160813, 0.0162682, 0.0167882, 0.0174859, 0.0181484, 0.0185371, 0.01844, 0.0177249, 0.0163713, 0.0144897, 0.0122776, 0.0099648, 0.00776176, 0.00581946, 0.00421551, 0.00296253, 0.00202857, 0.00135915, 0.000894609, 0.000580601, 0.000372788, 0.000237546, 0.000150677, 9.54244e-05, 6.05157e-05, 3.85394e-05, 2.47094e-05, 1.59805e-05, 1.04376e-05, 6.8869e-06, 4.58792e-06, 3.082e-06, 2.08419e-06, 1.41616e-06, 9.6503e-07, 6.58387e-07, 4.49038e-07, 3.05772e-07, 2.07668e-07, 1.40547e-07, 9.47172e-08, 6.35215e-08, 4.237e-08, 2.80949e-08, 1.85114e-08, 1.21149e-08, 7.87253e-09, 5.07788e-09, 3.25011e-09, 2.06371e-09, 1.29968e-09, 8.11651e-10, 5.02543e-10, 3.08447e-10, 1.87642e-10},
{4.11131e-06, 9.59546e-06, 2.39406e-05, 6.27654e-05, 5.38044e-05, 9.21552e-05, 0.000118942, 0.000125317, 0.000155545, 0.000322093, 0.000736164, 0.0013749, 0.00239761, 0.00351329, 0.00492984, 0.0068615, 0.0095278, 0.0130122, 0.0168947, 0.0206621, 0.0241282, 0.0271736, 0.0296505, 0.0315676, 0.0330675, 0.0343473, 0.0355576, 0.0366327, 0.0373755, 0.0376355, 0.0373508, 0.036549, 0.035319, 0.0337419, 0.0318642, 0.0297496, 0.0275148, 0.0252948, 0.0231892, 0.0212539, 0.0195333, 0.0180884, 0.0169941, 0.0163154, 0.0160813, 0.0162682, 0.0167882, 0.0174859, 0.0181484, 0.0185371, 0.01844, 0.0177249, 0.0163713, 0.0144897, 0.0122776, 0.0099648, 0.00776176, 0.00581946, 0.00421551, 0.00296253, 0.00202857, 0.00135915, 0.000894609, 0.000580601, 0.000372788, 0.000237546, 0.000150677, 9.54244e-05, 6.05157e-05, 3.85394e-05, 2.47094e-05, 1.59805e-05, 1.04376e-05, 6.8869e-06, 4.58792e-06, 3.082e-06, 2.08419e-06, 1.41616e-06, 9.6503e-07, 6.58387e-07, 4.49038e-07, 3.05772e-07, 2.07668e-07, 1.40547e-07, 9.47172e-08, 6.35215e-08, 4.237e-08, 2.80949e-08, 1.85114e-08, 1.21149e-08, 7.87253e-09, 5.07788e-09, 3.25011e-09, 2.06371e-09, 1.29968e-09, 8.11651e-10, 5.02543e-10, 3.08447e-10, 1.87642e-10}};
#endif

#elif defined(EIGHTEEN)
//HLT Path PileUP
#ifdef PUNOMI
double datpileup[nHLTmx][npileupmx] ={{4.9141e-06, 1.48446e-05, 5.83036e-05, 0.000127145, 0.00022529, 0.000352083, 0.000520028, 0.000757589, 0.00107959, 0.00150703, 0.00210566, 0.00294371, 0.00407128, 0.00551591, 0.00729788, 0.00944161, 0.0119614, 0.0148388, 0.0179991, 0.0212943, 0.0245104, 0.0274148, 0.0298317, 0.0317045, 0.0331001, 0.0341588, 0.0350326, 0.0358391, 0.0366416, 0.0374516, 0.0382419, 0.0389615, 0.0395474, 0.039931, 0.0400399, 0.039801, 0.0391435, 0.0380086, 0.0363603, 0.0341972, 0.0315601, 0.0285324, 0.0252332, 0.0218043, 0.0183934, 0.0151386, 0.0121532, 0.00951722, 0.00727334, 0.00542899, 0.00396264, 0.00283278, 0.00198719, 0.00137101, 0.000932592, 0.00062709, 0.000417904, 0.00027666, 0.000182285, 0.000119682, 7.83424e-05, 5.11177e-05, 3.32216e-05, 2.1481e-05, 1.38015e-05, 8.80051e-06, 5.56359e-06, 3.48448e-06, 2.16097e-06, 1.32675e-06, 8.06395e-07, 4.85258e-07, 2.89158e-07, 1.70647e-07, 9.97466e-08, 5.77459e-08, 3.31053e-08, 1.87888e-08, 1.05523e-08, 5.86164e-09, 3.21861e-09, 1.74596e-09, 9.35084e-10, 4.94151e-10, 2.57525e-10, 1.32283e-10, 6.69432e-11, 3.33617e-11, 1.63669e-11, 7.90164e-12, 3.75302e-12, 1.75329e-12, 8.05488e-13, 3.63875e-13, 1.61639e-13, 7.06271e-14, 3.03815e-14, 1.28942e-14, 5.42623e-15},
{2.91652e-06, 9.21068e-06, 4.14068e-05, 8.93231e-05, 0.000156116, 0.00023948, 0.000355499, 0.000528295, 0.000750197, 0.00104391, 0.00147315, 0.00210637, 0.00300254, 0.00420357, 0.00573639, 0.00762387, 0.00986989, 0.0124314, 0.0152059, 0.018042, 0.0207669, 0.0232267, 0.0253349, 0.0270988, 0.028604, 0.0299681, 0.0312926, 0.0326323, 0.033987, 0.0353136, 0.0365453, 0.0376141, 0.0384634, 0.0390509, 0.0393442, 0.0393147, 0.0389343, 0.038176, 0.0370194, 0.0354575, 0.0335038, 0.0311962, 0.0285978, 0.025792, 0.0228754, 0.0199488, 0.0171067, 0.0144299, 0.0119796, 0.00979487, 0.00789287, 0.00627258, 0.00491908, 0.00380828, 0.00291123, 0.00219756, 0.00163781, 0.00120486, 0.000874633, 0.00062631, 0.000442289, 0.00030796, 0.00021141, 0.000143098, 9.55228e-05, 6.29073e-05, 4.08898e-05, 2.62468e-05, 1.66467e-05, 1.04377e-05, 6.47306e-06, 3.97189e-06, 2.41191e-06, 1.44953e-06, 8.62078e-07, 5.07238e-07, 2.95161e-07, 1.69778e-07, 9.64837e-08, 5.41416e-08, 2.99829e-08, 1.63774e-08, 8.81928e-09, 4.67989e-09, 2.44611e-09, 1.25891e-09, 6.3776e-10, 3.17936e-10, 1.55933e-10, 7.52244e-11, 3.56881e-11, 1.66479e-11, 7.6349e-12, 3.44192e-12, 1.52512e-12, 6.6416e-13, 2.84245e-13, 1.19559e-13, 4.94364e-14},
{3.71507e-06, 1.12802e-05, 4.60655e-05, 0.000102826, 0.000181047, 0.000281052, 0.000415389, 0.000609725, 0.000875784, 0.00123931, 0.00175952, 0.00249402, 0.00348873, 0.00477273, 0.00636341, 0.00827469, 0.0105071, 0.0130324, 0.015783, 0.0186561, 0.0215368, 0.0243407, 0.0270506, 0.0297146, 0.03239, 0.0350698, 0.0376519, 0.039969, 0.0418547, 0.0432025, 0.0439861, 0.0442431, 0.0440416, 0.0434454, 0.0424943, 0.0412008, 0.039558, 0.0375554, 0.0351936, 0.0324961, 0.0295157, 0.0263335, 0.0230516, 0.0197818, 0.0166324, 0.0136974, 0.0110485, 0.0087308, 0.0067628, 0.0051391, 0.00383555, 0.0028155, 0.00203594, 0.00145279, 0.00102474, 0.000715639, 0.000495487, 0.000340452, 0.000232277, 0.000157373, 0.000105854, 7.06438e-05, 4.67421e-05, 3.06378e-05, 1.98795e-05, 1.27612e-05, 8.10118e-06, 5.08495e-06, 3.15575e-06, 1.93667e-06, 1.17557e-06, 7.05991e-07, 4.19587e-07, 2.46832e-07, 1.43741e-07, 8.28597e-08, 4.72739e-08, 2.66866e-08, 1.49001e-08, 8.22445e-09, 4.48566e-09, 2.41609e-09, 1.28451e-09, 6.73707e-10, 3.48423e-10, 1.77602e-10, 8.91908e-11, 4.41127e-11, 2.14802e-11, 1.02948e-11, 4.85512e-12, 2.25261e-12, 1.02801e-12, 4.6141e-13, 2.03671e-13, 8.84246e-14, 3.77761e-14, 1.58994e-14, 6.61192e-15},
{3.68456e-06, 1.11895e-05, 4.5757e-05, 0.000102239, 0.000179977, 0.000279318, 0.000412975, 0.00060635, 0.000870933, 0.0012326, 0.00175054, 0.00248184, 0.00347194, 0.00475017, 0.0063343, 0.00823838, 0.0104632, 0.0129808, 0.0157245, 0.0185921, 0.0214697, 0.0242732, 0.0269849, 0.0296519, 0.0323302, 0.0350117, 0.0375937, 0.0399089, 0.0417915, 0.0431361, 0.0439175, 0.0441745, 0.0439761, 0.0433865, 0.0424456, 0.0411654, 0.0395381, 0.0375523, 0.0352076, 0.032527, 0.0295625, 0.0263949, 0.0231258, 0.0198664, 0.0167248, 0.0137948, 0.0111478, 0.00882904, 0.00685734, 0.00522776, 0.00391669, 0.00288808, 0.00209948, 0.00150728, 0.00107056, 0.000753437, 0.000526075, 0.000364737, 0.00025119, 0.000171818, 0.000116672, 7.85865e-05, 5.24592e-05, 3.46728e-05, 2.26726e-05, 1.46586e-05, 9.36684e-06, 5.91478e-06, 3.69109e-06, 2.27689e-06, 1.38884e-06, 8.3803e-07, 5.00416e-07, 2.95805e-07, 1.73131e-07, 1.00337e-07, 5.75736e-08, 3.27003e-08, 1.83773e-08, 1.0214e-08, 5.61124e-09, 3.04515e-09, 1.63149e-09, 8.62445e-10, 4.49581e-10, 2.30989e-10, 1.16917e-10, 5.82758e-11, 2.8593e-11, 1.38055e-11, 6.55752e-12, 3.0635e-12, 1.40733e-12, 6.35638e-13, 2.82239e-13, 1.23205e-13, 5.28892e-14, 2.23449e-14, 9.30968e-15},
{4.16227e-06, 1.26492e-05, 5.12861e-05, 0.000113672, 0.000199984, 0.000311768, 0.000461564, 0.000671666, 0.000950494, 0.00132267, 0.00185349, 0.00260614, 0.00363212, 0.00496999, 0.00665088, 0.00870471, 0.0111456, 0.0139477, 0.0170232, 0.0202146, 0.0233122, 0.0261053, 0.0284499, 0.0303151, 0.0317745, 0.0329543, 0.0339783, 0.0349347, 0.035865, 0.0367698, 0.0376213, 0.0383768, 0.0389882, 0.0394051, 0.0395728, 0.0394307, 0.0389151, 0.0379672, 0.0365448, 0.034636, 0.0322669, 0.0295039, 0.0264484, 0.0232254, 0.0199696, 0.0168103, 0.0138582, 0.0111958, 0.00887353, 0.00690986, 0.00529579, 0.00400239, 0.00298876, 0.00220929, 0.00161915, 0.00117788, 0.000851097, 0.00061091, 0.000435458, 0.000308022, 0.000216015, 0.000150048, 0.000103139, 7.01041e-05, 4.70937e-05, 3.12582e-05, 2.04991e-05, 1.32847e-05, 8.5106e-06, 5.392e-06, 3.38004e-06, 2.0973e-06, 1.28856e-06, 7.84033e-07, 4.72444e-07, 2.81888e-07, 1.6648e-07, 9.72735e-08, 5.61977e-08, 3.20811e-08, 1.80837e-08, 1.00586e-08, 5.5172e-09, 2.98239e-09, 1.58794e-09, 8.32361e-10, 4.29344e-10, 2.17845e-10, 1.08691e-10, 5.33111e-11, 2.56986e-11, 1.21725e-11, 5.66434e-12, 2.58913e-12, 1.16237e-12, 5.12499e-13, 2.21925e-13, 9.43964e-14, 3.94609e-14},
{4.32114e-06, 1.31063e-05, 5.28308e-05, 0.000117195, 0.000206232, 0.000321613, 0.000475511, 0.000691278, 0.000978437, 0.00136164, 0.00190675, 0.00267792, 0.0037269, 0.00509159, 0.00680331, 0.00889308, 0.0113764, 0.0142287, 0.0173628, 0.0206189, 0.0237816, 0.0266323, 0.0290193, 0.030907, 0.0323683, 0.0335311, 0.0345231, 0.0354373, 0.0363201, 0.0371764, 0.0379808, 0.0386906, 0.0392562, 0.0396243, 0.0397372, 0.0395326, 0.0389454, 0.0379171, 0.0364071, 0.0344059, 0.0319434, 0.0290907, 0.0259541, 0.022664, 0.0193587, 0.0161702, 0.0132099, 0.0105593, 0.00826641, 0.00634606, 0.00478534, 0.00355131, 0.00259936, 0.00188065, 0.00134783, 0.000958648, 0.00067764, 0.000476463, 0.000333321, 0.000231935, 0.000160405, 0.000110146, 7.50133e-05, 5.06136e-05, 3.38047e-05, 2.23357e-05, 1.45941e-05, 9.42918e-06, 6.02473e-06, 3.80792e-06, 2.38164e-06, 1.47455e-06, 9.0399e-07, 5.48865e-07, 3.30045e-07, 1.96527e-07, 1.15844e-07, 6.75658e-08, 3.89702e-08, 2.22132e-08, 1.25045e-08, 6.94712e-09, 3.80658e-09, 2.05584e-09, 1.09376e-09, 5.72943e-10, 2.95365e-10, 1.49793e-10, 7.47064e-11, 3.66294e-11, 1.7652e-11, 8.35901e-12, 3.88897e-12, 1.77733e-12, 7.97828e-13, 3.51755e-13, 1.52331e-13, 6.48171e-14, 2.71202e-14},
{4.19169e-06, 1.27362e-05, 5.15446e-05, 0.000114423, 0.000201303, 0.000313845, 0.000464638, 0.00067594, 0.000956243, 0.0013302, 0.00186317, 0.00261827, 0.00364676, 0.00498698, 0.00667003, 0.00872624, 0.0111706, 0.0139784, 0.0170633, 0.0202683, 0.0233838, 0.0261978, 0.0285644, 0.0304508, 0.0319296, 0.0331256, 0.0341624, 0.035128, 0.0360637, 0.0369698, 0.0378175, 0.0385634, 0.0391584, 0.0395517, 0.0396885, 0.0395096, 0.0389527, 0.037961, 0.0364948, 0.0345439, 0.0321365, 0.0293407, 0.0262592, 0.0230183, 0.0197531, 0.0165926, 0.0136464, 0.0109958, 0.00868977, 0.00674505, 0.00515145, 0.00387899, 0.00288588, 0.00212577, 0.00155324, 0.00112739, 0.000813627, 0.000584007, 0.000416802, 0.000295551, 0.000207998, 0.000145109, 0.000100238, 6.84936e-05, 4.62616e-05, 3.08709e-05, 2.03497e-05, 1.3252e-05, 8.52771e-06, 5.42483e-06, 3.41301e-06, 2.12458e-06, 1.30901e-06, 7.98441e-07, 4.82155e-07, 2.88216e-07, 1.70491e-07, 9.9757e-08, 5.77032e-08, 3.29761e-08, 1.8606e-08, 1.0358e-08, 5.68576e-09, 3.07562e-09, 1.6386e-09, 8.59403e-10, 4.43521e-10, 2.25144e-10, 1.12381e-10, 5.51424e-11, 2.6591e-11, 1.25993e-11, 5.86472e-12, 2.68146e-12, 1.20412e-12, 5.31029e-13, 2.29995e-13, 9.78459e-14, 4.0908e-14},
{4.21574e-06, 1.28044e-05, 5.16343e-05, 0.000114922, 0.000202201, 0.000315324, 0.000466798, 0.000678888, 0.000960422, 0.0013361, 0.00187126, 0.00262914, 0.00366115, 0.00500554, 0.00669335, 0.00875494, 0.0112054, 0.0140203, 0.0171128, 0.020326, 0.0234488, 0.0262683, 0.0286376, 0.0305236, 0.0319992, 0.0331902, 0.0342212, 0.0351812, 0.0361123, 0.0370149, 0.0378603, 0.0386043, 0.0391972, 0.0395873, 0.0397194, 0.0395338, 0.0389682, 0.0379659, 0.0364874, 0.034523, 0.0321016, 0.0292918, 0.0261974, 0.0229454, 0.0196716, 0.0165053, 0.0135567, 0.0109067, 0.00860406, 0.00666503, 0.00507878, 0.00381468, 0.00283037, 0.00207897, 0.00151466, 0.0010963, 0.000789107, 0.000565085, 0.000402515, 0.000284995, 0.000200369, 0.000139716, 9.65109e-05, 6.59748e-05, 4.4598e-05, 2.97971e-05, 1.96724e-05, 1.28345e-05, 8.27625e-06, 5.27683e-06, 3.32788e-06, 2.07673e-06, 1.28273e-06, 7.84336e-07, 4.74761e-07, 2.84432e-07, 1.68603e-07, 9.88403e-08, 5.72712e-08, 3.27793e-08, 1.852e-08, 1.03224e-08, 5.67209e-09, 3.07101e-09, 1.63744e-09, 8.59383e-10, 4.43778e-10, 2.25394e-10, 1.12558e-10, 5.52521e-11, 2.66537e-11, 1.26332e-11, 5.8822e-12, 2.69016e-12, 1.20832e-12, 5.32996e-13, 2.30892e-13, 9.82452e-14, 4.10817e-14},
{4.23582e-06, 1.27419e-05, 4.87821e-05, 0.0001146, 0.00020332, 0.000316777, 0.000468207, 0.0006817, 0.000965199, 0.00134297, 0.0018812, 0.00264482, 0.00368603, 0.00504283, 0.00674643, 0.00882759, 0.0113012, 0.0141415, 0.0172603, 0.020498, 0.0236419, 0.0264772, 0.0288559, 0.0307449, 0.0322169, 0.0333986, 0.0344151, 0.0353564, 0.0362658, 0.0371453, 0.037967, 0.0386873, 0.0392563, 0.039622, 0.0397286, 0.0395167, 0.0389246, 0.0378965, 0.0363942, 0.0344088, 0.0319694, 0.0291451, 0.0260394, 0.0227792, 0.0195, 0.0163311, 0.0133825, 0.0107353, 0.00843794, 0.00650661, 0.00493018, 0.00367765, 0.00270617, 0.00196839, 0.00141798, 0.0010133, 0.000719177, 0.000507265, 0.000355606, 0.000247655, 0.000171204, 0.000117357, 7.9681e-05, 5.35312e-05, 3.55554e-05, 2.33345e-05, 1.51271e-05, 9.68631e-06, 6.12762e-06, 3.83099e-06, 2.3682e-06, 1.44821e-06, 8.76498e-07, 5.25208e-07, 3.11648e-07, 1.83132e-07, 1.06554e-07, 6.13677e-08, 3.49685e-08, 1.97031e-08, 1.09708e-08, 6.03257e-09, 3.27372e-09, 1.75218e-09, 9.244e-10, 4.80451e-10, 2.45886e-10, 1.23859e-10, 6.13859e-11, 2.99233e-11, 1.43425e-11, 6.75791e-12, 3.12953e-12, 1.42414e-12, 6.3677e-13, 2.79736e-13, 1.20751e-13, 5.12358e-14, 2.13916e-14},
{4.23582e-06, 1.27419e-05, 4.87821e-05, 0.0001146, 0.00020332, 0.000316777, 0.000468207, 0.0006817, 0.000965199, 0.00134297, 0.0018812, 0.00264482, 0.00368603, 0.00504283, 0.00674643, 0.00882759, 0.0113012, 0.0141415, 0.0172603, 0.020498, 0.0236419, 0.0264772, 0.0288559, 0.0307449, 0.0322169, 0.0333986, 0.0344151, 0.0353564, 0.0362658, 0.0371453, 0.037967, 0.0386873, 0.0392563, 0.039622, 0.0397286, 0.0395167, 0.0389246, 0.0378965, 0.0363942, 0.0344088, 0.0319694, 0.0291451, 0.0260394, 0.0227792, 0.0195, 0.0163311, 0.0133825, 0.0107353, 0.00843794, 0.00650661, 0.00493018, 0.00367765, 0.00270617, 0.00196839, 0.00141798, 0.0010133, 0.000719177, 0.000507265, 0.000355606, 0.000247655, 0.000171204, 0.000117357, 7.9681e-05, 5.35312e-05, 3.55554e-05, 2.33345e-05, 1.51271e-05, 9.68631e-06, 6.12762e-06, 3.83099e-06, 2.3682e-06, 1.44821e-06, 8.76498e-07, 5.25208e-07, 3.11648e-07, 1.83132e-07, 1.06554e-07, 6.13677e-08, 3.49685e-08, 1.97031e-08, 1.09708e-08, 6.03257e-09, 3.27372e-09, 1.75218e-09, 9.244e-10, 4.80451e-10, 2.45886e-10, 1.23859e-10, 6.13859e-11, 2.99233e-11, 1.43425e-11, 6.75791e-12, 3.12953e-12, 1.42414e-12, 6.3677e-13, 2.79736e-13, 1.20751e-13, 5.12358e-14, 2.13916e-14}};
//#endif

//Scale Down
//#ifdef PUDOWN
#elif defined(PUDOWN)
double datpileup[nHLTmx][npileupmx] ={{5.30758e-06, 1.72856e-05, 6.90864e-05, 0.000148283, 0.000262835, 0.000410395, 0.000614464, 0.000906162, 0.00129941, 0.00184104, 0.00261813, 0.00370275, 0.00514101, 0.00695793, 0.00918181, 0.0118362, 0.0149122, 0.0183371, 0.0219485, 0.0254974, 0.028703, 0.0313505, 0.0333738, 0.0348598, 0.035982, 0.0369191, 0.0378005, 0.0386857, 0.039573, 0.0404176, 0.0411511, 0.0416939, 0.0419607, 0.0418633, 0.0413143, 0.0402362, 0.0385756, 0.0363188, 0.0335038, 0.030223, 0.0266153, 0.0228504, 0.0191064, 0.0155491, 0.0123125, 0.00948758, 0.00711854, 0.00520596, 0.0037165, 0.00259496, 0.0017763, 0.00119526, 0.000792956, 0.000520221, 0.000338464, 0.000218908, 0.000140985, 9.04923e-05, 5.78846e-05, 3.68721e-05, 2.33602e-05, 1.46985e-05, 9.17221e-06, 5.66983e-06, 3.46885e-06, 2.09938e-06, 1.25657e-06, 7.43841e-07, 4.3554e-07, 2.52299e-07, 1.44613e-07, 8.20212e-08, 4.60287e-08, 2.55507e-08, 1.40239e-08, 7.60667e-09, 4.07476e-09, 2.15425e-09, 1.12323e-09, 5.77197e-10, 2.9213e-10, 1.45534e-10, 7.1326e-11, 3.43731e-11, 1.62812e-11, 7.57694e-12, 3.46337e-12, 1.55449e-12, 6.84983e-13, 2.96302e-13, 1.25834e-13, 5.24924e-14, 2.15407e-14, 8.72697e-15, 3.52084e-15, 1.44245e-15, 6.2456e-16, 3.04772e-16, 1.78169e-16},
{3.1511e-06, 1.08533e-05, 4.92898e-05, 0.000103687, 0.000181694, 0.000278229, 0.000423536, 0.000632158, 0.000900785, 0.00127886, 0.00185065, 0.00269286, 0.00386764, 0.00541286, 0.00735821, 0.00971884, 0.0124608, 0.0154766, 0.0185927, 0.0216021, 0.0243161, 0.0266272, 0.0285453, 0.030177, 0.0316639, 0.0331206, 0.0345995, 0.0360856, 0.0375155, 0.0388059, 0.0398791, 0.0406748, 0.0411486, 0.0412646, 0.0409889, 0.0402878, 0.0391337, 0.0375131, 0.0354365, 0.0329446, 0.0301099, 0.0270317, 0.0238261, 0.0206146, 0.0175102, 0.0146076, 0.0119765, 0.00965793, 0.00766638, 0.00599483, 0.00462067, 0.00351193, 0.00263247, 0.00194594, 0.00141823, 0.00101874, 0.000720972, 0.000502534, 0.000344902, 0.000233058, 0.000155058, 0.000101599, 6.55865e-05, 4.17352e-05, 2.61948e-05, 1.62269e-05, 9.92713e-06, 6.00079e-06, 3.58552e-06, 2.11808e-06, 1.23702e-06, 7.14134e-07, 4.07374e-07, 2.29513e-07, 1.27634e-07, 7.00167e-08, 3.78643e-08, 2.01735e-08, 1.05827e-08, 5.46317e-09, 2.77405e-09, 1.38491e-09, 6.79523e-10, 3.27584e-10, 1.55116e-10, 7.21272e-11, 3.29275e-11, 1.47556e-11, 6.4896e-12, 2.80081e-12, 1.18605e-12, 4.92758e-13, 2.00851e-13, 8.03303e-14, 3.15397e-14, 1.21729e-14, 4.63435e-15, 1.75558e-15, 6.75669e-16},
{4.01179e-06, 1.31671e-05, 5.48631e-05, 0.000119867, 0.000210874, 0.000327326, 0.000491931, 0.000731151, 0.00105934, 0.00152533, 0.00220398, 0.00315774, 0.0044322, 0.00605241, 0.00803703, 0.0103937, 0.0130993, 0.0160836, 0.0192289, 0.0223969, 0.0254814, 0.0284583, 0.0313854, 0.0343276, 0.0372643, 0.0400562, 0.042496, 0.044397, 0.0456598, 0.0462829, 0.0463312, 0.0458881, 0.045018, 0.0437504, 0.0420849, 0.0400086, 0.0375163, 0.0346284, 0.0314009, 0.027926, 0.0243247, 0.0207312, 0.0172763, 0.0140729, 0.0112051, 0.00872337, 0.00664488, 0.00495766, 0.00362792, 0.00260833, 0.00184595, 0.00128852, 0.00088883, 0.000606941, 0.000410824, 0.000275874, 0.000183843, 0.000121555, 7.96945e-05, 5.17667e-05, 3.3284e-05, 2.11647e-05, 1.33009e-05, 8.25731e-06, 5.06282e-06, 3.0658e-06, 1.83387e-06, 1.08389e-06, 6.33198e-07, 3.6572e-07, 2.08881e-07, 1.17981e-07, 6.58944e-08, 3.63828e-08, 1.98513e-08, 1.06981e-08, 5.69117e-09, 2.98683e-09, 1.54548e-09, 7.87953e-10, 3.95617e-10, 1.95506e-10, 9.50497e-11, 4.54427e-11, 2.13569e-11, 9.86349e-12, 4.47526e-12, 1.99432e-12, 8.72728e-13, 3.74985e-13, 1.58196e-13, 6.55425e-14, 2.66893e-14, 1.07037e-14, 4.24929e-15, 1.69024e-15, 6.9208e-16, 3.07276e-16, 1.58936e-16},
{3.97882e-06, 1.30625e-05, 5.45047e-05, 0.000119188, 0.000209606, 0.000325324, 0.000489134, 0.000727113, 0.00105349, 0.00151728, 0.00219303, 0.00314247, 0.00441106, 0.00602436, 0.00800129, 0.0103497, 0.0130468, 0.0160232, 0.0191624, 0.0223268, 0.0254107, 0.0283896, 0.0313199, 0.0342653, 0.0372035, 0.0399948, 0.0424321, 0.0443295, 0.0455892, 0.0462107, 0.0462604, 0.0458226, 0.0449619, 0.0437076, 0.0420584, 0.0400002, 0.0375268, 0.0346575, 0.0314476, 0.027989, 0.0244019, 0.0208199, 0.0173735, 0.0141753, 0.0113092, 0.00882579, 0.00674266, 0.00504844, 0.00371002, 0.00268077, 0.00190839, 0.00134118, 0.000932294, 0.000642068, 0.000438624, 0.000297417, 0.000200185, 0.000133687, 8.85081e-05, 5.80313e-05, 3.76415e-05, 2.41316e-05, 1.52795e-05, 9.55086e-06, 5.89265e-06, 3.58883e-06, 2.15821e-06, 1.28207e-06, 7.52683e-07, 4.36897e-07, 2.50817e-07, 1.42436e-07, 8.00144e-08, 4.44542e-08, 2.44171e-08, 1.32522e-08, 7.1028e-09, 3.75685e-09, 1.95962e-09, 1.00734e-09, 5.0998e-10, 2.54124e-10, 1.24572e-10, 6.00427e-11, 2.84437e-11, 1.32383e-11, 6.05147e-12, 2.71613e-12, 1.19675e-12, 5.17547e-13, 2.19662e-13, 9.151e-14, 3.74374e-14, 1.50618e-14, 5.98021e-15, 2.36351e-15, 9.48442e-16, 4.02747e-16, 1.93626e-16},
{4.49573e-06, 1.47565e-05, 6.09972e-05, 0.000132465, 0.000233102, 0.000363463, 0.000545717, 0.000801444, 0.00114165, 0.00161714, 0.00231089, 0.00329129, 0.00461302, 0.00631558, 0.00843639, 0.0110012, 0.0139945, 0.017329, 0.0208292, 0.0242487, 0.0273315, 0.0299005, 0.0319202, 0.0334843, 0.0347465, 0.0358509, 0.0368926, 0.037908, 0.0388861, 0.0397854, 0.040551, 0.0411237, 0.0414404, 0.0414311, 0.0410199, 0.0401321, 0.0387093, 0.0367264, 0.0342045, 0.0312157, 0.0278778, 0.0243402, 0.0207649, 0.0173075, 0.0140992, 0.0112349, 0.00876888, 0.00671561, 0.005057, 0.00375273, 0.00275056, 0.00199523, 0.0014347, 0.00102373, 0.000725187, 0.000509878, 0.000355584, 0.000245722, 0.000168068, 0.000113658, 7.59279e-05, 5.00747e-05, 3.25917e-05, 2.09338e-05, 1.3272e-05, 8.30893e-06, 5.13916e-06, 3.14202e-06, 1.89976e-06, 1.13633e-06, 6.72494e-07, 3.93748e-07, 2.28018e-07, 1.30537e-07, 7.3831e-08, 4.12257e-08, 2.27083e-08, 1.23294e-08, 6.59346e-09, 3.47045e-09, 1.79671e-09, 9.14395e-10, 4.57229e-10, 2.24534e-10, 1.08245e-10, 5.12123e-11, 2.37713e-11, 1.08229e-11, 4.83231e-12, 2.11554e-12, 9.08011e-13, 3.82069e-13, 1.57618e-13, 6.37716e-14, 2.53289e-14, 9.8998e-15, 3.8305e-15, 1.48854e-15, 6.00017e-16},
{4.66726e-06, 1.52818e-05, 6.28263e-05, 0.00013659, 0.0002404, 0.000374874, 0.000561934, 0.00082485, 0.00117532, 0.00166438, 0.00237596, 0.00337939, 0.00472887, 0.00646357, 0.00862191, 0.0112312, 0.0142777, 0.0176749, 0.0212457, 0.0247369, 0.0278833, 0.0304986, 0.0325418, 0.0341055, 0.0353462, 0.0364126, 0.0374059, 0.0383684, 0.0392935, 0.0401418, 0.0408575, 0.0413786, 0.0416384, 0.0415641, 0.0410778, 0.0401046, 0.0385875, 0.0365039, 0.0338792, 0.0307911, 0.0273634, 0.0237516, 0.0201226, 0.0166348, 0.0134202, 0.0105725, 0.00814235, 0.00614, 0.00454255, 0.00330485, 0.0023704, 0.00168037, 0.00118009, 0.000822594, 0.000569869, 0.000392585, 0.000268909, 0.00018301, 0.000123611, 8.27564e-05, 5.48492e-05, 3.59515e-05, 2.32874e-05, 1.49007e-05, 9.41737e-06, 5.8797e-06, 3.62766e-06, 2.2127e-06, 1.33479e-06, 7.96596e-07, 4.70388e-07, 2.74819e-07, 1.58817e-07, 9.07436e-08, 5.12318e-08, 2.85601e-08, 1.57087e-08, 8.51803e-09, 4.55011e-09, 2.39262e-09, 1.23767e-09, 6.29438e-10, 3.14551e-10, 1.5439e-10, 7.43979e-11, 3.51859e-11, 1.63274e-11, 7.43183e-12, 3.31756e-12, 1.45217e-12, 6.23224e-13, 2.62237e-13, 1.08203e-13, 4.38042e-14, 1.74246e-14, 6.8355e-15, 2.66812e-15, 1.05798e-15, 4.45108e-16},
{4.52751e-06, 1.48516e-05, 6.1324e-05, 0.000133342, 0.000234638, 0.000365895, 0.00054931, 0.00080645, 0.00114839, 0.00162601, 0.00232231, 0.00330548, 0.00462987, 0.00633488, 0.00845814, 0.0110263, 0.0140252, 0.0173692, 0.0208838, 0.0243226, 0.0274282, 0.0300213, 0.0320644, 0.0336493, 0.0349288, 0.0360465, 0.0370972, 0.0381172, 0.0390948, 0.0399875, 0.0407394, 0.0412902, 0.0415765, 0.0415293, 0.0410742, 0.040139, 0.0386678, 0.0366381, 0.0340732, 0.0310476, 0.0276807, 0.0241232, 0.0205378, 0.0170796, 0.0138787, 0.0110283, 0.00858087, 0.00654898, 0.00491314, 0.0036318, 0.00265174, 0.00191687, 0.00137451, 0.000979035, 0.000693156, 0.00048777, 0.000340917, 0.000236393, 0.0001624, 0.000110386, 7.41496e-05, 4.918e-05, 3.21896e-05, 2.07874e-05, 1.32459e-05, 8.33111e-06, 5.17445e-06, 3.17536e-06, 1.92618e-06, 1.1554e-06, 6.85456e-07, 4.02185e-07, 2.33328e-07, 1.33787e-07, 7.57721e-08, 4.23599e-08, 2.33574e-08, 1.26936e-08, 6.7938e-09, 3.57853e-09, 1.85389e-09, 9.44063e-10, 4.72319e-10, 2.32058e-10, 1.11923e-10, 5.29738e-11, 2.45981e-11, 1.12031e-11, 5.00363e-12, 2.19116e-12, 9.40706e-13, 3.95917e-13, 1.63363e-13, 6.61066e-14, 2.62587e-14, 1.02627e-14, 3.9695e-15, 1.54094e-15, 6.19608e-16},
{4.55347e-06, 1.4919e-05, 6.14649e-05, 0.000133926, 0.000235696, 0.000367632, 0.000551806, 0.000809945, 0.00115346, 0.00163318, 0.00233217, 0.00331882, 0.00464753, 0.00635751, 0.00848646, 0.0110611, 0.0140675, 0.0174198, 0.0209433, 0.0243903, 0.027502, 0.0300981, 0.0321405, 0.0337217, 0.0349955, 0.0361067, 0.0371515, 0.0381668, 0.0391411, 0.0400316, 0.0407813, 0.0413293, 0.0416113, 0.0415576, 0.0410937, 0.0401474, 0.0386632, 0.0366189, 0.0340387, 0.0309977, 0.0276165, 0.0240467, 0.0204519, 0.0169878, 0.0137845, 0.0109354, 0.00849229, 0.00646719, 0.00483985, 0.00356794, 0.00259756, 0.00187206, 0.00133835, 0.000950559, 0.000671257, 0.000471327, 0.000328861, 0.000227765, 0.000156373, 0.000106279, 7.14192e-05, 4.74098e-05, 3.10704e-05, 2.00976e-05, 1.28314e-05, 8.08822e-06, 5.0357e-06, 3.09808e-06, 1.88421e-06, 1.13318e-06, 6.73987e-07, 3.96418e-07, 2.30505e-07, 1.32444e-07, 7.51533e-08, 4.20846e-08, 2.32399e-08, 1.26461e-08, 6.776e-09, 3.57264e-09, 1.8524e-09, 9.43995e-10, 4.72586e-10, 2.32318e-10, 1.12103e-10, 5.30816e-11, 2.46575e-11, 1.12339e-11, 5.0189e-12, 2.19844e-12, 9.4406e-13, 3.97416e-13, 1.64014e-13, 6.6382e-14, 2.63725e-14, 1.03088e-14, 3.98792e-15, 1.54834e-15, 6.22698e-16},
{4.57501e-06, 1.47575e-05, 5.84829e-05, 0.00013398, 0.000237023, 0.000369101, 0.00055357, 0.000813641, 0.00115933, 0.00164164, 0.00234522, 0.00334019, 0.00468107, 0.00640696, 0.00855605, 0.011155, 0.014189, 0.0175701, 0.021121, 0.0245915, 0.0277208, 0.0303272, 0.0323723, 0.0339489, 0.0352114, 0.0363057, 0.037329, 0.0383199, 0.0392685, 0.0401329, 0.0408566, 0.0413782, 0.0416327, 0.0415504, 0.0410573, 0.0400824, 0.0385713, 0.0365031, 0.0339027, 0.0308453, 0.0274514, 0.0238725, 0.0202719, 0.0168051, 0.0136022, 0.0107566, 0.00831992, 0.00630393, 0.00468802, 0.00342939, 0.00247353, 0.00176319, 0.0012447, 0.00087161, 0.000606064, 0.000418601, 0.000287102, 0.000195372, 0.000131758, 8.7948e-05, 5.80351e-05, 3.78218e-05, 2.43268e-05, 1.54371e-05, 9.66429e-06, 5.97034e-06, 3.64118e-06, 2.1935e-06, 1.30597e-06, 7.68859e-07, 4.47751e-07, 2.57974e-07, 1.47043e-07, 8.28947e-08, 4.61982e-08, 2.54377e-08, 1.38287e-08, 7.41661e-09, 3.92124e-09, 2.04227e-09, 1.04707e-09, 5.28126e-10, 2.61909e-10, 1.27643e-10, 6.11069e-11, 2.87253e-11, 1.32549e-11, 6.0022e-12, 2.66663e-12, 1.16214e-12, 4.96754e-13, 2.08263e-13, 8.56567e-14, 3.4585e-14, 1.37337e-14, 5.38826e-15, 2.1118e-15, 8.47873e-16, 3.66718e-16},
{4.57501e-06, 1.47575e-05, 5.84829e-05, 0.00013398, 0.000237023, 0.000369101, 0.00055357, 0.000813641, 0.00115933, 0.00164164, 0.00234522, 0.00334019, 0.00468107, 0.00640696, 0.00855605, 0.011155, 0.014189, 0.0175701, 0.021121, 0.0245915, 0.0277208, 0.0303272, 0.0323723, 0.0339489, 0.0352114, 0.0363057, 0.037329, 0.0383199, 0.0392685, 0.0401329, 0.0408566, 0.0413782, 0.0416327, 0.0415504, 0.0410573, 0.0400824, 0.0385713, 0.0365031, 0.0339027, 0.0308453, 0.0274514, 0.0238725, 0.0202719, 0.0168051, 0.0136022, 0.0107566, 0.00831992, 0.00630393, 0.00468802, 0.00342939, 0.00247353, 0.00176319, 0.0012447, 0.00087161, 0.000606064, 0.000418601, 0.000287102, 0.000195372, 0.000131758, 8.7948e-05, 5.80351e-05, 3.78218e-05, 2.43268e-05, 1.54371e-05, 9.66429e-06, 5.97034e-06, 3.64118e-06, 2.1935e-06, 1.30597e-06, 7.68859e-07, 4.47751e-07, 2.57974e-07, 1.47043e-07, 8.28947e-08, 4.61982e-08, 2.54377e-08, 1.38287e-08, 7.41661e-09, 3.92124e-09, 2.04227e-09, 1.04707e-09, 5.28126e-10, 2.61909e-10, 1.27643e-10, 6.11069e-11, 2.87253e-11, 1.32549e-11, 6.0022e-12, 2.66663e-12, 1.16214e-12, 4.96754e-13, 2.08263e-13, 8.56567e-14, 3.4585e-14, 1.37337e-14, 5.38826e-15, 2.1118e-15, 8.47873e-16, 3.66718e-16}};
//#endif

//Scale Up
//#ifdef PUUP
#elif defined(PUUP)
double datpileup[nHLTmx][npileupmx] ={{4.57248e-06, 1.29912e-05, 4.92698e-05, 0.000109813, 0.000194237, 0.000304759, 0.000445322, 0.00064038, 0.000906992, 0.00125397, 0.00172314, 0.00237616, 0.00326233, 0.00441481, 0.00585104, 0.00758968, 0.00965038, 0.0120393, 0.0147315, 0.0176524, 0.0206681, 0.0235947, 0.0262379, 0.0284528, 0.030191, 0.0315038, 0.0325058, 0.0333257, 0.0340696, 0.034801, 0.0355406, 0.0362744, 0.0369653, 0.037564, 0.0380147, 0.0382584, 0.038234, 0.0378806, 0.0371416, 0.0359729, 0.0343517, 0.0322847, 0.0298134, 0.0270124, 0.0239842, 0.0208482, 0.017728, 0.0147393, 0.0119786, 0.00951621, 0.00739252, 0.00561922, 0.00418344, 0.00305437, 0.00219043, 0.00154584, 0.00107582, 0.000739989, 0.000504225, 0.000341101, 0.000229524, 0.000153847, 0.000102812, 6.85196e-05, 4.55266e-05, 3.01351e-05, 1.98516e-05, 1.30003e-05, 8.45449e-06, 5.4552e-06, 3.49004e-06, 2.21288e-06, 1.39026e-06, 8.65422e-07, 5.33807e-07, 3.26306e-07, 1.97703e-07, 1.18737e-07, 7.06897e-08, 4.17137e-08, 2.43931e-08, 1.41314e-08, 8.10704e-09, 4.60353e-09, 2.58613e-09, 1.43651e-09, 7.88564e-10, 4.27574e-10, 2.28887e-10, 1.20913e-10, 6.30071e-11, 3.23751e-11, 1.63983e-11, 8.18511e-12, 4.02516e-12, 1.94976e-12, 9.30139e-13, 4.36954e-13, 2.02134e-13},
{2.71321e-06, 7.9862e-06, 3.47292e-05, 7.75849e-05, 0.000134765, 0.000208415, 0.000302509, 0.000444885, 0.000631994, 0.0008687, 0.00119772, 0.00167882, 0.00236456, 0.00329932, 0.0045107, 0.00601983, 0.00784313, 0.00997479, 0.0123665, 0.0149228, 0.017512, 0.019989, 0.0222277, 0.024158, 0.0257853, 0.027179, 0.0284374, 0.0296492, 0.0308691, 0.0321069, 0.0333345, 0.0345003, 0.0355456, 0.0364185, 0.0370785, 0.0374952, 0.0376437, 0.0375004, 0.0370418, 0.0362466, 0.0351001, 0.0336002, 0.0317618, 0.0296201, 0.0272297, 0.0246614, 0.0219962, 0.0193184, 0.0167077, 0.0142331, 0.0119485, 0.00989042, 0.00807727, 0.00651222, 0.0051861, 0.00408117, 0.00317452, 0.00244096, 0.0018553, 0.00139369, 0.00103444, 0.000758431, 0.000549127, 0.000392536, 0.000276996, 0.000192948, 0.000132683, 9.00916e-05, 6.04205e-05, 4.00395e-05, 2.623e-05, 1.69952e-05, 1.08962e-05, 6.91566e-06, 4.34653e-06, 2.70584e-06, 1.66859e-06, 1.01921e-06, 6.16556e-07, 3.69275e-07, 2.18893e-07, 1.28359e-07, 7.44267e-08, 4.26506e-08, 2.41439e-08, 1.34951e-08, 7.44459e-09, 4.0517e-09, 2.17475e-09, 1.15087e-09, 6.00292e-10, 3.08545e-10, 1.56243e-10, 7.79337e-11, 3.82847e-11, 1.85198e-11, 8.82063e-12, 4.13588e-12, 1.90896e-12},
{3.45746e-06, 9.85209e-06, 3.8728e-05, 8.87766e-05, 0.000156328, 0.000243598, 0.000355233, 0.000514123, 0.000733221, 0.00102462, 0.00142938, 0.00199986, 0.00277874, 0.00379874, 0.00507818, 0.00663058, 0.00846536, 0.0105773, 0.0129351, 0.0154753, 0.0181082, 0.0207383, 0.0232982, 0.0257755, 0.0282105, 0.0306536, 0.0331068, 0.0354952, 0.0376849, 0.0395306, 0.0409259, 0.0418278, 0.0422516, 0.042248, 0.0418752, 0.0411777, 0.0401778, 0.0388778, 0.0372691, 0.0353444, 0.0331086, 0.030587, 0.0278288, 0.0249049, 0.0219022, 0.0189142, 0.0160315, 0.0133331, 0.0108802, 0.00871319, 0.0068507, 0.00529189, 0.00401983, 0.00300629, 0.00221648, 0.00161343, 0.00116131, 0.00082773, 0.000584983, 0.000410362, 0.000285936, 0.00019797, 0.00013619, 9.30602e-05, 6.31263e-05, 4.24805e-05, 2.83399e-05, 1.8731e-05, 1.2259e-05, 7.9421e-06, 5.09238e-06, 3.2315e-06, 2.0297e-06, 1.26209e-06, 7.77102e-07, 4.73917e-07, 2.86315e-07, 1.71378e-07, 1.01635e-07, 5.97127e-08, 3.47488e-08, 2.00233e-08, 1.14207e-08, 6.44503e-09, 3.59695e-09, 1.98435e-09, 1.08162e-09, 5.82244e-10, 3.09409e-10, 1.62252e-10, 8.39305e-11, 4.28143e-11, 2.15314e-11, 1.06724e-11, 5.21268e-12, 2.50834e-12, 1.18896e-12, 5.55079e-13, 2.55221e-13},
{3.42908e-06, 9.77225e-06, 3.84626e-05, 8.82628e-05, 0.00015542, 0.000242094, 0.000353122, 0.000511253, 0.000729167, 0.00101898, 0.00142187, 0.00198991, 0.00276529, 0.00378055, 0.00505442, 0.00660062, 0.00842866, 0.0105336, 0.0128844, 0.0154185, 0.0180467, 0.0206742, 0.0232337, 0.0257125, 0.0281504, 0.0305962, 0.0330511, 0.0354397, 0.037628, 0.039471, 0.0408634, 0.0417629, 0.0421857, 0.0421836, 0.0418152, 0.0411253, 0.040136, 0.038849, 0.0372549, 0.0353457, 0.0331256, 0.0306193, 0.0278755, 0.0249647, 0.0219735, 0.0189951, 0.0161196, 0.0134258, 0.0109751, 0.00880749, 0.00694207, 0.00537831, 0.00409975, 0.00307864, 0.00228068, 0.00166931, 0.00120907, 0.00086783, 0.000618067, 0.000437185, 0.000307307, 0.000214698, 0.000149052, 0.000102773, 7.03296e-05, 4.77266e-05, 3.20926e-05, 2.13683e-05, 1.40809e-05, 9.17986e-06, 5.92013e-06, 3.77686e-06, 2.38406e-06, 1.48942e-06, 9.21258e-07, 5.64365e-07, 3.42519e-07, 2.05992e-07, 1.22772e-07, 7.25144e-08, 4.24378e-08, 2.46016e-08, 1.41219e-08, 8.02314e-09, 4.50918e-09, 2.50568e-09, 1.37595e-09, 7.46283e-10, 3.99598e-10, 2.11139e-10, 1.10043e-10, 5.65525e-11, 2.86477e-11, 1.43007e-11, 7.033e-12, 3.40681e-12, 1.62516e-12, 7.63353e-13, 3.53012e-13},
{3.87281e-06, 1.10547e-05, 4.31768e-05, 9.8181e-05, 0.000172625, 0.00026993, 0.000394857, 0.000568585, 0.000800637, 0.00110107, 0.00151387, 0.00209708, 0.00289734, 0.0039534, 0.00529307, 0.00694244, 0.00892426, 0.011243, 0.0138655, 0.0167064, 0.0196251, 0.0224427, 0.0249847, 0.0271328, 0.0288602, 0.0302253, 0.031332, 0.0322866, 0.0331699, 0.0340253, 0.0348618, 0.0356621, 0.0363939, 0.037018, 0.0374934, 0.0377764, 0.0378191, 0.0375692, 0.0369737, 0.0359869, 0.0345795, 0.0327487, 0.030523, 0.0279627, 0.0251555, 0.0222069, 0.0192296, 0.016332, 0.013608, 0.0111296, 0.00894283, 0.00706845, 0.00550381, 0.00422874, 0.00321157, 0.00241498, 0.00180073, 0.00133303, 0.000980485, 0.000716817, 0.00052085, 0.000375982, 0.000269446, 0.000191543, 0.000134953, 9.41635e-05, 6.50272e-05, 4.44256e-05, 3.00192e-05, 2.00623e-05, 1.32632e-05, 8.676e-06, 5.61774e-06, 3.60204e-06, 2.28796e-06, 1.44011e-06, 8.98406e-07, 5.55531e-07, 3.40455e-07, 2.06739e-07, 1.24347e-07, 7.40439e-08, 4.36265e-08, 2.54192e-08, 1.46374e-08, 8.32529e-09, 4.67439e-09, 2.58949e-09, 1.41468e-09, 7.61857e-10, 4.0429e-10, 2.11336e-10, 1.08789e-10, 5.51338e-11, 2.75028e-11, 1.35014e-11, 6.52163e-12, 3.09919e-12, 1.4488e-12},
{4.02067e-06, 1.14588e-05, 4.44894e-05, 0.000101201, 0.000178016, 0.000278453, 0.000406999, 0.000585265, 0.000824071, 0.00113358, 0.00155802, 0.00215618, 0.00297536, 0.00405399, 0.0054195, 0.00709851, 0.00911478, 0.0114739, 0.014144, 0.0170397, 0.0200179, 0.0228949, 0.0254892, 0.0276763, 0.0294254, 0.030794, 0.0318874, 0.032815, 0.0336614, 0.0344742, 0.0352663, 0.0360229, 0.0367124, 0.0372951, 0.0377276, 0.0379638, 0.0379536, 0.0376435, 0.0369799, 0.0359175, 0.0344287, 0.032513, 0.030202, 0.0275604, 0.0246798, 0.0216701, 0.0186472, 0.0157217, 0.0129881, 0.0105177, 0.00835488, 0.00651733, 0.00499923, 0.00377703, 0.00281585, 0.00207548, 0.00151533, 0.00109784, 0.000790399, 0.000566083, 0.000403527, 0.000286314, 0.000202121, 0.00014186, 9.88972e-05, 6.84164e-05, 4.69241e-05, 3.18837e-05, 2.1451e-05, 1.42856e-05, 9.41645e-06, 6.14398e-06, 3.96904e-06, 2.53936e-06, 1.60956e-06, 1.01099e-06, 6.29412e-07, 3.88413e-07, 2.37571e-07, 1.43992e-07, 8.64521e-08, 5.13938e-08, 3.0235e-08, 1.75923e-08, 1.01179e-08, 5.74842e-09, 3.22446e-09, 1.78477e-09, 9.74341e-10, 5.24389e-10, 2.78125e-10, 1.45318e-10, 7.47752e-11, 3.78829e-11, 1.8892e-11, 9.272e-12, 4.47776e-12, 2.12755e-12, 9.94453e-13},
{3.9002e-06, 1.11313e-05, 4.33834e-05, 9.88269e-05, 0.000173765, 0.00027172, 0.000397502, 0.000572265, 0.000805575, 0.00110751, 0.00152212, 0.00210747, 0.00291003, 0.00396833, 0.00531007, 0.00696142, 0.0089456, 0.0112678, 0.0138962, 0.0167463, 0.019678, 0.0225122, 0.0250733, 0.0272415, 0.0289885, 0.0303715, 0.0314934, 0.0324604, 0.0333528, 0.0342142, 0.035053, 0.0358517, 0.0365769, 0.037189, 0.0376461, 0.0379044, 0.0379165, 0.0376311, 0.0369969, 0.0359699, 0.0345226, 0.0326539, 0.0303938, 0.0278042, 0.0249737, 0.022009, 0.0190229, 0.0161237, 0.0134044, 0.010936, 0.00876345, 0.00690589, 0.00535968, 0.00410371, 0.00310553, 0.00232716, 0.00172981, 0.00127726, 0.000937836, 0.000685151, 0.000498052, 0.000360092, 0.000258743, 0.000184592, 0.000130613, 9.15729e-05, 6.35602e-05, 4.36488e-05, 2.96457e-05, 1.99108e-05, 1.32245e-05, 8.68819e-06, 5.64789e-06, 3.63429e-06, 2.31579e-06, 1.46172e-06, 9.14141e-07, 5.66481e-07, 3.4782e-07, 2.11558e-07, 1.27428e-07, 7.59749e-08, 4.48142e-08, 2.61371e-08, 1.5064e-08, 8.57474e-09, 4.81789e-09, 2.67071e-09, 1.45991e-09, 7.86637e-10, 4.17645e-10, 2.18414e-10, 1.12479e-10, 5.70254e-11, 2.84563e-11, 1.3974e-11, 6.75187e-12, 3.20946e-12, 1.50072e-12},
{3.92258e-06, 1.11922e-05, 4.34397e-05, 9.92556e-05, 0.000174535, 0.000272984, 0.00039938, 0.000574802, 0.000809069, 0.00111241, 0.00152883, 0.00211643, 0.00292184, 0.00398364, 0.0053294, 0.00698528, 0.00897457, 0.0113026, 0.0139375, 0.0167948, 0.0197338, 0.0225747, 0.0251408, 0.0273115, 0.0290583, 0.0304386, 0.0315561, 0.0325178, 0.033405, 0.0342618, 0.0350972, 0.0358934, 0.0366168, 0.0372272, 0.0376819, 0.0379367, 0.0379437, 0.0376516, 0.0370088, 0.0359716, 0.0345128, 0.0326316, 0.0303586, 0.0277563, 0.0249141, 0.0219393, 0.0189452, 0.0160406, 0.0133188, 0.0108505, 0.00868057, 0.00682776, 0.00528789, 0.00403933, 0.00304911, 0.00227879, 0.00168919, 0.00124385, 0.000910911, 0.000663876, 0.000481571, 0.000347576, 0.000249426, 0.000177794, 0.000125755, 8.817e-05, 6.12259e-05, 4.20807e-05, 2.86141e-05, 1.92463e-05, 1.28054e-05, 8.42941e-06, 5.49143e-06, 3.54167e-06, 2.26209e-06, 1.43124e-06, 8.97203e-07, 5.57267e-07, 3.42915e-07, 2.09006e-07, 1.26132e-07, 7.53328e-08, 4.45052e-08, 2.59933e-08, 1.49998e-08, 8.54753e-09, 4.80723e-09, 2.66705e-09, 1.45899e-09, 7.86654e-10, 4.17893e-10, 2.18655e-10, 1.12653e-10, 5.71365e-11, 2.85219e-11, 1.40106e-11, 6.77153e-12, 3.21965e-12, 1.50584e-12},
{3.94136e-06, 1.1172e-05, 4.08305e-05, 9.85521e-05, 0.000175443, 0.000274384, 0.000400649, 0.0005769, 0.000812937, 0.00111811, 0.00153676, 0.00212823, 0.00294038, 0.00401187, 0.00537011, 0.00704158, 0.00904977, 0.0113996, 0.0140581, 0.0169392, 0.0199005, 0.0227603, 0.0253406, 0.0275201, 0.0292698, 0.0306474, 0.0317571, 0.0327064, 0.0335773, 0.034415, 0.0352295, 0.0360042, 0.0367059, 0.0372946, 0.0377273, 0.0379594, 0.0379427, 0.0376263, 0.0369594, 0.0358991, 0.034419, 0.0325191, 0.0302303, 0.027615, 0.0247627, 0.0217804, 0.0187813, 0.0158742, 0.0131522, 0.010686, 0.00852044, 0.00667415, 0.00514273, 0.00390426, 0.00292539, 0.00216727, 0.00159032, 0.00115764, 0.000837002, 0.000601587, 0.000429977, 0.000305576, 0.000215825, 0.000151372, 0.000105329, 7.26406e-05, 4.96099e-05, 3.35279e-05, 2.24119e-05, 1.4814e-05, 9.68215e-06, 6.25809e-06, 4.00141e-06, 2.53197e-06, 1.58624e-06, 9.84294e-07, 6.05167e-07, 3.68741e-07, 2.22692e-07, 1.33289e-07, 7.90505e-08, 4.6439e-08, 2.70107e-08, 1.55466e-08, 8.84994e-09, 4.97962e-09, 2.76793e-09, 1.51908e-09, 8.2272e-10, 4.39507e-10, 2.31494e-10, 1.20174e-10, 6.14658e-11, 3.09659e-11, 1.53621e-11, 7.5031e-12, 3.6072e-12, 1.70677e-12, 7.94695e-13},
{3.94136e-06, 1.1172e-05, 4.08305e-05, 9.85521e-05, 0.000175443, 0.000274384, 0.000400649, 0.0005769, 0.000812937, 0.00111811, 0.00153676, 0.00212823, 0.00294038, 0.00401187, 0.00537011, 0.00704158, 0.00904977, 0.0113996, 0.0140581, 0.0169392, 0.0199005, 0.0227603, 0.0253406, 0.0275201, 0.0292698, 0.0306474, 0.0317571, 0.0327064, 0.0335773, 0.034415, 0.0352295, 0.0360042, 0.0367059, 0.0372946, 0.0377273, 0.0379594, 0.0379427, 0.0376263, 0.0369594, 0.0358991, 0.034419, 0.0325191, 0.0302303, 0.027615, 0.0247627, 0.0217804, 0.0187813, 0.0158742, 0.0131522, 0.010686, 0.00852044, 0.00667415, 0.00514273, 0.00390426, 0.00292539, 0.00216727, 0.00159032, 0.00115764, 0.000837002, 0.000601587, 0.000429977, 0.000305576, 0.000215825, 0.000151372, 0.000105329, 7.26406e-05, 4.96099e-05, 3.35279e-05, 2.24119e-05, 1.4814e-05, 9.68215e-06, 6.25809e-06, 4.00141e-06, 2.53197e-06, 1.58624e-06, 9.84294e-07, 6.05167e-07, 3.68741e-07, 2.22692e-07, 1.33289e-07, 7.90505e-08, 4.6439e-08, 2.70107e-08, 1.55466e-08, 8.84994e-09, 4.97962e-09, 2.76793e-09, 1.51908e-09, 8.2272e-10, 4.39507e-10, 2.31494e-10, 1.20174e-10, 6.14658e-11, 3.09659e-11, 1.53621e-11, 7.5031e-12, 3.6072e-12, 1.70677e-12, 7.94695e-13}};
#endif

#endif

/*
Change form 26 as for 2015 data
See JEC for 2017 94X
*/

static const int nsrc = 27;
const char* srcnames[nsrc] = {"AbsoluteStat", "AbsoluteScale", "AbsoluteMPFBias", "Fragmentation", "SinglePionECAL", "SinglePionHCAL", "FlavorQCD", "TimePtEta", "RelativeJEREC1", "RelativeJEREC2", "RelativeJERHF","RelativePtBB", "RelativePtEC1", "RelativePtEC2","RelativePtHF","RelativeBal", "RelativeSample", "RelativeFSR", "RelativeStatFSR", "RelativeStatEC", "RelativeStatHF", "PileUpDataMC", "PileUpPtRef", "PileUpPtBB", "PileUpPtEC1", "PileUpPtEC2", "PileUpPtHF"};

#ifdef SIXTEEN
double intlumi[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1};
double lumiwt[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1};
#elif defined(SEVENTEEN)
double intlumi[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1,1};
double lumiwt[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1,1};
#elif defined(EIGHTEEN)
double intlumi[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1,1};
double lumiwt[nHLTmx]={1., 1, 1, 1, 1, 1,1,1,1,1};
#endif

//unsigned int l1trg[4], hlttr[8], tetrg[2];
unsigned int mypow_2[32];

//std::ofstream myfile;
//myfile.open("txt.log");

//const bool m_trigeff = true;
//const int njetptmn=nHLTmx; // 8; //10
const int njetptmn=ngenPT; //5
const int njetptbin=120;

/*
Trigger Turn-on points fixed
using 2017 UL JetHT sample
*/

#ifdef DIJETAVE

#ifdef SIXTEEN
const char* jethlt_name[nHLTmx]={"HLT_PFJet60_v","HLT_PFJet80_v","HLT_PFJet140_v","HLT_PFJet200_v","HLT_PFJet260_v","HLT_PFJet320_v","HLT_PFJet400_v","HLT_PFJet450_v","HLT_PFJet500_v"};
double leadingPtThreshold[nHLTmx+1] ={92, 119, 185, 251, 319, 388, 467, 518, 579, 3000.0};
#elif defined(SEVENTEEN)
const char* jethlt_name[nHLTmx]={"HLT_PFJet60_v","HLT_PFJet80_v","HLT_PFJet140_v","HLT_PFJet200_v","HLT_PFJet260_v","HLT_PFJet320_v","HLT_PFJet400_v","HLT_PFJet450_v","HLT_PFJet500_v","HLT_PFJet550_v"};
double leadingPtThreshold[nHLTmx+1] ={92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0};
#elif defined(EIGHTEEN)
const char* jethlt_name[nHLTmx]={"HLT_PFJet60_v","HLT_PFJet80_v","HLT_PFJet140_v","HLT_PFJet200_v","HLT_PFJet260_v","HLT_PFJet320_v","HLT_PFJet400_v","HLT_PFJet450_v","HLT_PFJet500_v","HLT_PFJet550_v"};
double leadingPtThreshold[nHLTmx+1] ={92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0};
#endif

const char* jethlt_lowest={"HLT_PFJet40_v"};

//double leadingPtThreshold[njetptmn+1] ={92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0};
//double leadingPtThreshold[nHLTmx+1] ={92, 119, 185, 251, 319, 388, 467, 518, 579, 669, 3000.0};

/*
#ifdef MERGE_BIN
double leadingPtThreshold[njetptmn+1] ={83, 109, 176, 247, 318, 387, 477, 573, 3000.0}; //Fit Value dijet trigger 2018
#else
double leadingPtThreshold[njetptmn+1] ={66, 95, 155, 227, 286, 350, 444, 557, 3000.0}; //Fit Value dijet trigger 2016
#endif
//double leadingPtThreshold[njetptmn+1] ={83, 109, 172, 241, 309, 377, 462, 570, 3000.0}; //Fit Value dijet trigger 2017
*/

//double compres[njetptmn] = {1630, 5320, 62.1, 38.9, 27.0, 4.33, 1.23, 1.0};
//double compres[njetptmn] = {1630, 5320, 62.1, 38.9, 27.0, 4.33, 1.23, 1.0};

//#else

#endif

///////////////////
//--MET Filters--//
///////////////////

#ifdef SIXTEEN
const char* METFilters[9]={"Flag_goodVertices","Flag_globalSuperTightHalo2016Filter","Flag_HBHENoiseFilter","Flag_HBHENoiseIsoFilter","Flag_EcalDeadCellTriggerPrimitiveFilter","Flag_BadPFMuonFilter","Flag_BadPFMuonDzFilter","Flag_hfNoisyHitsFilter","Flag_eeBadScFilter"};
#elif defined(SEVENTEEN)
const char* METFilters[10]={"Flag_goodVertices","Flag_globalSuperTightHalo2016Filter","Flag_HBHENoiseFilter","Flag_HBHENoiseIsoFilter","Flag_EcalDeadCellTriggerPrimitiveFilter","Flag_BadPFMuonFilter","Flag_BadPFMuonDzFilter","Flag_hfNoisyHitsFilter","Flag_eeBadScFilter","Flag_ecalBadCalibFilter"};
#elif defined(EIGHTEEN)
const char* METFilters[10]={"Flag_goodVertices","Flag_globalSuperTightHalo2016Filter","Flag_HBHENoiseFilter","Flag_HBHENoiseIsoFilter","Flag_EcalDeadCellTriggerPrimitiveFilter","Flag_BadPFMuonFilter","Flag_BadPFMuonDzFilter","Flag_hfNoisyHitsFilter","Flag_eeBadScFilter","Flag_ecalBadCalibFilter"};
#endif

#ifdef DIJETAVE

#ifdef SIXTEEN
double jethlt_thr[nHLTmx]={60,80,140,200,260,320,400,450,500};
#elif defined(SEVENTEEN)
double jethlt_thr[nHLTmx]={60,80,140,200,260,320,400,450,500,550};
#elif defined(EIGHTEEN)
double jethlt_thr[nHLTmx]={60,80,140,200,260,320,400,450,500,550};
#endif

//#else

#endif
double prescl[nHLTmx];

#ifdef TRACKSYS
const int ntype=3; 
#else
const int ntype=2;
#endif

const int njetetamn=1; // GMA 4; eta

#ifdef  LHAPDF
const int nnnmx=101;
double pdfwt[nnnmx];
//TH1F* h_genvarpdf[ndef][njet][nkappa][njetetamn][njetptmn][nnnmx];
TH1F* h_genvarpdf[ndef][njet][nkappa][njetetamn][ngenPT][nnnmx];
TH1* h_genvarpdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
TH1* h_genvarpdf2D_BJetBin[ndef][njet][nkappa][njetetamn][nnnmx];
//BJet
TH1* h_genvar_BJet_pdf2D[ndef][njet][nkappa][njetetamn][nnnmx];

//Second Method for PDF Uncertainty -> include the weight in the RM
TH1* h_recovarpdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
TH2* h_RMpdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
TH1* h_recofakepdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
TH1* h_genmisspdf2D[ndef][njet][nkappa][njetetamn][nnnmx];

TH1* h_recovarpdf2D_BJetBin[ndef][njet][nkappa][njetetamn][nnnmx];
TH2* h_RMpdf2D_BJetBin[ndef][njet][nkappa][njetetamn][nnnmx];
TH1* h_recofakepdf2D_BJetBin[ndef][njet][nkappa][njetetamn][nnnmx];
TH1* h_genmisspdf2D_BJetBin[ndef][njet][nkappa][njetetamn][nnnmx];

//BJet
TH1* h_recovar_bjet_deepJETT_pdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
TH2* h_RM_bjet_deepJETT_pdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
TH1* h_recofake_bjet_deepJETT_pdf2D[ndef][njet][nkappa][njetetamn][nnnmx];
TH1* h_genmiss_BJet_pdf2D[ndef][njet][nkappa][njetetamn][nnnmx];

const int nmgscale=9;
double mgscale[nmgscale];
TH1F* h_genvarmgscale[ndef][njet][nkappa][njetetamn][ngenPT][nmgscale];
TH1* h_genvarmgscale2D[ndef][njet][nkappa][njetetamn][nmgscale];
TH1* h_genvarmgscale2D_BJetBin[ndef][njet][nkappa][njetetamn][nmgscale];
//BJet
TH1* h_genvar_BJet_mgscale2D[ndef][njet][nkappa][njetetamn][nmgscale];
#endif

#ifdef SCALEUNC
//Only available in Py8 Flat
const int nscale=46;
double scalewt[nscale];
TH1F* h_genvarscaleunc[ndef][njet][nkappa][njetetamn][ngenPT][nscale];
TH1* h_genvarscaleunc2D[ndef][njet][nkappa][njetetamn][nscale];
TH1* h_genvarscaleunc2D_BJetBin[ndef][njet][nkappa][njetetamn][nscale];
//BJet
TH1* h_genvar_BJet_scaleunc2D[ndef][njet][nkappa][njetetamn][nscale];
#endif

#ifdef  JETENERGY
//const int nsrc = 26;
const int njecmx=2*nsrc+1;
//TH1F* h_recovarjec[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
TH1F* h_recovarjec[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1* h_recovarjec2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recovarjec2D_BJetBin[ndef][njet][nkappa][njetetamn][njecmx];
//BJet
TH1* h_recovar_bjet_deepJETT_jec2D[ndef][njet][nkappa][njetetamn][njecmx];
#elif defined(JETRESO)
const int njecmx = 3;
//TH1F* h_recovarres[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH2F* h_RM_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH1F* h_genmiss_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];
//TH1F* h_recofake_JER[ndef][njet][nkappa][njetetamn][njetptmn][njecmx];

TH1F* h_recovarres[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH2F* h_RM_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1F* h_genmiss_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];
TH1F* h_recofake_JER[ndef][njet][nkappa][njetetamn][ngenPT][njecmx];

TH2* h_RM_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recovarres2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_genmiss_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recofake_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];

TH2* h_RM_JER_2D_BJetBin[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recovarres2D_BJetBin[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_genmiss_JER_2D_BJetBin[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recofake_JER_2D_BJetBin[ndef][njet][nkappa][njetetamn][njecmx];
//BJet
TH2* h_RM_bjet_deepJETT_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recovar_bjet_deepJETT_res2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_genmiss_BJet_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
TH1* h_recofake_bjet_deepJETT_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
#else
const int njecmx=1;
#endif

const int nGenReso=1;
double etarange[njetetamn] ={2.1};                                           //2.5
double resetarange[njetetamn+4] ={0, 0.5, 1.0, 1.5};                         //,2.0, 2.5, 3.0, 3.5};
double par0[njetetamn+4]={1.02, 1.02, 1.022, 1.017, 0.98};                   //,0.9327};
double par1[njetetamn+4]={7.3e-6, -7.3e-6, -5.66e-6, -9.9e-6, 1.41e-4};      //,4.6e-4};
double par2[njetetamn+4]={-8.2e-9, -8.2e-9, -3.58e-9, -4.18e-9, -6.104e-8};  //,-4.041e-7};
double particlept[4]={0.0, 0.25, 0.50, 1.00};

#ifdef TRACKSYS
const char* typname[ntype]={"Jets", "Charged Particles"};
#else
const char* typname[ntype]={"Jets", "Charged Particles"};
#endif
static const int njetmx =30;

////////////////////////////
//--Function Declaration--//
////////////////////////////

int getbinid(double val, int nbmx, double* array) {
  if (val<array[0]) return -2;
  for (int ix=0; ix<=nbmx; ix++) {
    if (val < array[ix]) return ix-1;
  }
  return -3;
}

double Phi_0_2pi(double x) {
  while (x >= 2*M_PI) x -= 2*M_PI;
  while (x <     0.)  x += 2*M_PI;
  return x;
}

double Phi_mpi_pi(double x) {
  while (x >= M_PI) x -= 2*M_PI;
  while (x < -M_PI) x += 2*M_PI;
  return x;
}

double dPhi(double phi1,double phi2){
  phi1=Phi_0_2pi(phi1);
  phi2=Phi_0_2pi(phi2);
  return Phi_mpi_pi(phi1-phi2);
}

double dPT(double pt1, double pt2){
	return ((pt1 - pt2) / (pt1 + pt2));
}

 int sbitx(unsigned ival, int ibit) {
 unsigned den = mypow_2[ibit];    // unsigned(pow(2., double(ibit)));
 int isel = unsigned(ival/den)%2;
 //int isel = unsigned(ival/den);
 //cout <<"iv "<< ival<<" "<<ibit<<" "<<den<<" "<<ival/den<<" "<<unsigned(ival/den)<<" "<<isel<<endl;

 return isel;
}

double respfun(double a, double b, double c, double x){
  double func=a+b*x+c*x*x;
  return func;
}

#ifdef PUCLEAN
unordered_map<unsigned long long, float> readmaxgenpts(string filename){
	ifstream PUfile(filename); // Open the file
	if (!PUfile.is_open()) {std::cerr << "Unable to open PU clean file\n";}
	unordered_map<unsigned long long, float> maxgenpts;
	string line;
     	while (getline(PUfile, line)) { // Read file line by line
		istringstream iss(line);
           	unsigned long long evtID;
           	float Pt;
           	if (!(iss >> evtID >> Pt)) {
			cerr << "Error parsing line: " << line << std::endl;
              		continue;
              	}
        maxgenpts[evtID] = Pt; // Insert key-value pair into the map
	}
   	return maxgenpts;
}
#endif

/////////////////////////////
//--JetCharge Observables--//
/////////////////////////////

double JetCharge1(int charge, double candspt, double jpt, double k);

double candsmom(int charge, double candspt, double k);
double candsmom2(double p, double k);

double dotproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k);
double crossproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k);

double dotProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k);
double crossProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k);

struct triggervar{
  HepLorentzVector trg4v;
  bool		  both;
  bool            level1;
  bool            highl;
  int             ihlt;
  int             prescl;
};

//
// class declaration
//

class MiniAODAnalyzer : public edm::EDAnalyzer {
   public:
      explicit MiniAODAnalyzer(const edm::ParameterSet&);
      ~MiniAODAnalyzer();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() override;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
      virtual void endJob() override;

      virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
 
  //int sbitx(unsigned ival, int ibit);
  bool isHistFill;
  bool isTrigger;
  //bool isRECO[ntype][njetetamn];
  bool isMC;
  //bool isRECOJC;
  //bool isGENJC;
  //bool isParticle;          //Do we want particle level informations, other than jets ?
  //bool isGenParticle;       //Do we want Simulated particle level informations, other than jets ?
  bool isReconstruct;         //otherwise Only generator level informations  
  //bool isPartQCD;           //For tracker variables, recosntruct QCD EVT variables
  bool isJetQCD;              //For Jet variables, recosntruct QCD EVT variables
  bool isGenJET;              //Genjet information or note (for herwig/alpgen, donot store this ?)
  //double trackPtThreshold;  //Threshold of track Pt to store it in root file, -ve implies don't store
  //double etarange;          //Eta range of all jets
  double ptthreshold;         //Pt threshold of JEC jets
  double leadingPtthreshold;  //Pt threshold of JEC leading jet
  bool   isOtherAlgo;         //store Kt4 and ak7 variables or not
  double weight=1;            //weight for histogramme fit
  double weight2=1;
 
  std::string m_resolutions_file;
  std::string scalefile;

  std::string theHLTTag;
  //unsigned int mypow_2[32];
  int nevt;

  std::string theRootFileName;
  //TFile* //theFile;
  //TTree* //T1;
  TFile *bTagEff_file;
  //ifstream myfile ("example.txt");
  //std::ofstream myfile;
  //myfile.open("txt.log");
  
  TDirectoryFile *TUnfoldBinng2D =new TDirectoryFile("analyzeBasicPat2D","2D Unfolding Historgams"); // Directory for 2D TUnfolding histograms
  //TH2F* h_2ht;

  TH1F* vec_anglex[nhist];

  //Jet Charge 1D
  //TH1F* h_recovar[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_genvar[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_recofake[ndef][njet][nkappa][njetetamn][njetptmn];
  //TH1F* h_genmiss[ndef][njet][nkappa][njetetamn][njetptmn]; 
  //TH2F* h_RM[ndef][njet][nkappa][njetetamn][njetptmn];

  TH1F* h_recovar[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM[ndef][njet][nkappa][njetetamn][ngenPT];

  //identical binning & range for all the variables
  //To plot 10 kappa vlues for one observable in same canvas
  TH1F* h_recovarIB[ndef][njet][nkappa][njetetamn][ngenPT];                   //Inclusive Jets
  TH1F* h_recovarIB_bjet_deepJETT[ndef][njet][nkappa][njetetamn][ngenPT];     //BJets
  TH1F* h_recovarIB_bjet_deepJETT_NoSF[ndef][njet][nkappa][njetetamn][ngenPT];

  //b-jet  Data->Tight Working Point 
  TH1F* h_recovar_bjet_deepJETT[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_bjet_deepJETT_NoSF[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_BJet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_bjet_deepJETT[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_BJet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_bjet_deepJETT[ndef][njet][nkappa][njetetamn][ngenPT];

#ifdef FLAV
  //RecoJet Flavour
  TH1F* h_recovar_gjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ujet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ubarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_djet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_dbarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_bjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_bbarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recovar_ojet[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

  //GenJet Flavour
  TH1F* h_genvar_gjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_ujet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_ubarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_djet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_dbarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_bjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_bbarjet[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_ojet[ndef][njet][nkappa][njetetamn][ngenPT];
   
#ifdef PREFIRE
  TH1F* h_recovar_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_prefire[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_prefire[ndef][njet][nkappa][njetetamn][ngenPT];

  TH1F* h_recovar_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_prefireup[ndef][njet][nkappa][njetetamn][ngenPT];

  TH1F* h_recovar_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genvar_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_recofake_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH1F* h_genmiss_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
  TH2F* h_RM_prefiredown[ndef][njet][nkappa][njetetamn][ngenPT];
#endif

//#ifdef TRACKEFF
  //TH1F* h_recovar_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  //TH1F* h_recofake_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  //TH1F* h_genmiss_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
  //TH2F* h_RM_trackeff[ndef][njet][nkappa][njetetamn][ngenPT];
//#endif

/////////////////////////  
//--Profile Histogram--//
/////////////////////////

  //Jet PT vs charge multiplicity
  TH2F* hchpt;
  TH2F* hchpt1;
  TH2F* hchpt2;
  
#ifdef FLAV
  TH2F* hchpt1_gjet;
  TH2F* hchpt1_ujet;
  TH2F* hchpt1_ubarjet;
  TH2F* hchpt1_djet;
  TH2F* hchpt1_dbarjet;
  TH2F* hchpt1_bjet;
  TH2F* hchpt1_bbarjet;
  
  TH2F* hchpt2_gjet;
  TH2F* hchpt2_ujet;
  TH2F* hchpt2_ubarjet;
  TH2F* hchpt2_djet;
  TH2F* hchpt2_dbarjet;
  TH2F* hchpt2_bjet;
  TH2F* hchpt2_bbarjet;
#endif

  //BJet Tight Working Point
  TH2F* hchpt1_bjet_deepJETT;
  TH2F* hchpt2_bjet_deepJETT;

  TH2F* hchpt1_bjet_deepJETT_NoSF;
  TH2F* hchpt2_bjet_deepJETT_NoSF;

  //Ratio of Matched charged pT to charged pT vs GenJet pT
  TH2F *hprof_matchedChg_R_allChg_genjetpt[njet][nkappa];

  //Ratio of track pt to Jet pt vs. Jet pT
  TH2F* hprof_gen_trackpt_R_jetpt_jetpt[njet][nkappa];
  TH2F* hprof_reco_trackpt_R_jetpt_jetpt[njet][nkappa];

  //Reco JCO vs. jetpt
  TH2F* hprof_reco_jco_pt[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_bjet_deepJETT[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_bjet_deepJETT_NoSF[ndef][njet][nkappa];

  //Gen JCO vs. jetpt
  TH2F* hprof_gen_jco_pt[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_bjet_deepJETT[ndef][njet][nkappa];

  //Track dependence w.r.t JCO
  TH2F *hprof_Reco_ntrack_vs_jco[ndef][njet][nkappa];
  TH2F *hprof_Reco_ntrack_vs_jco_bjet_deepJETT[ndef][njet][nkappa];
  TH2F *hprof_Reco_ntrack_vs_jco_bjet_deepJETT_NoSF[ndef][njet][nkappa];

  //Energy Fraction w.r.t JCO
  //X1->Highest PT particle, X12->Sum of first two partciles
  //X123->Sum of first three particles
  //X1-> (PT of lead particle)/(Jet PT)
  TH2F *hprof_Reco_X1_vs_jco[ndef][njet][nkappa];
  TH2F *hprof_Reco_X12_vs_jco[ndef][njet][nkappa];
  TH2F *hprof_Reco_X123_vs_jco[ndef][njet][nkappa];

  //b-tag
  TH2F *hprof_Reco_X1_vs_jco_bjet_deepJETT[ndef][njet][nkappa];
  TH2F *hprof_Reco_X12_vs_jco_bjet_deepJETT[ndef][njet][nkappa];
  TH2F *hprof_Reco_X123_vs_jco_bjet_deepJETT[ndef][njet][nkappa];

  //b-tag No SF
  TH2F *hprof_Reco_X1_vs_jco_bjet_deepJETT_NoSF[ndef][njet][nkappa];
  TH2F *hprof_Reco_X12_vs_jco_bjet_deepJETT_NoSF[ndef][njet][nkappa];
  TH2F *hprof_Reco_X123_vs_jco_bjet_deepJETT_NoSF[ndef][njet][nkappa]; 

  //PT related to tracks
  TH2F *hprof_Reco_ntrack_vs_PTtrack_J1;
  TH2F *hprof_Reco_ntrack_vs_PTtrack_J2;

  TH2F *hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1;
  TH2F *hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2;

  TH2F *hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1_NoSF;
  TH2F *hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2_NoSF;

  //1D histograms for Energy Fraction w.r.t Events
  TH1F *Reco_X1[njet];
  TH1F *Reco_X12[njet];
  TH1F *Reco_X123[njet];

  TH1F *Reco_X1_bjet_deepJETT[njet];
  TH1F *Reco_X12_bjet_deepJETT[njet];
  TH1F *Reco_X123_bjet_deepJETT[njet];

  TH1F *Reco_X1_bjet_deepJETT_NoSF[njet];
  TH1F *Reco_X12_bjet_deepJETT_NoSF[njet];
  TH1F *Reco_X123_bjet_deepJETT_NoSF[njet];

  //Scatter Plot
  TH2F *Reco_X1_X2[njet];
  TH2F *Reco_X1_X3[njet];

  TH2F *Reco_X1_X2_bjet_deepJETT[njet];
  TH2F *Reco_X1_X3_bjet_deepJETT[njet];

  TH2F *Reco_X1_X2_bjet_deepJETT_NoSF[njet];
  TH2F *Reco_X1_X3_bjet_deepJETT_NoSF[njet];

#ifdef FLAV 
  //Flavor Tagging
  TH2F* hprof_reco_jco_pt_gjet[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_ujet[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_ubarjet[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_djet[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_dbarjet[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_bjet[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_bbarjet[ndef][njet][nkappa];
  TH2F* hprof_reco_jco_pt_ojet[ndef][njet][nkappa];

  //True b -jet
  //JCO vs BJet PT
  TH2F* hprof_reco_jco_pt_bjetTag[ndef][njet][nkappa];

  //Track dependence w.r.t JCO
  TH2F *hprof_Reco_ntrack_vs_jco_bjet[ndef][njet][nkappa];

  //PT related to tracks
  TH2F *hprof_Reco_ntrack_vs_PTtrack_bjet_J1;
  TH2F *hprof_Reco_ntrack_vs_PTtrack_bjet_J2;

  //Energy Fraction w.r.t JCO
  TH2F *hprof_Reco_X1_vs_jco_bjet[ndef][njet][nkappa];
  TH2F *hprof_Reco_X12_vs_jco_bjet[ndef][njet][nkappa];
  TH2F *hprof_Reco_X123_vs_jco_bjet[ndef][njet][nkappa];

  TH1F *Reco_X1_bjet[njet];
  TH1F *Reco_X12_bjet[njet];
  TH1F *Reco_X123_bjet[njet];
#endif

  TH2F* hprof_gen_jco_pt_gjet[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_ujet[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_ubarjet[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_djet[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_dbarjet[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_bjet[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_bbarjet[ndef][njet][nkappa];
  TH2F* hprof_gen_jco_pt_ojet[ndef][njet][nkappa];

  //True bjet
  //JCO vs BJet PT
  TH2F* hprof_gen_jco_pt_bjetTag[ndef][njet][nkappa];

  //static const int njetmx =30;
  //int npfjets; 
  int nchg, nchg1, nchg2, nchg1_bjet_deepJETT, nchg2_bjet_deepJETT;
#ifdef FLAV
  int nchg1_bjet, nchg2_bjet;
#endif
  int pfjetmul[njetmx];
  float pfjetpx[njetmx], pfjetpy[njetmx], pfjetpz[njetmx], pfjeten[njetmx],  pfjetenuc[njetmx], neuemf[njetmx], neuhad[njetmx];
  float pfjetenscl[njetmx], pfjetensmr[njetmx];
  float jetpt, jeteta, jetphi; 
  int nallpf, ncharged;
  float thphi[nhist], thrust[nhist], anglex[nhist];
  float jtthan;
  int irunhlt, l1pres[nHLTmx],  hltpres[nHLTmx], compres[nHLTmx]; 
  static const int nprimx=150;
  int nprim, ntkpm[nprimx];
  //float  primdx[nprimx], primdy[nprimx], primdz[nprimx], 
  float primpr[nprimx];
  int irun, ilumi, ibrnc;
  unsigned int ievt;
  float inslumi;
  int nsicls, ntottrk;

//#ifdef FLAT 
  //bool isFlat=1;
//#else 
  bool isFlat=0;
//#endif

  float defweight=1.0, weighttrg=1., qlow=-10., qhigh=100000.;
  float BTagWt=1.0, BTagWt_upCorr=1.0, BTagWt_downCorr=1.0, BTagWt_upUncorr=1.0, BTagWt_downUncorr=1.0;

  //TunfoldBinning
  //2D Bining using TUnfoldBinning Jet Charge

  //Inclusive Jets
  TUnfoldBinning *binsRec2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *binsGen2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *RecoBinning2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *GenBinning2D[ndef][njet][nkappa][njetetamn]; 

  //BJet
  TUnfoldBinning *binsRecbjet2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *binsGenbjet2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *RecoBinningbjet2D[ndef][njet][nkappa][njetetamn];
  TUnfoldBinning *GenBinningbjet2D[ndef][njet][nkappa][njetetamn]; 

  //Jet Charge 2D TUnfoldBinning Histograms
  TH1* h_recovar2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM2D[ndef][njet][nkappa][njetetamn];

  //BJet  Data->Tight Working Point
  TH1* h_recovar_bjet2D_deepJETT[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_bjet2D_deepJETT_NoSF[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet2D_deepJETT[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet2D_deepJETT[ndef][njet][nkappa][njetetamn];

  //Inc. JCO : binning according to BJet
  TH1* h_recovar2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH2* h_RM2D_BJetBin[ndef][njet][nkappa][njetetamn];

#ifdef FLAV
  //RecoJet Flavour
  TH1* h_recovar_gjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ujet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ubarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_djet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_dbarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_bjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_bbarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_ojet2D[ndef][njet][nkappa][njetetamn];

#endif

  //GenJet Flavor
  TH1* h_genvar_gjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_ujet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_ubarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_djet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_dbarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_bjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_bbarjet2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_ojet2D[ndef][njet][nkappa][njetetamn];

#ifdef PREFIRE
  TH1* h_recovar_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefire2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefire2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefireup_2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefiredown_2D[ndef][njet][nkappa][njetetamn];


  TH1* h_recovar_prefire2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefire2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefire2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefire2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefire2D_BJetBin[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_prefireup_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefireup_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefireup_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefireup_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefireup_2D_BJetBin[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_prefiredown_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_prefiredown_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_prefiredown_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_prefiredown_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_prefiredown_2D_BJetBin[ndef][njet][nkappa][njetetamn];

  //BJet Data->Tight Working Point
  TH1* h_recovar_bjet_deepJETT_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_prefire2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_prefire2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_prefire2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_bjet_deepJETT_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_prefireup_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_prefireup_2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_bjet_deepJETT_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_prefiredown_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_prefiredown_2D[ndef][njet][nkappa][njetetamn];
#endif

//#ifdef TRACKEFF
  TH1* h_recovar_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackeff2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_trackeff2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_trackeff2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackeff2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackeff2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackeff2D_BJetBin[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_bjet_deepJETT_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_trackeff2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_trackeff2D[ndef][njet][nkappa][njetetamn];
//#endif

/*
  //Track Matching
//#ifdef TRACKEFFDEBUG 
  TH1* h_recovar_trackeff2D_debug[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_trackeff2D_debug[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackeff2D_debug[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackeff2D_debug[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackeff2D_debug[ndef][njet][nkappa][njetetamn];
//#endif
*/

//#ifdef TRACKPTUP
  TH1* h_recovar_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt1_2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_trackpt1_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt1_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt1_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt1_2D_BJetBin[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_bjet_deepJETT_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_trackpt1_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_trackpt1_2D[ndef][njet][nkappa][njetetamn];
//#endif

//#ifdef TRACKPTDOWN
  TH1* h_recovar_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt2_2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_trackpt2_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_trackpt2_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_trackpt2_2D_BJetBin[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_trackpt2_2D_BJetBin[ndef][njet][nkappa][njetetamn];

  TH1* h_recovar_bjet_deepJETT_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_trackpt2_2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_trackpt2_2D[ndef][njet][nkappa][njetetamn];
//#endif

#ifdef BTAGUNC
  TH1* h_recovar_bjet_deepJETT_BTagWt_upCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_bjet_deepJETT_BTagWt_downCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_bjet_deepJETT_BTagWt_upUncorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recovar_bjet_deepJETT_BTagWt_downUncorr2D[ndef][njet][nkappa][njetetamn];

  TH1* h_recofake_bjet_deepJETT_BTagWt_upCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_BTagWt_downCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_BTagWt_upUncorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_recofake_bjet_deepJETT_BTagWt_downUncorr2D[ndef][njet][nkappa][njetetamn];

  TH1* h_genvar_BJet_BTagWt_upCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet_BTagWt_downCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet_BTagWt_upUncorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genvar_BJet_BTagWt_downUncorr2D[ndef][njet][nkappa][njetetamn];

  TH1* h_genmiss_BJet_BTagWt_upCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_BTagWt_downCorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_BTagWt_upUncorr2D[ndef][njet][nkappa][njetetamn];
  TH1* h_genmiss_BJet_BTagWt_downUncorr2D[ndef][njet][nkappa][njetetamn];

  TH2* h_RM_bjet_deepJETT_BTagWt_upCorr2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_BTagWt_downCorr2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_BTagWt_upUncorr2D[ndef][njet][nkappa][njetetamn];
  TH2* h_RM_bjet_deepJETT_BTagWt_downUncorr2D[ndef][njet][nkappa][njetetamn];
#endif
 
  //Jet ID distributions
  TH1F* recojt_CHF;
  TH1F* recojt_NHF;
  TH1F* recojt_NEMF;
  TH1F* recojt_CHM;
  TH1F* recojt_NumNeutralParticles;
  TH1F* recojt_CEMF;
  TH1F* recojt_NumConst;

  //Jets basic distrubtions
  //TH1F* recojt_hist;
  //TH1F* recojt_pt[njetetamn][nHLTmx];
  TH1F* recojt_pt[njetetamn];
  TH1F* recojt_eta;
  TH1F* recojt_phi;

  TH1F* recojtallave_pt[njetetamn];
  TH1F* recojtallavewt1_pt[njetetamn];

  TH1F* recojtave_pt[njetetamn][nHLTmx];
  TH1F* recojtavewt1_pt[njetetamn][nHLTmx];
  TH1F* recojt1_pt[njetetamn];
  TH1F* recojt1_eta;
  TH1F* recojt1_phi;

  TH1F* recojt2_pt[njetetamn];
  TH1F* recojt2_eta;
  TH1F* recojt2_phi;

  TH1F* recojt3_pt[njetetamn];
  TH1F* recojt3_eta;
  TH1F* recojt3_phi;

  TH1F* recoht2_pt[njetetamn];

  TH1F* hjetdpt[njetetamn];
  TH1F* hjetdphi[njetetamn];
  TH1F* hjetptbypl[njetetamn];
  TH1F* hjetpt2bypt1[njetetamn];
  TH1F* hjetpt3bypt2[njetetamn];
  
/*Charged Particles 
inside jets distributions
*/

  //TH1F* recochg_hist;
  TH1F* recochg_pt;
  TH1F* recochg_eta;
  TH1F* recochg_phi;

  TH1F* recochg1_pt;
  TH1F* recochg1_eta;
  TH1F* recochg1_phi;

  TH1F* recochg2_pt;
  TH1F* recochg2_eta;
  TH1F* recochg2_phi;

  TH1F* recochg3_pt;
  TH1F* recochg3_eta;
  TH1F* recochg3_phi;

  //highest pt particle inside Lead & sub-lead inclusive jet jet & BJet
  TH1F* recojetchg1_cand1;
  TH1F* recojetchg2_cand1;

  //BJet Tight Working Point
  TH1F* recobjetchg1_deepJETT_cand1;
  TH1F* recobjetchg2_deepJETT_cand1;

  TH1F* recobjetchg1_deepJETT_cand1_NoSF;
  TH1F* recobjetchg2_deepJETT_cand1_NoSF;

  //TH1F* recobjetchg1_cand1;
  //TH1F* recobjetchg2_cand1;

#ifdef FLAV
  //Flavor Tagging
  //gluon-jet
  TH1F* recojtg_pt[njetetamn];
  TH1F* recojtg_eta;
  TH1F* recojtg_phi; 
  
  TH1F* recojt1g_pt[njetetamn];
  TH1F* recojt1g_eta;
  TH1F* recojt1g_phi;

  TH1F* recojt2g_pt[njetetamn];
  TH1F* recojt2g_eta;
  TH1F* recojt2g_phi;

  //u-jet
  TH1F* recojtu_pt[njetetamn];
  TH1F* recojtu_eta;
  TH1F* recojtu_phi;

  TH1F* recojt1u_pt[njetetamn];
  TH1F* recojt1u_eta;
  TH1F* recojt1u_phi;

  TH1F* recojt2u_pt[njetetamn];
  TH1F* recojt2u_eta;
  TH1F* recojt2u_phi;

  //ubar-jet
  TH1F* recojtubar_pt[njetetamn];
  TH1F* recojtubar_eta;
  TH1F* recojtubar_phi;

  TH1F* recojt1ubar_pt[njetetamn];
  TH1F* recojt1ubar_eta;
  TH1F* recojt1ubar_phi;

  TH1F* recojt2ubar_pt[njetetamn];
  TH1F* recojt2ubar_eta;
  TH1F* recojt2ubar_phi;


  //d-jet
  TH1F* recojtd_pt[njetetamn];
  TH1F* recojtd_eta;
  TH1F* recojtd_phi;
  
  TH1F* recojt1d_pt[njetetamn];
  TH1F* recojt1d_eta;
  TH1F* recojt1d_phi;
  
  TH1F* recojt2d_pt[njetetamn];
  TH1F* recojt2d_eta;
  TH1F* recojt2d_phi;

  //dbar-jet
  TH1F* recojtdbar_pt[njetetamn];
  TH1F* recojtdbar_eta;
  TH1F* recojtdbar_phi;

  TH1F* recojt1dbar_pt[njetetamn];
  TH1F* recojt1dbar_eta;
  TH1F* recojt1dbar_phi;

  TH1F* recojt2dbar_pt[njetetamn];
  TH1F* recojt2dbar_eta;
  TH1F* recojt2dbar_phi;

  //b-jet
  TH1F* recojtb_pt[njetetamn];
  TH1F* recojtb_eta;
  TH1F* recojtb_phi;

  TH1F* recojt1b_pt[njetetamn];
  TH1F* recojt1b_eta;
  TH1F* recojt1b_phi;

  TH1F* recojt2b_pt[njetetamn];
  TH1F* recojt2b_eta;
  TH1F* recojt2b_phi;

  //bbar-jet
  TH1F* recojtbbar_pt[njetetamn];
  TH1F* recojtbbar_eta;
  TH1F* recojtbbar_phi;

  TH1F* recojt1bbar_pt[njetetamn];
  TH1F* recojt1bbar_eta;
  TH1F* recojt1bbar_phi;

  TH1F* recojt2bbar_pt[njetetamn];
  TH1F* recojt2bbar_eta;
  TH1F* recojt2bbar_phi;

  //others-nonmatched-jets
  TH1F* recojto_pt[njetetamn];
  TH1F* recojto_eta;
  TH1F* recojto_phi;

  TH1F* recojt1o_pt[njetetamn];
  TH1F* recojt1o_eta;
  TH1F* recojt1o_phi;

  TH1F* recojt2o_pt[njetetamn];
  TH1F* recojt2o_eta;
  TH1F* recojt2o_phi;

  //highest pt particle inside Lead & sub-lead BJet
  TH1F* recobjetchg1_cand1;
  TH1F* recobjetchg2_cand1;
#endif

  //BJet info
  //Tagger-discriminator values
  TH2D* h_BTag_CSV;
  TH2D* h_CTag_CSV;
  TH2D* h_udsgTag_CSV; 

  TH2D* h_BTag_JET;
  TH2D* h_CTag_JET;
  TH2D* h_udsgTag_JET;
 
  //Tight Working-point
  TH1F *h_bjet_deepJETT_pt[njetetamn];
  TH1F *h_bjet_deepJETT_eta;
  TH1F *h_bjet_deepJETT_phi;

  TH1F *h_bjet_deepJETT_pt_NoSF[njetetamn];
  TH1F *h_bjet_deepJETT_eta_NoSF;
  TH1F *h_bjet_deepJETT_phi_NoSF;

  TH1F *h_bjet1_deepJETT_pt[njetetamn];
  TH1F *h_bjet1_deepJETT_eta;
  TH1F *h_bjet1_deepJETT_phi;

  TH1F *h_bjet1_deepJETT_pt_NoSF[njetetamn];
  TH1F *h_bjet1_deepJETT_eta_NoSF;
  TH1F *h_bjet1_deepJETT_phi_NoSF;

  TH1F *h_bjet2_deepJETT_pt[njetetamn];
  TH1F *h_bjet2_deepJETT_eta;
  TH1F *h_bjet2_deepJETT_phi;

  TH1F *h_bjet2_deepJETT_pt_NoSF[njetetamn];
  TH1F *h_bjet2_deepJETT_eta_NoSF;
  TH1F *h_bjet2_deepJETT_phi_NoSF;

  TH1F *h_nonbjet_deepJETT_pt[njetetamn];
  TH1F *h_nonbjet_deepJETT_eta;
  TH1F *h_nonbjet_deepJETT_phi;

  TH1F *h_nonbjet_deepJETT_pt_NoSF[njetetamn];
  TH1F *h_nonbjet_deepJETT_eta_NoSF;
  TH1F *h_nonbjet_deepJETT_phi_NoSF;

  TH1F *h_nonbjet1_deepJETT_pt[njetetamn];
  TH1F *h_nonbjet1_deepJETT_eta;
  TH1F *h_nonbjet1_deepJETT_phi;

  TH1F *h_nonbjet1_deepJETT_pt_NoSF[njetetamn];
  TH1F *h_nonbjet1_deepJETT_eta_NoSF;
  TH1F *h_nonbjet1_deepJETT_phi_NoSF;

  TH1F *h_nonbjet2_deepJETT_pt[njetetamn];
  TH1F *h_nonbjet2_deepJETT_eta;
  TH1F *h_nonbjet2_deepJETT_phi;

  TH1F *h_nonbjet2_deepJETT_pt_NoSF[njetetamn];
  TH1F *h_nonbjet2_deepJETT_eta_NoSF;
  TH1F *h_nonbjet2_deepJETT_phi_NoSF;

  //BTag stuffs
  TH2D *LdeepCSVT_SF;
  TH2D *LdeepCSVM_SF;
  TH2D *LdeepCSVL_SF;

  TH2D *LdeepJETT_SF;
  TH2D *LdeepJETM_SF;
  TH2D *LdeepJETL_SF;

  TH2D *CdeepCSVT_SF;
  TH2D *CdeepCSVM_SF;
  TH2D *CdeepCSVL_SF;

  TH2D *CdeepJETT_SF;
  TH2D *CdeepJETM_SF;
  TH2D *CdeepJETL_SF;

  TH2D *BdeepCSVT_SF;
  TH2D *BdeepCSVM_SF;
  TH2D *BdeepCSVL_SF;

  TH2D *BdeepJETT_SF;
  TH2D *BdeepJETM_SF;
  TH2D *BdeepJETL_SF;


  TH2D *Reco_bjet_fra;
  TH2D *Reco_bjet_fra_NoSF;

  TH2D *Reco_CSVT_bjet_fra;
  TH2D *Reco_CSVM_bjet_fra;
  TH2D *Reco_CSVL_bjet_fra;

  TH2D *Reco_CSVT_bjet_fra_NoSF;
  TH2D *Reco_CSVM_bjet_fra_NoSF;
  TH2D *Reco_CSVL_bjet_fra_NoSF;

  
  TH2D *Reco_JETT_bjet_fra;
  TH2D *Reco_JETM_bjet_fra;
  TH2D *Reco_JETL_bjet_fra;

  TH2D *Reco_JETT_bjet_fra_NoSF;
  TH2D *Reco_JETM_bjet_fra_NoSF;
  TH2D *Reco_JETL_bjet_fra_NoSF;


  //DeepCSV Tight Working Point
  //Efficiency
  TH2D *Reco_CSVT_bjet_eff_den;
  TH2D *Reco_CSVT_bjet_eff_num;

  TH2D *Reco_CSVT_cjet_eff_den;
  TH2D *Reco_CSVT_cjet_eff_num;

  TH2D *Reco_CSVT_ljet_eff_den;
  TH2D *Reco_CSVT_ljet_eff_num;


  TH2D *Reco_CSVT_bjet_eff_den_NoSF;
  TH2D *Reco_CSVT_bjet_eff_num_NoSF;

  TH2D *Reco_CSVT_cjet_eff_den_NoSF;
  TH2D *Reco_CSVT_cjet_eff_num_NoSF;

  TH2D *Reco_CSVT_ljet_eff_den_NoSF;
  TH2D *Reco_CSVT_ljet_eff_num_NoSF;


  //MisTag
  TH2D *Reco_CSVT_bjet_miss_den;
  TH2D *Reco_CSVT_bjet_miss_num;

  TH2D *Reco_CSVT_cjet_miss_den;
  TH2D *Reco_CSVT_cjet_miss_num;

  TH2D *Reco_CSVT_ljet_miss_den;
  TH2D *Reco_CSVT_ljet_miss_num;


  TH2D *Reco_CSVT_bjet_miss_den_NoSF;
  TH2D *Reco_CSVT_bjet_miss_num_NoSF;

  TH2D *Reco_CSVT_cjet_miss_den_NoSF;
  TH2D *Reco_CSVT_cjet_miss_num_NoSF;

  TH2D *Reco_CSVT_ljet_miss_den_NoSF;
  TH2D *Reco_CSVT_ljet_miss_num_NoSF;


  //Purity
  TH2D *Reco_CSVT_bjet_pur_den;
  TH2D *Reco_CSVT_bjet_pur_num;

  TH2D *Reco_CSVT_bjet_pur_den_NoSF;
  TH2D *Reco_CSVT_bjet_pur_num_NoSF;

  //Contamination
  TH2D *Reco_CSVT_bjet_con_den;
  TH2D *Reco_CSVT_bjet_con_num;

  TH2D *Reco_CSVT_bjet_con_den_NoSF;
  TH2D *Reco_CSVT_bjet_con_num_NoSF;

  //DeepCSV Medium Working Point
  TH2D *Reco_CSVM_bjet_eff_den;
  TH2D *Reco_CSVM_bjet_eff_num;

  TH2D *Reco_CSVM_cjet_eff_den;
  TH2D *Reco_CSVM_cjet_eff_num;

  TH2D *Reco_CSVM_ljet_eff_den;
  TH2D *Reco_CSVM_ljet_eff_num;

  TH2D *Reco_CSVM_bjet_miss_den;
  TH2D *Reco_CSVM_bjet_miss_num;

  TH2D *Reco_CSVM_cjet_miss_den;
  TH2D *Reco_CSVM_cjet_miss_num;

  TH2D *Reco_CSVM_ljet_miss_den;
  TH2D *Reco_CSVM_ljet_miss_num;

  TH2D *Reco_CSVM_bjet_pur_den;
  TH2D *Reco_CSVM_bjet_pur_num;

  TH2D *Reco_CSVM_bjet_con_den;
  TH2D *Reco_CSVM_bjet_con_num;

  
  TH2D *Reco_CSVM_bjet_eff_den_NoSF;
  TH2D *Reco_CSVM_bjet_eff_num_NoSF;

  TH2D *Reco_CSVM_cjet_eff_den_NoSF;
  TH2D *Reco_CSVM_cjet_eff_num_NoSF;

  TH2D *Reco_CSVM_ljet_eff_den_NoSF;
  TH2D *Reco_CSVM_ljet_eff_num_NoSF;

  TH2D *Reco_CSVM_bjet_miss_den_NoSF;
  TH2D *Reco_CSVM_bjet_miss_num_NoSF;

  TH2D *Reco_CSVM_cjet_miss_den_NoSF;
  TH2D *Reco_CSVM_cjet_miss_num_NoSF;

  TH2D *Reco_CSVM_ljet_miss_den_NoSF;
  TH2D *Reco_CSVM_ljet_miss_num_NoSF;

  TH2D *Reco_CSVM_bjet_pur_den_NoSF;
  TH2D *Reco_CSVM_bjet_pur_num_NoSF;

  TH2D *Reco_CSVM_bjet_con_den_NoSF;
  TH2D *Reco_CSVM_bjet_con_num_NoSF;


  //DeepCSV Light Working Point
  TH2D *Reco_CSVL_bjet_eff_den;
  TH2D *Reco_CSVL_bjet_eff_num;

  TH2D *Reco_CSVL_cjet_eff_den;
  TH2D *Reco_CSVL_cjet_eff_num;

  TH2D *Reco_CSVL_ljet_eff_den;
  TH2D *Reco_CSVL_ljet_eff_num;

  TH2D *Reco_CSVL_bjet_miss_den;
  TH2D *Reco_CSVL_bjet_miss_num;

  TH2D *Reco_CSVL_cjet_miss_den;
  TH2D *Reco_CSVL_cjet_miss_num;

  TH2D *Reco_CSVL_ljet_miss_den;
  TH2D *Reco_CSVL_ljet_miss_num;

  TH2D *Reco_CSVL_bjet_pur_den;
  TH2D *Reco_CSVL_bjet_pur_num;

  TH2D *Reco_CSVL_bjet_con_den;
  TH2D *Reco_CSVL_bjet_con_num;


  TH2D *Reco_CSVL_bjet_eff_den_NoSF;
  TH2D *Reco_CSVL_bjet_eff_num_NoSF;

  TH2D *Reco_CSVL_cjet_eff_den_NoSF;
  TH2D *Reco_CSVL_cjet_eff_num_NoSF;

  TH2D *Reco_CSVL_ljet_eff_den_NoSF;
  TH2D *Reco_CSVL_ljet_eff_num_NoSF;

  TH2D *Reco_CSVL_bjet_miss_den_NoSF;
  TH2D *Reco_CSVL_bjet_miss_num_NoSF;

  TH2D *Reco_CSVL_cjet_miss_den_NoSF;
  TH2D *Reco_CSVL_cjet_miss_num_NoSF;

  TH2D *Reco_CSVL_ljet_miss_den_NoSF;
  TH2D *Reco_CSVL_ljet_miss_num_NoSF;

  TH2D *Reco_CSVL_bjet_pur_den_NoSF;
  TH2D *Reco_CSVL_bjet_pur_num_NoSF;

  TH2D *Reco_CSVL_bjet_con_den_NoSF;
  TH2D *Reco_CSVL_bjet_con_num_NoSF;

  //DeepJET Tight Working Point
  TH2D *Reco_JETT_bjet_eff_den;
  TH2D *Reco_JETT_bjet_eff_num;

  TH2D *Reco_JETT_cjet_eff_den;
  TH2D *Reco_JETT_cjet_eff_num;

  TH2D *Reco_JETT_ljet_eff_den;
  TH2D *Reco_JETT_ljet_eff_num;

  TH2D *Reco_JETT_bjet_miss_den;
  TH2D *Reco_JETT_bjet_miss_num;

  TH2D *Reco_JETT_cjet_miss_den;
  TH2D *Reco_JETT_cjet_miss_num;

  TH2D *Reco_JETT_ljet_miss_den;
  TH2D *Reco_JETT_ljet_miss_num;

  TH2D *Reco_JETT_bjet_pur_den;
  TH2D *Reco_JETT_bjet_pur_num;

  TH2D *Reco_JETT_bjet_con_den;
  TH2D *Reco_JETT_bjet_con_num;


  TH2D *Reco_JETT_bjet_eff_den_NoSF;
  TH2D *Reco_JETT_bjet_eff_num_NoSF;

  TH2D *Reco_JETT_cjet_eff_den_NoSF;
  TH2D *Reco_JETT_cjet_eff_num_NoSF;

  TH2D *Reco_JETT_ljet_eff_den_NoSF;
  TH2D *Reco_JETT_ljet_eff_num_NoSF;

  TH2D *Reco_JETT_bjet_miss_den_NoSF;
  TH2D *Reco_JETT_bjet_miss_num_NoSF;

  TH2D *Reco_JETT_cjet_miss_den_NoSF;
  TH2D *Reco_JETT_cjet_miss_num_NoSF;

  TH2D *Reco_JETT_ljet_miss_den_NoSF;
  TH2D *Reco_JETT_ljet_miss_num_NoSF;

  TH2D *Reco_JETT_bjet_pur_den_NoSF;
  TH2D *Reco_JETT_bjet_pur_num_NoSF;

  TH2D *Reco_JETT_bjet_con_den_NoSF;
  TH2D *Reco_JETT_bjet_con_num_NoSF;

  //DeepJET Medium Working Point
  TH2D *Reco_JETM_bjet_eff_den;
  TH2D *Reco_JETM_bjet_eff_num;

  TH2D *Reco_JETM_cjet_eff_den;
  TH2D *Reco_JETM_cjet_eff_num;

  TH2D *Reco_JETM_ljet_eff_den;
  TH2D *Reco_JETM_ljet_eff_num;

  TH2D *Reco_JETM_bjet_miss_den;
  TH2D *Reco_JETM_bjet_miss_num;

  TH2D *Reco_JETM_cjet_miss_den;
  TH2D *Reco_JETM_cjet_miss_num;

  TH2D *Reco_JETM_ljet_miss_den;
  TH2D *Reco_JETM_ljet_miss_num;

  TH2D *Reco_JETM_bjet_pur_den;
  TH2D *Reco_JETM_bjet_pur_num;

  TH2D *Reco_JETM_bjet_con_den;
  TH2D *Reco_JETM_bjet_con_num;


  TH2D *Reco_JETM_bjet_eff_den_NoSF;
  TH2D *Reco_JETM_bjet_eff_num_NoSF;

  TH2D *Reco_JETM_cjet_eff_den_NoSF;
  TH2D *Reco_JETM_cjet_eff_num_NoSF;

  TH2D *Reco_JETM_ljet_eff_den_NoSF;
  TH2D *Reco_JETM_ljet_eff_num_NoSF;

  TH2D *Reco_JETM_bjet_miss_den_NoSF;
  TH2D *Reco_JETM_bjet_miss_num_NoSF;

  TH2D *Reco_JETM_cjet_miss_den_NoSF;
  TH2D *Reco_JETM_cjet_miss_num_NoSF;

  TH2D *Reco_JETM_ljet_miss_den_NoSF;
  TH2D *Reco_JETM_ljet_miss_num_NoSF;

  TH2D *Reco_JETM_bjet_pur_den_NoSF;
  TH2D *Reco_JETM_bjet_pur_num_NoSF;

  TH2D *Reco_JETM_bjet_con_den_NoSF;
  TH2D *Reco_JETM_bjet_con_num_NoSF;

  //DeepJET Light Working Point
  TH2D *Reco_JETL_bjet_eff_den;
  TH2D *Reco_JETL_bjet_eff_num;

  TH2D *Reco_JETL_cjet_eff_den;
  TH2D *Reco_JETL_cjet_eff_num;

  TH2D *Reco_JETL_ljet_eff_den;
  TH2D *Reco_JETL_ljet_eff_num;

  TH2D *Reco_JETL_bjet_miss_den;
  TH2D *Reco_JETL_bjet_miss_num;

  TH2D *Reco_JETL_cjet_miss_den;
  TH2D *Reco_JETL_cjet_miss_num;

  TH2D *Reco_JETL_ljet_miss_den;
  TH2D *Reco_JETL_ljet_miss_num;

  TH2D *Reco_JETL_bjet_pur_den;
  TH2D *Reco_JETL_bjet_pur_num;

  TH2D *Reco_JETL_bjet_con_den;
  TH2D *Reco_JETL_bjet_con_num;


  TH2D *Reco_JETL_bjet_eff_den_NoSF;
  TH2D *Reco_JETL_bjet_eff_num_NoSF;

  TH2D *Reco_JETL_cjet_eff_den_NoSF;
  TH2D *Reco_JETL_cjet_eff_num_NoSF;

  TH2D *Reco_JETL_ljet_eff_den_NoSF;
  TH2D *Reco_JETL_ljet_eff_num_NoSF;

  TH2D *Reco_JETL_bjet_miss_den_NoSF;
  TH2D *Reco_JETL_bjet_miss_num_NoSF;

  TH2D *Reco_JETL_cjet_miss_den_NoSF;
  TH2D *Reco_JETL_cjet_miss_num_NoSF;

  TH2D *Reco_JETL_ljet_miss_den_NoSF;
  TH2D *Reco_JETL_ljet_miss_num_NoSF;

  TH2D *Reco_JETL_bjet_pur_den_NoSF;
  TH2D *Reco_JETL_bjet_pur_num_NoSF;

  TH2D *Reco_JETL_bjet_con_den_NoSF;
  TH2D *Reco_JETL_bjet_con_num_NoSF;


  //GenJet basic distributions
  //TH1F* genjt_hist;
  TH1F* genjt_pt[njetetamn];
  TH1F* genjt_eta;
  TH1F* genjt_phi;
  TH1F* genjtallave_pt[njetetamn];

  TH1F* genjt1_pt[njetetamn];
  TH1F* genjt1_eta;
  TH1F* genjt1_phi;

  TH1F* genjt2_pt[njetetamn];
  TH1F* genjt2_eta;
  TH1F* genjt2_phi;

  TH1F* genjt3_pt[njetetamn];
  TH1F* genjt3_eta;
  TH1F* genjt3_phi;

  TH1F* genjetdpt[njetetamn];
  TH1F* genjetdphi[njetetamn];
  TH1F* genjetptbypl[njetetamn];
  TH1F* genjetpt2bypt1[njetetamn];
  TH1F* genjetpt3bypt2[njetetamn];

  //Charged particles inside jets distributions
  //TH1F* genchg_hist;
  TH1F* genchg_pt;
  TH1F* genchg_eta;
  TH1F* genchg_phi;

  TH1F* genchg1_pt;
  TH1F* genchg1_eta;
  TH1F* genchg1_phi;

  TH1F* genchg2_pt;
  TH1F* genchg2_eta;
  TH1F* genchg2_phi;

  TH1F* genchg3_pt;
  TH1F* genchg3_eta;
  TH1F* genchg3_phi;

  //highest pt particle inside Lead & sub-lead Inclusive jet & BJet
  TH1F* genjetchg1_cand1;
  TH1F* genjetchg2_cand1;
  TH1F* genbjetchg1_cand1;
  TH1F* genbjetchg2_cand1;

/*
  TH1F* genneu_hist;
  TH1F* genneu_pt;
  TH1F* genneu_eta;
  TH1F* genneu_phi;

  TH1F* genjt_oth_pt[njetetamn];
  TH1F* genjt_oth_eta;
  TH1F* genjt_oth_phi;

  TH1F* genchg_oth_hist;
  TH1F* genchg_oth_pt;
  TH1F* genchg_oth_eta;
  TH1F* genchg_oth_phi;

  TH1F* genneu_oth_hist;
  TH1F* genneu_oth_pt;
  TH1F* genneu_oth_eta;
  TH1F* genneu_oth_phi;
*/

  TH1F* prim_hist[nHLTmx+1];
  TH1F* prim_sel[nHLTmx+1];

  TH1F* prim_hist_rewt[nHLTmx+1];
  TH1F* prim_sel_rewt[nHLTmx+1];

  TH2F* prim_correl;

  TH1F* prim_alltrk[2];
  TH1F* prim_seltrk[2];
  TH1F* prim_goodtrk[2];
  TH1F* prim_dx[2];
  TH1F* prim_dy[2];
  TH2F* prim_dxy[2];
  TH1F* prim_dz[2];  
  TH1F* prim_prob[2];

  TH1F* h_jetpt[nHLTmx][njetetamn];
  TH1F* h_jeteta[nHLTmx];
  TH1F* h_jetphi[nHLTmx][njetetamn];
  TH1F* h_njets[njetetamn];
  TH1F* h_nchg[njetetamn];

  TH1F* gen_njets[njetetamn];

  TH1F* trgjet_angle[nHLTmx][2];
  TH2F* trgjet_2dangle[nHLTmx][2];
  TH1F* trgjet_pt[nHLTmx][2];
  TH1F* trgjet_eta[nHLTmx][2];
  TH1F* trgjet_phi[nHLTmx][2];
  TH1F* prbjet_pt[nHLTmx][2];
  TH1F* prbjet_eta[nHLTmx][2];
  TH1F* prbjet_phi[nHLTmx][2];

  //Dijet trigger efficiency
  TH1F* hlt_dijettag[nHLTmx][njetetamn];
  TH1F* hlt_dijetprob[nHLTmx][njetetamn];

  //Trigger Normal case
  TH1F* counthist; 

//-------------------------------------------Member data
  edm::EDGetTokenT<GenEventInfoProduct> generator1_;
  edm::EDGetTokenT<pat::JetCollection> jetSrcToken_;
  edm::EDGetTokenT<edm::View<pat::PackedGenParticle> > genSrcToken_;
  edm::EDGetTokenT<pat::PackedCandidateCollection> PFSrcToken_;
  edm::EDGetTokenT<edm::TriggerResults> metPATToken_;
  edm::EDGetTokenT<edm::TriggerResults> metRECOToken_;
  edm::EDGetTokenT<edm::TriggerResults> triggerBits_;
  edm::EDGetTokenT<pat::TriggerObjectStandAloneCollection> triggerObjects_;
  edm::EDGetTokenT<pat::PackedTriggerPrescales> triggerPrescales_;
  edm::EDGetTokenT<pat::METCollection> metToken_;
  edm::EDGetTokenT<reco::VertexCollection> vtxToken_;
  edm::EDGetTokenT<reco::BeamSpot> beamSpot_;
  edm::EDGetTokenT<reco::GenJetCollection> genjetToken_;
  edm::EDGetTokenT<std::vector<PileupSummaryInfo> > pileup_;
  edm::EDGetTokenT<reco::PFJetCollection> ak5PFjetToken_;
  edm::EDGetTokenT<reco::GenJetCollection> ak5GenJetToken_;
  edm::EDGetTokenT<reco::JetFlavourInfoMatchingCollection> genjetFlavorToken_;
  edm::EDGetTokenT<reco::GenParticleCollection> genParticlesToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfCTEQWeightsInputToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfMMTHWeightsInputToken_;
  const edm::EDGetTokenT<std::vector<double> > pdfNNPDFWeightsInputToken_;
  const edm::EDGetTokenT<LHERunInfoProduct> LHERunInfoToken_;
  const edm::EDGetTokenT<LHEEventProduct> lheEventProductToken_;
  edm::EDGetTokenT<double> m_rho_token;
#ifdef PREFIRE
  edm::EDGetTokenT< double > prefweight_token;
  edm::EDGetTokenT< double > prefweightup_token;
  edm::EDGetTokenT< double > prefweightdown_token;
#endif
  const std::vector<std::string> bDiscriminators_;  //BTag info
  const std::string btagSFFile_ ;                   //BTag Scale-Factor File
  const std::string btagEffFile_;
  //edm::EDGetTokenT<reco::TrackCollection> tracksToken_;

  /*
  edm::EDGetTokenT<bool> filterGoodVerticesToken_;
  edm::EDGetTokenT<bool> filterglobalSuperTightHalo2016FilterToken_;
  edm::EDGetTokenT<bool> filterHBHENoiseFilterToken_;
  edm::EDGetTokenT<bool> filterHBHENoiseIsoFilterToken_;
  edm::EDGetTokenT<bool> filterEcalDeadCellTriggerPrimitiveFilterToken_;
  edm::EDGetTokenT<bool> filterBadPFMuonFilterToken_;
  edm::EDGetTokenT<bool> filterBadPFMuonDzFilterToken_;
  edm::EDGetTokenT<bool> filtereeBadScFilterToken_;
  edm::EDGetTokenT<bool> filterecalBadCalibFilterToken_;
  */

  float qscale;
  float wtfact;                  //MC : eventinfo->weight(); data : hltpres[ihltfill]*l1pres[ihltfill];
  int procid, npilup1, npilup2;  //1:-5 to -1, 2:0 to 3

  int idall;
  float xfrac1, xfrac2, xpdf1, xpdf2;  

  //HLTConfigProvider hltConfig_;
  HLTPrescaleProvider hltPrescaleProvider_;
  int nreco, naa, nbb, ncc;
  //int Reco=0,Gen=0,RM=0;

  //BTag info
  std::unique_ptr<CorrectionSet> SFBTag;
  Correction::Ref corrector_deepCSV_bcFlav;
  Correction::Ref corrector_deepCSV_lFlav;
  Correction::Ref corrector_deepJet_bcFlav;
  Correction::Ref corrector_deepJet_lFlav;

  std::vector<JetCorrectionUncertainty*> vsrc; //(nsrc);
  reweight::PoissonMeanShifter PShiftUp_;
  reweight::PoissonMeanShifter PShiftDown_;
  edm::LumiReWeighting *LumiWeights_;

#ifdef PUCLEAN
  unordered_map<unsigned long long, float>  maxgenpts;
#endif

};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
  MiniAODAnalyzer::MiniAODAnalyzer(const edm::ParameterSet& iConfig):
  generator1_(consumes<GenEventInfoProduct>(iConfig.getParameter<edm::InputTag>("evtinfo"))),
  jetSrcToken_(consumes<pat::JetCollection>(iConfig.getParameter<edm::InputTag>("jetSrc"))),
  genSrcToken_(consumes<edm::View<pat::PackedGenParticle> >(iConfig.getUntrackedParameter<edm::InputTag>("genSrc"))),
  PFSrcToken_(consumes<pat::PackedCandidateCollection>(iConfig.getParameter<edm::InputTag>("pfSrc"))),
  metPATToken_(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("metPATSrc"))),
  metRECOToken_(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("metRECOSrc"))),
  triggerBits_(consumes<edm::TriggerResults>(iConfig.getParameter<edm::InputTag>("bits"))),
  triggerObjects_(consumes<pat::TriggerObjectStandAloneCollection>(iConfig.getParameter<edm::InputTag>("objects"))),
  triggerPrescales_(consumes<pat::PackedTriggerPrescales>(iConfig.getParameter<edm::InputTag>("prescales"))),
  metToken_(consumes<pat::METCollection>(iConfig.getParameter<edm::InputTag>("metSrc"))),
  vtxToken_(consumes<reco::VertexCollection>(iConfig.getParameter<edm::InputTag>("vertices"))),
  beamSpot_(consumes<reco::BeamSpot>(iConfig.getParameter<edm::InputTag>("bsSrc"))),
  genjetToken_(consumes<reco::GenJetCollection>(iConfig.getParameter<edm::InputTag>("genjetSrc"))),
  pileup_(consumes<std::vector<PileupSummaryInfo> >(iConfig.getParameter<edm::InputTag>("pileupSrc"))),
  ak5PFjetToken_(consumes<reco::PFJetCollection>(iConfig.getParameter<edm::InputTag>("ak5pfJetSrc"))),
  ak5GenJetToken_(consumes<reco::GenJetCollection>(iConfig.getParameter<edm::InputTag>("ak5genJetSrc"))),
  genjetFlavorToken_(consumes<reco::JetFlavourInfoMatchingCollection>(iConfig.getParameter<edm::InputTag>("genJetFlavourInfos"))),
  genParticlesToken_(consumes<reco::GenParticleCollection>(iConfig.getParameter<edm::InputTag>("genparticles"))),
  pdfCTEQWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFCTEQWeightsInputTag"))),
  pdfMMTHWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFMMTHWeightsInputTag"))),
  pdfNNPDFWeightsInputToken_(consumes<std::vector<double> >(iConfig.getParameter<edm::InputTag>("PDFNNPDFWeightsInputTag"))),
  LHERunInfoToken_(consumes<LHERunInfoProduct, edm::InRun >(iConfig.getParameter<edm::InputTag>("LHERunInfoProductInputTag"))),
  lheEventProductToken_(consumes<LHEEventProduct>(iConfig.getParameter<edm::InputTag>("LHEEventProductInputTag"))),
#ifdef PREFIRE
  prefweight_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProb"))),
  prefweightup_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProbUp"))),
  prefweightdown_token(consumes< double >(edm::InputTag("prefiringweight:nonPrefiringProbDown"))),
#endif
  bDiscriminators_(iConfig.getParameter<std::vector<std::string> >("bDiscriminators")),
  btagSFFile_(iConfig.getParameter<std::string>("BtagScaleFacFile")),
  btagEffFile_(iConfig.getParameter<std::string>("BTagEffFile")),
  //tracksToken_(consumes<reco::TrackCollection>(iConfig.getParameter<edm::InputTag>("tracks"))),
  hltPrescaleProvider_(iConfig, consumesCollector(), *this)


{
  //now do what ever initialization is needed
  edm::Service<TFileService> fs;
  m_rho_token = consumes<double>(iConfig.getParameter<edm::InputTag>("rho"));
  //m_resolutions_file = iConfig.getParameter<edm::FileEEInPath>("resolutionsFile").fullPath();
  //scalefile = iConfig.getParameter<edm::FileInPath>("scaleFactorsFile").fullPath();
  isHistFill = iConfig.getUntrackedParameter<bool>("HistFill", true);
  //isHistFill2 = pset.getUntrackedParameter<bool>("HistFill2", false);                                            
  isTrigger = iConfig.getUntrackedParameter<bool>("Trigger", true);
  //isRECO = iConfig.getUntrackedParameter<bool>("RECO", false);
  isMC = iConfig.getUntrackedParameter<bool>("MonteCarlo", false);
  isReconstruct = iConfig.getUntrackedParameter<bool>("Reconstruct", true);
  isJetQCD = iConfig.getUntrackedParameter<bool>("JetQCD", false);
  isGenJET = iConfig.getUntrackedParameter<bool>("GenJET", false);
  //etarange = iConfig.getUntrackedParameter<double>("EtaRange", 5.0);
  ptthreshold = iConfig.getUntrackedParameter<double>("PtThreshold", 10.0);
  //leadingPtthreshold = iConfig.getUntrackedParameter<double>("LeadingPtThreshold", 40.0);
  isOtherAlgo = iConfig.getUntrackedParameter<bool>("OtherAlgo", false);
  weight2 = iConfig.getUntrackedParameter<double>("HistWeight", 1.0);
  weight = weight2;
  theHLTTag = iConfig.getUntrackedParameter<string>("HLTTag", "HLT");
  theRootFileName = iConfig.getUntrackedParameter<string>("RootFileName");
  
  //BTag Stuff
  SFBTag = CorrectionSet::from_file(btagSFFile_);
  corrector_deepCSV_bcFlav = SFBTag->at("deepCSV_mujets");
  corrector_deepCSV_lFlav = SFBTag->at("deepCSV_incl");

  corrector_deepJet_bcFlav = SFBTag->at("deepJet_mujets"); //deepJet_mujets  OR deepJet_comb
  corrector_deepJet_lFlav = SFBTag->at("deepJet_incl");


  bTagEff_file = new TFile(btagEffFile_.c_str());
  //cout << "Testing 1 ==== " <<njecmx<< endl;

  char RecoBinName[100], GenBinName[100], RecoBinbjetName[100], GenBinbjetName[100], Axisname[100]; 
  char name[200];
  char title[200];

//////////////////////
//--TUnfoldBinning--//
//////////////////////

//Binning scheme for both RECO & GEN and for all 3 definition, 2 jets and 10 kappas using array
	for(int id=0; id<ndef; id++){
		for(int ij=0; ij<njet; ij++){
			for (int ik=0; ik<nkappa; ik++){
				for (int iet=0; iet<njetetamn; iet++) {
				sprintf(RecoBinName, "Detector2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                binsRec2D[id][ij][ik][iet] = new TUnfoldBinning(RecoBinName);
                		sprintf(RecoBinName, "Recobin2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                		RecoBinning2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->AddBinning(RecoBinName);
                		sprintf(Axisname, "d%i_j%i_k%i", id,ij,ik);
                		//RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], false, false);
				RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nrecobins[id][ij][ik], recorng[id][ij][ik], false, false);
                		sprintf(Axisname, "pt");
                		//RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nHLTmx, recohtbins, false, false);
                		RecoBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);
				//RecoBinning2D[iet][id][ij][ik]->AddAxis(Axisname, PTbins, recohtbins2D, false, false);				

				sprintf(GenBinName, "Generator2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                binsGen2D[id][ij][ik][iet] = new TUnfoldBinning(GenBinName);
                		sprintf(GenBinName, "Genbin2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                		GenBinning2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->AddBinning(GenBinName);
               			sprintf(Axisname, "d%i_j%i_k%i", id, ij, ik);
                		//GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik], false, false);
				GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenbins[id][ij][ik], genrng[id][ij][ik], false, false);
                		sprintf(Axisname, "pt");
                		//GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, nHLTmx, recohtbins, false, false);
				GenBinning2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);
				//GenBinning2D[iet][id][ij][ik]->AddAxis(Axisname, PTbins, recohtbins2D, false, false);
				

				//BJets
				sprintf(RecoBinbjetName, "Detectorbjet2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                binsRecbjet2D[id][ij][ik][iet] = new TUnfoldBinning(RecoBinbjetName);
                                sprintf(RecoBinbjetName, "Recobinbjet2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                                RecoBinningbjet2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->AddBinning(RecoBinbjetName);
                                sprintf(Axisname, "d%i_j%i_k%i", id,ij,ik);
                                RecoBinningbjet2D[id][ij][ik][iet]->AddAxis(Axisname, nrecobins_bjet[id][ij][ik], recorng_bjet[id][ij][ik], false, false);
                                sprintf(Axisname, "pt");
                                RecoBinningbjet2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);

				sprintf(GenBinbjetName, "Generatorbjet2d_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                binsGenbjet2D[id][ij][ik][iet] = new TUnfoldBinning(GenBinbjetName);
                                sprintf(GenBinbjetName, "Genbinbjet2d_d%i_j%i_k%i_eta%i",id,ij,ik,iet);
                                GenBinningbjet2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->AddBinning(GenBinbjetName);
                                sprintf(Axisname, "d%i_j%i_k%i", id, ij, ik);
                                GenBinningbjet2D[id][ij][ik][iet]->AddAxis(Axisname, ngenbins_bjet[id][ij][ik], genrng_bjet[id][ij][ik], false, false);
                                sprintf(Axisname, "pt");
                                GenBinningbjet2D[id][ij][ik][iet]->AddAxis(Axisname, ngenPT, genhtbins, false, false);
				}
			}
		}
	}

//Histograms for 2D binning scheme
for(int id=0; id<ndef; id++){
        for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
			for (int iet=0; iet<njetetamn; iet++) {
				if (isReconstruct) {
					sprintf(name, "dd_reco_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                        		sprintf(title, "2D Reco Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                        		h_recovar2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
					h_recovar2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//BJet
					sprintf(name, "dd_reco_bjet_deepJETT_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet2D_deepJETT[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet2D_deepJETT[id][ij][ik][iet]->Sumw2();

					//NoSF
					sprintf(name, "dd_reco_bjet_deepJETT_NoSF_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT No SF Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet2D_deepJETT_NoSF[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet2D_deepJETT_NoSF[id][ij][ik][iet]->Sumw2();
#ifdef FLAV
					//Flavor Tagging
					sprintf(name, "dd_reco_gjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco gJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_gjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_gjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_ujet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco uJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ujet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ujet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_ubarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco ubarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ubarjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ubarjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_djet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco dJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_djet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_djet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_dbarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco dbarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_dbarjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_dbarjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_bjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_bbarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bbarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bbarjet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bbarjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_ojet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco oJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_ojet2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_ojet2D[id][ij][ik][iet]->Sumw2();
#endif

					sprintf(name, "dd_recofake_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_recofake_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake BJetBin Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake2D_BJetBin[id][ij][ik][iet]->Sumw2();	

					sprintf(name, "dd_recofake_bjet_deepJETT_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake bjet deepJETT Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_bjet2D_deepJETT[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet2D_deepJETT[id][ij][ik][iet]->Sumw2();
					}
#ifdef  LHAPDF
            			for (int ix=1; ix<nnnmx; ix++) {
            				sprintf(name, "dd_genpdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
            				sprintf(title, "2D Genpdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
            				h_genvarpdf2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
            				h_genvarpdf2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_genpdf_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Genpdf BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genvarpdf2D_BJetBin[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarpdf2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

					//BJet
					sprintf(name, "dd_genpdf_BJet_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Genpdf BJet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genvar_BJet_pdf2D[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_pdf2D[id][ij][ik][iet][ix]->Sumw2();
           				}

				for(int iy=0; iy<nmgscale; iy++){
					sprintf(name, "dd_genmgscale_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, iy);
                                        sprintf(title, "2D Genmgscale Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],iy);
                                        h_genvarmgscale2D[id][ij][ik][iet][iy] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarmgscale2D[id][ij][ik][iet][iy]->Sumw2();

					sprintf(name, "dd_genmgscale_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, iy);
                                        sprintf(title, "2D Genmgscale BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],iy);
                                        h_genvarmgscale2D_BJetBin[id][ij][ik][iet][iy] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarmgscale2D_BJetBin[id][ij][ik][iet][iy]->Sumw2();

					//BJet
					sprintf(name, "dd_gen_BJet_mgscale_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, iy);
                                        sprintf(title, "2D Genmgscale BJet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],iy);
                                        h_genvar_BJet_mgscale2D[id][ij][ik][iet][iy] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_mgscale2D[id][ij][ik][iet][iy]->Sumw2();
					}

				for (int ix=1; ix<nnnmx; ix++) {
					sprintf(name, "dd_recopdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Recopdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recovarpdf2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovarpdf2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_recofakepdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D RecoFake pdf  Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recofakepdf2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofakepdf2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_genmisspdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D GenMiss pdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genmisspdf2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmisspdf2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_corrpdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Corrpdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_RMpdf2D[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RMpdf2D[id][ij][ik][iet][ix]->Sumw2();


					sprintf(name, "dd_recopdf_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Recopdf BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recovarpdf2D_BJetBin[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovarpdf2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_recofakepdf_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D RecoFake pdf BJetBin  Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recofakepdf2D_BJetBin[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofakepdf2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_genmisspdf_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D GenMiss pdf BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genmisspdf2D_BJetBin[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmisspdf2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_corrpdf_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Corrpdf BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_RMpdf2D_BJetBin[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RMpdf2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

					//BJet
					sprintf(name, "dd_recopdf_bjet_deepJETT_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Recopdf bjet deepJETT Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recovar_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_recofake_bjet_deepJETT_pdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D RecoFake bjet deepJETT pdf  Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recofake_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_pdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D GenMiss BJet pdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genmiss_BJet_pdf2D[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_pdf2D[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_corr_bjet_deepJETT_pdf_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Corr bjet deepJETT pdf Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_RM_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Sumw2();
				}
#endif

#ifdef SCALEUNC
                                for (int ix=0; ix<nscale; ix++) {
                                        sprintf(name, "dd_genscaleunc_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Gen Scale Unc Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genvarscaleunc2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarscaleunc2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_genscaleunc_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Gen Scale Unc BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genvarscaleunc2D_BJetBin[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvarscaleunc2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

					//BJet
					sprintf(name, "dd_gen_BJet_scaleunc_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Gen BJet Scale Unc Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genvar_BJet_scaleunc2D[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_scaleunc2D[id][ij][ik][iet][ix]->Sumw2();
                                        }
#endif

#ifdef  JETENERGY
            			for (int ix=1; ix<njecmx; ix++) {
            				sprintf(name, "dd_recojec_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
            				sprintf(title, "2D Recojec Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
            				h_recovarjec2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
            				h_recovarjec2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_recojec_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Recojec BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recovarjec2D_BJetBin[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovarjec2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

					//BJet
					sprintf(name, "dd_recojec_bjet_deepJETT_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Recojec bjet deepJETT Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recovar_bjet_deepJETT_jec2D[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_jec2D[id][ij][ik][iet][ix]->Sumw2();
            				}
#elif defined(JETRESO)
	      			for (int ix=0; ix<njecmx; ix++ ) {
              				sprintf(name, "dd_reco_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D Reco reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_recovarres2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_recovarres2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_reco_reso_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Reco reso BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recovarres2D_BJetBin[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovarres2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_corr_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D Corr reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_RM_JER_2D[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
              				h_RM_JER_2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_corr_reso_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Corr reso BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_RM_JER_2D_BJetBin[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_JER_2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_fake_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D fake reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_recofake_JER_2D[id][ij][ik][iet][ix] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_recofake_JER_2D[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_fake_reso_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D fake reso BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recofake_JER_2D_BJetBin[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_JER_2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

					sprintf(name, "dd_miss_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D miss reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genmiss_JER_2D[id][ij][ik][iet][ix] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_JER_2D[id][ij][ik][iet][ix]->Sumw2();

              				sprintf(name, "dd_miss_reso_BJetBin_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
              				sprintf(title, "2D miss reso BJetBin Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
              				h_genmiss_JER_2D_BJetBin[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
              				h_genmiss_JER_2D_BJetBin[id][ij][ik][iet][ix]->Sumw2();

					//BJet
					sprintf(name, "dd_reco_bjet_deepJETT_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Reco bjet deepJETT reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recovar_bjet_deepJETT_res2D[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_res2D[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_corr_bjet_deepJETT_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D Corr bjet deepJETT reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_RM_bjet_deepJETT_JER_2D[id][ij][ik][iet][ix] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_JER_2D[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_fake_bjet_deepJETT_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D fake bjet deepJETT reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_recofake_bjet_deepJETT_JER_2D[id][ij][ik][iet][ix] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_JER_2D[id][ij][ik][iet][ix]->Sumw2();

                                        sprintf(name, "dd_miss_BJet_reso_d%i_j%i_k%i_eta%i_%i", id, ij, ik, iet, ix);
                                        sprintf(title, "2D miss BJet reso Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet],ix);
                                        h_genmiss_BJet_JER_2D[id][ij][ik][iet][ix] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_JER_2D[id][ij][ik][iet][ix]->Sumw2();
            				}
#endif					
					sprintf(name, "dd_gen_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                        sprintf(title, "2D Gen Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                		        h_genvar2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                        		h_genvar2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_genmiss_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar2D_BJetBin[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_genmiss_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss2D_BJetBin[id][ij][ik][iet]->Sumw2();


					sprintf(name, "dd_gen_BJet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_BJet2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_BJet2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet2D[id][ij][ik][iet]->Sumw2();			

					//GenJet Flavour
					sprintf(name, "dd_gen_gjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen gJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_gjet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_gjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_ujet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen uJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_ujet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_ujet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_ubarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen ubarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_ubarjet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_ubarjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_djet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen dJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_djet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_djet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_dbarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen dbarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_dbarjet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_dbarjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_bjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen bJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_bjet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_bjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_bbarjet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen bbarJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_bbarjet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_bbarjet2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_gen_ojet_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen oJet Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_ojet2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_ojet2D[id][ij][ik][iet]->Sumw2();

					if (isReconstruct) {
						sprintf(name, "dd_corr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
		                                sprintf(title, "Gen_Reco Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                		                h_RM2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                		h_RM2D[id][ij][ik][iet]->Sumw2();

						sprintf(name, "dd_corr_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM2D_BJetBin[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM2D_BJetBin[id][ij][ik][iet]->Sumw2();

						sprintf(name, "dd_corr_bjet_deepJETT_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco bjet deepJETT Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_bjet2D_deepJETT[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_bjet2D_deepJETT[id][ij][ik][iet]->Sumw2();
						}

#ifdef PREFIRE
				if (isReconstruct) {
                                        sprintf(name, "dd_reco_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefire2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefire2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefire2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_corr_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefire2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefire2D[id][ij][ik][iet]->Sumw2();


					sprintf(name, "dd_reco_prefire_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefire2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefire2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefire_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire BJetBin Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefire2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefire2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_prefire_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefire2D_BJetBin[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefire2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//up
					sprintf(name, "dd_reco_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefireup_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire up Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefireup_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefireup_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefireup_2D[id][ij][ik][iet]->Sumw2();


					sprintf(name, "dd_reco_prefireup_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire up BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefireup_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefireup_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefireup_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire up BJetBin Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefireup_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefireup_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_prefireup_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire up BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefireup_2D_BJetBin[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefireup_2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//down
					sprintf(name, "dd_reco_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefiredown_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire down Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefiredown_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefiredown_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefiredown_2D[id][ij][ik][iet]->Sumw2();


					sprintf(name, "dd_reco_prefiredown_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco PreFire down BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_prefiredown_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_prefiredown_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_prefiredown_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake PreFire down BJetBin Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_prefiredown_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_prefiredown_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_prefiredown_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco PreFire down BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_prefiredown_2D_BJetBin[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_prefiredown_2D_BJetBin[id][ij][ik][iet]->Sumw2();

					
					//BJet
					sprintf(name, "dd_reco_bjet_deepJETT_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet_deepJETT_prefire2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_bjet_deepJETT_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake bjet deepJETT PreFire Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_bjet_deepJETT_prefire2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_bjet_deepJETT_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco bjet deepJETT PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_bjet_deepJETT_prefire2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Sumw2();

					
					//up
					sprintf(name, "dd_reco_bjet_deepJETT_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet_deepJETT_prefireup_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_bjet_deepJETT_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake bjet deepJETT PreFire up Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_bjet_deepJETT_prefireup_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_bjet_deepJETT_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco bjet deepJETT PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_bjet_deepJETT_prefireup_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Sumw2();

					//Down
					sprintf(name, "dd_reco_bjet_deepJETT_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_bjet_deepJETT_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco Fake bjet deepJETT PreFire down Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        h_recofake_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_corr_bjet_deepJETT_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco bjet deepJETT PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Sumw2();
                                        }

					sprintf(name, "dd_gen_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefire2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefire2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefire2D[id][ij][ik][iet]->Sumw2();			

					//up
					sprintf(name, "dd_gen_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefireup_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefireup_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefireup_2D[id][ij][ik][iet]->Sumw2();

					//down
					sprintf(name, "dd_gen_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefiredown_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefiredown_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefiredown_2D[id][ij][ik][iet]->Sumw2();

					//BJetBin
					sprintf(name, "dd_gen_prefire_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefire2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefire2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefire_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefire2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefire2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//up
					sprintf(name, "dd_gen_prefireup_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire up BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefireup_2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefireup_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefireup_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire up BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefireup_2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefireup_2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//down
					sprintf(name, "dd_gen_prefiredown_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen PreFire down BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_prefiredown_2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_prefiredown_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_prefiredown_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss PreFire down BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_prefiredown_2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_prefiredown_2D_BJetBin[id][ij][ik][iet]->Sumw2();


					//BJet
					sprintf(name, "dd_gen_BJet_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_BJet_prefire2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_prefire2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_prefire_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJet PreFire Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_BJet_prefire2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_prefire2D[id][ij][ik][iet]->Sumw2();

					//up
					sprintf(name, "dd_gen_BJet_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_BJet_prefireup_2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_prefireup_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_prefireup_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJet PreFire up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_BJet_prefireup_2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_prefireup_2D[id][ij][ik][iet]->Sumw2();

					//down
					sprintf(name, "dd_gen_BJet_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik], etarange[iet]);
                                        h_genvar_BJet_prefiredown_2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_prefiredown_2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_prefiredown_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJet PreFire down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_BJet_prefiredown_2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_prefiredown_2D[id][ij][ik][iet]->Sumw2();
#endif

#ifdef TRACKEFF
					if (isReconstruct) {
						sprintf(name, "dd_reco_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackeff2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackeff2D[id][ij][ik][iet]->Sumw2();

						sprintf(name, "dd_recofake_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track Eff Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackeff2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackeff2D[id][ij][ik][iet]->Sumw2();

						sprintf(name, "dd_corr_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackeff2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackeff2D[id][ij][ik][iet]->Sumw2();


						sprintf(name, "dd_reco_trackeff_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track Eff BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackeff2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackeff2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackeff_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track Eff BJetBin Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackeff2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackeff2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackeff_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track Eff BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackeff2D_BJetBin[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackeff2D_BJetBin[id][ij][ik][iet]->Sumw2();

						//BJet
						sprintf(name, "dd_reco_bjet_deepJETT_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco bjet deepJETT Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_bjet_deepJETT_trackeff2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_bjet_deepJETT_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake bjet deepJETT Track Eff Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_bjet_deepJETT_trackeff2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_bjet_deepJETT_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco bjet deepJETT Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_bjet_deepJETT_trackeff2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
						}
			
					sprintf(name, "dd_gen_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genvar_trackeff2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_trackeff2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_genmiss_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackeff2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Sumw2();


					sprintf(name, "dd_gen_trackeff_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Track Eff BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genvar_trackeff2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_trackeff2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_trackeff_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track Eff BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackeff2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackeff2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//BJet
					sprintf(name, "dd_gen_BJet_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genvar_BJet_trackeff2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_trackeff2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_trackeff_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJet Track Eff Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_BJet_trackeff2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_trackeff2D[id][ij][ik][iet]->Sumw2();
#endif

/*
#ifdef TRACKEFFDEBUG
					//Track Matching
					if (isReconstruct) {
						sprintf(name, "dd_reco_trackeff_debug_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                	                        sprintf(title, "2D Reco Track Eff debug Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                        	                h_recovar_trackeff2D_debug[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                	        h_recovar_trackeff2D_debug[id][ij][ik][iet]->Sumw2();

                                        	sprintf(name, "dd_recofake_trackeff_debug_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                       	 	sprintf(title, "2D Reco Fake Track Eff debug Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                        	h_recofake_trackeff2D_debug[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        	h_recofake_trackeff2D_debug[id][ij][ik][iet]->Sumw2();

                                        	sprintf(name, "dd_corr_trackeff_debug_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        	sprintf(title, "Gen_Reco Track Eff debug Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        	h_RM_trackeff2D_debug[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                        	h_RM_trackeff2D_debug[id][ij][ik][iet]->Sumw2();
					}

					sprintf(name, "dd_gen_trackeff_debug_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Track Eff debug Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genvar_trackeff2D_debug[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_trackeff2D_debug[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_trackeff_debug_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track Eff debug Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackeff2D_debug[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackeff2D_debug[id][ij][ik][iet]->Sumw2();
#endif
*/

#ifdef TRACKPTUP
					if (isReconstruct) {
						sprintf(name, "dd_reco_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt1_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT up Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt1_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt1_2D[id][ij][ik][iet]->Sumw2();


						sprintf(name, "dd_reco_trackpt_up_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT up BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt1_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt1_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_up_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT up BJetBin Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt1_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt1_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_up_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT up BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt1_2D_BJetBin[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt1_2D_BJetBin[id][ij][ik][iet]->Sumw2();

						//BJet
						sprintf(name, "dd_reco_bjet_deepJETT_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco bjet deepJETT Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_bjet_deepJETT_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake bjet deepJETT Track pT up Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_bjet_deepJETT_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco bjet deepJETT Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Sumw2();
                                                }
					sprintf(name, "dd_genmiss_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_genmiss_trackpt_up_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT up BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt1_2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt1_2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//BJet
					sprintf(name, "dd_genmiss_BJet_trackpt_up_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJet Track pT up Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_BJet_trackpt1_2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_trackpt1_2D[id][ij][ik][iet]->Sumw2();
#endif

#ifdef TRACKPTDOWN
					if (isReconstruct) {
						sprintf(name, "dd_reco_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt2_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT down Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet] = binsRec2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt2_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRec2D[id][ij][ik][iet], binsGen2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt2_2D[id][ij][ik][iet]->Sumw2();


						sprintf(name, "dd_reco_trackpt_down_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Track pT down BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_trackpt2_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_trackpt2_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_trackpt_down_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake Track pT down BJetBin Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_trackpt2_2D_BJetBin[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_trackpt2_2D_BJetBin[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_trackpt_down_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco Track pT down BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_trackpt2_2D_BJetBin[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_trackpt2_2D_BJetBin[id][ij][ik][iet]->Sumw2();

						//BJet
						sprintf(name, "dd_reco_bjet_deepJETT_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco bjet deepJETT Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                                h_recovar_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recovar_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_recofake_bjet_deepJETT_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "2D Reco Fake bjet deepJETT Track pT down Q_{%s,%g}^{%g} %g ",jcodef[id], jetname[ij], kappa[ik],etarange[iet]);
                                                h_recofake_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                                h_recofake_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Sumw2();

                                                sprintf(name, "dd_corr_bjet_deepJETT_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                                sprintf(title, "Gen_Reco bjet deepJETT Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                                h_RM_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                                h_RM_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Sumw2();
                                                }
					sprintf(name, "dd_genmiss_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet] = binsGen2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_genmiss_trackpt_down_BJetBin_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss Track pT down BJetBin Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_trackpt2_2D_BJetBin[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_trackpt2_2D_BJetBin[id][ij][ik][iet]->Sumw2();

					//BJet
					sprintf(name, "dd_genmiss_BJet_trackpt_down_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen Miss BJet Track pT bjet down Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_genmiss_BJet_trackpt2_2D[id][ij][ik][iet] = binsGenbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_trackpt2_2D[id][ij][ik][iet]->Sumw2();
#endif

#ifdef BTAGUNC
				if (isReconstruct) {
					sprintf(name, "dd_reco_bjet_deepJETT_BTagWt_upCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT BTagWt_upCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_bjet_deepJETT_BTagWt_downCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT BTagWt_downCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_reco_bjet_deepJETT_BTagWt_upUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT BTagWt_upUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_reco_bjet_deepJETT_BTagWt_downUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco bjet deepJETT BTagWt_downUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recovar_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recovar_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Sumw2();

					
					sprintf(name, "dd_recofake_bjet_deepJETT_BTagWt_upCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco fake bjet deepJETT BTagWt_upCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recofake_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_bjet_deepJETT_BTagWt_downCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco fake bjet deepJETT BTagWt_downCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recofake_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_bjet_deepJETT_BTagWt_upUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco fake bjet deepJETT BTagWt_upUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recofake_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_recofake_bjet_deepJETT_BTagWt_downUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Reco fake bjet deepJETT BTagWt_downUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_recofake_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_recofake_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Sumw2();

			
					sprintf(name, "dd_corr_bjet_deepJETT_BTagWt_upCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco bjet deepJETT BTagWt_upCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_corr_bjet_deepJETT_BTagWt_downCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco bjet deepJETT BTagWt_downCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_corr_bjet_deepJETT_BTagWt_upUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco bjet deepJETT BTagWt_upUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Sumw2();

					sprintf(name, "dd_corr_bjet_deepJETT_BTagWt_downUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "Gen_Reco bjet deepJETT BTagWt_downUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij],kappa[ik],etarange[iet]);
                                        h_RM_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet] = TUnfoldBinning::CreateHistogramOfMigrations(binsRecbjet2D[id][ij][ik][iet], binsGenbjet2D[id][ij][ik][iet], name ,0,0, title);
                                        h_RM_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Sumw2();
					}
					
					sprintf(name, "dd_gen_BJet_BTagWt_upCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet BTagWt_upCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genvar_BJet_BTagWt_upCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_BTagWt_upCorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_gen_BJet_BTagWt_downCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet BTagWt_downCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genvar_BJet_BTagWt_downCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_BTagWt_downCorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_gen_BJet_BTagWt_upUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet BTagWt_upUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genvar_BJet_BTagWt_upUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_BTagWt_upUncorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_gen_BJet_BTagWt_downUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen BJet BTagWt_downUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genvar_BJet_BTagWt_downUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genvar_BJet_BTagWt_downUncorr2D[id][ij][ik][iet]->Sumw2();
					

					sprintf(name, "dd_genmiss_BJet_BTagWt_upCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen miss BJet BTagWt_upCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genmiss_BJet_BTagWt_upCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_BTagWt_upCorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_BTagWt_downCorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen miss BJet BTagWt_downCorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genmiss_BJet_BTagWt_downCorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_BTagWt_downCorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_BTagWt_upUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen miss BJet BTagWt_upUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genmiss_BJet_BTagWt_upUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_BTagWt_upUncorr2D[id][ij][ik][iet]->Sumw2();

                                        sprintf(name, "dd_genmiss_BJet_BTagWt_downUncorr_d%i_j%i_k%i_eta%i", id,ij,ik,iet);
                                        sprintf(title, "2D Gen miss BJet BTagWt_downUncorr Q_{%s,%g}^{%g} %g", jcodef[id], jetname[ij], kappa[ik], etarange[iet]);
                                        h_genmiss_BJet_BTagWt_downUncorr2D[id][ij][ik][iet] = binsRecbjet2D[id][ij][ik][iet]->CreateHistogram(name,false,0,title);
                                        h_genmiss_BJet_BTagWt_downUncorr2D[id][ij][ik][iet]->Sumw2();		
#endif
				}
			}
		}
	}

/*
//Jet Charge Histogram
//1D Histogram for RECO & GEN for 3 definition, 2 jets, 10 kappa using array
for(int id=0; id<ndef; id++){
	for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
			for(int iet=0; iet<njetetamn; iet++){
				//for(int ipt=0; ipt<njetptmn; ipt++){
				for(int ipt=0; ipt<ngenPT; ipt++){
					if (isReconstruct) {
					sprintf(name, "reco_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
		                        //sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                		        h_recovar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                	h_recovar[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                	//sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                               	 	h_recofake[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                	h_recofake[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "RM_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                               	 	//sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                	h_RM[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                	h_RM[id][ij][ik][iet][ipt]->Sumw2();
					}
#ifdef  LHAPDF
      		      		for (int ix=1; ix<nnnmx; ix++) {
					sprintf(name, "genpdf_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
              				//sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
					h_genvarpdf[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
					h_genvarpdf[id][ij][ik][iet][ipt][ix]-Sumw2();
					}
#endif	
#ifdef  JETENERGY
                                for (int ix=1; ix<njecmx; ix++) {
                                        sprintf(name, "recojec_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#elif defined(JETRESO)
				for (int ix=0; ix<njecmx; ix++ ) {
                                        sprintf(name, "recoreso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarres[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recovarres[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "corr_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH2F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "fake_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "miss_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif
					sprintf(name, "gen_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
		                       	//sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                		        h_genvar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                	h_genvar[id][ij][ik][iet][ipt]->Sumw2();
						
					sprintf(name, "genmiss_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                       	//sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genmiss[id][ij][ik][iet][ipt]->Sumw2();
						
					}
				}
			}
		}
	}
*/

for(int id=0; id<ndef; id++){
        for(int ij=0; ij<njet; ij++){
                for (int ik=0; ik<nkappa; ik++){
                        for(int iet=0; iet<njetetamn; iet++){
                                //for(int ipt=0; ipt<njetptmn; ipt++){
				for(int ipt=0; ipt<ngenPT; ipt++){
                                        if (isReconstruct) {
                                        sprintf(name, "reco_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_jc_ib_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco identical binning Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovarIB[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                                        h_recovarIB[id][ij][ik][iet][ipt]->Sumw2();

					//BJet
                                        sprintf(name, "reco_bjet_deepJETT_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco bjet deepJETT Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_bjet_deepJETT[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins_bjet[id][ij][ik], recorng_bjet[id][ij][ik]);
					//h_recovar_bjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recovar_bjet_deepJETT[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_bjet_deepJETT_NoSF_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco bjet deepJETT No SF Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_bjet_deepJETT_NoSF[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins_bjet[id][ij][ik], recorng_bjet[id][ij][ik]);
					h_recovar_bjet_deepJETT_NoSF[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_bjet_deepJETT_jc_ib_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco bjet deepJETT identical binning Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovarIB_bjet_deepJETT[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                                        h_recovarIB_bjet_deepJETT[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_bjet_deepJETT_NoSF_jc_ib_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco bjet deepJETT No SF identical binning Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovarIB_bjet_deepJETT_NoSF[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                                        h_recovarIB_bjet_deepJETT_NoSF[id][ij][ik][iet][ipt]->Sumw2();
#ifdef FLAV
					//RecoJet Flavour
					//Flavor Tagging
					sprintf(name, "reco_gjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco gjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_gjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_gjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_ujet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ujet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ujet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ujet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_ubarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ubarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ubarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ubarjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_djet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco djet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_djet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_djet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_dbarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco dbarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_dbarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_dbarjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_bjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco bjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_bjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_bjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_bbarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco bbarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_bbarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_bbarjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "reco_ojet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco ojet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_ojet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_ojet[id][ij][ik][iet][ipt]->Sumw2();

#endif
                                        sprintf(name, "recofake_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Reco Fake Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        //sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "RM Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM[id][ij][ik][iet][ipt]->Sumw2();

					//b-jet
					sprintf(name, "recofake_bjet_deepJETT_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Fake bjet deepJETT Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_bjet_deepJETT[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins_bjet[id][ij][ik], recorng_bjet[id][ij][ik]);
					//h_recofake_bjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik]);
                                        h_recofake_bjet_deepJETT[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "RM_bjet_deepJETT_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "RM bjet deepJETT Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_bjet_deepJETT[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins_bjet[id][ij][ik], recorng_bjet[id][ij][ik], ngenbins_bjet[id][ij][ik], genrng_bjet[id][ij][ik]);
					//h_RM_bjet[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, recobins[id][ij][ik], recomin[id][ij][ik], recomax[id][ij][ik], genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_RM_bjet_deepJETT[id][ij][ik][iet][ipt]->Sumw2();
                                        }
					
#ifdef  LHAPDF
                                for (int ix=1; ix<nnnmx; ix++) {
                                        sprintf(name, "genpdf_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Genpdf Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genvarpdf[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarpdf[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
				for (int iy=0; iy<nmgscale; iy++) {
                                        sprintf(name, "genmgscale_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, iy);
					sprintf(title, "Genmgscale Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),iy);
                                        h_genvarmgscale[id][ij][ik][iet][ipt][iy] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarmgscale[id][ij][ik][iet][ipt][iy]->Sumw2();
                                        }
#endif

#ifdef SCALEUNC
                                for (int ix=0; ix<nscale; ix++) {
                                        sprintf(name, "genscaleunc_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
					sprintf(title, "Gen Scale Unc Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genvarscaleunc[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvarscaleunc[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif

#ifdef  JETENERGY
                                for (int ix=1; ix<njecmx; ix++) {
                                        sprintf(name, "recojec_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recojec Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovarjec[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#elif defined(JETRESO)
                                for (int ix=0; ix<njecmx; ix++ ) {
                                        sprintf(name, "reco_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Recoreso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recovarres[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovarres[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "corr_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "Corr reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "fake_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "fake reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_JER[id][ij][ik][iet][ipt][ix]->Sumw2();

                                        sprintf(name, "miss_reso_jc_d%i_j%i_k%i_eta%i_pt%i_%i", id, ij, ik,iet, ipt, ix);
                                        //sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]),ix);
					sprintf(title, "miss reso Q_{%s,%g}^{%g} %g %i %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]),ix);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_JER[id][ij][ik][iet][ipt][ix]->Sumw2();
                                        }
#endif
                                        sprintf(name, "gen_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        //sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        //sprintf(title, "Gen Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(leadingPtThreshold[ipt]));
					sprintf(title, "Gen Miss Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss[id][ij][ik][iet][ipt]->Sumw2();

					//BJet
					sprintf(name, "gen_BJet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen BJet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_BJet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins_bjet[id][ij][ik], genrng_bjet[id][ij][ik]);
					//h_genvar_bjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genvar_BJet[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_BJet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen Miss BJet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_BJet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins_bjet[id][ij][ik], genrng_bjet[id][ij][ik]);
					//h_genmiss_bjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, genbins[id][ij][ik], genmin[id][ij][ik], genmax[id][ij][ik]);
                                        h_genmiss_BJet[id][ij][ik][iet][ipt]->Sumw2();

					//GenJet Flavour Info
					sprintf(name, "gen_gjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "Gen gjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
					h_genvar_gjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_gjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "gen_ujet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen ujet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_ujet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_ujet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "gen_ubarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen ubarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_ubarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_ubarjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "gen_djet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen djet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_djet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_djet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "gen_dbarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen dbarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_dbarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_dbarjet[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "gen_bjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen bjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_bjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_bjet[id][ij][ik][iet][ipt]->Sumw2();
					
					sprintf(name, "gen_bbarjet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen bbarjet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_bbarjet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_bbarjet[id][ij][ik][iet][ipt]->Sumw2();
					
					sprintf(name, "gen_ojet_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen ojet Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_ojet[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_ojet[id][ij][ik][iet][ipt]->Sumw2();

#ifdef PREFIRE
					if (isReconstruct) {
                                        sprintf(name, "reco_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_prefire[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Fake Prefire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_prefire[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "RM PreFire Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_prefire[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_prefire[id][ij][ik][iet][ipt]->Sumw2();

					//up
					sprintf(name, "reco_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco PreFire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_prefireup[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Prefire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_prefireup[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM PreFire up Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_prefireup[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_prefireup[id][ij][ik][iet][ipt]->Sumw2();

					//down
					sprintf(name, "reco_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco PreFire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_prefiredown[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Prefire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_prefiredown[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM PreFire down Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_prefiredown[id][ij][ik][iet][ipt]->Sumw2();
					}

					sprintf(name, "gen_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "Gen PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_prefire[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_prefire_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Gen PreFire Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_prefire[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_prefire[id][ij][ik][iet][ipt]->Sumw2();

					//up
					sprintf(name, "gen_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen PreFire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_prefireup[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_prefireup_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen PreFire up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_prefireup[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_prefireup[id][ij][ik][iet][ipt]->Sumw2();

					//down
					sprintf(name, "gen_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "Gen PreFire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genvar_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genvar_prefiredown[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "genmiss_prefiredown_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen PreFire down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_prefiredown[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_prefiredown[id][ij][ik][iet][ipt]->Sumw2();
#endif

/*
//#ifdef TRACKEFF
					if (isReconstruct) {
                                        sprintf(name, "reco_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackeff[id][ij][ik][iet][ipt]->Sumw2();

					sprintf(name, "recofake_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Reco Fake Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackeff[id][ij][ik][iet][ipt]->Sumw2();				

					sprintf(name, "RM_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
					sprintf(title, "RM Track Eff Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackeff[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackeff[id][ij][ik][iet][ipt]->Sumw2();				
					}	
					sprintf(name, "genmiss_trackeff_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
					sprintf(title, "Gen Track Eff Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackeff[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackeff[id][ij][ik][iet][ipt]->Sumw2();					
//#endif

//#ifdef TRACKPTUP
					if (isReconstruct) {
                                        sprintf(name, "reco_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackpt1[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackpt1[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM Track pT up Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackpt1[id][ij][ik][iet][ipt]->Sumw2();
                                        }
                                        sprintf(name, "genmiss_trackpt_up_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen Track pT up Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackpt1[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackpt1[id][ij][ik][iet][ipt]->Sumw2();
//#endif

//#ifdef TRACKPTDOWN
                                        if (isReconstruct) {
                                        sprintf(name, "reco_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recovar_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recovar_trackpt2[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "recofake_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Reco Fake Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_recofake_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik]);
                                        h_recofake_trackpt2[id][ij][ik][iet][ipt]->Sumw2();

                                        sprintf(name, "RM_trackpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet,ipt);
                                        sprintf(title, "RM Track pT down Q_{%s,%g}^{%g} %g %i",jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_RM_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH2F>(name, title, nrecobins[id][ij][ik], recorng[id][ij][ik], ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_RM_trackpt2[id][ij][ik][iet][ipt]->Sumw2();
                                        }
                                        sprintf(name, "genmiss_tracpt_down_jc_d%i_j%i_k%i_eta%i_pt%i",id, ij, ik,iet, ipt);
                                        sprintf(title, "Gen Track pT down Q_{%s,%g}^{%g} %g %i", jcodef[id], jetname[ij], kappa[ik], etarange[iet], int(genhtbins[ipt]));
                                        h_genmiss_trackpt2[id][ij][ik][iet][ipt] = fs->make<TH1F>(name, title, ngenbins[id][ij][ik], genrng[id][ij][ik]);
                                        h_genmiss_trackpt2[id][ij][ik][iet][ipt]->Sumw2();
//#endif
*/
                                        }
                                }
                        }
                }
        }

for(int ij=0; ij<njet; ij++){
	for (int ik=0; ik<nkappa; ik++){
        	sprintf(name, "matched_all_jetpt_j%i_k%i",ij, ik);
                sprintf(title, "Gen Matched_All Tracks vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
		//hprof_matchedChg_R_allChg_genjetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
		//hprof_matchedChg_R_allChg_genjetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,30,-1,1);
		hprof_matchedChg_R_allChg_genjetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,20,0,2);
		hprof_matchedChg_R_allChg_genjetpt[ij][ik]->Sumw2();

		sprintf(name, "gen_trackpt_jetpt_jetpt_j%i_k%i",ij, ik);
                sprintf(title, "Gen Track to Jet pT vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
		//hprof_gen_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
		//hprof_gen_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,30,-1,1);
		hprof_gen_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,20,0,2);
		hprof_gen_trackpt_R_jetpt_jetpt[ij][ik]->Sumw2();

		if(isReconstruct){
			sprintf(name, "reco_trackpt_jetpt_jetpt_j%i_k%i",ij, ik);
                	sprintf(title, "Reco Track to Jet pT vs Jet pT Q_{%g}^{%g}", jetname[ij], kappa[ik]);
			//hprof_reco_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			//hprof_reco_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,30,-1,1);
			hprof_reco_trackpt_R_jetpt_jetpt[ij][ik] = fs->make<TH2F>(name,title,30,30,1500,20,0,2);
			hprof_reco_trackpt_R_jetpt_jetpt[ij][ik]->Sumw2();

		}
	}
}

for(int id=0; id<ndef; id++){
	for(int ij=0; ij<njet; ij++){
        	for (int ik=0; ik<nkappa; ik++){
			sprintf(name, "reco_jco_pt_d%i_j%i_k%i",id, ij, ik);
			sprintf(title, "JCO vs pT Reco Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			//hprof_reco_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,20,30,1500,-1,1);
			//hprof_jco_pt[id][ij][ik] = fs->make<TProfile>(name,title,ngenPT,genhtbins,-3,3);
			hprof_reco_jco_pt[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
			hprof_reco_jco_pt[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_jco_pt_bjet_deepJETT_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT Reco bjet deepJETT Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_reco_jco_pt_bjet_deepJETT[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_bjet_deepJETT[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_jco_pt_bjet_deepJETT_NoSF_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT Reco bjet deepJETT No SF Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_reco_jco_pt_bjet_deepJETT_NoSF[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_bjet_deepJETT_NoSF[id][ij][ik]->Sumw2();


			sprintf(name, "reco_ntrack_vs_jco_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "nTrack vs JCO Reco Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_ntrack_vs_jco[id][ij][ik] = fs->make<TH2F>(name,title,99,1,100, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_ntrack_vs_jco[id][ij][ik]->Sumw2();

			sprintf(name, "reco_ntrack_vs_jco_bjet_deepJETT_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "nTrack vs JCO Reco bjet deepJETT Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_ntrack_vs_jco_bjet_deepJETT[id][ij][ik] = fs->make<TH2F>(name,title,99,1,100, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_ntrack_vs_jco_bjet_deepJETT[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_ntrack_vs_jco_bjet_deepJETT_NoSF_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "nTrack vs JCO Reco bjet deepJETT No SF Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_ntrack_vs_jco_bjet_deepJETT_NoSF[id][ij][ik] = fs->make<TH2F>(name,title,99,1,100, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_ntrack_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Sumw2();

			//Energy Fraction
			sprintf(name, "reco_X1_vs_jco_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X1 vs JCO Reco Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X1_vs_jco[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X1_vs_jco[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_X12_vs_jco_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X12 vs JCO Reco Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X12_vs_jco[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X12_vs_jco[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_X123_vs_jco_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X123 vs JCO Reco Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X123_vs_jco[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X123_vs_jco[id][ij][ik]->Sumw2();	
			

			sprintf(name, "reco_X1_vs_jco_bjet_deepJETT_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X1 vs JCO Reco bjet deepJETT Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X1_vs_jco_bjet_deepJETT[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X1_vs_jco_bjet_deepJETT[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_X12_vs_jco_bjet_deepJETT_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X12 vs JCO Reco bjet deepJETT Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X12_vs_jco_bjet_deepJETT[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X12_vs_jco_bjet_deepJETT[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_X123_vs_jco_bjet_deepJETT_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X123 vs JCO Reco bjet deepJETT Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X123_vs_jco_bjet_deepJETT[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X123_vs_jco_bjet_deepJETT[id][ij][ik]->Sumw2();


			sprintf(name, "reco_X1_vs_jco_bjet_deepJETT_NoSF_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X1 vs JCO Reco bjet deepJETT No SF Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X1_vs_jco_bjet_deepJETT_NoSF[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X1_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Sumw2();

			sprintf(name, "reco_X12_vs_jco_bjet_deepJETT_NoSF_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X12 vs JCO Reco bjet deepJETT No SF Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X12_vs_jco_bjet_deepJETT_NoSF[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X12_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Sumw2();

			sprintf(name, "reco_X123_vs_jco_bjet_deepJETT_NoSF_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X123 vs JCO Reco bjet deepJETT No SF Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X123_vs_jco_bjet_deepJETT_NoSF[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X123_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Sumw2();			
#ifdef FLAV
			//RecJet Flavor Tagging
			sprintf(name, "reco_jco_pt_gjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT gjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			hprof_reco_jco_pt_gjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
			hprof_reco_jco_pt_gjet[id][ij][ik]->Sumw2();

			sprintf(name, "reco_jco_pt_ujet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ujet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_reco_jco_pt_ujet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_ujet[id][ij][ik]->Sumw2();

			sprintf(name, "reco_jco_pt_ubarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ubarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			hprof_reco_jco_pt_ubarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_ubarjet[id][ij][ik]->Sumw2();

			sprintf(name, "reco_jco_pt_djet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT djet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			hprof_reco_jco_pt_djet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_djet[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_jco_pt_dbarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT dbarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			hprof_reco_jco_pt_dbarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_dbarjet[id][ij][ik]->Sumw2();

			sprintf(name, "reco_jco_pt_bjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT bjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_reco_jco_pt_bjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_bjet[id][ij][ik]->Sumw2();

			sprintf(name, "reco_jco_pt_bbarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT bbarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_reco_jco_pt_bbarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_bbarjet[id][ij][ik]->Sumw2();

			sprintf(name, "reco_jco_pt_ojet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ojet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
			hprof_reco_jco_pt_ojet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_ojet[id][ij][ik]->Sumw2();

			//BJet
			sprintf(name, "reco_jco_pt_bjetTag_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT bjetTag Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_reco_jco_pt_bjetTag[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_reco_jco_pt_bjetTag[id][ij][ik]->Sumw2();


                        sprintf(name, "reco_ntrack_vs_jco_bjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "nTrack vs JCO Reco bjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_ntrack_vs_jco_bjet[id][ij][ik] = fs->make<TH2F>(name,title,99,1,100, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_ntrack_vs_jco_bjet[id][ij][ik]->Sumw2();

			
			sprintf(name, "reco_X1_vs_jco_bjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X1 vs JCO Reco bjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X1_vs_jco_bjet[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X1_vs_jco_bjet[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_X12_vs_jco_bjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X12 vs JCO Reco bjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X12_vs_jco_bjet[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X12_vs_jco_bjet[id][ij][ik]->Sumw2();

                        sprintf(name, "reco_X123_vs_jco_bjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "X123 vs JCO Reco bjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_Reco_X123_vs_jco_bjet[id][ij][ik] = fs->make<TH2F>(name,title,10,0,1, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_Reco_X123_vs_jco_bjet[id][ij][ik]->Sumw2();
#endif
			//GenJet Flavour
			sprintf(name, "gen_jco_pt_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT Gen Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt[id][ij][ik]->Sumw2();


                        sprintf(name, "gen_jco_pt_bjet_deepJETT_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT Gen bjet deepJETT Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_bjet_deepJETT[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500, recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_bjet_deepJETT[id][ij][ik]->Sumw2();


			sprintf(name, "gen_jco_pt_gjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT gjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_gjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_gjet[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_ujet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ujet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_ujet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_ujet[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_ubarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ubarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_ubarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_ubarjet[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_djet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT djet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_djet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_djet[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_dbarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT dbarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_dbarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_dbarjet[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_bjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT bjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_bjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_bjet[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_bbarjet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT bbarjet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_bbarjet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_bbarjet[id][ij][ik]->Sumw2();

			sprintf(name, "gen_jco_pt_ojet_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT ojet Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_ojet[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_ojet[id][ij][ik]->Sumw2();

			
			sprintf(name, "gen_jco_pt_bjetTag_d%i_j%i_k%i",id, ij, ik);
                        sprintf(title, "JCO vs pT bjetTag Q_{%s,%g}^{%g}", jcodef[id], jetname[ij], kappa[ik]);
                        hprof_gen_jco_pt_bjetTag[id][ij][ik] = fs->make<TH2F>(name,title,30,30,1500,recobinskappa[id][ij][ik], recominkappa[id][ij][ik], recomaxkappa[id][ij][ik]);
                        hprof_gen_jco_pt_bjetTag[id][ij][ik]->Sumw2();
		}
	}
}

for(int ij=0; ij<njet; ij++){
	sprintf(name, "Reco_X1_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1/Jet PT nJet_{%g}", jetname[ij]);
        Reco_X1[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X1[ij]->Sumw2();	

	sprintf(name, "Reco_X12_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2/Jet PT nJet_{%g}", jetname[ij]);
        Reco_X12[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X12[ij]->Sumw2();

	sprintf(name, "Reco_X123_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2+PT3/Jet PT nJet_{%g}", jetname[ij]);
        Reco_X123[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X123[ij]->Sumw2();

	//BJet
	sprintf(name, "Reco_X1_bjet_deepJETT_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1/Jet PT nJet_{%g} bjet deepJETT", jetname[ij]);
        Reco_X1_bjet_deepJETT[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X1_bjet_deepJETT[ij]->Sumw2();

        sprintf(name, "Reco_X12_bjet_deepJETT_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2/Jet PT nJet_{%g} bjet deepJETT", jetname[ij]);
        Reco_X12_bjet_deepJETT[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X12_bjet_deepJETT[ij]->Sumw2();

        sprintf(name, "Reco_X123_bjet_deepJETT_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2+PT3/Jet PT nJet_{%g} bjet deepJETT", jetname[ij]);
        Reco_X123_bjet_deepJETT[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X123_bjet_deepJETT[ij]->Sumw2();


        sprintf(name, "Reco_X1_bjet_deepJETT_NoSF_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1/Jet PT nJet_{%g} bjet deepJETT NoSF", jetname[ij]);
        Reco_X1_bjet_deepJETT_NoSF[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X1_bjet_deepJETT_NoSF[ij]->Sumw2();

        sprintf(name, "Reco_X12_bjet_deepJETT_NoSF_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2/Jet PT nJet_{%g} bjet deepJETT NoSF", jetname[ij]);
        Reco_X12_bjet_deepJETT_NoSF[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X12_bjet_deepJETT_NoSF[ij]->Sumw2();

        sprintf(name, "Reco_X123_bjet_deepJETT_NoSF_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2+PT3/Jet PT nJet_{%g} bjet deepJETT NoSF", jetname[ij]);
        Reco_X123_bjet_deepJETT_NoSF[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X123_bjet_deepJETT_NoSF[ij]->Sumw2();	

	//Scatter Plot
	sprintf(name, "Reco_X1_X2_j%i",ij);
        sprintf(title, "Energy Fraction ParticlePT1/JetPT VS ParticlePT2/JetPT nJet_{%g}",jetname[ij]);
        Reco_X1_X2[ij] = fs->make<TH2F>(name, title, 20,0,1,20,0,1);
        Reco_X1_X2[ij]->Sumw2();

	sprintf(name, "Reco_X1_X3_j%i",ij);
        sprintf(title, "Energy Fraction ParticlePT1/JetPT VS ParticlePT3/JetPT nJet_{%g}",jetname[ij]);
        Reco_X1_X3[ij] = fs->make<TH2F>(name, title, 20,0,1,20,0,1);
        Reco_X1_X3[ij]->Sumw2();

	sprintf(name, "Reco_X1_X2_bjet_deepJETT_j%i",ij);
        sprintf(title, "Energy Fraction ParticlePT1/JetPT VS ParticlePT2/JetPT bjet_deepJETT nJet_{%g}",jetname[ij]);
        Reco_X1_X2_bjet_deepJETT[ij] = fs->make<TH2F>(name, title, 20,0,1,20,0,1);
        Reco_X1_X2_bjet_deepJETT[ij]->Sumw2();

        sprintf(name, "Reco_X1_X3_bjet_deepJETT_j%i",ij);
        sprintf(title, "Energy Fraction ParticlePT1/JetPT VS ParticlePT3/JetPT bjet_deepJETT nJet_{%g}",jetname[ij]);
        Reco_X1_X3_bjet_deepJETT[ij] = fs->make<TH2F>(name, title, 20,0,1,20,0,1);
        Reco_X1_X3_bjet_deepJETT[ij]->Sumw2();

	sprintf(name, "Reco_X1_X2_bjet_deepJETT_NoSF_j%i",ij);
        sprintf(title, "Energy Fraction ParticlePT1/JetPT VS ParticlePT2/JetPT bjet_deepJETT NoSF nJet_{%g}",jetname[ij]);
        Reco_X1_X2_bjet_deepJETT_NoSF[ij] = fs->make<TH2F>(name, title, 20,0,1,20,0,1);
        Reco_X1_X2_bjet_deepJETT_NoSF[ij]->Sumw2();

        sprintf(name, "Reco_X1_X3_bjet_deepJETT_NoSF_j%i",ij);
        sprintf(title, "Energy Fraction ParticlePT1/JetPT VS ParticlePT3/JetPT bjet_deepJETT NoSF nJet_{%g}",jetname[ij]);
        Reco_X1_X3_bjet_deepJETT_NoSF[ij] = fs->make<TH2F>(name, title, 20,0,1,20,0,1);
        Reco_X1_X3_bjet_deepJETT_NoSF[ij]->Sumw2();
	
#ifdef FLAV
	sprintf(name, "Reco_X1_bjet_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1/Jet PT nJet_{%g} bjet", jetname[ij]);
        Reco_X1_bjet[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X1_bjet[ij]->Sumw2();

        sprintf(name, "Reco_X12_bjet_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2/Jet PT nJet_{%g} bjet", jetname[ij]);
        Reco_X12_bjet[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X12_bjet[ij]->Sumw2();

        sprintf(name, "Reco_X123_bjet_j%i",ij);
        sprintf(title, "Energy Fraction Particle PT1+PT2+PT3/Jet PT nJet_{%g} bjet", jetname[ij]);
        Reco_X123_bjet[ij] = fs->make<TH1F>(name,title,10,0,1);
        Reco_X123_bjet[ij]->Sumw2();
#endif
}

/*
 sprintf(name, "corr_jet");
 sprintf(title, "Gen_Reco_HT2");
 h_2ht=fs->make<TH2F>(name, title, 10, leadingPtThreshold, 10, leadingPtThreshold);
*/

#ifndef GENPART            

  recojt_CHF = fs->make<TH1F>("recojt_CHF","CHF_{recojets}",200,0, 1);
  recojt_CHF->Sumw2();
  
  recojt_NHF = fs->make<TH1F>("recojt_NHF","NHF_{recojets}",200,0, 1);
  recojt_NHF->Sumw2();

  recojt_NEMF = fs->make<TH1F>("recojt_NEMF","NEMF_{recojets}",200,0, 1);
  recojt_NEMF->Sumw2();

  recojt_CHM = fs->make<TH1F>("recojt_CHM","CHM_{recojets}",200,0, 200);
  recojt_CHM->Sumw2();

  recojt_NumNeutralParticles = fs->make<TH1F>("recojt_NumNeutralParticles","NumNeut_{recojets}",200,0, 200);
  recojt_NumNeutralParticles->Sumw2();

  recojt_CEMF = fs->make<TH1F>("recojt_CEMF","CEMF_{recojets}",200,0, 1);
  recojt_CEMF->Sumw2();

  recojt_NumConst = fs->make<TH1F>("recojt_NumConst","recojt_NumConst_{recojets}",200,0, 1200);
  recojt_NumConst->Sumw2();
         
  //recojt_hist = fs->make<TH1F>("recojt_hist","# of recojets",20,-0.5, 19.5);
  //recojt_hist->Sumw2();
  //recojt_pt = fs->make<TH1F>("recojt_pt","Et_{recojets}",100,20., 2020.);
  //recojt_pt->Sumw2();
  recojt_eta = fs->make<TH1F>("recojt_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt_eta->Sumw2();
  recojt_phi = fs->make<TH1F>("recojt_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt_phi->Sumw2();

  //recojt1_pt = fs->make<TH1F>("recojet1_pt","Et_{recojets}",100,20., 2020.);
  //recojt1_pt->Sumw2();
  recojt1_eta = fs->make<TH1F>("recojet1_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt1_eta->Sumw2();
  recojt1_phi = fs->make<TH1F>("recojet1_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt1_phi->Sumw2();

  //recojt2_pt = fs->make<TH1F>("recojet2_pt","Et_{recojets}",100,20., 2020.);
  //recojt2_pt->Sumw2();
  recojt2_eta = fs->make<TH1F>("recojet2_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt2_eta->Sumw2();
  recojt2_phi = fs->make<TH1F>("recojet2_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt2_phi->Sumw2();

  //recojt3_pt = fs->make<TH1F>("recojet2_pt","Et_{recojets}",100,20., 2020.);
  //recojt3_pt->Sumw2();
  recojt3_eta = fs->make<TH1F>("recojet3_eta","#eta_{recojets}",100,-2.5, 2.5);
  recojt3_eta->Sumw2();
  recojt3_phi = fs->make<TH1F>("recojet3_phi","#phi_{recojets}",100,-M_PI, M_PI);
  recojt3_phi->Sumw2();

#ifdef FLAV
  //gluon-jet
  recojtg_eta = fs->make<TH1F>("recojtg_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojtg_eta->Sumw2();
  recojtg_phi = fs->make<TH1F>("recojtg_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojtg_phi->Sumw2();

  recojt1g_eta = fs->make<TH1F>("recojt1g_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt1g_eta->Sumw2();
  recojt1g_phi = fs->make<TH1F>("recojt1g_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt1g_phi->Sumw2();

  recojt2g_eta = fs->make<TH1F>("recojt2g_eta","#eta_{recojetsg}",100,-2.5, 2.5);
  recojt2g_eta->Sumw2();
  recojt2g_phi = fs->make<TH1F>("recojt2g_phi","#phi_{recojetsg}",100,-M_PI, M_PI);
  recojt2g_phi->Sumw2();

  //d-jet
  recojtd_eta = fs->make<TH1F>("recojtd_eta","#eta_{recojetsd}",100,-2.5, 2.5);
  recojtd_eta->Sumw2();
  recojtd_phi = fs->make<TH1F>("recojtd_phi","#phi_{recojetsd}",100,-M_PI, M_PI);
  recojtd_phi->Sumw2();

  recojt1d_eta = fs->make<TH1F>("recojt1d_eta","#eta_{recojetsd}",100,-2.5, 2.5);
  recojt1d_eta->Sumw2();
  recojt1d_phi = fs->make<TH1F>("recojt1d_phi","#phi_{recojetsd}",100,-M_PI, M_PI);
  recojt1d_phi->Sumw2();

  recojt2d_eta = fs->make<TH1F>("recojt2d_eta","#eta_{recojetsd}",100,-2.5, 2.5);
  recojt2d_eta->Sumw2();
  recojt2d_phi = fs->make<TH1F>("recojt2d_phi","#phi_{recojetsd}",100,-M_PI, M_PI);
  recojt2d_phi->Sumw2();

  //dbar-jet
  recojtdbar_eta = fs->make<TH1F>("recojtdbar_eta","#eta_{recojetsdbar}",100,-2.5, 2.5);
  recojtdbar_eta->Sumw2();
  recojtdbar_phi = fs->make<TH1F>("recojtdbar_phi","#phi_{recojetsdbar}",100,-M_PI, M_PI);
  recojtdbar_phi->Sumw2();

  recojt1dbar_eta = fs->make<TH1F>("recojt1dbar_eta","#eta_{recojetsdbar}",100,-2.5, 2.5);
  recojt1dbar_eta->Sumw2();
  recojt1dbar_phi = fs->make<TH1F>("recojt1dbar_phi","#phi_{recojetsdbar}",100,-M_PI, M_PI);
  recojt1dbar_phi->Sumw2();

  recojt2dbar_eta = fs->make<TH1F>("recojt2dbar_eta","#eta_{recojetsdbar}",100,-2.5, 2.5);
  recojt2dbar_eta->Sumw2();
  recojt2dbar_phi = fs->make<TH1F>("recojt2dbar_phi","#phi_{recojetsdbar}",100,-M_PI, M_PI);
  recojt2dbar_phi->Sumw2();

  //u-jet
  recojtu_eta = fs->make<TH1F>("recojtu_eta","#eta_{recojetsu}",100,-2.5, 2.5);
  recojtu_eta->Sumw2();
  recojtu_phi = fs->make<TH1F>("recojtu_phi","#phi_{recojetsu}",100,-M_PI, M_PI);
  recojtu_phi->Sumw2();

  recojt1u_eta = fs->make<TH1F>("recojt1u_eta","#eta_{recojetsu}",100,-2.5, 2.5);
  recojt1u_eta->Sumw2();
  recojt1u_phi = fs->make<TH1F>("recojt1u_phi","#phi_{recojetsu}",100,-M_PI, M_PI);
  recojt1u_phi->Sumw2();

  recojt2u_eta = fs->make<TH1F>("recojt2u_eta","#eta_{recojetsu}",100,-2.5, 2.5);
  recojt2u_eta->Sumw2();
  recojt2u_phi = fs->make<TH1F>("recojt2u_phi","#phi_{recojetsu}",100,-M_PI, M_PI);
  recojt2u_phi->Sumw2();

  //ubar-jet
  recojtubar_eta = fs->make<TH1F>("recojtubar_eta","#eta_{recojetsubar}",100,-2.5, 2.5);
  recojtubar_eta->Sumw2();
  recojtubar_phi = fs->make<TH1F>("recojtubar_phi","#phi_{recojetsubar}",100,-M_PI, M_PI);
  recojtubar_phi->Sumw2();

  recojt1ubar_eta = fs->make<TH1F>("recojt1ubar_eta","#eta_{recojetsubar}",100,-2.5, 2.5);
  recojt1ubar_eta->Sumw2();
  recojt1ubar_phi = fs->make<TH1F>("recojt1ubar_phi","#phi_{recojetsubar}",100,-M_PI, M_PI);
  recojt1ubar_phi->Sumw2();

  recojt2ubar_eta = fs->make<TH1F>("recojt2ubar_eta","#eta_{recojetsubar}",100,-2.5, 2.5);
  recojt2ubar_eta->Sumw2();
  recojt2ubar_phi = fs->make<TH1F>("recojt2ubar_phi","#phi_{recojetsubar}",100,-M_PI, M_PI);
  recojt2ubar_phi->Sumw2();

  //b-jet
  recojtb_eta = fs->make<TH1F>("recojtb_eta","#eta_{recojetsb}",100,-2.5, 2.5);
  recojtb_eta->Sumw2();
  recojtb_phi = fs->make<TH1F>("recojtb_phi","#phi_{recojetsb}",100,-M_PI, M_PI);
  recojtb_phi->Sumw2();

  recojt1b_eta = fs->make<TH1F>("recojt1b_eta","#eta_{recojetsb}",100,-2.5, 2.5);
  recojt1b_eta->Sumw2();
  recojt1b_phi = fs->make<TH1F>("recojt1b_phi","#phi_{recojetsb}",100,-M_PI, M_PI);
  recojt1b_phi->Sumw2();

  recojt2b_eta = fs->make<TH1F>("recojt2b_eta","#eta_{recojetsb}",100,-2.5, 2.5);
  recojt2b_eta->Sumw2();
  recojt2b_phi = fs->make<TH1F>("recojt2b_phi","#phi_{recojetsb}",100,-M_PI, M_PI);
  recojt2b_phi->Sumw2();

  //bbar-jet
  recojtbbar_eta = fs->make<TH1F>("recojtbbar_eta","#eta_{recojetsbbar}",100,-2.5, 2.5);
  recojtbbar_eta->Sumw2();
  recojtbbar_phi = fs->make<TH1F>("recojtbbar_phi","#phi_{recojetsbbar}",100,-M_PI, M_PI);
  recojtbbar_phi->Sumw2();

  recojt1bbar_eta = fs->make<TH1F>("recojt1bbar_eta","#eta_{recojetsbbar}",100,-2.5, 2.5);
  recojt1bbar_eta->Sumw2();
  recojt1bbar_phi = fs->make<TH1F>("recojt1bbar_phi","#phi_{recojetsbbar}",100,-M_PI, M_PI);
  recojt1bbar_phi->Sumw2();

  recojt2bbar_eta = fs->make<TH1F>("recojt2bbar_eta","#eta_{recojetsbbar}",100,-2.5, 2.5);
  recojt2bbar_eta->Sumw2();
  recojt2bbar_phi = fs->make<TH1F>("recojt2bbar_phi","#phi_{recojetsbbar}",100,-M_PI, M_PI);
  recojt2bbar_phi->Sumw2();
  
  //others
  recojto_eta = fs->make<TH1F>("recojto_eta","#eta_{recojetso}",100,-2.5, 2.5);
  recojto_eta->Sumw2();
  recojto_phi = fs->make<TH1F>("recojto_phi","#phi_{recojetso}",100,-M_PI, M_PI);
  recojto_phi->Sumw2();

  recojt1o_eta = fs->make<TH1F>("recojt1o_eta","#eta_{recojetso}",100,-2.5, 2.5);
  recojt1o_eta->Sumw2();
  recojt1o_phi = fs->make<TH1F>("recojt1o_phi","#phi_{recojetso}",100,-M_PI, M_PI);
  recojt1o_phi->Sumw2();

  recojt2o_eta = fs->make<TH1F>("recojt2o_eta","#eta_{recojetso}",100,-2.5, 2.5);
  recojt2o_eta->Sumw2();
  recojt2o_phi = fs->make<TH1F>("recojt2o_phi","#phi_{recojetso}",100,-M_PI, M_PI);
  recojt2o_phi->Sumw2(); 
#endif

  h_BTag_CSV = fs->make<TH2D>("h_BTag_CSV","deepCSV BTagger",40,30,2030,100,0, 1);
  h_BTag_CSV->Sumw2();

  h_CTag_CSV = fs->make<TH2D>("h_CTag_CSV","deepCSV CTagger",40,30,2030,100,0, 1);
  h_CTag_CSV->Sumw2();

  h_udsgTag_CSV = fs->make<TH2D>("h_udsgTag_CSV","deepCSV udsgTagger",40,30,2030,100,0, 1);
  h_udsgTag_CSV->Sumw2();

  
  h_BTag_JET = fs->make<TH2D>("h_BTag_JET","deepJET BTagger",40,30,2030,100,0, 1);
  h_BTag_JET->Sumw2();

  h_CTag_JET = fs->make<TH2D>("h_CTag_JET","deepJET CTagger",40,30,2030,100,0, 1);
  h_CTag_JET->Sumw2();

  h_udsgTag_JET = fs->make<TH2D>("h_udsgTag_JET","deepJET udsgTagger",40,30,2030,100,0, 1);
  h_udsgTag_JET->Sumw2();
 
 
  h_bjet_deepJETT_eta = fs->make<TH1F>("bjet_deepJETT_eta","#eta_{bjet_deepJETT}",100,-2.5, 2.5);
  h_bjet_deepJETT_eta->Sumw2();
  h_bjet_deepJETT_phi = fs->make<TH1F>("bjet_deepJETT_phi","#phi_{bjet_deepJETT}",100,-M_PI, M_PI);
  h_bjet_deepJETT_phi->Sumw2();

  h_bjet_deepJETT_eta_NoSF = fs->make<TH1F>("bjet_deepJETT_eta_NoSF","#eta_{bjet_deepJETT_NoSF}",100,-2.5, 2.5);
  h_bjet_deepJETT_eta_NoSF->Sumw2();
  h_bjet_deepJETT_phi_NoSF = fs->make<TH1F>("bjet_deepJETT_phi_NoSF","#phi_{bjet_deepJETT_NoSF}",100,-M_PI, M_PI);
  h_bjet_deepJETT_phi_NoSF->Sumw2();

  h_bjet1_deepJETT_eta = fs->make<TH1F>("bjet1_deepJETT_eta","#eta_{bjet_deepJETT}",100,-2.5, 2.5);
  h_bjet1_deepJETT_eta->Sumw2();
  h_bjet1_deepJETT_phi = fs->make<TH1F>("bjet1_deepJETT_phi","#phi_{bjet_deepJETT}",100,-M_PI, M_PI);
  h_bjet1_deepJETT_phi->Sumw2();

  h_bjet1_deepJETT_eta_NoSF = fs->make<TH1F>("bjet1_deepJETT_eta_NoSF","#eta_{bjet_deepJETT_NoSF}",100,-2.5, 2.5);
  h_bjet1_deepJETT_eta_NoSF->Sumw2();
  h_bjet1_deepJETT_phi_NoSF = fs->make<TH1F>("bjet1_deepJETT_phi_NoSF","#phi_{bjet_deepJETT_NoSF}",100,-M_PI, M_PI);
  h_bjet1_deepJETT_phi_NoSF->Sumw2();

  h_bjet2_deepJETT_eta = fs->make<TH1F>("bjet2_deepJETT_eta","#eta_{bjet_deepJETT}",100,-2.5, 2.5);
  h_bjet2_deepJETT_eta->Sumw2();
  h_bjet2_deepJETT_phi = fs->make<TH1F>("bjet2_deepJETT_phi","#phi_{bjet_deepJETT}",100,-M_PI, M_PI);
  h_bjet2_deepJETT_phi->Sumw2();

  h_bjet2_deepJETT_eta_NoSF = fs->make<TH1F>("bjet2_deepJETT_eta_NoSF","#eta_{bjet_deepJETT_NoSF}",100,-2.5, 2.5);
  h_bjet2_deepJETT_eta_NoSF->Sumw2();
  h_bjet2_deepJETT_phi_NoSF = fs->make<TH1F>("bjet2_deepJETT_phi_NoSF","#phi_{bjet_deepJETT_NoSF}",100,-M_PI, M_PI);
  h_bjet2_deepJETT_phi_NoSF->Sumw2();

  h_nonbjet_deepJETT_eta = fs->make<TH1F>("nonbjet_deepJETT_eta","#eta_{nonbjet_deepJETT}",100,-2.5, 2.5);
  h_nonbjet_deepJETT_eta->Sumw2();
  h_nonbjet_deepJETT_phi = fs->make<TH1F>("nonbjet_deepJETT_phi","#phi_{nonbjet_deepJETT}",100,-M_PI, M_PI);
  h_nonbjet_deepJETT_phi->Sumw2();

  h_nonbjet_deepJETT_eta_NoSF = fs->make<TH1F>("nonbjet_deepJETT_eta_NoSF","#eta_{nonbjet_deepJETT_NoSF}",100,-2.5, 2.5);
  h_nonbjet_deepJETT_eta_NoSF->Sumw2();
  h_nonbjet_deepJETT_phi_NoSF = fs->make<TH1F>("nonbjet_deepJETT_phi_NoSF","#phi_{nonbjet_deepJETT_NoSF}",100,-M_PI, M_PI);
  h_nonbjet_deepJETT_phi_NoSF->Sumw2();

  h_nonbjet1_deepJETT_eta = fs->make<TH1F>("nonbjet1_deepJETT_eta","#eta_{nonbjet_deepJETT}",100,-2.5, 2.5);
  h_nonbjet1_deepJETT_eta->Sumw2();
  h_nonbjet1_deepJETT_phi = fs->make<TH1F>("nonbjet1_deepJETT_phi","#phi_{nonbjet_deepJETT}",100,-M_PI, M_PI);
  h_nonbjet1_deepJETT_phi->Sumw2();

  h_nonbjet1_deepJETT_eta_NoSF = fs->make<TH1F>("nonbjet1_deepJETT_eta_NoSF","#eta_{nonbjet_deepJETT_NoSF}",100,-2.5, 2.5);
  h_nonbjet1_deepJETT_eta_NoSF->Sumw2();
  h_nonbjet1_deepJETT_phi_NoSF = fs->make<TH1F>("nonbjet1_deepJETT_phi_NoSF","#phi_{nonbjet_deepJETT_NoSF}",100,-M_PI, M_PI);
  h_nonbjet1_deepJETT_phi_NoSF->Sumw2();

  h_nonbjet2_deepJETT_eta = fs->make<TH1F>("nonbjet2_deepJETT_eta","#eta_{nonbjet_deepJETT}",100,-2.5, 2.5);
  h_nonbjet2_deepJETT_eta->Sumw2();
  h_nonbjet2_deepJETT_phi = fs->make<TH1F>("nonbjet2_deepJETT_phi","#phi_{nonbjet_deepJETT}",100,-M_PI, M_PI);
  h_nonbjet2_deepJETT_phi->Sumw2();

  h_nonbjet2_deepJETT_eta_NoSF = fs->make<TH1F>("nonbjet2_deepJETT_eta_NoSF","#eta_{nonbjet_deepJETT_NoSF}",100,-2.5, 2.5);
  h_nonbjet2_deepJETT_eta_NoSF->Sumw2();
  h_nonbjet2_deepJETT_phi_NoSF = fs->make<TH1F>("nonbjet2_deepJETT_phi_NoSF","#phi_{nonbjet_deepJETT_NoSF}",100,-M_PI, M_PI);
  h_nonbjet2_deepJETT_phi_NoSF->Sumw2();

  //Profile Histogram
  //Charge Multiplicity Vs. Jet PT   
  hchpt = fs->make<TH2F>("hchpt","hchpt",30,30,1500,99,1,100);
  hchpt->Sumw2();

  hchpt1 = fs->make<TH2F>("hchpt1","hchpt1",30,30,1500,99,1,100);
  hchpt1->Sumw2();

  hchpt2 = fs->make<TH2F>("hchpt2","hchpt2",30,30,1500,99,1,100);
  hchpt2->Sumw2();

#ifdef FLAV
  hchpt1_gjet = fs->make<TH2F>("hchpt1_gjet","hchpt1_gjet",30,30,1500,99,1,100);
  hchpt1_gjet->Sumw2();

  hchpt1_ujet = fs->make<TH2F>("hchpt1_ujet","hchpt1_ujet",30,30,1500,99,1,100);
  hchpt1_ujet->Sumw2();

  hchpt1_ubarjet = fs->make<TH2F>("hchpt1_ubarjet","hchpt1_ubarjet",30,30,1500,99,1,100);
  hchpt1_ubarjet->Sumw2();

  hchpt1_djet = fs->make<TH2F>("hchpt1_djet","hchpt1_djet",30,30,1500,99,1,100);
  hchpt1_djet->Sumw2();

  hchpt1_dbarjet = fs->make<TH2F>("hchpt1_dbarjet","hchpt1_dbarjet",30,30,1500,99,1,100);
  hchpt1_dbarjet->Sumw2(); 

  hchpt1_bjet = fs->make<TH2F>("hchpt1_bjet","hchpt1_bjet",30,30,1500,99,1,100);
  hchpt1_bjet->Sumw2();

  hchpt1_bbarjet = fs->make<TH2F>("hchpt1_bbarjet","hchpt1_bbarjet",30,30,1500,99,1,100);
  hchpt1_bbarjet->Sumw2();


  hchpt2_gjet = fs->make<TH2F>("hchpt2_gjet","hchpt2_gjet",30,30,1500,99,1,100);
  hchpt2_gjet->Sumw2();

  hchpt2_ujet = fs->make<TH2F>("hchpt2_ujet","hchpt2_ujet",30,30,1500,99,1,100);
  hchpt2_ujet->Sumw2();

  hchpt2_ubarjet = fs->make<TH2F>("hchpt2_ubarjet","hchpt2_ubarjet",30,30,1500,99,1,100);
  hchpt2_ubarjet->Sumw2();

  hchpt2_djet = fs->make<TH2F>("hchpt2_djet","hchpt2_djet",30,30,1500,99,1,100);
  hchpt2_djet->Sumw2();

  hchpt2_dbarjet = fs->make<TH2F>("hchpt2_dbarjet","hchpt2_dbarjet",30,30,1500,99,1,100);
  hchpt2_dbarjet->Sumw2();

  hchpt2_bjet = fs->make<TH2F>("hchpt2_bjet","hchpt2_bjet",30,30,1500,99,1,100);
  hchpt2_bjet->Sumw2();

  hchpt2_bbarjet = fs->make<TH2F>("hchpt2_bbarjet","hchpt2_bbarjet",30,30,1500,99,1,100);
  hchpt2_bbarjet->Sumw2();
#endif

  //BJet Working Point
  hchpt1_bjet_deepJETT = fs->make<TH2F>("hchpt1_bjet_deepJETT","hchpt1_bjet_deepJETT",30,30,1500,99,1,100);
  hchpt1_bjet_deepJETT->Sumw2();

  hchpt2_bjet_deepJETT = fs->make<TH2F>("hchpt2_bjet_deepJETT","hchpt2_bjet_deepJETT",30,30,1500,99,1,100);
  hchpt2_bjet_deepJETT->Sumw2();


  hchpt1_bjet_deepJETT_NoSF = fs->make<TH2F>("hchpt1_bjet_deepJETT_NoSF","hchpt1_bjet_deepJETT_NoSF",30,30,1500,99,1,100);
  hchpt1_bjet_deepJETT_NoSF->Sumw2();

  hchpt2_bjet_deepJETT_NoSF = fs->make<TH2F>("hchpt2_bjet_deepJETT_NoSF","hchpt2_bjet_deepJETT_NoSF",30,30,1500,99,1,100);
  hchpt2_bjet_deepJETT_NoSF->Sumw2();


  //PT related to tracks
  hprof_Reco_ntrack_vs_PTtrack_J1 = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_J1","hprof_Reco_ntrack_vs_PTtrack_J1",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_J1->Sumw2();

  hprof_Reco_ntrack_vs_PTtrack_J2 = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_J2","hprof_Reco_ntrack_vs_PTtrack_J2",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_J2->Sumw2();


  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1 = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1","hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1->Sumw2();

  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2 = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2","hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2->Sumw2();


  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1_NoSF = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1_NoSF","hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1_NoSF",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1_NoSF->Sumw2();

  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2_NoSF = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2_NoSF","hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2_NoSF",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2_NoSF->Sumw2();

#ifdef FLAV
  //BJet True Flavor
  hprof_Reco_ntrack_vs_PTtrack_bjet_J1 = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_bjet_J1","hprof_Reco_ntrack_vs_PTtrack_bjet_J1",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_bjet_J1->Sumw2();

  hprof_Reco_ntrack_vs_PTtrack_bjet_J2 = fs->make<TH2F>("hprof_Reco_ntrack_vs_PTtrack_bjet_J2","hprof_Reco_ntrack_vs_PTtrack_bjet_J2",30,30,1500,99,1,100);
  hprof_Reco_ntrack_vs_PTtrack_bjet_J2->Sumw2();
#endif

  for(int jk=0; jk<njetetamn; jk++){
    sprintf(name, "recojetallave_pt_%i",jk);
    sprintf(title, "Et_{recojetsallave}_%g", etarange[jk]);
    recojtallave_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    recojtallave_pt[jk]->Sumw2();

    sprintf(name, "recojetallavewt1_pt_%i",jk);
    sprintf(title, "Et_{recojetsallavewt1}_%g", etarange[jk]);
    recojtallavewt1_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    recojtallavewt1_pt[jk]->Sumw2();

    sprintf(name, "recojt_pt_%i",jk);
    sprintf(title, "Et_{recojets}_%g", etarange[jk]);
    recojt_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt_pt[jk]->Sumw2();

    sprintf(name, "recojet1_pt_%i",jk);
    sprintf(title, "Et_{recojets1}_%g", etarange[jk]);
    recojt1_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1_pt[jk]->Sumw2();

    sprintf(name, "recojet2_pt_%i",jk);
    sprintf(title, "Et_{recojets2}_%g", etarange[jk]);
    recojt2_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2_pt[jk]->Sumw2();

    sprintf(name, "recojet3_pt_%i",jk);
    sprintf(title, "Et_{recojets3}_%g", etarange[jk]);
    recojt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt3_pt[jk]->Sumw2();

#ifdef FLAV
    //gluon
    sprintf(name, "recojtg_pt_%i",jk);
    sprintf(title, "Et_{recojetg}_%g", etarange[jk]);
    recojtg_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtg_pt[jk]->Sumw2();

    sprintf(name, "recojt1g_pt_%i",jk);
    sprintf(title, "Et_{recojet1g}_%g", etarange[jk]);
    recojt1g_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1g_pt[jk]->Sumw2();

    sprintf(name, "recojt2g_pt_%i",jk);
    sprintf(title, "Et_{recojet2g}_%g", etarange[jk]);
    recojt2g_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2g_pt[jk]->Sumw2();

    //d-jet
    sprintf(name, "recojtd_pt_%i",jk);
    sprintf(title, "Et_{recojetd}_%g", etarange[jk]);
    recojtd_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtd_pt[jk]->Sumw2();

    sprintf(name, "recojt1d_pt_%i",jk);
    sprintf(title, "Et_{recojet1d}_%g", etarange[jk]);
    recojt1d_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1d_pt[jk]->Sumw2();

    sprintf(name, "recojt2d_pt_%i",jk);
    sprintf(title, "Et_{recojet2d}_%g", etarange[jk]);
    recojt2d_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2d_pt[jk]->Sumw2();

    //dbar-jet
    sprintf(name, "recojtdbar_pt_%i",jk);
    sprintf(title, "Et_{recojetdbar}_%g", etarange[jk]);
    recojtdbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtdbar_pt[jk]->Sumw2();

    sprintf(name, "recojt1dbar_pt_%i",jk);
    sprintf(title, "Et_{recojet1dbar}_%g", etarange[jk]);
    recojt1dbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1dbar_pt[jk]->Sumw2();

    sprintf(name, "recojt2dbar_pt_%i",jk);
    sprintf(title, "Et_{recojet2dbar}_%g", etarange[jk]);
    recojt2dbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2dbar_pt[jk]->Sumw2();

    //u-jet
    sprintf(name, "recojtu_pt_%i",jk);
    sprintf(title, "Et_{recojetu}_%g", etarange[jk]);
    recojtu_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtu_pt[jk]->Sumw2();
    
    sprintf(name, "recojt1u_pt_%i",jk);
    sprintf(title, "Et_{recojet1u}_%g", etarange[jk]);
    recojt1u_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1u_pt[jk]->Sumw2();

    sprintf(name, "recojt2u_pt_%i",jk);
    sprintf(title, "Et_{recojet2u}_%g", etarange[jk]);
    recojt2u_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2u_pt[jk]->Sumw2();

    //ubar-jet
    sprintf(name, "recojtubar_pt_%i",jk);
    sprintf(title, "Et_{recojetubar}_%g", etarange[jk]);
    recojtubar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtubar_pt[jk]->Sumw2();

    sprintf(name, "recojt1ubar_pt_%i",jk);
    sprintf(title, "Et_{recojet1ubar}_%g", etarange[jk]);
    recojt1ubar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1ubar_pt[jk]->Sumw2();

    sprintf(name, "recojt2ubar_pt_%i",jk);
    sprintf(title, "Et_{recojet2ubar}_%g", etarange[jk]);
    recojt2ubar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2ubar_pt[jk]->Sumw2();

    //BJet
    sprintf(name, "recojtb_pt_%i",jk);
    sprintf(title, "Et_{recojetb}_%g", etarange[jk]);
    recojtb_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtb_pt[jk]->Sumw2();

    sprintf(name, "recojt1b_pt_%i",jk);
    sprintf(title, "Et_{recojet1b}_%g", etarange[jk]);
    recojt1b_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1b_pt[jk]->Sumw2();

    sprintf(name, "recojt2b_pt_%i",jk);
    sprintf(title, "Et_{recojet2b}_%g", etarange[jk]);
    recojt2b_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2b_pt[jk]->Sumw2();

    //Bbar-jet
    sprintf(name, "recojtbbar_pt_%i",jk);
    sprintf(title, "Et_{recojetbbar}_%g", etarange[jk]);
    recojtbbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojtbbar_pt[jk]->Sumw2();

    sprintf(name, "recojt1bbar_pt_%i",jk);
    sprintf(title, "Et_{recojet1bbar}_%g", etarange[jk]);
    recojt1bbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1bbar_pt[jk]->Sumw2();

    sprintf(name, "recojt2bbar_pt_%i",jk);
    sprintf(title, "Et_{recojet2bbar}_%g", etarange[jk]);
    recojt2bbar_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2bbar_pt[jk]->Sumw2();

    //others
    sprintf(name, "recojto_pt_%i",jk);
    sprintf(title, "Et_{recojeto}_%g", etarange[jk]);
    recojto_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojto_pt[jk]->Sumw2();

    sprintf(name, "recojt1o_pt_%i",jk);
    sprintf(title, "Et_{recojet1o}_%g", etarange[jk]);
    recojt1o_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt1o_pt[jk]->Sumw2();

    sprintf(name, "recojt2o_pt_%i",jk);
    sprintf(title, "Et_{recojet2o}_%g", etarange[jk]);
    recojt2o_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    recojt2o_pt[jk]->Sumw2();
#endif

    //BJet Tight Working Point
    sprintf(name, "recojt_bjet_deepJETT_pt_%i",jk);
    sprintf(title, "Et_{reco_bjet_deepJETT}_%g", etarange[jk]);
    h_bjet_deepJETT_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_bjet_deepJETT_pt[jk]->Sumw2();

    sprintf(name, "recojt_bjet_deepJETT_pt_NoSF_%i",jk);
    sprintf(title, "Et_{reco_bjet_deepJETT_NoSF}_%g", etarange[jk]);
    h_bjet_deepJETT_pt_NoSF[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_bjet_deepJETT_pt_NoSF[jk]->Sumw2();

    sprintf(name, "recojt_bjet1_deepJETT_pt_%i",jk);
    sprintf(title, "Et_{reco_bjet1_deepJETT}_%g", etarange[jk]);
    h_bjet1_deepJETT_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_bjet1_deepJETT_pt[jk]->Sumw2();

    sprintf(name, "recojt_bjet1_deepJETT_pt_NoSF_%i",jk);
    sprintf(title, "Et_{reco_bjet1_deepJETT_NoSF}_%g", etarange[jk]);
    h_bjet1_deepJETT_pt_NoSF[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_bjet1_deepJETT_pt_NoSF[jk]->Sumw2();

    sprintf(name, "recojt_bjet2_deepJETT_pt_%i",jk);
    sprintf(title, "Et_{reco_bjet2_deepJETT}_%g", etarange[jk]);
    h_bjet2_deepJETT_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_bjet2_deepJETT_pt[jk]->Sumw2();

    sprintf(name, "recojt_bjet2_deepJETT_pt_NoSF_%i",jk);
    sprintf(title, "Et_{reco_bjet2_deepJETT_NoSF}_%g", etarange[jk]);
    h_bjet2_deepJETT_pt_NoSF[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_bjet2_deepJETT_pt_NoSF[jk]->Sumw2();

    sprintf(name, "recojt_nonbjet_deepJETT_pt_%i",jk);
    sprintf(title, "Et_{reco_nonbjet_deepJETT}_%g", etarange[jk]);
    h_nonbjet_deepJETT_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_nonbjet_deepJETT_pt[jk]->Sumw2();

    sprintf(name, "recojt_nonbjet_deepJETT_pt_NoSF_%i",jk);
    sprintf(title, "Et_{reco_nonbjet_deepJETT_NoSF}_%g", etarange[jk]);
    h_nonbjet_deepJETT_pt_NoSF[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_nonbjet_deepJETT_pt_NoSF[jk]->Sumw2();

    sprintf(name, "recojt_nonbjet1_deepJETT_pt_%i",jk);
    sprintf(title, "Et_{reco_nonbjet1_deepJETT}_%g", etarange[jk]);
    h_nonbjet1_deepJETT_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_nonbjet1_deepJETT_pt[jk]->Sumw2();

    sprintf(name, "recojt_nonbjet1_deepJETT_pt_NoSF_%i",jk);
    sprintf(title, "Et_{reco_nonbjet1_deepJETT_NoSF}_%g", etarange[jk]);
    h_nonbjet1_deepJETT_pt_NoSF[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_nonbjet1_deepJETT_pt_NoSF[jk]->Sumw2();

    sprintf(name, "recojt_nonbjet2_deepJETT_pt_%i",jk);
    sprintf(title, "Et_{reco_nonbjet2_deepJETT}_%g", etarange[jk]);
    h_nonbjet2_deepJETT_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_nonbjet2_deepJETT_pt[jk]->Sumw2();

    sprintf(name, "recojt_nonbjet2_deepJETT_pt_NoSF_%i",jk);
    sprintf(title, "Et_{reco_nonbjet2_deepJETT_NoSF}_%g", etarange[jk]);
    h_nonbjet2_deepJETT_pt_NoSF[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    h_nonbjet2_deepJETT_pt_NoSF[jk]->Sumw2();

    //sprintf(title, "Et_{recojets3}_%g", etarange[jk]);
    //recojt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    //recojt3_pt[jk]->Sumw2();

    for (int kl=0; kl<nHLTmx; kl++) { 
      //sprintf(name, "recojt_pt_%i_%i",jk, kl);
      //sprintf(title, "Et_{recojets}_%g_%i", etarange[jk], kl);
      //recojt_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      //recojt_pt[jk][kl]->Sumw2();

      sprintf(name, "recojetave_pt_%i_%i",jk, kl);
      sprintf(title, "Et_{recojetsave}_%g_%i", etarange[jk], kl);
      recojtave_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      recojtave_pt[jk][kl]->Sumw2();

      sprintf(name, "recojetavewt1_pt_%i_%i",jk, kl);
      sprintf(title, "Et_{recojetsavewt1}_%g_%i", etarange[jk], kl);
      recojtavewt1_pt[jk][kl] = fs->make<TH1F>(name,title, 400, 20., 2020.);
      recojtavewt1_pt[jk][kl]->Sumw2();
    }

    sprintf(name, "recojetHT2_%i",jk);
    sprintf(title, "recojetsHT2_%g", etarange[jk]);
    recoht2_pt[jk] = fs->make<TH1F>(name, title, 400,20., 1500.);
    recoht2_pt[jk]->Sumw2();


    sprintf(name, "hjetdpt_%i",jk);
    sprintf(title, "dpt_{recojets12}_%g", etarange[jk]);
    hjetdpt[jk] = fs->make<TH1F>(name, title, 100,20., 500.);
    hjetdpt[jk]->Sumw2();

    sprintf(name, "hjetpt2bypt1_%i",jk);
    sprintf(title, "hjetpt2bypt1 reco jet_%g", etarange[jk]);
    hjetpt2bypt1[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetpt2bypt1[jk]->Sumw2();

    sprintf(name, "hjetpt3bypt2_%i",jk);
    sprintf(title, "hjetpt3bypt2 reco jet_%g", etarange[jk]);
    hjetpt3bypt2[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetpt3bypt2[jk]->Sumw2();

    sprintf(name, "hjetdphi_%i",jk);
    sprintf(title, "#phi_{recojets}_%g", etarange[jk]);
    hjetdphi[jk] = fs->make<TH1F>(name,title,100,-M_PI, M_PI);
    hjetdphi[jk]->Sumw2();
    
    sprintf(name, "hjetptbypl_%i",jk);
    sprintf(title, "1st recojet Pt*sin/1st Recojet_%g", etarange[jk]);
    hjetptbypl[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    hjetptbypl[jk]->Sumw2();

    //hjetpt2bypt1 = fs->make<TH1F>("hjetpt2bypt1", "hjetpt2bypt1 reco jet", 60, 0., 1.0);
    //hjetpt2bypt1->Sumw2();
    //hjetpt3bypt2 = fs->make<TH1F>("hjetpt2bypt1", "hjetpt2bypt1 reco jet", 60, 0., 1.0);
    //hjetpt3bypt2->Sumw2();
  }

  recochg_pt = fs->make<TH1F>("recochg_pt","Et_{recocharge_alljet}",100, 1., 101.);
  recochg_pt->Sumw2();
  recochg_eta = fs->make<TH1F>("recochg_eta","#eta_{recocharge_alljet}",100,-3., 3.);
  recochg_eta->Sumw2();
  recochg_phi = fs->make<TH1F>("recochg_phi","#phi_{recocharge_alljet}",100,-M_PI, M_PI);
  recochg_phi->Sumw2();

  recochg1_pt = fs->make<TH1F>("recochg1_pt","Et_{recocharge_jet1}",100, 1., 101.);
  recochg1_pt->Sumw2();
  recochg1_eta = fs->make<TH1F>("recochg1_eta","#eta_{recocharge_jet1}",100,-3., 3.);
  recochg1_eta->Sumw2();
  recochg1_phi = fs->make<TH1F>("recochg1_phi","#phi_{recocharge_jet1}",100,-M_PI, M_PI);
  recochg1_phi->Sumw2();

  recochg2_pt = fs->make<TH1F>("recochg2_pt","Et_{recocharge_jet2}",100, 1., 101.);
  recochg2_pt->Sumw2();
  recochg2_eta = fs->make<TH1F>("recochg2_eta","#eta_{recocharge_jet2}",100,-3., 3.);
  recochg2_eta->Sumw2();
  recochg2_phi = fs->make<TH1F>("recochg2_phi","#phi_{recocharge_jet2}",100,-M_PI, M_PI);
  recochg2_phi->Sumw2();

  recochg3_pt = fs->make<TH1F>("recochg3_pt","Et_{recocharge_jet3}",100, 1., 101.);
  recochg3_pt->Sumw2();
  recochg3_eta = fs->make<TH1F>("recochg3_eta","#eta_{recocharge_jet3}",100,-3., 3.);
  recochg3_eta->Sumw2();
  recochg3_phi = fs->make<TH1F>("recochg3_phi","#phi_{recocharge_jet3}",100,-M_PI, M_PI);
  recochg3_phi->Sumw2();

  recojetchg1_cand1 = fs->make<TH1F>("recojetchg1_cand1","Et_{recojetchg_LeadJet_cand1}",100, 20., 520.);
  recojetchg1_cand1->Sumw2();

  recojetchg2_cand1 = fs->make<TH1F>("recojetchg2_cand1","Et_{recojetchg_SubLeadJet_cand1}",100, 20., 520.);
  recojetchg2_cand1->Sumw2(); 


  recobjetchg1_deepJETT_cand1 = fs->make<TH1F>("recobjetchg1_deepJETT_cand1","Et_{recobjetchg_LeadJet_deepJETT_cand1}",100, 20., 520.);
  recobjetchg1_deepJETT_cand1->Sumw2();

  recobjetchg2_deepJETT_cand1 = fs->make<TH1F>("recobjetchg2_deepJETT_cand1","Et_{recobjetchg_SubLeadJet_deepJETT_cand1}",100, 20., 520.);
  recobjetchg2_deepJETT_cand1->Sumw2();

  recobjetchg1_deepJETT_cand1_NoSF = fs->make<TH1F>("recobjetchg1_deepJETT_cand1_NoSF","Et_{recobjetchg_LeadJet_deepJETT_cand1_NoSF}",100, 20., 520.);
  recobjetchg1_deepJETT_cand1_NoSF->Sumw2();

  recobjetchg2_deepJETT_cand1_NoSF = fs->make<TH1F>("recobjetchg2_deepJETT_cand1_NoSF","Et_{recobjetchg_SubLeadJet_deepJETT_cand1_NoSF}",100, 20., 520.);
  recobjetchg2_deepJETT_cand1_NoSF->Sumw2();

#ifdef FLAV
  recobjetchg1_cand1 = fs->make<TH1F>("recobjetchg1_cand1","Et_{recobjetchg_LeadJet_cand1}",100, 20., 520.);
  recobjetchg1_cand1->Sumw2();

  recobjetchg2_cand1 = fs->make<TH1F>("recobjetchg2_cand1","Et_{recobjetchg_SubLeadJet_cand1}",100, 20., 520.);
  recobjetchg2_cand1->Sumw2();
#endif

  LdeepJETT_SF = fs->make<TH2D>("LdeepJETT_SF","LdeepJETT_SF",30,30,2000,5,0,2);
  LdeepJETT_SF->Sumw2();

  LdeepJETM_SF = fs->make<TH2D>("LdeepJETM_SF","LdeepJETM_SF",30,30,2000,5,0,2);
  LdeepJETM_SF->Sumw2();

  LdeepJETL_SF = fs->make<TH2D>("LdeepJETL_SF","LdeepJETL_SF",30,30,2000,5,0,2);
  LdeepJETL_SF->Sumw2();

  LdeepCSVT_SF = fs->make<TH2D>("LdeepCSVT_SF","LdeepCSVT_SF",30,30,2000,5,0,2);
  LdeepCSVT_SF->Sumw2();

  LdeepCSVM_SF = fs->make<TH2D>("LdeepCSVM_SF","LdeepCSVM_SF",30,30,2000,5,0,2);
  LdeepCSVM_SF->Sumw2();

  LdeepCSVL_SF = fs->make<TH2D>("LdeepCSVL_SF","LdeepCSVL_SF",30,30,2000,5,0,2);
  LdeepCSVL_SF->Sumw2();

  
  CdeepJETT_SF = fs->make<TH2D>("CdeepJETT_SF","CdeepJETT_SF",30,30,2000,5,0,2);
  CdeepJETT_SF->Sumw2();

  CdeepJETM_SF = fs->make<TH2D>("CdeepJETM_SF","CdeepJETM_SF",30,30,2000,5,0,2);
  CdeepJETM_SF->Sumw2();

  CdeepJETL_SF = fs->make<TH2D>("CdeepJETL_SF","CdeepJETL_SF",30,30,2000,5,0,2);
  CdeepJETL_SF->Sumw2();

  CdeepCSVT_SF = fs->make<TH2D>("CdeepCSVT_SF","CdeepCSVT_SF",30,30,2000,5,0,2);
  CdeepCSVT_SF->Sumw2();

  CdeepCSVM_SF = fs->make<TH2D>("CdeepCSVM_SF","CdeepCSVM_SF",30,30,2000,5,0,2);
  CdeepCSVM_SF->Sumw2();

  CdeepCSVL_SF = fs->make<TH2D>("CdeepCSVL_SF","CdeepCSVL_SF",30,30,2000,5,0,2);
  CdeepCSVL_SF->Sumw2();


  BdeepJETT_SF = fs->make<TH2D>("BdeepJETT_SF","BdeepJETT_SF",30,30,2000,5,0,2);
  BdeepJETT_SF->Sumw2();

  BdeepJETM_SF = fs->make<TH2D>("BdeepJETM_SF","BdeepJETM_SF",30,30,2000,5,0,2);
  BdeepJETM_SF->Sumw2();

  BdeepJETL_SF = fs->make<TH2D>("BdeepJETL_SF","BdeepJETL_SF",30,30,2000,5,0,2);
  BdeepJETL_SF->Sumw2();

  BdeepCSVT_SF = fs->make<TH2D>("BdeepCSVT_SF","BdeepCSVT_SF",30,30,2000,5,0,2);
  BdeepCSVT_SF->Sumw2();

  BdeepCSVM_SF = fs->make<TH2D>("BdeepCSVM_SF","BdeepCSVM_SF",30,30,2000,5,0,2);
  BdeepCSVM_SF->Sumw2();

  BdeepCSVL_SF = fs->make<TH2D>("BdeepCSVL_SF","BdeepCSVL_SF",30,30,2000,5,0,2);
  BdeepCSVL_SF->Sumw2();


  Reco_bjet_fra = fs->make<TH2D>("Reco_bjet_fra","Reco_bjet_fra",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_bjet_fra->Sumw2();

  Reco_bjet_fra_NoSF = fs->make<TH2D>("Reco_bjet_fra_NoSF","Reco_bjet_fra_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_bjet_fra_NoSF->Sumw2();

  Reco_CSVT_bjet_fra = fs->make<TH2D>("Reco_CSVT_bjet_fra","Reco_CSVT_bjet_fra",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_fra->Sumw2();

  Reco_CSVM_bjet_fra = fs->make<TH2D>("Reco_CSVM_bjet_fra","Reco_CSVM_bjet_fra",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_fra->Sumw2();

  Reco_CSVL_bjet_fra = fs->make<TH2D>("Reco_CSVL_bjet_fra","Reco_CSVL_bjet_fra",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_fra->Sumw2();

  
  Reco_CSVT_bjet_fra_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_fra_NoSF","Reco_CSVT_bjet_fra_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_fra_NoSF->Sumw2();

  Reco_CSVM_bjet_fra_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_fra_NoSF","Reco_CSVM_bjet_fra_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_fra_NoSF->Sumw2();

  Reco_CSVL_bjet_fra_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_fra_NoSF","Reco_CSVL_bjet_fra_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_fra_NoSF->Sumw2();

  
  Reco_JETT_bjet_fra = fs->make<TH2D>("Reco_JETT_bjet_fra","Reco_JETT_bjet_fra",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_fra->Sumw2();

  Reco_JETM_bjet_fra = fs->make<TH2D>("Reco_JETM_bjet_fra","Reco_JETM_bjet_fra",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_fra->Sumw2();

  Reco_JETL_bjet_fra = fs->make<TH2D>("Reco_JETL_bjet_fra","Reco_JETL_bjet_fra",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_fra->Sumw2();

  
  Reco_JETT_bjet_fra_NoSF = fs->make<TH2D>("Reco_JETT_bjet_fra_NoSF","Reco_JETT_bjet_fra_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_fra_NoSF->Sumw2();

  Reco_JETM_bjet_fra_NoSF = fs->make<TH2D>("Reco_JETM_bjet_fra_NoSF","Reco_JETM_bjet_fra_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_fra_NoSF->Sumw2();

  Reco_JETL_bjet_fra_NoSF = fs->make<TH2D>("Reco_JETL_bjet_fra_NoSF","Reco_JETL_bjet_fra_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_fra_NoSF->Sumw2();

/*
  Reco_CSVT_bjet_eff_den = fs->make<TH2F>("Reco_CSVT_bjet_eff_den","Reco_CSVT_bjet_eff_den",100, 20., 520.,60, -3.0, 3.0);
  Reco_CSVT_bjet_eff_den->Sumw2();

  Reco_CSVT_bjet_eff_num = fs->make<TH2F>("Reco_CSVT_bjet_eff_num","Reco_CSVT_bjet_eff_num",100, 20., 520.,60, -3.0, 3.0);
  Reco_CSVT_bjet_eff_num->Sumw2();
*/


  //DeepCSV Tight Working Point
  Reco_CSVT_bjet_eff_den = fs->make<TH2D>("Reco_CSVT_bjet_eff_den","Reco_CSVT_bjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_eff_den->Sumw2();

  Reco_CSVT_bjet_eff_num = fs->make<TH2D>("Reco_CSVT_bjet_eff_num","Reco_CSVT_bjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_eff_num->Sumw2();

  Reco_CSVT_cjet_eff_den = fs->make<TH2D>("Reco_CSVT_cjet_eff_den","Reco_CSVT_cjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_eff_den->Sumw2();

  Reco_CSVT_cjet_eff_num = fs->make<TH2D>("Reco_CSVT_cjet_eff_num","Reco_CSVT_cjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_eff_num->Sumw2();

  Reco_CSVT_ljet_eff_den = fs->make<TH2D>("Reco_CSVT_ljet_eff_den","Reco_CSVT_ljet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_eff_den->Sumw2();

  Reco_CSVT_ljet_eff_num = fs->make<TH2D>("Reco_CSVT_ljet_eff_num","Reco_CSVT_ljet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_eff_num->Sumw2();

  Reco_CSVT_bjet_miss_den = fs->make<TH2D>("Reco_CSVT_bjet_miss_den","Reco_CSVT_bjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_miss_den->Sumw2();

  Reco_CSVT_bjet_miss_num = fs->make<TH2D>("Reco_CSVT_bjet_miss_num","Reco_CSVT_bjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_miss_num->Sumw2();

  Reco_CSVT_cjet_miss_den = fs->make<TH2D>("Reco_CSVT_cjet_miss_den","Reco_CSVT_cjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_miss_den->Sumw2();

  Reco_CSVT_cjet_miss_num = fs->make<TH2D>("Reco_CSVT_cjet_miss_num","Reco_CSVT_cjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_miss_num->Sumw2();
 
  Reco_CSVT_ljet_miss_den = fs->make<TH2D>("Reco_CSVT_ljet_miss_den","Reco_CSVT_ljet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_miss_den->Sumw2();

  Reco_CSVT_ljet_miss_num = fs->make<TH2D>("Reco_CSVT_ljet_miss_num","Reco_CSVT_ljet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_miss_num->Sumw2();

  Reco_CSVT_bjet_pur_den = fs->make<TH2D>("Reco_CSVT_bjet_pur_den","Reco_CSVT_bjet_pur_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_pur_den->Sumw2();

  Reco_CSVT_bjet_pur_num = fs->make<TH2D>("Reco_CSVT_bjet_pur_num","Reco_CSVT_bjet_pur_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_pur_num->Sumw2();

  Reco_CSVT_bjet_con_den = fs->make<TH2D>("Reco_CSVT_bjet_con_den","Reco_CSVT_bjet_con_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_con_den->Sumw2();

  Reco_CSVT_bjet_con_num = fs->make<TH2D>("Reco_CSVT_bjet_con_num","Reco_CSVT_bjet_con_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_con_num->Sumw2();



  Reco_CSVT_bjet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_eff_den_NoSF","Reco_CSVT_bjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_eff_den_NoSF->Sumw2();

  Reco_CSVT_bjet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_eff_num_NoSF","Reco_CSVT_bjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_eff_num_NoSF->Sumw2();

  Reco_CSVT_cjet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVT_cjet_eff_den_NoSF","Reco_CSVT_cjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_eff_den_NoSF->Sumw2();

  Reco_CSVT_cjet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVT_cjet_eff_num_NoSF","Reco_CSVT_cjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_eff_num_NoSF->Sumw2();

  Reco_CSVT_ljet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVT_ljet_eff_den_NoSF","Reco_CSVT_ljet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_eff_den_NoSF->Sumw2();

  Reco_CSVT_ljet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVT_ljet_eff_num_NoSF","Reco_CSVT_ljet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_eff_num_NoSF->Sumw2();

  Reco_CSVT_bjet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_miss_den_NoSF","Reco_CSVT_bjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_miss_den_NoSF->Sumw2();

  Reco_CSVT_bjet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_miss_num_NoSF","Reco_CSVT_bjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_miss_num_NoSF->Sumw2();

  Reco_CSVT_cjet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVT_cjet_miss_den_NoSF","Reco_CSVT_cjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_miss_den_NoSF->Sumw2();

  Reco_CSVT_cjet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVT_cjet_miss_num_NoSF","Reco_CSVT_cjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_cjet_miss_num_NoSF->Sumw2();

  Reco_CSVT_ljet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVT_ljet_miss_den_NoSF","Reco_CSVT_ljet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_miss_den_NoSF->Sumw2();

  Reco_CSVT_ljet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVT_ljet_miss_num_NoSF","Reco_CSVT_ljet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_ljet_miss_num_NoSF->Sumw2();

  Reco_CSVT_bjet_pur_den_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_pur_den_NoSF","Reco_CSVT_bjet_pur_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_pur_den_NoSF->Sumw2();

  Reco_CSVT_bjet_pur_num_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_pur_num_NoSF","Reco_CSVT_bjet_pur_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_pur_num_NoSF->Sumw2();

  Reco_CSVT_bjet_con_den_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_con_den_NoSF","Reco_CSVT_bjet_con_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_con_den_NoSF->Sumw2();

  Reco_CSVT_bjet_con_num_NoSF = fs->make<TH2D>("Reco_CSVT_bjet_con_num_NoSF","Reco_CSVT_bjet_con_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVT_bjet_con_num_NoSF->Sumw2();

 
  //DeepCSV Medium Working Point
  Reco_CSVM_bjet_eff_den = fs->make<TH2D>("Reco_CSVM_bjet_eff_den","Reco_CSVM_bjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_eff_den->Sumw2();

  Reco_CSVM_bjet_eff_num = fs->make<TH2D>("Reco_CSVM_bjet_eff_num","Reco_CSVM_bjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_eff_num->Sumw2();

  Reco_CSVM_cjet_eff_den = fs->make<TH2D>("Reco_CSVM_cjet_eff_den","Reco_CSVM_cjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_eff_den->Sumw2();

  Reco_CSVM_cjet_eff_num = fs->make<TH2D>("Reco_CSVM_cjet_eff_num","Reco_CSVM_cjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_eff_num->Sumw2();

  Reco_CSVM_ljet_eff_den = fs->make<TH2D>("Reco_CSVM_ljet_eff_den","Reco_CSVM_ljet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_eff_den->Sumw2();

  Reco_CSVM_ljet_eff_num = fs->make<TH2D>("Reco_CSVM_ljet_eff_num","Reco_CSVM_ljet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_eff_num->Sumw2();

  Reco_CSVM_bjet_miss_den = fs->make<TH2D>("Reco_CSVM_bjet_miss_den","Reco_CSVM_bjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_miss_den->Sumw2();

  Reco_CSVM_bjet_miss_num = fs->make<TH2D>("Reco_CSVM_bjet_miss_num","Reco_CSVM_bjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_miss_num->Sumw2();

  Reco_CSVM_cjet_miss_den = fs->make<TH2D>("Reco_CSVM_cjet_miss_den","Reco_CSVM_cjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_miss_den->Sumw2();

  Reco_CSVM_cjet_miss_num = fs->make<TH2D>("Reco_CSVM_cjet_miss_num","Reco_CSVM_cjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_miss_num->Sumw2();

  Reco_CSVM_ljet_miss_den = fs->make<TH2D>("Reco_CSVM_ljet_miss_den","Reco_CSVM_ljet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_miss_den->Sumw2();

  Reco_CSVM_ljet_miss_num = fs->make<TH2D>("Reco_CSVM_ljet_miss_num","Reco_CSVM_ljet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_miss_num->Sumw2();

  Reco_CSVM_bjet_pur_den = fs->make<TH2D>("Reco_CSVM_bjet_pur_den","Reco_CSVM_bjet_pur_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_pur_den->Sumw2();

  Reco_CSVM_bjet_pur_num = fs->make<TH2D>("Reco_CSVM_bjet_pur_num","Reco_CSVM_bjet_pur_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_pur_num->Sumw2();

  Reco_CSVM_bjet_con_den = fs->make<TH2D>("Reco_CSVM_bjet_con_den","Reco_CSVM_bjet_con_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_con_den->Sumw2();

  Reco_CSVM_bjet_con_num = fs->make<TH2D>("Reco_CSVM_bjet_con_num","Reco_CSVM_bjet_con_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_con_num->Sumw2();
 

  Reco_CSVM_bjet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_eff_den_NoSF","Reco_CSVM_bjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_eff_den_NoSF->Sumw2();

  Reco_CSVM_bjet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_eff_num_NoSF","Reco_CSVM_bjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_eff_num_NoSF->Sumw2();

  Reco_CSVM_cjet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVM_cjet_eff_den_NoSF","Reco_CSVM_cjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_eff_den_NoSF->Sumw2();

  Reco_CSVM_cjet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVM_cjet_eff_num_NoSF","Reco_CSVM_cjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_eff_num_NoSF->Sumw2();

  Reco_CSVM_ljet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVM_ljet_eff_den_NoSF","Reco_CSVM_ljet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_eff_den_NoSF->Sumw2();

  Reco_CSVM_ljet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVM_ljet_eff_num_NoSF","Reco_CSVM_ljet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_eff_num_NoSF->Sumw2();

  Reco_CSVM_bjet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_miss_den_NoSF","Reco_CSVM_bjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_miss_den_NoSF->Sumw2();

  Reco_CSVM_bjet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_miss_num_NoSF","Reco_CSVM_bjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_miss_num_NoSF->Sumw2();

  Reco_CSVM_cjet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVM_cjet_miss_den_NoSF","Reco_CSVM_cjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_miss_den_NoSF->Sumw2();

  Reco_CSVM_cjet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVM_cjet_miss_num_NoSF","Reco_CSVM_cjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_cjet_miss_num_NoSF->Sumw2();

  Reco_CSVM_ljet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVM_ljet_miss_den_NoSF","Reco_CSVM_ljet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_miss_den_NoSF->Sumw2();

  Reco_CSVM_ljet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVM_ljet_miss_num_NoSF","Reco_CSVM_ljet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_ljet_miss_num_NoSF->Sumw2();

  Reco_CSVM_bjet_pur_den_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_pur_den_NoSF","Reco_CSVM_bjet_pur_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_pur_den_NoSF->Sumw2();

  Reco_CSVM_bjet_pur_num_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_pur_num_NoSF","Reco_CSVM_bjet_pur_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_pur_num_NoSF->Sumw2();

  Reco_CSVM_bjet_con_den_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_con_den_NoSF","Reco_CSVM_bjet_con_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_con_den_NoSF->Sumw2();

  Reco_CSVM_bjet_con_num_NoSF = fs->make<TH2D>("Reco_CSVM_bjet_con_num_NoSF","Reco_CSVM_bjet_con_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVM_bjet_con_num_NoSF->Sumw2();

  //DeepCSV Light working Point
  Reco_CSVL_bjet_eff_den = fs->make<TH2D>("Reco_CSVL_bjet_eff_den","Reco_CSVL_bjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_eff_den->Sumw2();

  Reco_CSVL_bjet_eff_num = fs->make<TH2D>("Reco_CSVL_bjet_eff_num","Reco_CSVL_bjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_eff_num->Sumw2();

  Reco_CSVL_cjet_eff_den = fs->make<TH2D>("Reco_CSVL_cjet_eff_den","Reco_CSVL_cjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_eff_den->Sumw2();

  Reco_CSVL_cjet_eff_num = fs->make<TH2D>("Reco_CSVL_cjet_eff_num","Reco_CSVL_cjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_eff_num->Sumw2();

  Reco_CSVL_ljet_eff_den = fs->make<TH2D>("Reco_CSVL_ljet_eff_den","Reco_CSVL_ljet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_eff_den->Sumw2();

  Reco_CSVL_ljet_eff_num = fs->make<TH2D>("Reco_CSVL_ljet_eff_num","Reco_CSVL_ljet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_eff_num->Sumw2();

  Reco_CSVL_bjet_miss_den = fs->make<TH2D>("Reco_CSVL_bjet_miss_den","Reco_CSVL_bjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_miss_den->Sumw2();

  Reco_CSVL_bjet_miss_num = fs->make<TH2D>("Reco_CSVL_bjet_miss_num","Reco_CSVL_bjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_miss_num->Sumw2();

  Reco_CSVL_cjet_miss_den = fs->make<TH2D>("Reco_CSVL_cjet_miss_den","Reco_CSVL_cjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_miss_den->Sumw2();

  Reco_CSVL_cjet_miss_num = fs->make<TH2D>("Reco_CSVL_cjet_miss_num","Reco_CSVL_cjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_miss_num->Sumw2();

  Reco_CSVL_ljet_miss_den = fs->make<TH2D>("Reco_CSVL_ljet_miss_den","Reco_CSVL_ljet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_miss_den->Sumw2();

  Reco_CSVL_ljet_miss_num = fs->make<TH2D>("Reco_CSVL_ljet_miss_num","Reco_CSVL_ljet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_miss_num->Sumw2();

  Reco_CSVL_bjet_pur_den = fs->make<TH2D>("Reco_CSVL_bjet_pur_den","Reco_CSVL_bjet_pur_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_pur_den->Sumw2();

  Reco_CSVL_bjet_pur_num = fs->make<TH2D>("Reco_CSVL_bjet_pur_num","Reco_CSVL_bjet_pur_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_pur_num->Sumw2();

  Reco_CSVL_bjet_con_den = fs->make<TH2D>("Reco_CSVL_bjet_con_den","Reco_CSVL_bjet_con_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_con_den->Sumw2();

  Reco_CSVL_bjet_con_num = fs->make<TH2D>("Reco_CSVL_bjet_con_num","Reco_CSVL_bjet_con_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_con_num->Sumw2();


  Reco_CSVL_bjet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_eff_den_NoSF","Reco_CSVL_bjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_eff_den_NoSF->Sumw2();

  Reco_CSVL_bjet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_eff_num_NoSF","Reco_CSVL_bjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_eff_num_NoSF->Sumw2();

  Reco_CSVL_cjet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVL_cjet_eff_den_NoSF","Reco_CSVL_cjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_eff_den_NoSF->Sumw2();

  Reco_CSVL_cjet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVL_cjet_eff_num_NoSF","Reco_CSVL_cjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_eff_num_NoSF->Sumw2();

  Reco_CSVL_ljet_eff_den_NoSF = fs->make<TH2D>("Reco_CSVL_ljet_eff_den_NoSF","Reco_CSVL_ljet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_eff_den_NoSF->Sumw2();

  Reco_CSVL_ljet_eff_num_NoSF = fs->make<TH2D>("Reco_CSVL_ljet_eff_num_NoSF","Reco_CSVL_ljet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_eff_num_NoSF->Sumw2();

  Reco_CSVL_bjet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_miss_den_NoSF","Reco_CSVL_bjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_miss_den_NoSF->Sumw2();

  Reco_CSVL_bjet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_miss_num_NoSF","Reco_CSVL_bjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_miss_num_NoSF->Sumw2();

  Reco_CSVL_cjet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVL_cjet_miss_den_NoSF","Reco_CSVL_cjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_miss_den_NoSF->Sumw2();

  Reco_CSVL_cjet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVL_cjet_miss_num_NoSF","Reco_CSVL_cjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_cjet_miss_num_NoSF->Sumw2();

  Reco_CSVL_ljet_miss_den_NoSF = fs->make<TH2D>("Reco_CSVL_ljet_miss_den_NoSF","Reco_CSVL_ljet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_miss_den_NoSF->Sumw2();

  Reco_CSVL_ljet_miss_num_NoSF = fs->make<TH2D>("Reco_CSVL_ljet_miss_num_NoSF","Reco_CSVL_ljet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_ljet_miss_num_NoSF->Sumw2();

  Reco_CSVL_bjet_pur_den_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_pur_den_NoSF","Reco_CSVL_bjet_pur_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_pur_den_NoSF->Sumw2();

  Reco_CSVL_bjet_pur_num_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_pur_num_NoSF","Reco_CSVL_bjet_pur_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_pur_num_NoSF->Sumw2();

  Reco_CSVL_bjet_con_den_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_con_den_NoSF","Reco_CSVL_bjet_con_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_con_den_NoSF->Sumw2();

  Reco_CSVL_bjet_con_num_NoSF = fs->make<TH2D>("Reco_CSVL_bjet_con_num_NoSF","Reco_CSVL_bjet_con_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_CSVL_bjet_con_num_NoSF->Sumw2();

  //DeepJET Tight Working Point
  Reco_JETT_bjet_eff_den = fs->make<TH2D>("Reco_JETT_bjet_eff_den","Reco_JETT_bjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_eff_den->Sumw2();

  Reco_JETT_bjet_eff_num = fs->make<TH2D>("Reco_JETT_bjet_eff_num","Reco_JETT_bjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_eff_num->Sumw2();

  Reco_JETT_cjet_eff_den = fs->make<TH2D>("Reco_JETT_cjet_eff_den","Reco_JETT_cjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_eff_den->Sumw2();

  Reco_JETT_cjet_eff_num = fs->make<TH2D>("Reco_JETT_cjet_eff_num","Reco_JETT_cjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_eff_num->Sumw2();

  Reco_JETT_ljet_eff_den = fs->make<TH2D>("Reco_JETT_ljet_eff_den","Reco_JETT_ljet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_eff_den->Sumw2();

  Reco_JETT_ljet_eff_num = fs->make<TH2D>("Reco_JETT_ljet_eff_num","Reco_JETT_ljet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_eff_num->Sumw2();

  Reco_JETT_bjet_miss_den = fs->make<TH2D>("Reco_JETT_bjet_miss_den","Reco_JETT_bjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_miss_den->Sumw2();

  Reco_JETT_bjet_miss_num = fs->make<TH2D>("Reco_JETT_bjet_miss_num","Reco_JETT_bjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_miss_num->Sumw2();

  Reco_JETT_cjet_miss_den = fs->make<TH2D>("Reco_JETT_cjet_miss_den","Reco_JETT_cjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_miss_den->Sumw2();

  Reco_JETT_cjet_miss_num = fs->make<TH2D>("Reco_JETT_cjet_miss_num","Reco_JETT_cjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_miss_num->Sumw2();

  Reco_JETT_ljet_miss_den = fs->make<TH2D>("Reco_JETT_ljet_miss_den","Reco_JETT_ljet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_miss_den->Sumw2();

  Reco_JETT_ljet_miss_num = fs->make<TH2D>("Reco_JETT_ljet_miss_num","Reco_JETT_ljet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_miss_num->Sumw2();

  Reco_JETT_bjet_pur_den = fs->make<TH2D>("Reco_JETT_bjet_pur_den","Reco_JETT_bjet_pur_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_pur_den->Sumw2();

  Reco_JETT_bjet_pur_num = fs->make<TH2D>("Reco_JETT_bjet_pur_num","Reco_JETT_bjet_pur_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_pur_num->Sumw2();

  Reco_JETT_bjet_con_den = fs->make<TH2D>("Reco_JETT_bjet_con_den","Reco_JETT_bjet_con_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_con_den->Sumw2();

  Reco_JETT_bjet_con_num = fs->make<TH2D>("Reco_JETT_bjet_con_num","Reco_JETT_bjet_con_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_con_num->Sumw2();

  
  Reco_JETT_bjet_eff_den_NoSF = fs->make<TH2D>("Reco_JETT_bjet_eff_den_NoSF","Reco_JETT_bjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_eff_den_NoSF->Sumw2();

  Reco_JETT_bjet_eff_num_NoSF = fs->make<TH2D>("Reco_JETT_bjet_eff_num_NoSF","Reco_JETT_bjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_eff_num_NoSF->Sumw2();

  Reco_JETT_cjet_eff_den_NoSF = fs->make<TH2D>("Reco_JETT_cjet_eff_den_NoSF","Reco_JETT_cjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_eff_den_NoSF->Sumw2();

  Reco_JETT_cjet_eff_num_NoSF = fs->make<TH2D>("Reco_JETT_cjet_eff_num_NoSF","Reco_JETT_cjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_eff_num_NoSF->Sumw2();

  Reco_JETT_ljet_eff_den_NoSF = fs->make<TH2D>("Reco_JETT_ljet_eff_den_NoSF","Reco_JETT_ljet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_eff_den_NoSF->Sumw2();

  Reco_JETT_ljet_eff_num_NoSF = fs->make<TH2D>("Reco_JETT_ljet_eff_num_NoSF","Reco_JETT_ljet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_eff_num_NoSF->Sumw2();

  Reco_JETT_bjet_miss_den_NoSF = fs->make<TH2D>("Reco_JETT_bjet_miss_den_NoSF","Reco_JETT_bjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_miss_den_NoSF->Sumw2();

  Reco_JETT_bjet_miss_num_NoSF = fs->make<TH2D>("Reco_JETT_bjet_miss_num_NoSF","Reco_JETT_bjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_miss_num_NoSF->Sumw2();

  Reco_JETT_cjet_miss_den_NoSF = fs->make<TH2D>("Reco_JETT_cjet_miss_den_NoSF","Reco_JETT_cjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_miss_den_NoSF->Sumw2();

  Reco_JETT_cjet_miss_num_NoSF = fs->make<TH2D>("Reco_JETT_cjet_miss_num_NoSF","Reco_JETT_cjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_cjet_miss_num_NoSF->Sumw2();

  Reco_JETT_ljet_miss_den_NoSF = fs->make<TH2D>("Reco_JETT_ljet_miss_den_NoSF","Reco_JETT_ljet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_miss_den_NoSF->Sumw2();

  Reco_JETT_ljet_miss_num_NoSF = fs->make<TH2D>("Reco_JETT_ljet_miss_num_NoSF","Reco_JETT_ljet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_ljet_miss_num_NoSF->Sumw2();

  Reco_JETT_bjet_pur_den_NoSF = fs->make<TH2D>("Reco_JETT_bjet_pur_den_NoSF","Reco_JETT_bjet_pur_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_pur_den_NoSF->Sumw2();

  Reco_JETT_bjet_pur_num_NoSF = fs->make<TH2D>("Reco_JETT_bjet_pur_num_NoSF","Reco_JETT_bjet_pur_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_pur_num_NoSF->Sumw2();

  Reco_JETT_bjet_con_den_NoSF = fs->make<TH2D>("Reco_JETT_bjet_con_den_NoSF","Reco_JETT_bjet_con_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_con_den_NoSF->Sumw2();

  Reco_JETT_bjet_con_num_NoSF = fs->make<TH2D>("Reco_JETT_bjet_con_num_NoSF","Reco_JETT_bjet_con_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETT_bjet_con_num_NoSF->Sumw2();


  //DeepJET Medium Working Point
  Reco_JETM_bjet_eff_den = fs->make<TH2D>("Reco_JETM_bjet_eff_den","Reco_JETM_bjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_eff_den->Sumw2();

  Reco_JETM_bjet_eff_num = fs->make<TH2D>("Reco_JETM_bjet_eff_num","Reco_JETM_bjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_eff_num->Sumw2();

  Reco_JETM_cjet_eff_den = fs->make<TH2D>("Reco_JETM_cjet_eff_den","Reco_JETM_cjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_eff_den->Sumw2();

  Reco_JETM_cjet_eff_num = fs->make<TH2D>("Reco_JETM_cjet_eff_num","Reco_JETM_cjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_eff_num->Sumw2();

  Reco_JETM_ljet_eff_den = fs->make<TH2D>("Reco_JETM_ljet_eff_den","Reco_JETM_ljet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_eff_den->Sumw2();

  Reco_JETM_ljet_eff_num = fs->make<TH2D>("Reco_JETM_ljet_eff_num","Reco_JETM_ljet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_eff_num->Sumw2();

  Reco_JETM_bjet_miss_den = fs->make<TH2D>("Reco_JETM_bjet_miss_den","Reco_JETM_bjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_miss_den->Sumw2();

  Reco_JETM_bjet_miss_num = fs->make<TH2D>("Reco_JETM_bjet_miss_num","Reco_JETM_bjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_miss_num->Sumw2();

  Reco_JETM_cjet_miss_den = fs->make<TH2D>("Reco_JETM_cjet_miss_den","Reco_JETM_cjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_miss_den->Sumw2();

  Reco_JETM_cjet_miss_num = fs->make<TH2D>("Reco_JETM_cjet_miss_num","Reco_JETM_cjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_miss_num->Sumw2();

  Reco_JETM_ljet_miss_den = fs->make<TH2D>("Reco_JETM_ljet_miss_den","Reco_JETM_ljet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_miss_den->Sumw2();

  Reco_JETM_ljet_miss_num = fs->make<TH2D>("Reco_JETM_ljet_miss_num","Reco_JETM_ljet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_miss_num->Sumw2();

  Reco_JETM_bjet_pur_den = fs->make<TH2D>("Reco_JETM_bjet_pur_den","Reco_JETM_bjet_pur_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_pur_den->Sumw2();

  Reco_JETM_bjet_pur_num = fs->make<TH2D>("Reco_JETM_bjet_pur_num","Reco_JETM_bjet_pur_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_pur_num->Sumw2();

  Reco_JETM_bjet_con_den = fs->make<TH2D>("Reco_JETM_bjet_con_den","Reco_JETM_bjet_con_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_con_den->Sumw2();

  Reco_JETM_bjet_con_num = fs->make<TH2D>("Reco_JETM_bjet_con_num","Reco_JETM_bjet_con_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_con_num->Sumw2();
 

  Reco_JETM_bjet_eff_den_NoSF = fs->make<TH2D>("Reco_JETM_bjet_eff_den_NoSF","Reco_JETM_bjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_eff_den_NoSF->Sumw2();

  Reco_JETM_bjet_eff_num_NoSF = fs->make<TH2D>("Reco_JETM_bjet_eff_num_NoSF","Reco_JETM_bjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_eff_num_NoSF->Sumw2();

  Reco_JETM_cjet_eff_den_NoSF = fs->make<TH2D>("Reco_JETM_cjet_eff_den_NoSF","Reco_JETM_cjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_eff_den_NoSF->Sumw2();

  Reco_JETM_cjet_eff_num_NoSF = fs->make<TH2D>("Reco_JETM_cjet_eff_num_NoSF","Reco_JETM_cjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_eff_num_NoSF->Sumw2();

  Reco_JETM_ljet_eff_den_NoSF = fs->make<TH2D>("Reco_JETM_ljet_eff_den_NoSF","Reco_JETM_ljet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_eff_den_NoSF->Sumw2();

  Reco_JETM_ljet_eff_num_NoSF = fs->make<TH2D>("Reco_JETM_ljet_eff_num_NoSF","Reco_JETM_ljet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_eff_num_NoSF->Sumw2();

  Reco_JETM_bjet_miss_den_NoSF = fs->make<TH2D>("Reco_JETM_bjet_miss_den_NoSF","Reco_JETM_bjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_miss_den_NoSF->Sumw2();

  Reco_JETM_bjet_miss_num_NoSF = fs->make<TH2D>("Reco_JETM_bjet_miss_num_NoSF","Reco_JETM_bjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_miss_num_NoSF->Sumw2();

  Reco_JETM_cjet_miss_den_NoSF = fs->make<TH2D>("Reco_JETM_cjet_miss_den_NoSF","Reco_JETM_cjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_miss_den_NoSF->Sumw2();

  Reco_JETM_cjet_miss_num_NoSF = fs->make<TH2D>("Reco_JETM_cjet_miss_num_NoSF","Reco_JETM_cjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_cjet_miss_num_NoSF->Sumw2();

  Reco_JETM_ljet_miss_den_NoSF = fs->make<TH2D>("Reco_JETM_ljet_miss_den_NoSF","Reco_JETM_ljet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_miss_den_NoSF->Sumw2();

  Reco_JETM_ljet_miss_num_NoSF = fs->make<TH2D>("Reco_JETM_ljet_miss_num_NoSF","Reco_JETM_ljet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_ljet_miss_num_NoSF->Sumw2();

  Reco_JETM_bjet_pur_den_NoSF = fs->make<TH2D>("Reco_JETM_bjet_pur_den_NoSF","Reco_JETM_bjet_pur_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_pur_den_NoSF->Sumw2();

  Reco_JETM_bjet_pur_num_NoSF = fs->make<TH2D>("Reco_JETM_bjet_pur_num_NoSF","Reco_JETM_bjet_pur_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_pur_num_NoSF->Sumw2();

  Reco_JETM_bjet_con_den_NoSF = fs->make<TH2D>("Reco_JETM_bjet_con_den_NoSF","Reco_JETM_bjet_con_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_con_den_NoSF->Sumw2();

  Reco_JETM_bjet_con_num_NoSF = fs->make<TH2D>("Reco_JETM_bjet_con_num_NoSF","Reco_JETM_bjet_con_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETM_bjet_con_num_NoSF->Sumw2();

  //DeepJET Loose Working Point
  Reco_JETL_bjet_eff_den = fs->make<TH2D>("Reco_JETL_bjet_eff_den","Reco_JETL_bjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_eff_den->Sumw2();

  Reco_JETL_bjet_eff_num = fs->make<TH2D>("Reco_JETL_bjet_eff_num","Reco_JETL_bjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_eff_num->Sumw2();

  Reco_JETL_cjet_eff_den = fs->make<TH2D>("Reco_JETL_cjet_eff_den","Reco_JETL_cjet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_eff_den->Sumw2();

  Reco_JETL_cjet_eff_num = fs->make<TH2D>("Reco_JETL_cjet_eff_num","Reco_JETL_cjet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_eff_num->Sumw2();

  Reco_JETL_ljet_eff_den = fs->make<TH2D>("Reco_JETL_ljet_eff_den","Reco_JETL_ljet_eff_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_eff_den->Sumw2();

  Reco_JETL_ljet_eff_num = fs->make<TH2D>("Reco_JETL_ljet_eff_num","Reco_JETL_ljet_eff_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_eff_num->Sumw2();

  Reco_JETL_bjet_miss_den = fs->make<TH2D>("Reco_JETL_bjet_miss_den","Reco_JETL_bjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_miss_den->Sumw2();

  Reco_JETL_bjet_miss_num = fs->make<TH2D>("Reco_JETL_bjet_miss_num","Reco_JETL_bjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_miss_num->Sumw2();

  Reco_JETL_cjet_miss_den = fs->make<TH2D>("Reco_JETL_cjet_miss_den","Reco_JETL_cjet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_miss_den->Sumw2();

  Reco_JETL_cjet_miss_num = fs->make<TH2D>("Reco_JETL_cjet_miss_num","Reco_JETL_cjet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_miss_num->Sumw2();

  Reco_JETL_ljet_miss_den = fs->make<TH2D>("Reco_JETL_ljet_miss_den","Reco_JETL_ljet_miss_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_miss_den->Sumw2();

  Reco_JETL_ljet_miss_num = fs->make<TH2D>("Reco_JETL_ljet_miss_num","Reco_JETL_ljet_miss_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_miss_num->Sumw2();

  Reco_JETL_bjet_pur_den = fs->make<TH2D>("Reco_JETL_bjet_pur_den","Reco_JETL_bjet_pur_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_pur_den->Sumw2();

  Reco_JETL_bjet_pur_num = fs->make<TH2D>("Reco_JETL_bjet_pur_num","Reco_JETL_bjet_pur_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_pur_num->Sumw2();

  Reco_JETL_bjet_con_den = fs->make<TH2D>("Reco_JETL_bjet_con_den","Reco_JETL_bjet_con_den",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_con_den->Sumw2();

  Reco_JETL_bjet_con_num = fs->make<TH2D>("Reco_JETL_bjet_con_num","Reco_JETL_bjet_con_num",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_con_num->Sumw2();


  Reco_JETL_bjet_eff_den_NoSF = fs->make<TH2D>("Reco_JETL_bjet_eff_den_NoSF","Reco_JETL_bjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_eff_den_NoSF->Sumw2();

  Reco_JETL_bjet_eff_num_NoSF = fs->make<TH2D>("Reco_JETL_bjet_eff_num_NoSF","Reco_JETL_bjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_eff_num_NoSF->Sumw2();

  Reco_JETL_cjet_eff_den_NoSF = fs->make<TH2D>("Reco_JETL_cjet_eff_den_NoSF","Reco_JETL_cjet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_eff_den_NoSF->Sumw2();

  Reco_JETL_cjet_eff_num_NoSF = fs->make<TH2D>("Reco_JETL_cjet_eff_num_NoSF","Reco_JETL_cjet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_eff_num_NoSF->Sumw2();

  Reco_JETL_ljet_eff_den_NoSF = fs->make<TH2D>("Reco_JETL_ljet_eff_den_NoSF","Reco_JETL_ljet_eff_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_eff_den_NoSF->Sumw2();

  Reco_JETL_ljet_eff_num_NoSF = fs->make<TH2D>("Reco_JETL_ljet_eff_num_NoSF","Reco_JETL_ljet_eff_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_eff_num_NoSF->Sumw2();

  Reco_JETL_bjet_miss_den_NoSF = fs->make<TH2D>("Reco_JETL_bjet_miss_den_NoSF","Reco_JETL_bjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_miss_den_NoSF->Sumw2();

  Reco_JETL_bjet_miss_num_NoSF = fs->make<TH2D>("Reco_JETL_bjet_miss_num_NoSF","Reco_JETL_bjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_miss_num_NoSF->Sumw2();

  Reco_JETL_cjet_miss_den_NoSF = fs->make<TH2D>("Reco_JETL_cjet_miss_den_NoSF","Reco_JETL_cjet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_miss_den_NoSF->Sumw2();

  Reco_JETL_cjet_miss_num_NoSF = fs->make<TH2D>("Reco_JETL_cjet_miss_num_NoSF","Reco_JETL_cjet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_cjet_miss_num_NoSF->Sumw2();

  Reco_JETL_ljet_miss_den_NoSF = fs->make<TH2D>("Reco_JETL_ljet_miss_den_NoSF","Reco_JETL_ljet_miss_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_miss_den_NoSF->Sumw2();

  Reco_JETL_ljet_miss_num_NoSF = fs->make<TH2D>("Reco_JETL_ljet_miss_num_NoSF","Reco_JETL_ljet_miss_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_ljet_miss_num_NoSF->Sumw2();

  Reco_JETL_bjet_pur_den_NoSF = fs->make<TH2D>("Reco_JETL_bjet_pur_den_NoSF","Reco_JETL_bjet_pur_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_pur_den_NoSF->Sumw2();

  Reco_JETL_bjet_pur_num_NoSF = fs->make<TH2D>("Reco_JETL_bjet_pur_num_NoSF","Reco_JETL_bjet_pur_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_pur_num_NoSF->Sumw2();

  Reco_JETL_bjet_con_den_NoSF = fs->make<TH2D>("Reco_JETL_bjet_con_den_NoSF","Reco_JETL_bjet_con_den_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_con_den_NoSF->Sumw2();

  Reco_JETL_bjet_con_num_NoSF = fs->make<TH2D>("Reco_JETL_bjet_con_num_NoSF","Reco_JETL_bjet_con_num_NoSF",BJetEffnbins,BJetEffPT,1, -2.5, 2.5);
  Reco_JETL_bjet_con_num_NoSF->Sumw2();
#endif

  for (int ij=0; ij<nhist; ij++) {
    sprintf(name, "anglex_%i", ij);
    vec_anglex[ij] = fs->make<TH1F>(name, name, 240, 0.7, 1.0);
  }

  //genjt_hist = fs->make<TH1F>("genjt_hist","# of genjets",20,-0.5, 19.5);
  //genjt_hist->Sumw2();
  for(int jk=0; jk<njetetamn; jk++){
    sprintf(name, "genjetallave_pt_%i",jk);
    sprintf(title, "Et_{genjetsallave}_%g", etarange[jk]);
    genjtallave_pt[jk] = fs->make<TH1F>(name,title,400, 20., 2020.);
    genjtallave_pt[jk]->Sumw2();

    sprintf(name, "genjt_pt_%i",jk);
    sprintf(title, "Et_{genjets}_%g", etarange[jk]);
    genjt_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt_pt[jk]->Sumw2();

    sprintf(name, "genjet1_pt_%i",jk);
    sprintf(title, "Et_{genjets1}_%g", etarange[jk]);
    genjt1_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt1_pt[jk]->Sumw2();

    sprintf(name, "genjet2_pt_%i",jk);
    sprintf(title, "Et_{genjets2}_%g", etarange[jk]);
    genjt2_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt2_pt[jk]->Sumw2();

    sprintf(name, "genjet3_pt_%i",jk);
    sprintf(title, "Et_{genjets3}_%g", etarange[jk]);
    genjt3_pt[jk] = fs->make<TH1F>(name,title, 400, 20., 2020.);
    genjt3_pt[jk]->Sumw2();

    /*
    sprintf(name, "genjt_oth_pt_%i",jk);
    sprintf(title, "#Et_{genjets_oth}_%g", etarange[jk]);
    genjt_oth_pt[jk] = fs->make<TH1F>(name,title,100, 20., 2020.);
    genjt_oth_pt[jk]->Sumw2();
   */

    sprintf(name, "genjetdpt_%i",jk);
    sprintf(title, "dpt_{genjets12}_%g", etarange[jk]);
    genjetdpt[jk] = fs->make<TH1F>(name, title, 100,20., 500.);
    genjetdpt[jk]->Sumw2();

    sprintf(name, "genjetpt2bypt1_%i",jk);
    sprintf(title, "jetpt2bypt1 gen jet_%g", etarange[jk]);
    genjetpt2bypt1[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetpt2bypt1[jk]->Sumw2();

    sprintf(name, "genjetpt3bypt2_%i",jk);
    sprintf(title, "hjetpt3bypt2 gen jet_%g", etarange[jk]);
    genjetpt3bypt2[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetpt3bypt2[jk]->Sumw2();

    sprintf(name, "genjetdphi_%i",jk);
    sprintf(title, "#phi_{genjets}_%g", etarange[jk]);
    genjetdphi[jk] = fs->make<TH1F>(name,title,100,-M_PI, M_PI);
    genjetdphi[jk]->Sumw2();
    
    sprintf(name, "genjetptbypl_%i",jk);
    sprintf(title, "1st genjet Pt*sin/1st genjet_%g", etarange[jk]);
    genjetptbypl[jk] = fs->make<TH1F>(name, title, 60, 0., 1.0);
    genjetptbypl[jk]->Sumw2();
  }

  //genjt_pt = fs->make<TH1F>("genjt_pt","Et_{genjets}",100,20., 2020.);
  //genjt_pt->Sumw2();
  
  genjt_eta = fs->make<TH1F>("genjt_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt_eta->Sumw2();
  genjt_phi = fs->make<TH1F>("genjt_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt_phi->Sumw2();

  genjt1_eta = fs->make<TH1F>("genjet1_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt1_eta->Sumw2();
  genjt1_phi = fs->make<TH1F>("genjet1_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt1_phi->Sumw2();

  genjt2_eta = fs->make<TH1F>("genjet2_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt2_eta->Sumw2();
  genjt2_phi = fs->make<TH1F>("genjet2_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt2_phi->Sumw2();

  genjt3_eta = fs->make<TH1F>("genjet3_eta","#eta_{genjets}",100,-2.5, 2.5);
  genjt3_eta->Sumw2();
  genjt3_phi = fs->make<TH1F>("genjet3_phi","#phi_{genjets}",100,-M_PI, M_PI);
  genjt3_phi->Sumw2();
  
  //genjt_oth_pt = fs->make<TH1F>("genjt_oth_pt","Et_{genjets_oth}",100, 20., 2020.);
  //genjt_oth_pt->Sumw2();
  
  /*  
  genjt_oth_eta = fs->make<TH1F>("genjt_oth_eta","#eta_{genjets_oth}",100,-5., 5.);
  genjt_oth_eta->Sumw2();
  genjt_oth_phi = fs->make<TH1F>("genjt_oth_phi","#phi_{genjets_oth}",100,-M_PI, M_PI);
  genjt_oth_phi->Sumw2();
  */
  
  //genchg_hist = fs->make<TH1F>("genchg_hist","# of genchargeds",120,-0.5, 239.5);
  //genchg_hist->Sumw2();
  
  genchg_pt = fs->make<TH1F>("genchg_pt","Et_{gencharge_alljet}",100, 1., 101.);
  genchg_pt->Sumw2();
  genchg_eta = fs->make<TH1F>("genchg_eta","#eta_{gencharge_alljet)",100,-3., 3.);
  genchg_eta->Sumw2();
  genchg_phi = fs->make<TH1F>("genchg_phi","#phi_{gencharge_alljet}",100,-M_PI, M_PI);
  genchg_phi->Sumw2();

  genchg1_pt = fs->make<TH1F>("genchg1_pt","Et_{gencharge_jet1}",100, 1., 101.);
  genchg1_pt->Sumw2();
  genchg1_eta = fs->make<TH1F>("genchg1_eta","#eta_{gencharge_jet1}",100,-3., 3.);
  genchg1_eta->Sumw2();
  genchg1_phi = fs->make<TH1F>("genchg1_phi","#phi_{gencharge_jet1}",100,-M_PI, M_PI);
  genchg1_phi->Sumw2(); 

  genchg2_pt = fs->make<TH1F>("genchg2_pt","Et_{gencharge_jet2}",100, 1., 101.);
  genchg2_pt->Sumw2();
  genchg2_eta = fs->make<TH1F>("genchg2_eta","#eta_{gencharge_jet2}",100,-3., 3.);
  genchg2_eta->Sumw2();
  genchg2_phi = fs->make<TH1F>("genchg2_phi","#phi_{gencharge_jet2}",100,-M_PI, M_PI);
  genchg2_phi->Sumw2();

  genchg3_pt = fs->make<TH1F>("genchg3_pt","Et_{gencharge_jet3}",100, 1., 101.);
  genchg3_pt->Sumw2();
  genchg3_eta = fs->make<TH1F>("genchg3_eta","#eta_{gencharge_jet3}",100,-3., 3.);
  genchg3_eta->Sumw2();
  genchg3_phi = fs->make<TH1F>("genchg3_phi","#phi_{gencharge_jet3}",100,-M_PI, M_PI);
  genchg3_phi->Sumw2();

  genjetchg1_cand1 = fs->make<TH1F>("genjetchg1_cand1","Et_{genjetchg_LeadJet_cand1}}",400, 20., 2020.);
  genjetchg1_cand1->Sumw2();

  genjetchg2_cand1 = fs->make<TH1F>("genjetchg2_cand1","Et_{genjetchg_SubLeadJet_cand1}",400, 20., 2020.);
  genjetchg2_cand1->Sumw2();

  genbjetchg1_cand1 = fs->make<TH1F>("genbjetchg1_cand1","Et_{genbjetchg_LeadJet_cand1}",400, 20., 2020.);
  genbjetchg1_cand1->Sumw2();

  genbjetchg2_cand1 = fs->make<TH1F>("genbjetchg2_cand1","Et_{genbjetchg_SubLeadJet_cand1}",400, 20., 2020.);
  genbjetchg2_cand1->Sumw2();

  //genchg_oth_hist = fs->make<TH1F>("genchg_oth_hist","# of genchargeds (others)",120,-0.5, 239.5);
  //genchg_oth_hist->Sumw2();
  
  /* 
  genchg_oth_pt = fs->make<TH1F>("genchg_oth_pt","Et_{genchargeds_oth}",100,1., 101.);
  genchg_oth_pt->Sumw2();
  genchg_oth_eta = fs->make<TH1F>("genchg_oth_eta","#eta_{genchargeds_oth}",100,-5., 5.);
  genchg_oth_eta->Sumw2();
  genchg_oth_phi = fs->make<TH1F>("genchg_oth_phi","#phi_{genchargeds_oth}",100,-M_PI, M_PI);
  genchg_oth_phi->Sumw2();
  genneu_hist = fs->make<TH1F>("genneu_hist","# of genneutrals",120,-0.5, 239.5);
  genneu_hist->Sumw2();
  genneu_pt = fs->make<TH1F>("genneu_pt","Et_{genneutrals}",100,1., 101.);
  genneu_pt->Sumw2();
  genneu_eta = fs->make<TH1F>("genneu_eta","#eta_{genneutrals}",100,-3., 3.);
  genneu_eta->Sumw2();
  genneu_phi = fs->make<TH1F>("genneu_phi","#phi_{genneutrals}",100,-M_PI, M_PI);
  genneu_phi->Sumw2();

  genneu_oth_hist = fs->make<TH1F>("genneu_oth_hist","# of genneutrals (others)",120,-0.5, 239.5);
  genneu_oth_hist->Sumw2();
  genneu_oth_pt = fs->make<TH1F>("genneu_oth_pt","Et_{genneutrals_oth}",100, 1., 101.);
  genneu_oth_pt->Sumw2();
  genneu_oth_eta = fs->make<TH1F>("genneu_oth_eta","#eta_{genneutrals_oth}",100,-5., 5.);
  genneu_oth_eta->Sumw2();
  genneu_oth_phi = fs->make<TH1F>("genneu_oth_phi","#phi_{genneutrals_oth}",100,-M_PI, M_PI);
  genneu_oth_phi->Sumw2();
  */

  for (int ij=0; ij<nHLTmx; ij++) { 
    sprintf(name, "nprimall_%i", ij);
    sprintf(title, "# of primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_hist[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_hist[ij]->Sumw2();

    sprintf(name, "nprimsel_%i", ij);
    sprintf(title, "Selected # of primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_sel[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_sel[ij]->Sumw2();

    sprintf(name, "nprimall_rewt_%i", ij);
    sprintf(title, "# of rewighted primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_hist_rewt[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_hist_rewt[ij]->Sumw2();

    sprintf(name, "nprimsel_rewt_%i", ij);
    sprintf(title, "Selected # of reweighted primary vtx (%s)", (ij==0) ? "ALL" : jethlt_name[ij-1]);
    prim_sel_rewt[ij] = fs->make<TH1F>(name, title, 60, -0.5, 59.5);
    prim_sel_rewt[ij]->Sumw2();
  }

  prim_correl = fs->make<TH2F>("correl", "Correlation of all and Selected # of primary vtx", 60, -0.5, 59.5, 60, -0.5, 59.5);
  const char* namex[2]={"Selected", "Rejected"};
  for (int ij=0; ij<2; ij++) {
    sprintf(name, "primalltrk_%i", ij);
    sprintf(title, "All tracks in primary vtx (%s)", namex[ij]);
    prim_alltrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primgoodtrk_%i", ij);
    sprintf(title, "Good tracks in primary vtx (%s)", namex[ij]);
    prim_goodtrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primseltrk_%i", ij);
    sprintf(title, "Selected tracks in primary vtx (%s)", namex[ij]);
    prim_seltrk[ij] = fs->make<TH1F>(name, title, 240, -0.5, 239.5);

    sprintf(name, "primdx_%i", ij);
    sprintf(title, "#Delta x of prim wrt beam spot (%s)", namex[ij]);
    prim_dx[ij] = fs->make<TH1F>(name, title, 120, -2.4, 2.4);

    sprintf(name, "primdy_%i", ij);
    sprintf(title, "#Delta y of prim wrt beam spot (%s)", namex[ij]);
    prim_dy[ij] = fs->make<TH1F>(name, title, 120, -2.4, 2.4);

    sprintf(name, "primdxy_%i", ij);
    sprintf(title, "#Delta y vs #Delta x of prim (%s)", namex[ij]);
    prim_dxy[ij] = fs->make<TH2F>(name, title, 60, -0.15, 0.15, 60, -0.15, 0.15);

    sprintf(name, "primdz_%i", ij);
    sprintf(title, "#Delta z of prim wrt beam spo (%s)", namex[ij]);
    prim_dz[ij] = fs->make<TH1F>(name, title, 120, -30.0, 30.0); 

    sprintf(name, "primprob_%i", ij);
    sprintf(title, "log10(vertex fit prob) (%s)", namex[ij]);
    prim_prob[ij] = fs->make<TH1F>(name, title, 120, -20.0, 0.0);   
  }

  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "njets_%i",ij);
    sprintf(title, "No of Jets_eta range_%gs", etarange[ij]);
    h_njets[ij] = fs->make<TH1F>(name, title, 9, 1, 10);
    h_njets[ij]->Sumw2();
  }

  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "ncharges_%i",ij);
    sprintf(title, "No of charge particles_eta range_%gs", etarange[ij]);
    h_nchg[ij] = fs->make<TH1F>(name, title, 139, 1, 140);
    h_nchg[ij]->Sumw2();
  }

  for(int ij=0; ij<njetetamn; ij++){
    sprintf(name, "gennjets_%i",ij);
    sprintf(title, "No of GenJets_eta range_%gs", etarange[ij]);
    gen_njets[ij] = fs->make<TH1F>(name, title, 9, 1, 10);
    gen_njets[ij]->Sumw2();
  }

#ifdef TRIGGER
  const char* trigvar[2]={"L1", "HLT"};
  for(int ij=0; ij<nHLTmx; ij++){
    for(int jk=0; jk<2; jk++){
      sprintf(name, "trgjet_pt_%i_%i", ij, jk);
      sprintf(title, "trgjet_pt_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_pt[ij][jk] = fs->make<TH1F>(name, title, njetptbin, 20,1500);
      trgjet_pt[ij][jk]->Sumw2();

      sprintf(name, "trgjet_eta_%i_%i", ij, jk);
      sprintf(title, "trgjet_eta_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_eta[ij][jk] = fs->make<TH1F>(name, title, njetptbin, -5., 5.);
      trgjet_eta[ij][jk]->Sumw2();

      sprintf(name, "trgjet_phi_%i_%i", ij, jk);
      sprintf(title, "trgjet_phi_%s_%s", jethlt_name[ij], trigvar[jk]);
      trgjet_phi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
      trgjet_phi[ij][jk]->Sumw2();

      sprintf(name, "prbjet_pt_%i_%i", ij, jk);
      sprintf(title, "prbjet_pt_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_pt[ij][jk] = fs->make<TH1F>(name, title, njetptbin, 20,1500);
      prbjet_pt[ij][jk]->Sumw2();

      sprintf(name, "prbjet_eta_%i_%i", ij, jk);
      sprintf(title, "prbjet_eta_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_eta[ij][jk] = fs->make<TH1F>(name, title, 100,-5., 5.);
      prbjet_eta[ij][jk]->Sumw2();

      sprintf(name, "prbjet_phi_%i_%i", ij, jk);
      sprintf(title, "prbjet_phi_%s_%s", jethlt_name[ij], trigvar[jk]);
      prbjet_phi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
      prbjet_phi[ij][jk]->Sumw2();
    }
  } 
#endif

//Trigger special
	if (isReconstruct) { 
		for(int ij=0; ij<nHLTmx; ij++){
			for(int jk=0; jk<njetetamn; jk++){
				sprintf(name, "jetpt_%i_%i",jk,ij);
				sprintf(title, "jetpt_%s_%g", jethlt_name[ij], etarange[jk]);
				h_jetpt[ij][jk] = fs->make<TH1F>(name, title, 300, 50, 1550);
				h_jetpt[ij][jk]->Sumw2();
				
				sprintf(name, "jetphi_%i_%i",jk, ij);
				sprintf(title, "jetphi_%s_%g", jethlt_name[ij],etarange[jk]);
				h_jetphi[ij][jk] = fs->make<TH1F>(name, title, 180,-M_PI, M_PI);
				h_jetphi[ij][jk]->Sumw2();				
			}
		}
	}

#ifdef TRIGGER
  for(int ij=0; ij<nHLTmx; ij++){

    sprintf(name, "jeteta_%i", ij);
    sprintf(title, "jetphi_%s", jethlt_name[ij]);
    h_jeteta[ij] = fs->make<TH1F>(name, title, 100, -5, 5);
    h_jeteta[ij]->Sumw2();

    for (int jk=0; jk<2; jk++){ 
      sprintf(name, "angle1d_%s_%i", jethlt_name[ij], jk);
      sprintf(title, "Angle%s_%i", jethlt_name[ij], jk);
      trgjet_angle[ij][jk] = fs->make<TH1F>(name, title, 90 , 0.1, 2.5);

      sprintf(name, "angle2d_%s_%i", jethlt_name[ij], jk);
      sprintf(title, "Angle_2d_hist%s_%i", jethlt_name[ij], jk);
      trgjet_2dangle[ij][jk] = fs->make<TH2F>(name, title, njetptbin, 20, 1500, 30 , 0.1, 2.5);
    }
  }

  for (int ij=0; ij<nHLTmx; ij++) {
    for (int jk=0; jk<njetetamn; jk++) {
      sprintf(name, "hlt_dijettag_%i_%i", ij, jk);
      sprintf(title, "dijet tagged P_T : (%s) |i#eta|<%g", jethlt_name[ij], etarange[jk]);
      hlt_dijettag[ij][jk] = fs->make<TH1F>(name, title, 60, 0.4*leadingPtThreshold[ij], 2.5*leadingPtThreshold[ij]);
      hlt_dijettag[ij][jk]->Sumw2();

      sprintf(name, "hlt_dijetprob_%i_%i", ij, jk);
      sprintf(title, "dijet probed P_T : (%s) |i#eta|<%g", jethlt_name[ij], etarange[jk]);
      hlt_dijetprob[ij][jk] = fs->make<TH1F>(name, title, 60, 0.4*leadingPtThreshold[ij], 2.5*leadingPtThreshold[ij]);
      hlt_dijetprob[ij][jk]->Sumw2();
    }
  }
#endif

  counthist = fs->make<TH1F>("count","No of events",2,0,2); 

  for (int ix=0; ix<32; ix++) { mypow_2[ix] = pow(2,ix);}
  nevt = 0;
  //irun_old=-1;
  //trig_init=0;
  nreco=naa= nbb= ncc=0;

#ifdef PUCLEAN
   maxgenpts = readmaxgenpts("ak4.txt");
#endif

}

MiniAODAnalyzer::~MiniAODAnalyzer()
{

   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}

//member functions

// ------------ method called for each event  ------------
void MiniAODAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  //t1=clock();
  using namespace edm;
  using namespace std;
  using namespace reco;
  using namespace pat;
  
  //gRandom->SetSeed(19919925);
  //float rn=gRandom->Uniform();
  //cout << " Random Number ini = " << rn << endl;
  //if (rn >0.90) return;
  //cout << " Random Number = " << rn << endl;
  //cout << "Time = " << t1 << "; " << t2 << endl;
  
  nevt++;
  //int ievt = iEvent.id().event();
  counthist->Fill(1); 
  //if (nevt%100==1)   std::cout<<"MiniAODAnalyzer::analyze "<< nevt<<" IRUN= "<<iEvent.id().run()<<" ievt= "<< iEvent.id().event()<<" "<<ievt<<endl;
  if (nevt%1000==1)   std::cout<<"Jet Charge Analysis Run No. =  "<< nevt<<endl;
  //std::cout << "ok1"<<endl;

  //" ilumi" <<
  //iEvent.luminosityBlock() << " ibunch " << iEvent.bunchCrossing() <<std::endl;
  //cout << "NEvent = " <<  nevt << endl;
  //if(iEvent.luminosityBlock()==9881 || iEvent.luminosityBlock()==23185 || iEvent.luminosityBlock()==25334 || iEvent.luminosityBlock()== 26584 ||iEvent.luminosityBlock()== 35674 || iEvent.luminosityBlock()==32764 || iEvent.luminosityBlock()== 35675 || iEvent.luminosityBlock()==53681) return ;
  //if(iEvent.luminosityBlock()==2 || iEvent.luminosityBlock()==7175 || iEvent.luminosityBlock()==41151 || iEvent.luminosityBlock()==7389697 || iEvent.luminosityBlock()==60334 || iEvent.luminosityBlock()==51317 || iEvent.luminosityBlock()==53654 || iEvent.luminosityBlock()==10333 || iEvent.luminosityBlock()==54778 || iEvent.luminosityBlock()==10082 || iEvent.luminosityBlock()==54322 || iEvent.luminosityBlock()==64667 || iEvent.luminosityBlock()==65977 || iEvent.luminosityBlock()==55534 || iEvent.luminosityBlock()==55781 || iEvent.luminosityBlock()==55782 || iEvent.luminosityBlock()==55783 || iEvent.luminosityBlock()==61360 || iEvent.luminosityBlock()==61370 ||iEvent.luminosityBlock()==68258 || iEvent.luminosityBlock()==62147 || iEvent.luminosityBlock()==67194 || iEvent.luminosityBlock()==43070 || iEvent.luminosityBlock()==49429 || iEvent.luminosityBlock()==15102 || iEvent.luminosityBlock()==23306 || iEvent.luminosityBlock()==14242|| iEvent.luminosityBlock()==19080 || iEvent.luminosityBlock()==9312025) return;
  //npfjets = 0;
  //nchg =0;
  //if(iEvent.luminosityBlock()<4401) return; 
  //if(nevt<3442) return;
  //if(nevt!=3080) return;
  //cout << "Write test 1 = ok " << endl;
//-------------------------------------------
  
  std::vector<HepLorentzVector> recomom[njecmx][ntype][njetetamn];
  std::vector<HepLorentzVector> genmom[nGenReso][ntype][njetetamn];
  std::vector<HepLorentzVector> tmpjt4v;                                                 
  //std::vector<HepLorentzVector> tmpcand4v; 
  std::vector<HepLorentzVector> tmpgen4v;
  
  //recojet1_pt = 0.0, recojet2_pt = 0.0;
  //genrecojet1_pt = 0.0, genrecojet2_pt = 0.0;

  double RecoJCO[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double GenJCO[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};

  //BJet
  double RecoJCO_bjet_deepJETT[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_bjet_deepJETT[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double GenJCO_BJet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};

#ifdef MATCHING
  //GenJet Flavour Info
  double GenJCO_gjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double GenJCO_ujet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double GenJCO_ubarjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double GenJCO_djet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double GenJCO_dbarjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double GenJCO_bjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double GenJCO_bbarjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double GenJCO_ojet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};

  double genmomJCO_gjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_ujet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_ubarjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_djet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_dbarjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_bjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_bbarjet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_ojet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};

  double genmomJCO[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  //BJet
  double genmomJCO_BJet[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
#endif

#ifdef FLAV
  double RecoJCO_gjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ujet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ubarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_djet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_dbarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_bjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_bbarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double RecoJCO_ojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  double recomomJCO_gjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ujet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ubarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_djet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_dbarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_bjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_bbarjet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_ojet[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

#ifdef MATCHING
  double imatched_all_pt[njet][nkappa][njecmx] = {{{0.0}}};
#endif

#ifdef TRACKEFF
  double RecoJCO_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double GenJCO_trackeff[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};

  //BJet
  double RecoJCO_bjet_deepJETT_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_bjet_deepJETT_trackeff[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double GenJCO_BJet_trackeff[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
#endif

#ifdef MATCHING
#ifdef TRACKEFF
  double genmomJCO_trackeff[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
  double genmomJCO_BJet_trackeff[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
#endif
#endif

/*
  //Debug using Matching for TrackEff
#ifdef TRACKEFFDEBUG
  double RecoJCO_trackeff_debug[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackeff_debug[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double GenJCO_trackeff_debug[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
#endif

#ifdef TRACKEFFMATCHING
#ifdef TRACKEFFDEBUG
  double genmomJCO_trackeff_debug[ndef][njet][nkappa][nGenReso] = {{{{0.0}}}};
#endif
#endif
*/

#ifdef TRACKPTUP
  double RecoJCO_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  //BJet
  double RecoJCO_bjet_deepJETT_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_bjet_deepJETT_trackpt1[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif

#ifdef TRACKPTDOWN
  double RecoJCO_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};

  double RecoJCO_bjet_deepJETT_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
  double recomomJCO_bjet_deepJETT_trackpt2[ndef][njet][nkappa][njecmx] = {{{{0.0}}}};
#endif
 
  //Reco JCO initialize
  double ijet1candsmom_num[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den[nkappa][njecmx] = {{0.0}}, ijet1_long_num[nkappa][njecmx] = {{0.0}}, ijet1_long_den[nkappa][njecmx] = {{0.0}}, ijet1_tran_num[nkappa][njecmx] = {{0.0}}, ijet1_tran_den[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num[nkappa][njecmx] = {{0.0}},ijet2candsmom_den[nkappa][njecmx] = {{0.0}}, ijet2_long_num[nkappa][njecmx] = {{0.0}}, ijet2_long_den[nkappa][njecmx] = {{0.0}}, ijet2_tran_num[nkappa][njecmx] = {{0.0}}, ijet2_tran_den[nkappa][njecmx] = {{0.0}};  
  //Gen JCO initialize
  double igenjet1candsmom_num[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den[nkappa][nGenReso] = {{0.0}}; 
  double igenjet2candsmom_num[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den[nkappa][nGenReso] = {{0.0}};

  //BJet Tight Working Point
  //Reco BJet
  double ijet1candsmom_num_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet1_long_num_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet1_long_den_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_bjet_deepJETT[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet2_long_num_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet2_long_den_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_bjet_deepJETT[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_bjet_deepJETT[nkappa][njecmx] = {{0.0}};

  //Gen BJet
  double igenjet1candsmom_num_BJet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_BJet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_BJet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_BJet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_BJet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_BJet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_BJet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_BJet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_BJet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_BJet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_BJet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_BJet[nkappa][nGenReso] = {{0.0}};

  //GenJet Flavour
  //g-jet 
  double igenjet1candsmom_num_gjet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_gjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_gjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_gjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_gjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_gjet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_gjet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_gjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_gjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_gjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_gjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_gjet[nkappa][nGenReso] = {{0.0}};

  //u-jet
  double igenjet1candsmom_num_ujet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_ujet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_ujet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_ujet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_ujet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_ujet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_ujet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_ujet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_ujet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_ujet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_ujet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_ujet[nkappa][nGenReso] = {{0.0}};

  //ubar-jet
  double igenjet1candsmom_num_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_ubarjet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_ubarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_ubarjet[nkappa][nGenReso] = {{0.0}};

  //d-jet
  double igenjet1candsmom_num_djet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_djet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_djet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_djet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_djet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_djet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_djet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_djet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_djet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_djet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_djet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_djet[nkappa][nGenReso] = {{0.0}};

  //dbar-jet
  double igenjet1candsmom_num_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_dbarjet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_dbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_dbarjet[nkappa][nGenReso] = {{0.0}};

  //b-jet
  double igenjet1candsmom_num_bjet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_bjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_bjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_bjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_bjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_bjet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_bjet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_bjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_bjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_bjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_bjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_bjet[nkappa][nGenReso] = {{0.0}};

  //bbar-jet
  double igenjet1candsmom_num_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_bbarjet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_bbarjet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_bbarjet[nkappa][nGenReso] = {{0.0}};

  //others-jet
  double igenjet1candsmom_num_ojet[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_ojet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_ojet[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_ojet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_ojet[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_ojet[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_ojet[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_ojet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_ojet[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_ojet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_ojet[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_ojet[nkappa][nGenReso] = {{0.0}};

#ifdef FLAV
  //Reco Flavor Tagging
  //g-jet
  double ijet1candsmom_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_gjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_gjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_gjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_gjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_gjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_gjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_gjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_gjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_gjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_gjet[nkappa][njecmx] = {{0.0}};

  //u-jet
  double ijet1candsmom_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ujet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ujet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ujet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ujet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ujet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ujet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ujet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ujet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ujet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ujet[nkappa][njecmx] = {{0.0}};

  //ubar-jet
  double ijet1candsmom_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ubarjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ubarjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ubarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ubarjet[nkappa][njecmx] = {{0.0}};

  //d-jet
  double ijet1candsmom_num_djet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_djet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_djet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_djet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_djet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_djet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_djet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_djet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_djet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_djet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_djet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_djet[nkappa][njecmx] = {{0.0}};

  //dbar-jet
  double ijet1candsmom_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_dbarjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_dbarjet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_dbarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_dbarjet[nkappa][njecmx] = {{0.0}};

  //b-jet
  double ijet1candsmom_num_bjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_bjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_bjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_bjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_bjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_bjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_bjet[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_bjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_bjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_bjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_bjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_bjet[nkappa][njecmx] = {{0.0}};

  //bbar-jet
  double ijet1candsmom_num_bbarjet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_bbarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_bbarjet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_bbarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_bbarjet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_bbarjet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_bbarjet[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_bbarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_bbarjet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_bbarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_bbarjet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_bbarjet[nkappa][njecmx] = {{0.0}};

  //others
  double ijet1candsmom_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_ojet[nkappa][njecmx] = {{0.0}}, ijet1_long_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1_long_den_ojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_ojet[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_ojet[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_ojet[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_ojet[nkappa][njecmx] = {{0.0}}, ijet2_long_num_ojet[nkappa][njecmx] = {{0.0}}, ijet2_long_den_ojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_ojet[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_ojet[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKEFF 
  double ijet1candsmom_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackeff[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackeff[nkappa][njecmx] = {{0.0}},ijet2candsmom_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackeff[nkappa][njecmx] = {{0.0}};

  double igenjet1candsmom_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_trackeff[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_trackeff[nkappa][nGenReso] = {{0.0}},igenjet2candsmom_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_trackeff[nkappa][nGenReso] = {{0.0}};

//BJet
  double ijet1candsmom_bjet_deepJETT_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1candsmom_bjet_deepJETT_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_tran_den_trackeff[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_bjet_deepJETT_num_trackeff[nkappa][njecmx] = {{0.0}},ijet2candsmom_bjet_deepJETT_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_long_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_long_den_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_tran_num_trackeff[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_tran_den_trackeff[nkappa][njecmx] = {{0.0}};

  double igenjet1candsmom_BJet_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_BJet_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_BJet_long_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_BJet_long_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_BJet_tran_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet1_BJet_tran_den_trackeff[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_BJet_num_trackeff[nkappa][nGenReso] = {{0.0}},igenjet2candsmom_BJet_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_BJet_long_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_BJet_long_den_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_BJet_tran_num_trackeff[nkappa][nGenReso] = {{0.0}}, igenjet2_BJet_tran_den_trackeff[nkappa][nGenReso] = {{0.0}};
#endif

/*
//Tracking Efficiency using Matching
#ifdef TRACKEFFDEBUG
  double ijet1candsmom_num_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet1_long_den_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackeff_debug[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackeff_debug[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackeff_debug[nkappa][njecmx] = {{0.0}};

  double igenjet1candsmom_num_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet1candsmom_den_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet1_long_num_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet1_long_den_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_num_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet1_tran_den_trackeff_debug[nkappa][nGenReso] = {{0.0}};
  double igenjet2candsmom_num_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet2candsmom_den_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet2_long_num_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet2_long_den_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_num_trackeff_debug[nkappa][nGenReso] = {{0.0}}, igenjet2_tran_den_trackeff_debug[nkappa][nGenReso] = {{0.0}};
#endif
*/

#ifdef TRACKPTUP
  double ijet1candsmom_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackpt1[nkappa][njecmx] = {{0.0}},ijet1_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};

//BJet
  double ijet1candsmom_bjet_deepJETT_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1candsmom_bjet_deepJETT_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_long_num_trackpt1[nkappa][njecmx] = {{0.0}},ijet1_bjet_deepJETT_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_bjet_deepJETT_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2candsmom_bjet_deepJETT_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_long_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_long_den_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_tran_num_trackpt1[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_tran_den_trackpt1[nkappa][njecmx] = {{0.0}};
#endif

#ifdef TRACKPTDOWN
  double ijet1candsmom_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1candsmom_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2candsmom_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};

//BJet
  double ijet1candsmom_bjet_deepJETT_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1candsmom_bjet_deepJETT_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet1_bjet_deepJETT_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};
  double ijet2candsmom_bjet_deepJETT_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2candsmom_bjet_deepJETT_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_long_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_long_den_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_tran_num_trackpt2[nkappa][njecmx] = {{0.0}}, ijet2_bjet_deepJETT_tran_den_trackpt2[nkappa][njecmx] = {{0.0}};
#endif

  double igenjet1candsmom_alltracks[nkappa][njecmx] = {{0.0}}, igenjet2candsmom_alltracks[nkappa][njecmx] = {{0.0}};
  double ijet1candsmom_alltracks[nkappa][njecmx] = {{0.0}}, ijet2candsmom_alltracks[nkappa][njecmx] = {{0.0}};
#ifdef MATCHING  
  double igenjet1candsmom_matchedtracks[nkappa][njecmx] = {{0.0}};
  double igenjet2candsmom_matchedtracks[nkappa][njecmx] = {{0.0}};
#endif

  wtfact=1.0;
  //double px=0;
  //double py=0;
  //double ptxy=0;

  //int ncount=0;
  unsigned ncount=0;
  //double recterm=0;
  //int ithird=-1;
  int irecoht=-1;
//#ifdef JETENERGY
  int irecohtjec[njecmx];
  for (int ij=0; ij<njecmx; ij++) { irecohtjec[ij]=-1;}
//#endif	
  double leadingptjec[njecmx] ={0};
  //int igenht=-1;
//#ifdef  JETRESO
  int igenhtres[nGenReso];
  for (int ij=0; ij<nGenReso; ij++) { igenhtres[ij]=-1;}
//#endif
  double leadgenptres[nGenReso]={0};

///////////////
//--PV Info--//
///////////////

  edm::Handle<reco::VertexCollection> primaryVertices;
  iEvent.getByToken(vtxToken_, primaryVertices);

/*Select events with good 
primary vertex with 
ndof>4 with abs(z)<24 and rho<2
*/

/*
bool PVEvent=false;
if (primaryVertices.isValid() && primaryVertices->size()>0) {
        for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
                if(!vert->isFake() && vert->ndof()>4 && abs(vert->position().z())<24 && vert->position().rho() < 2){
                        PVEvent=true;
                        break;
                        }
                }
        }
if(!PVEvent) return;
*/

//if(primaryVertices->empty() || (*primaryVertices)[0].isFake() || !((*primaryVertices)[0].ndof()>4) || !(abs((*primaryVertices)[0].position().z())<24) || !((*primaryVertices)[0].position().rho()<2)) return;
//cout<<"PV Values : "<< " ndof : "<<(*primaryVertices)[0].ndof()<<" z : "<<(*primaryVertices)[0].position().z()<<" rho : "<<(*primaryVertices)[0].position().rho()<<endl;

/////////////////////////////
//--Generator Vertex Info--//
/////////////////////////////

/*
  edm::Handle<reco::GenParticleCollection> genVtx;
  iEvent.getByToken(genParticlesToken_, genVtx);

  const auto& rv = (*primaryVertices)[0].position();
  const auto& gv = (*genVtx)[0].daughter(0)->vertex();
  double distGen = hypot( rv.x() - gv.x(), hypot( rv.y() - gv.y(), rv.z() - gv.z()) );

  if(distGen>1) return;
*/

////////////////
//--MET Info--//
////////////////

  edm::Handle<pat::METCollection> pfmet;
  iEvent.getByToken(metToken_, pfmet);

//MET should be within 0.3
double miset=0, sumEt=0;
	if(pfmet.isValid()){
		miset = pfmet->begin()->corPt(); 
	  	sumEt = pfmet->begin()->corSumEt();	
			if(sumEt<1.) { 
				sumEt = 1.; 
			} 
	  	}
if((miset*1.0/sumEt)>0.3) return ;

/*
edm::Handle<reco::TrackCollection> tracks;
iEvent.getByToken(tracksToken_, tracks);

bool isGoodTrack = false;
if(tracks.isValid() && tracks->size()>1){
for(unsigned trk =0; trk !=tracks->size(); trk++){
	//cout<<" Track PT : "<<(*tracks)[trk].pt()<<" hitpattern : "<<(*tracks)[trk].hitPattern().numberOfValidHits()<<" chi2 : "<<(*tracks)[trk].normalizedChi2()<<endl;
	if((*tracks)[trk].pt()>1.0 && (*tracks)[trk].hitPattern().numberOfValidHits() >= 10 && (*tracks)[trk].normalizedChi2() < 5.0){
	isGoodTrack = true;
		}
	}
}
if (!isGoodTrack) return;
*/

//////////////////////////
//--Track Quality Info--//
//////////////////////////

/*
edm::Handle<pat::PackedCandidateCollection> tracks;
iEvent.getByToken(PFSrcToken_, tracks);

//bool isGoodTrack = false;
if(tracks.isValid() && tracks->size()>1){
	for(unsigned trk =0; trk !=tracks->size(); trk++){
		if((*tracks)[trk].hasTrackDetails() && (*tracks)[trk].charge() != 0 && (*tracks)[trk].trackHighPurity()){
		//isGoodTrack = true;
		}
	}
}
*/

#ifdef TRIGGER
  const char* variab1;
#endif
#ifndef DIJETAVE
  const char* variab2; 
#endif
  const char* variab3;

  if (isMC) {
#ifdef LHAPDF
  edm::Handle<LHEEventProduct> EvtHandle ;
  iEvent.getByToken( lheEventProductToken_ , EvtHandle ) ;
		
		for ( unsigned int weightIndex = 0; weightIndex < EvtHandle->weights().size(); ++weightIndex ) {
			//cout<< EvtHandle->weights()[weightIndex].wgt <<endl;
                        //systematicWeightIDs->push_back( atoi(EvtHandle->weights()[weightIndex].id.c_str()) );
			if (weightIndex>=9 && weightIndex<=109) {
				pdfwt[weightIndex-9] = EvtHandle->weights()[weightIndex].wgt/EvtHandle->originalXWGTUP(); 
				//std::cout << weightIndex << " " << EvtHandle->weights()[weightIndex].id << " " << EvtHandle->weights()[weightIndex].wgt <<" "<<pdfwt[weightIndex-9]<< std::endl;
				}
			if (weightIndex>0 && weightIndex<10) {
				mgscale[weightIndex] = EvtHandle->weights()[weightIndex].wgt/EvtHandle->originalXWGTUP();
				//std::cout << weightIndex << " " << EvtHandle->weights()[weightIndex].id << " " << EvtHandle->weights()[weightIndex].wgt <<" "<<mgscale[weightIndex]<< std::endl;
				}
    			}
#endif

  edm::Handle<GenEventInfoProduct> eventinfo;
  iEvent.getByToken(generator1_, eventinfo);
 
#ifdef SCALEUNC 
  for(unsigned int scaleIndex = 0 ; scaleIndex < eventinfo->weights().size(); ++scaleIndex){
  	scalewt[scaleIndex] = eventinfo->weights()[scaleIndex];
	//cout<<"scaleIndex : "<<scaleIndex<<" weight : "<<eventinfo->weights()[scaleIndex]<<endl;
	}
#endif

      if(eventinfo.isValid()) { 
      qscale = eventinfo->qScale(); 
      wtfact = eventinfo->weight();
      //cout<<"wtfact : "<<wtfact<<endl;
      //weight = weight2*wtfact;
      procid = eventinfo->signalProcessID();
      //cout << " qscale = " <<setw(14)<< qscale << " ; wtfact = " << wtfact << " ; procid = " << procid  << endl;

      if(eventinfo->hasPDF()) {
	const gen::PdfInfo* xpdf = eventinfo->pdf();
	
	int id1 = xpdf->id.first;
	int id2 = xpdf->id.second;
	
	idall = 100*(id1+50)+ (id2+50); 
	
	qscale = xpdf->scalePDF;
	
	xfrac1 = xpdf->x.first;
	xfrac2 = xpdf->x.second;
	
	xpdf1 = xfrac1*xpdf->xPDF.first;
	xpdf2 = xfrac2*xpdf->xPDF.second; 
      }
    }
  }

 
#ifdef PREFIRE
  edm::Handle< double > theprefweight;
  iEvent.getByToken(prefweight_token, theprefweight ) ;
  double _prefiringweight =(*theprefweight);

  edm::Handle< double > theprefweightup;
  iEvent.getByToken(prefweightup_token, theprefweightup ) ;
  double _prefiringweightup =(*theprefweightup);

  edm::Handle< double > theprefweightdown;
  iEvent.getByToken(prefweightdown_token, theprefweightdown ) ;
  double _prefiringweightdown =(*theprefweightdown);

  //cout << "Prefire  wt : " << _prefiringweight << endl;
  //cout << "Prefire up wt : " << _prefiringweightup << endl;
  //cout << "Prefire down wt : " << _prefiringweightdown << endl;
#endif
 
#ifdef TRIGGER
  edm::Handle<edm::TriggerResults> trigRes;
  iEvent.getByToken(triggerBits_, trigRes);
  
  edm::Handle<pat::TriggerObjectStandAloneCollection> triggerObjects;
  iEvent.getByToken(triggerObjects_, triggerObjects);
  
  edm::Handle<pat::PackedTriggerPrescales> triggerPrescales;
  iEvent.getByToken(triggerPrescales_, triggerPrescales);

  //MET Filters
  //edm::Handle<edm::TriggerResults> metpatRes;
  //iEvent.getByToken(metPATToken_, metpatRes);

  edm::Handle<edm::TriggerResults> metrecoRes;
  iEvent.getByToken(metRECOToken_, metrecoRes);
//-------------------------------------------Trigger
  const edm::TriggerNames &names = iEvent.triggerNames(*trigRes);
  //const edm::TriggerNames &metPATnames = iEvent.triggerNames(*metpatRes);
  //const edm::TriggerNames &metRECOnames = iEvent.triggerNames(*metpatRes);
  //int ihltfill = -1;
#endif
  
  tmpjt4v.clear();     //Reco level
  //tmpcand4v.clear();
  tmpgen4v.clear();    // Gen level

  //double aveleadingpt =0;         //ESVs (dijet)
  double leadingpt = 0;             //Jet charge (single jet)
  bool isInEtaRange[njetetamn]={0}; //GMA{0,0,0,0};

  recoJetpT = 0.0; 
  recojet1_pt = 0.0, recojet2_pt = 0.0, recobjet1_pt_deepJETT = 0.0, recobjet2_pt_deepJETT = 0.0;
  recoCandX1_J1 = 0.0, recoCandX2_J1 = 0.0, recoCandX3_J1 = 0.0, recoCandX1_J2 = 0.0, recoCandX2_J2 = 0.0, recoCandX3_J2 = 0.0; 
  recoCandX1_bjet_deepJETT_J1 = 0.0, recoCandX2_bjet_deepJETT_J1 = 0.0, recoCandX3_bjet_deepJETT_J1 = 0.0, recoCandX1_bjet_deepJETT_J2 = 0.0, recoCandX2_bjet_deepJETT_J2 = 0.0, recoCandX3_bjet_deepJETT_J2 = 0.0;
  genrecojet1_pt = 0.0, genrecojet2_pt = 0.0, genrecobjet1_pt = 0.0, genrecobjet2_pt = 0.0; 

#ifdef FLAV
recobjet1_pt = 0.0, recobjet2_pt = 0.0;
recoCandX1_bjet_J1 = 0.0, recoCandX2_bjet_J1 = 0.0, recoCandX3_bjet_J1 = 0.0, recoCandX1_bjet_J2 = 0.0, recoCandX2_bjet_J2 = 0.0, recoCandX3_bjet_J2 = 0.0;
#endif

#ifndef GENPART
  edm::Handle<pat::JetCollection> ak4PFJets;
  if (isReconstruct) { 
    iEvent.getByToken(jetSrcToken_, ak4PFJets);
  }
  
  if (isReconstruct && ((!ak4PFJets.isValid()) || ak4PFJets->size() <2)) return; //GMA, do we use this
  
  if (ak4PFJets.isValid() && ak4PFJets->size()>=2) {
#ifdef DIJETAVE
    for (int iet=0; iet<njetetamn; iet++) {
      isInEtaRange[iet] = true;
      }
    
    for (int ij=0; ij<1; ij++) { 
      for (int iet=0; iet<njetetamn; iet++) {
	if (abs((*ak4PFJets)[ij].eta())>etarange[iet]) { isInEtaRange[iet] = false;}
      }
      
      //JetID recomendation 
      double NHF = (*ak4PFJets)[ij].neutralHadronEnergyFraction();
      double NEMF = (*ak4PFJets)[ij].neutralEmEnergyFraction();
      double CHF = (*ak4PFJets)[ij].chargedHadronEnergyFraction();
      double MUF = (*ak4PFJets)[ij].muonEnergyFraction();
      double CEMF = (*ak4PFJets)[ij].chargedEmEnergyFraction();
      int NumConst = (*ak4PFJets)[ij].chargedMultiplicity()+(*ak4PFJets)[ij].neutralMultiplicity();
      //int NumNeutralParticles =(*ak4PFJets)[ij].neutralMultiplicity();
      int CHM = (*ak4PFJets)[ij].chargedMultiplicity();
      bool passPUIDtight = bool((*ak4PFJets)[ij].userInt("pileupJetId:fullId") & (1 << 0)) || ((*ak4PFJets)[ij].pt() > 50.0);
      bool TightJetID =false;

      /*
      if(abs((*ak4PFJets)[ij].eta())<=2.7){
      if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0  && abs((*ak4PFJets)[ij].eta())<=2.6 )  TightJetID =true;
      if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ij].eta())>2.6 )  TightJetID =true;}
      else {TightJetID =false;}
      if (abs((*ak4PFJets)[ij].eta())>2.7) {TightJetID = false;}  //2.5 or 2.6
      if ((*ak4PFJets)[ij].pt()<30.0) {TightJetID = false;}
      */

#ifdef SIXTEEN
      if(abs((*ak4PFJets)[ij].eta())<=2.7){
      if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0 && abs((*ak4PFJets)[ij].eta())<=2.4 && MUF <0.8 && CEMF<0.8)  TightJetID =true;
      if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ij].eta())>2.4)  TightJetID =true;
      	} else {  TightJetID =false;  }
      if (abs((*ak4PFJets)[ij].eta())>2.7) {TightJetID = false;}
      if ((*ak4PFJets)[ij].pt()<30.0) {TightJetID = false;}
#elif defined(SEVENTEEN)
      if(abs((*ak4PFJets)[ij].eta())<=2.6){
      if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0 && abs((*ak4PFJets)[ij].eta())<=2.6 && CEMF<0.8 && MUF <0.8)  TightJetID =true;
      	}else{ TightJetID =false; }
      if (abs((*ak4PFJets)[ij].eta())>2.6) {TightJetID = false;}
      if ((*ak4PFJets)[ij].pt()<30.0) {TightJetID = false;}
#elif defined(EIGHTEEN)
      if(abs((*ak4PFJets)[ij].eta())<=2.6){
      if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0 && abs((*ak4PFJets)[ij].eta())<=2.6 && CEMF<0.8 && MUF <0.8)  TightJetID =true;
      	}else{ TightJetID =false; }
      if (abs((*ak4PFJets)[ij].eta())>2.6) {TightJetID = false;}
      if ((*ak4PFJets)[ij].pt()<30.0) {TightJetID = false;}
#endif

/*
      if (TightJetID) { aveleadingpt +=(*ak4PFJets)[ij].pt();
			leadingpt = (*ak4PFJets)[0].pt();
      //std::cout<<"ok2"<<endl;
      std::cout << "Leading jet pt :"<<leadingpt<<endl;
      //std::cout << "Sub-Leading jet pt :"<<(*ak4PFJets)[1].pt()<<endl;
      //std::cout << "Avg. Leading jet pt :"<<aveleadingpt<<endl;
			} else {aveleadingpt -=100000;
			        leadingpt -=100000;}
*/

	//if(!TightJetID && !passPUIDtight) continue;
	if (abs((*ak4PFJets)[ij].eta())>2.1 || (*ak4PFJets)[ij].pt()<30.0 ) continue;
	if(TightJetID && passPUIDtight){
	//aveleadingpt +=(*ak4PFJets)[ij].pt();
	leadingpt = (*ak4PFJets)[ij].pt();}
	else{leadingpt -=100000;}
	//std::cout << "Leading jet pt TightJet ID :"<<leadingpt<<endl;}
        //std::cout << "Sub-Leading jet pt :"<<(*ak4PFJets)[1].pt()<<endl;
    }
    //aveleadingpt /=2.0;
    
#else

#endif
  }//if (ak4PFJets.isValid() && ak4PFJets->size()>=2) {
#endif
 
  if (isReconstruct && isMC && leadingpt>3*qscale) return;
  irecoht = getbinid(leadingpt, nHLTmx, leadingPtThreshold);

#ifdef TRIGGER

#ifdef SIXTEEN
  bool trgpas[nHLTmx]={0,0,0,0,0,0,0,0,0};  //8 or 10
#elif defined(SEVENTEEN)
  bool trgpas[nHLTmx]={0,0,0,0,0,0,0,0,0,0};  //8 or 10
#elif defined(EIGHTEEN)
  bool trgpas[nHLTmx]={0,0,0,0,0,0,0,0,0,0};  //8 or 10
#endif

  //Calcualte Trigger Efficiency for dijet events
  bool trg_prev=false;

  //if (!isMC) {
  for (int jk=-1; jk<nHLTmx; jk++) {
    for(unsigned ij = 0; ij<trigRes->size(); ++ij) {
      std::string name = names.triggerName(ij);
      variab1 = name.c_str(); 
      if ((jk<0 && strstr(variab1,jethlt_lowest) && strlen(variab1)-strlen(jethlt_lowest)<5) || 
	  (jk>=0 && strstr(variab1,jethlt_name[jk]) && strlen(variab1)-strlen(jethlt_name[jk])<5)) {
	
	 //const std::pair<std::vector<std::pair<std::string,int> >,int> prescalesInDetail(hltConfig_.prescaleValuesInDetail(iEvent,iSetup, variab1));
	 const std::pair<std::vector<std::pair<std::string,int> >,int> prescalesInDetail(hltPrescaleProvider_.prescaleValuesInDetail(iEvent,iSetup,variab1));
	 if (jk>=0) { 
          //cout<<variab1<<endl;
	  //==============================================================================
	  //double tmpp1= prescalesInDetail.first[0].second;
	  //double tmpp2 = prescalesInDetail.first[1].second;
	  //l1pres[jk] =min(tmpp1, tmpp2);
	  //==============================================================================
	  l1pres[jk] = prescalesInDetail.first[0].second;
	  
	 //if (jk>=3 && l1pres[jk]>1) { l1pres[jk]=1.0;}
	 if(l1pres[jk]<=0){l1pres[jk]=1.0;}
         hltpres[jk] = prescalesInDetail.second;	  

	 //compres[jk] = (l1pres[jk])*(triggerPrescales->getPrescaleForIndex(ij)); 
	 //compres[jk] = triggerPrescales->getPrescaleForIndex(ij);
	 compres[jk] = (l1pres[jk])*(hltpres[jk]);
         //if (jk==9){compres[jk]=1.0;} // fix for 2017E sample pt spike
	         	//cout<<"Print Trigger : "<<variab1<< ":"<< compres[jk]<<endl;} 
	 //cout << "Prescale" << "Path " << variab1 <<" " <<   compres[jk] << endl;
	 //cout<<"Run NO= "<< iEvent.id().run()<<" ; Event No = "<< iEvent.id().event()<< " ; ilumi = " << iEvent.luminosityBlock() << 
	 //	" ; ibunch = " << iEvent.bunchCrossing()<<" ; L1 Pres0 = " << l1pres[jk] <<" "<<
	 //            " ; HLT Path= "<<name <<" ; HLT Pres = " <<hltpres[jk]<<" ; compres ="<<compres[jk] <<"; irecoht = "<< irecoht <<"; Pt=" <<aveleadingpt<<endl;
	 if (trigRes->accept(ij)) {trgpas[jk] = true;
		//cout << "Prescale" << "Path " << variab1 <<" " <<   compres[jk] << endl;//} // ihltfill = jk;}
	 }
	 //if (trg_prev && compres[jk]>0.99) {
	 if (trg_prev){
	    for (int iet=0; iet<njetetamn; iet++) {
	      if (isInEtaRange[iet]) { 
		//hlt_dijettag[jk][iet]->Fill(aveleadingpt,compres[jk]);
                hlt_dijettag[jk][iet]->Fill(leadingpt,compres[jk]);
		//if (trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(aveleadingpt, compres[jk]);} //{, (isMC) ? 1.0 : compres[jk]);}
                if (trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(leadingpt, compres[jk]);}
	      }
	    }
	  }
	  /*
 	    for (int iet=0; iet<njetetamn; iet++) {
	    if (isInEtaRange[iet]) { 
	    if(trg_prev) hlt_dijettag[jk][iet]->Fill(aveleadingpt);
	    if (trg_prev && trigRes->accept(ij)) {hlt_dijetprob[jk][iet]->Fill(aveleadingpt);} 
	    }    
	    }*/
	  //if (trg_prev) cout << "Accept =" << " name = " <<name <<endl;
	  trg_prev = trigRes->accept(ij);
	  //trg_prev = trg_prev|trigRes->accept(ij);
	  //if (!trg_prev) { trg_prev = trigRes->accept(ij);}
	  break;
	} else {
	  trg_prev = trigRes->accept(ij);
	  break;
	}
      }
    }
  }

#endif
  //cout<<"ihltfill "<<ihltfill<<endl;
  //cout<<"3 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
  
  //if ((irecoht <0 || irecoht >=nHLTmx) || ((!isMC) && (!trgpas[irecoht]))) return; //GMA remove this condition
  //cout <<"irecoht = "<<irecoht<<endl;
  //if (irecoht==-3) return;

#ifdef TRIGGER
  if (irecoht>=0 && ((!isMC) && (!trgpas[irecoht]))) return;
  if (irecoht==-2 && ((!isMC) && (!trgpas[0]))) return;
#endif

//////////////////////////
//--MET(Noise) Filters--//
//////////////////////////

  edm::Handle<edm::TriggerResults> metpatRes;
  iEvent.getByToken(metPATToken_, metpatRes);
  const edm::TriggerNames &metPATnames = iEvent.triggerNames(*metpatRes);

#ifdef SIXTEEN
  bool METFilterspas[9]={0,0,0,0,0,0,0,0,0};
#elif defined(SEVENTEEN)
  bool METFilterspas[10]={0,0,0,0,0,0,0,0,0,0};
#elif defined(EIGHTEEN)
  bool METFilterspas[10]={0,0,0,0,0,0,0,0,0,0};
#endif

  //bool METFilter_prev=false;
  for (unsigned int i = 0; i<metpatRes->size(); ++i) {
  	std::string METFiltername = metPATnames.triggerName(i);
        	variab3 = METFiltername.c_str();
#ifdef SIXTEEN
                for (unsigned ij=0; ij<9; ij++){
#elif defined(SEVENTEEN)
                for (unsigned ij=0; ij<10; ij++){
#elif defined(EIGHTEEN)
                for (unsigned ij=0; ij<10; ij++){
#endif
                if (strstr(variab3,METFilters[ij]) && strlen(variab3)-strlen(METFilters[ij])<5) {
                        //cout<<"Filter Name : "<<variab3<<endl;
                        if(metpatRes->accept(ij)){
                                //cout<<"Filter Passed : "<<variab3<<endl;
                                METFilterspas[ij] = true;
                                //METFilter_prev = true;
                        	}
                	}
        	}
	}
/*
#ifdef SIXTEEN
  if(!METFilterspas[0] && !METFilterspas[1] && !METFilterspas[2] && !METFilterspas[3] && !METFilterspas[4] && !METFilterspas[5] && !METFilterspas[6] && !METFilterspas[7] && !METFilterspas[8]) return;
#elif defined(SEVENTEEN)
  if(!METFilterspas[0] && !METFilterspas[1] && !METFilterspas[2] && !METFilterspas[3] && !METFilterspas[4] && !METFilterspas[5] && !METFilterspas[6] && !METFilterspas[7] && !METFilterspas[8] && !METFilterspas[9]) return;
#elif defined(EIGHTEEN)
  if(!METFilterspas[0] && !METFilterspas[1] && !METFilterspas[2] && !METFilterspas[3] && !METFilterspas[4] && !METFilterspas[5] && !METFilterspas[6] && !METFilterspas[7] && !METFilterspas[8] && !METFilterspas[9]) return;
#endif
*/

  if (!isMC) {
    if (irecoht>=0) {
      wtfact = compres[irecoht];
    } else if (irecoht==-2) {
      wtfact = compres[0];
    } else {
      return ;
    }
  }
  
  //for (int ij=0; ij<nHLTmx; ij++) {lumiwt[ij]=intlumi[nHLTmx-1]/intlumi[ij];}// cout<<"nt "<<datpileup[ij][0]<<endl;}
  if (isMC) {
#ifndef GENPART
    //Handle<std::vector< PileupSummaryInfo > >  PupInfo;
    //iEvent.getByLabel("addPileupInfo", PupInfo);
    edm::Handle<std::vector<PileupSummaryInfo> > PupInfo;
    iEvent.getByToken(pileup_, PupInfo);
    int npu = -1;
    //int tnpv  = -1;
    PShiftDown_ = reweight::PoissonMeanShifter(-0.5);
    PShiftUp_ = reweight::PoissonMeanShifter(0.5);
    if (PupInfo.isValid()) {
      std::vector<PileupSummaryInfo>::const_iterator PVI;
      for(PVI = PupInfo->begin(); PVI != PupInfo->end(); ++PVI) {
	if (PVI->getBunchCrossing()==0) {
          //npu = PVI->getPU_NumInteractions();
	  npu = PVI->getTrueNumInteractions();
          //tnpv  = PVI->getTrueNumInteractions();
	  break;
	}
      }
    }
    //double MyWeight = LumiWeights_->weight(npu);
    
    //cout << "Main weight = " <<MyWeight << endl;
    //double TotalWeight_plus = MyWeight*PShiftUp_.ShiftWeight( npu );
    //double TotalWeight_plus = PShiftUp_.ShiftWeight( npu );
    //double TotalWeight_minus = PShiftDown_.ShiftWeight( npu ); 

    //cout << "Plus " << wtfact*TotalWeight_plus << " Mi = " << endl;
    //cout << "wt= " <<  wtfact << " : weightmi" <<wtfact*TotalWeight_minus << " Mi = " << endl;
    //wtfact=wtfact*TotalWeight_plus; 
    //wtfact=wtfact-TotalWeight_minus; 
    //cout << "npu Number of interactions : " << npu << endl; 
    //cout << "tnpv Number of true interactions : " << tnpv << endl; 

#ifdef PUCLEAN

   //Cut based on distance to gen-level leading vertex
   edm::Handle<reco::GenParticleCollection> genVtx;
   iEvent.getByToken(genParticlesToken_, genVtx);

   const auto& rv = (*primaryVertices)[0].position();
   const auto& gv = (*genVtx)[0].daughter(0)->vertex();
   double distGen = hypot( rv.x() - gv.x(), hypot( rv.y() - gv.y(), rv.z() - gv.z()) );

   if(distGen>1) return;

   edm::Handle<reco::GenJetCollection> genjets;
   iEvent.getByToken(genjetToken_,genjets);

   vector<unsigned long long> MBevents;
   MBevents.clear();    

    bool bad_rec = false;
    //unordered_map<unsigned long long, float>  maxgenpts = readmaxgenpts("ak4.txt");
    if (PupInfo.isValid() && ak4PFJets->size() > 0 && genjets->size() > 0 ) {
    	std::vector<PileupSummaryInfo>::const_iterator PVI;
    	for(PVI = PupInfo->begin(); PVI != PupInfo->end(); ++PVI) {
        auto &ptHatVec = PVI->getPU_pT_hats();
        auto pthats_it = max_element(ptHatVec.begin(), ptHatVec.end());
        const float maxpthatPU = pthats_it != ptHatVec.end() ? *pthats_it : 0.;
        //bool bad_rec = (maxpthatPU > genEvt->hard_scale);
        bad_rec = (maxpthatPU > qscale);
        //if(bad_rec){cout << "Qscale:  " << qscale  << "  Max Pt hat PU : " << maxpthatPU << endl;}

	const vector<edm::EventID>& evtIDs = PVI->getPU_EventID();
        for (const auto& evtID: evtIDs){
        	//cout << "PU evt ID : " << evtID.event() << endl ;
             	MBevents.push_back(evtID.event());
         	}
   		//cout << " MBevents.size() " << MBevents.size() << "  ptHatVec.size() : "<< ptHatVec.size() << endl;
    		for (size_t i = 0; i < ptHatVec.size(); ++i) {
   			//cout << "pt Hat " <<  ptHatVec.at(i) << " " << MBevents.at(i)<<endl;
         		if (ptHatVec.at(i) > 0) continue;
         			unsigned long long evtID = MBevents.at(i);
         			auto it = maxgenpts.find(evtID);
         			if (it == maxgenpts.end()) continue;
         				bad_rec |= it->second > genjets->front().pt();
         				cout << "Event Id "<< evtID << ' ' << it->second << endl;
                      		}
         			if (bad_rec) break;
         	}
	
	if (!bad_rec){
    		if (ak4PFJets->size() > 0 && genjets->size() > 0 ) {
        		const auto& recjet = (*ak4PFJets)[0];
        		bool matched = false;
        		for (const auto& genjet: *genjets){
           			//double dR = deltaR(genjet,recjet);
             			matched |= deltaR(genjet,recjet) < 0.2;
             			float maxgenpt = genjets->size() > 0 ? genjets->front().pt() : qscale;
             			static const float m = 156; // TODO? currently tuned for Pythia UL18
             			if (recjet.pt() > max(2*maxgenpt, m)) { 
					bad_rec = true; 
					}
					//cout << "Reco pt :  "<< recjet.pt() << " : "  << (*ak4PFJets)[0].pt() << "  Gen Pt :" << genjets->front().pt()<< " : " << (*genjets)[0].pt()  << endl;
   					if(bad_rec){
						cout << "Reco pt :  "<< recjet.pt() << " : "  << (*ak4PFJets)[0].pt() << "  Gen Pt :" << genjets->front().pt()<< " : " << (*genjets)[0].pt()  << endl;       
						}
					//(*ak4PFJets).erase(recjet);
					}
            			}
        		}
    		}

	if(bad_rec) return;
#endif

    if (npu<0) return; //GMA  
    if (isFlat) {
      weight =weight2*wtfact; // for flat MC sample
    } else {
      weight =weight2;
    }
#endif
    defweight = weight;

#ifndef GENPART
    int tmprecht = (irecoht>=0) ? irecoht : 0; //GMA
   
    if (npu<npileupmx) {
          weight *=rat_pileup[tmprecht][npu]; //GMA
    } else {
            weight *=rat_pileup[tmprecht][npileupmx-1]; //GMA
    }
#endif
    
    weighttrg = weight;
    //cout <<"weight  "<<weight<<" "<< weight2<<endl;
    //sar 3D PU reweighting 111028
  } else {
    weight = weight2;
    defweight = weight2;
    weighttrg = weight*wtfact; // *lumiwt[irecoht];
    //weighttrg = weight*lumiwt[3];
    //cout <<"TEST2  weighttrg "<< weighttrg<<" ; weight "<<weight<<" ; "<< wtfact<<endl;
  }

#ifdef PREFIRE
double tmpwt = weighttrg;
weighttrg = tmpwt*_prefiringweight;
double weighttrgL1up = tmpwt*_prefiringweightup;
double weighttrgL1down = tmpwt*_prefiringweightdown;
#endif

//---------------Lumiweight------------------
/*
//cout << "before lumi " << weighttrg ;
#ifdef LUMIWEIGHT
double tmpwt = weighttrg;
weighttrg = tmpwt*lumiwtt;
#endif
//cout << "   After lumi " << weighttrg << endl;
*/
//-------------------------------------------

#ifndef GENPART
  if(!isMC){
    reco::TrackBase::Point beamPoint(0,0, 0);
    //math::XYZPoint beamPoint(0,0, 0); 
    
    edm::Handle<reco::BeamSpot> beamSpotH;
    iEvent.getByToken(beamSpot_,beamSpotH);
    if (beamSpotH.isValid()){
      beamPoint = beamSpotH->position();
    }
    //cout<<"Debugging 1 "<<endl;
    //edm::Handle<reco::VertexCollection> primaryVertices;
    //iEvent.getByToken(vtxToken_, primaryVertices);  
    int tmpvert=0;
    nprim=0;
    if (primaryVertices.isValid()) {
      tmpvert = primaryVertices->size();
      //cout<<"temp"<<tmpvert<<endl;
	//cout<<"Debugging 2 "<<endl;
      for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
	int isel = (vert->isValid() && !vert->isFake()) ? 1 : 0;
	int ngoodtrk = 0;
	int nseltrk = 0;
	double prob = ChiSquaredProbability(vert->chi2(),vert->ndof());
	for (reco::Vertex::trackRef_iterator reftrk =vert->tracks_begin(); reftrk<vert->tracks_end(); reftrk++) {
	  if ((*reftrk)->quality(TrackBase::highPurity) && vert->trackWeight(*reftrk)>0) {
	    ngoodtrk++; 
	    if ((*reftrk)->normalizedChi2()<100000 && 
		abs((*reftrk)->dxy()) < 10000 && 
		(*reftrk)->pt() >0.50) {nseltrk++; } 
	  }
	}
	prim_alltrk[isel]->Fill(vert->tracksSize());
	prim_goodtrk[isel]->Fill(ngoodtrk);
	prim_seltrk[isel]->Fill(nseltrk);
	prim_dx[isel]->Fill(vert->position().x() - beamPoint.x());
	prim_dy[isel]->Fill(vert->position().y() - beamPoint.y());
	prim_dxy[isel]->Fill(vert->position().x() - beamPoint.x(), vert->position().y() - beamPoint.y());
	prim_dz[isel]->Fill(vert->position().z() - beamPoint.z());
	prim_prob[isel]->Fill(max(-20.0, log10(prob)));
	
	if (isel==1 && nprim < nprimx-1) {
	  primpr[nprim] = prob;
	  ntkpm[nprim] = 1000*(1000*min(int(vert->tracksSize()),999) + min(ngoodtrk,999)) + min(999, nseltrk);
	  nprim++;
	}
      }
    }
    
    prim_hist[0]->Fill(tmpvert);
    prim_sel[0]->Fill(nprim);
    
    prim_hist_rewt[0]->Fill(tmpvert, weighttrg);
    prim_sel_rewt[0]->Fill(nprim, weighttrg);

    if (irecoht>=0 && irecoht<nHLTmx) { 
      prim_hist[irecoht]->Fill(tmpvert);
      prim_sel[irecoht]->Fill(nprim);
      
      prim_hist_rewt[irecoht]->Fill(tmpvert, weighttrg);
      prim_sel_rewt[irecoht]->Fill(nprim, weighttrg);   
    }
    prim_correl->Fill(tmpvert, nprim);
 } 
#endif 
  
edm::Handle<reco::GenJetCollection> genjets;
edm::Handle<reco::JetFlavourInfoMatchingCollection> genjetsFlavor;

if(isMC) {
iEvent.getByToken(genjetToken_,genjets);
iEvent.getByToken(genjetFlavorToken_, genjetsFlavor);
}

/////////////////////////////////////
//--Jet Matching: Lead & Sub-Lead--//
/////////////////////////////////////

#ifdef MATCHING
bool jet_matches = false;

if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

std::vector<bool> matched_recojets(ak4PFJets->size(), false);
std::vector<bool> matched_genjets(genjets->size(), false);

// Initialize variables to keep track of leading recojet and leading genjet
    unsigned int reco_lead_idx = 0;
    unsigned int gen_lead_idx = 0;
    double reco_lead_pt = 0;
    double gen_lead_pt = 0;
/*
// Print the pt of all recojets
    cout << "Reco Jets:" << std::endl;
    for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
        cout << "Jet " << ijet << " pt: " << (*ak4PFJets)[ijet].pt() <<endl;
    }

// Print the pt of all genjets
    cout << "Gen Jets:" << std::endl;
    for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
        cout << "Jet " << igjet << " pt: " << (*genjets)[igjet].pt() <<endl;
    }
*/
// Loop over all AK4 PFJets to find the one with the highest pt
    for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
        if ((*ak4PFJets)[ijet].pt() > reco_lead_pt) {
            reco_lead_idx = ijet;
            reco_lead_pt = (*ak4PFJets)[ijet].pt();
        }
    }

// Loop over all genjets to find the one with the highest pt
    for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
        if ((*genjets)[igjet].pt() > gen_lead_pt) {
            gen_lead_idx = igjet;
            gen_lead_pt = (*genjets)[igjet].pt();
        }
    }

// Calculate the deltaR between the leading recojet and leading genjet, and check if they are matched
    double jetdR_lead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[gen_lead_idx]);
    if (jetdR_lead < 0.2) {

// If the leading jets are matched, mark them as such in the matched_recojets and matched_genjets vectors
        matched_recojets[reco_lead_idx] = true;
        matched_genjets[gen_lead_idx] = true;

	// Initialize variables to keep track of subleading recojet and subleading genjet
        unsigned int reco_sublead_idx = 0;
        unsigned int gen_sublead_idx = 0;
        double reco_sublead_pt = 0;
        double gen_sublead_pt = 0;

// Loop over all AK4 PFJets to find the one with the highest pt, excluding the leading jet
for (unsigned int ijet = 0; ijet < ak4PFJets->size(); ijet++) {
	    if((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1) continue;
            if (ijet == reco_lead_idx || (*ak4PFJets)[ijet].pt() < reco_sublead_pt) continue;
            double jetdR_sublead = deltaR((*ak4PFJets)[ijet], (*genjets)[gen_lead_idx]);
            if (jetdR_sublead < 0.2) {
                reco_sublead_idx = ijet;
                reco_sublead_pt = (*ak4PFJets)[ijet].pt();
            }
        }

// Check if the subleading recojet is matched to the leading genjet
        for (unsigned int igjet = 0; igjet < genjets->size(); igjet++) {
	    if((*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
            if (igjet == gen_lead_idx || (*genjets)[igjet].pt() < gen_sublead_pt) continue;
            double jetdR_sublead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[igjet]);
            if (jetdR_sublead < 0.2) {
                gen_sublead_idx = igjet;
                gen_sublead_pt = (*genjets)[igjet].pt();
            }
        }

// Loop over all genjets to find the one with the highest pt, excluding the leading jet
        double jetdR_sublead = deltaR((*ak4PFJets)[reco_lead_idx], (*genjets)[gen_sublead_idx]);
        if (jetdR_sublead < 0.2) {
            matched_recojets[reco_sublead_idx] = true;
            matched_genjets[gen_sublead_idx] = true;
            jet_matches = true;
	}
    }
}
//#endif

/////////////////////////
//--Particle matching--//
/////////////////////////

//bool part_matches = false;
std::vector<reco::CandidatePtr> matched_recoparts;
std::vector<reco::CandidatePtr> matched_genparts;

if(jet_matches){
if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

    std::vector<bool> matched_recojets(ak4PFJets->size(), false);
    std::vector<bool> matched_genjets(genjets->size(), false);

        for (unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
        for (unsigned igjet = 0; igjet != genjets->size(); igjet++) {
	
		if ((*ak4PFJets)[ijet].pt()<30 || abs((*ak4PFJets)[ijet].eta())>2.1 || (*genjets)[igjet].pt()<30 || abs((*genjets)[igjet].eta())>2.1) continue;
                if (matched_recojets[ijet] || matched_genjets[igjet]) continue;
	
	double jetdR = deltaR((*ak4PFJets)[ijet], (*genjets)[igjet]);
            if (jetdR < 0.2) {
                std::vector<reco::CandidatePtr> recodaus((*ak4PFJets)[ijet].daughterPtrVector());
                std::sort(recodaus.begin(), recodaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<reco::CandidatePtr> gendaus((*genjets)[igjet].daughterPtrVector());
                std::sort(gendaus.begin(), gendaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<bool> matched_recodaus(recodaus.size(), false);
                std::vector<bool> matched_gendaus(gendaus.size(), false);

                for (unsigned int ireco = 0; ireco < recodaus.size(); ++ireco) {
                    const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*recodaus[ireco]);

                    for (unsigned int igen = 0; igen < gendaus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*gendaus[igen]);
			if(recocand.pt()<1.0 || abs(recocand.eta())>2.5 || gencand.pt()<1.0 || abs(gencand.eta())>2.5 || recocand.charge()==0 || gencand.charge()==0) continue;
                        double partdR = deltaR(recocand, gencand);
                        if (partdR < 0.05 && recocand.charge() == gencand.charge() && !matched_recodaus[ireco] && !matched_gendaus[igen]) {
			//if (partdR < 0.05 && !matched_recodaus[ireco] && !matched_gendaus[igen]) {
                            matched_recodaus[ireco] = true;
                            matched_gendaus[igen] = true;
                            matched_recoparts.push_back(recodaus[ireco]);
                            matched_genparts.push_back(gendaus[igen]);
/*
			cout<<"------Particle Matching START--------"<<endl;
			if(ijet==0){
			cout<<"Leading RecoJet pt : "<<(*ak4PFJets)[ijet].pt()<<endl;
			cout<<"Leading GenJet pt : "<<(*genjets)[igjet].pt()<<endl;
			cout << "Leading RecoJet Particle check : pt: " << recocand.pt() << " eta: " << recocand.eta() << " ID: " << recocand.pdgId() << " charge: " << recocand.charge() << endl;
			cout << "Leading GenJet Particle check : pt: " << gencand.pt() << " eta: " <<gencand.eta() << " ID: " << gencand.pdgId() << " charge: " << gencand.charge() << endl;
			}
			cout<<"------Particle Matching END--------"<<endl;
*/
							}
                    				}
                			}
				//part_matches = true;
            			}
        		}
    		}
	}
}

#endif

/*
//Tracking Efficiency
#ifdef TRACKEFFMATCHING
bool TrackJet_matches = false;

if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

std::vector<bool> matched_recotrackjets(ak4PFJets->size(), false);
std::vector<bool> matched_gentrackjets(genjets->size(), false);

unsigned int reco_tracklead_idx = 0;
unsigned int gen_tracklead_idx = 0;
double reco_tracklead_pt = 0;
double gen_tracklead_pt = 0;

for (unsigned int itrackjet = 0; itrackjet < ak4PFJets->size(); itrackjet++) {
        if((*ak4PFJets)[itrackjet].pt()<30 || abs((*ak4PFJets)[itrackjet].eta())>2.1) continue;
        if ((*ak4PFJets)[itrackjet].pt() > reco_tracklead_pt) {
            reco_tracklead_idx = itrackjet;
            reco_tracklead_pt = (*ak4PFJets)[itrackjet].pt();
        }
    }

for (unsigned int igtrackjet = 0; igtrackjet < genjets->size(); igtrackjet++) {
        if((*genjets)[igtrackjet].pt()<30 || abs((*genjets)[igtrackjet].eta())>2.1) continue;
        if ((*genjets)[igtrackjet].pt() > gen_tracklead_pt) {
            gen_tracklead_idx = igtrackjet;
            gen_tracklead_pt = (*genjets)[igtrackjet].pt();
        }
    }

double jetdR_tracklead = deltaR((*ak4PFJets)[reco_tracklead_idx], (*genjets)[gen_tracklead_idx]);
    if (jetdR_tracklead < 0.2) {
	matched_recotrackjets[reco_tracklead_idx] = true;
        matched_gentrackjets[gen_tracklead_idx] = true;

	unsigned int reco_tracksublead_idx = 0;
        unsigned int gen_tracksublead_idx = 0;
        double reco_tracksublead_pt = 0;
        double gen_tracksublead_pt = 0;

for (unsigned int itrackjet = 0; itrackjet < ak4PFJets->size(); itrackjet++) {
            if((*ak4PFJets)[itrackjet].pt()<30 || abs((*ak4PFJets)[itrackjet].eta())>2.1) continue;
            if (itrackjet == reco_tracklead_idx || (*ak4PFJets)[itrackjet].pt() < reco_tracksublead_pt) continue;
            double jetdR_tracksublead = deltaR((*ak4PFJets)[itrackjet], (*genjets)[gen_tracklead_idx]);
            if (jetdR_tracksublead < 0.2) {
                reco_tracksublead_idx = itrackjet;
                reco_tracksublead_pt = (*ak4PFJets)[itrackjet].pt();
            }
        }

for (unsigned int igtrackjet = 0; igtrackjet < genjets->size(); igtrackjet++) {
            if((*genjets)[igtrackjet].pt()<30 || abs((*genjets)[igtrackjet].eta())>2.1) continue;
            if (igtrackjet == gen_tracklead_idx || (*genjets)[igtrackjet].pt() < gen_tracksublead_pt) continue;
            double jetdR_tracksublead = deltaR((*ak4PFJets)[reco_tracklead_idx], (*genjets)[igtrackjet]);
            if (jetdR_tracksublead < 0.2) {
                gen_tracksublead_idx = igtrackjet;
                gen_tracksublead_pt = (*genjets)[igtrackjet].pt();
            }
        }

double jetdR_tracksublead = deltaR((*ak4PFJets)[reco_tracklead_idx], (*genjets)[gen_tracksublead_idx]);
        if (jetdR_tracksublead < 0.2) {
            matched_recotrackjets[reco_tracksublead_idx] = true;
            matched_gentrackjets[gen_tracksublead_idx] = true;
            TrackJet_matches = true;
        }
    }
}

//Particle Matching
std::vector<reco::CandidatePtr> matched_recotrackparts;
std::vector<reco::CandidatePtr> matched_gentrackparts;

if(TrackJet_matches){
if (ak4PFJets.isValid() && ak4PFJets->size() >= 2 && genjets.isValid() && genjets->size() >= 2) {

	std::vector<bool> matched_recotrackjets(ak4PFJets->size(), false);
        std::vector<bool> matched_gentrackjets(genjets->size(), false);

        for (unsigned itrackjet = 0; itrackjet != ak4PFJets->size(); itrackjet++) {
        for (unsigned igtrackjet = 0; igtrackjet != genjets->size(); igtrackjet++) {

                if ((*ak4PFJets)[itrackjet].pt()<30 || abs((*ak4PFJets)[itrackjet].eta())>2.1 || (*genjets)[igtrackjet].pt()<30 || abs((*genjets)[igtrackjet].eta())>2.1) continue;
                if (matched_recotrackjets[itrackjet] || matched_gentrackjets[igtrackjet]) continue;

        double jetdR = deltaR((*ak4PFJets)[itrackjet], (*genjets)[igtrackjet]);
            if (jetdR < 0.2) {

                std::vector<reco::CandidatePtr> trackrecodaus((*ak4PFJets)[itrackjet].daughterPtrVector());
                std::sort(trackrecodaus.begin(), trackrecodaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });
	
		for (unsigned int ireco = 0; ireco < trackrecodaus.size(); ++ireco) {
			if (gRandom->Uniform() < 0.979) {
            			trackrecodaus.erase(trackrecodaus.begin() + ireco);
				}
			}
			
		std::sort(trackrecodaus.begin(), trackrecodaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<reco::CandidatePtr> trackgendaus((*genjets)[igtrackjet].daughterPtrVector());
                std::sort(trackgendaus.begin(), trackgendaus.end(), [](const reco::CandidatePtr& p1, const reco::CandidatePtr& p2) { return p1->pt() > p2->pt(); });

                std::vector<bool> matched_trackrecodaus(trackrecodaus.size(), false);
                std::vector<bool> matched_trackgendaus(trackgendaus.size(), false);

                for (unsigned int ireco = 0; ireco < trackrecodaus.size(); ++ireco) {
                    const pat::PackedCandidate& trackrecocand = static_cast<const pat::PackedCandidate&>(*trackrecodaus[ireco]);
                    for (unsigned int igen = 0; igen < trackgendaus.size(); ++igen) {
                        const pat::PackedCandidate& trackgencand = static_cast<const pat::PackedCandidate&>(*trackgendaus[igen]);

                        if(trackrecocand.pt()<1.0 || abs(trackrecocand.eta())>2.5 || trackgencand.pt()<1.0 || abs(trackgencand.eta())>2.5 || trackrecocand.charge()==0 || trackgencand.charge()==0) continue;
                        double partdR = deltaR(trackrecocand, trackgencand);
                        if (partdR < 0.05 && trackrecocand.charge() == trackgencand.charge() && !matched_trackrecodaus[ireco] && !matched_trackgendaus[igen]) {
					matched_trackrecodaus[ireco] = true;
                        		matched_trackgendaus[igen] = true;
                        		matched_recotrackparts.push_back(trackrecodaus[ireco]);
                        		matched_gentrackparts.push_back(trackgendaus[igen]);

				//cout<<"------Particle Matching START for killed tracks--------"<<endl;
                	        //if(itrackjet==0){
         	                //cout<<"Leading RecoJet pt : "<<(*ak4PFJets)[itrackjet].pt()<<endl;
                        	//cout<<"Leading GenJet pt : "<<(*genjets)[igtrackjet].pt()<<endl;
                        	//cout << "Leading RecoJet Particle check : pt: " << trackrecocand.pt() << " eta: " << trackrecocand.eta() << " ID: " << trackrecocand.pdgId() << " charge: " << trackrecocand.charge() << endl;
                        	//cout << "Leading GenJet Particle check : pt: " << trackgencand.pt() << " eta: " <<trackgencand.eta() << " ID: " << trackgencand.pdgId() << " charge: " << trackgencand.charge() << endl;
        			//}
                        	//cout<<"------Particle Matching END for killed tracks--------"<<endl;

				}
			}
					}
				}
			}
		}
	}
}
#endif
*/

if(isMC) {

//    edm::Handle<reco::GenJetCollection> genjets;
//    iEvent.getByToken(genjetToken_,genjets);
}

//Reco Level work starts here 
 
  vector<double> jetptx[njecmx];
  vector<double> jetscl[njecmx];
  vector<int> jetindx[njecmx];

#ifndef GENPART
  if (ak4PFJets.isValid()) { 
    for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
      double pt = (*ak4PFJets)[ijet].pt();
      
//#ifndef JETENERGY
//#ifdef JETRESO
      
#if defined(JETRESO)&&(!defined(JETENERGY))
      //resolution file 
      JME::JetResolution resolution;
#ifdef SIXTEEN
      //resolution = JME::JetResolution("Summer20UL16APV_JRV3_DATA_PtResolution_AK4PFchs.txt");    // DATA APV
      //resolution = JME::JetResolution("Summer20UL16_JRV3_DATA_PtResolution_AK4PFchs.txt");       // DATA
      resolution = JME::JetResolution("Summer20UL16APV_JRV3_MC_PtResolution_AK4PFchs.txt");      // MC APV
      //resolution = JME::JetResolution("Summer20UL16_JRV3_MC_PtResolution_AK4PFchs.txt");         //MC
#elif defined(SEVENTEEN)
      //resolution = JME::JetResolution("Summer19UL17_JRV2_DATA_PtResolution_AK4PFchs.txt");    // for DATA
      resolution = JME::JetResolution("Summer19UL17_JRV2_MC_PtResolution_AK4PFchs.txt");      // for MC
#elif defined(EIGHTEEN)
      //resolution = JME::JetResolution("Summer19UL18_JRV2_DATA_PtResolution_AK4PFchs.txt");    // DATA
      resolution = JME::JetResolution("Summer19UL18_JRV2_MC_PtResolution_AK4PFchs.txt");      // MC
#endif
 
      //Scalefactor file
      JME::JetResolutionScaleFactor res_sf;
#ifdef SIXTEEN
      //cout<<"Filename="<<scalefile<<endl;
      //res_sf = JME::JetResolutionScaleFactor("Summer20UL16APV_JRV3_DATA_SF_AK4PFchs.txt");      // DATA APV
      //res_sf = JME::JetResolutionScaleFactor("Summer20UL16_JRV3_DATA_SF_AK4PFchs.txt");         // DATA
      res_sf = JME::JetResolutionScaleFactor("Summer20UL16APV_JRV3_MC_SF_AK4PFchs.txt");        // MC APV
      //res_sf = JME::JetResolutionScaleFactor("Summer20UL16_JRV3_MC_SF_AK4PFchs.txt");           // MC
#elif defined(SEVENTEEN)
      //cout<<"Filename="<<scalefile<<endl;
      //res_sf = JME::JetResolutionScaleFactor("Summer19UL17_JRV2_DATA_SF_AK4PFchs.txt");        // for DATA
      res_sf = JME::JetResolutionScaleFactor("Summer19UL17_JRV2_MC_SF_AK4PFchs.txt");          // for MC
#elif defined(EIGHTEEN)
      //cout<<"Filename="<<scalefile<<endl;
      //res_sf = JME::JetResolutionScaleFactor("Summer19UL18_JRV2_DATA_SF_AK4PFchs.txt");        // DATA
      res_sf = JME::JetResolutionScaleFactor("Summer19UL18_JRV2_MC_SF_AK4PFchs.txt");          // MC
#endif
      
      edm::Handle<double> rho;
      iEvent.getByToken(m_rho_token, rho);
      //cout<< "  rho=" << *rho << endl;
      
      //cout << "Write test 3 = ok " << endl;
      double eta = (*ak4PFJets)[ijet].eta();
      double reso = 1;
      JME::JetParameters parameters_5 = {{JME::Binning::JetPt, pt}, {JME::Binning::JetEta, eta}, {JME::Binning::Rho, *rho}};
      float rp = resolution.getResolution(parameters_5);
      float sf = res_sf.getScaleFactor({{JME::Binning::JetEta, eta}});
      float sf_up= res_sf.getScaleFactor({{JME::Binning::JetEta, eta}}, Variation::UP);
      float sf_dn= res_sf.getScaleFactor({{JME::Binning::JetEta, eta}}, Variation::DOWN);
//#endif
//#endif
#endif 
      for (int isrc = 0; isrc < njecmx; isrc++) {
	double sup = 1;
#ifdef JETENERGY
	double eta = (*ak4PFJets)[ijet].eta();
	if (isrc>0 && isrc<=nsrc) {
	  JetCorrectionUncertainty *jecUnc = vsrc[isrc-1];
	  jecUnc->setJetEta(eta);
	  jecUnc->setJetPt(pt);
	  
	  sup += jecUnc->getUncertainty(true);
	} else if (isrc>nsrc) {
	  JetCorrectionUncertainty *jecUnc = vsrc[isrc-nsrc-1];
	  jecUnc->setJetEta(eta);
	  jecUnc->setJetPt(pt);
	  sup -= jecUnc->getUncertainty(false);
	}
#elif defined(JETRESO)

	//edm::Handle<reco::GenJetCollection> genjets;
     	//iEvent.getByToken(genjetToken_,genjets);
 	//cout << "Gen Jets no " << genjets->size() <<endl;

	bool match_jet = false;
	double m_dPt_max_factor = 1.0;

	//double m_dPt_max_factor = 3.0;
        //double m_dPt_max_factor = 3.0;
        double min_dR = std::numeric_limits<double>::infinity();

	double matched_genJetPt = 0.0;

	for(unsigned igjet = 0; igjet != genjets->size(); igjet++){
   		double dR = deltaR((*genjets)[igjet], (*ak4PFJets)[ijet]);
		//cout << "dR = " << dR << endl ;

		double m_dR_max = 0.2;

	if (dR > min_dR) continue;
  	if (dR < m_dR_max) {
     	double dPt = std::abs((*genjets)[igjet].pt() - (*ak4PFJets)[ijet].pt());
      	//cout << "dPt = " << dPt << endl 
	if (dPt > m_dPt_max_factor * rp * (*ak4PFJets)[ijet].pt())    continue;
	     	min_dR = dR;
     	 	match_jet=true;
         	matched_genJetPt = (*genjets)[igjet].pt(); 
                }
		//cout << "mindR = " << min_dR << endl;
		}
	//cout << " match_jet " << match_jet <<" "<< ijet << endl;
	
#ifdef STOCHASTIC
match_jet = false;
#endif
	
	if(match_jet){

        double dPt =  std::abs((*ak4PFJets)[ijet].pt() - matched_genJetPt);

       	if (isrc==0) {
          sup= 1 + (sf - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        } else if (isrc==1) {
          sup= 1 + (sf_up - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        } else if (isrc==2) {
          sup= 1 + (sf_dn - 1.) * dPt / (*ak4PFJets)[ijet].pt();
        }

	}else{

	/*
	if (isrc==0) {  
	  reso = sqrt(abs(sf*sf - 1))*rp;
	} else if (isrc==1) {
	  reso = sqrt(abs(sf_up*sf_up - 1))*rp;
	} else if (isrc==2) {
	  reso = sqrt(abs(sf_dn*sf_dn - 1))*rp;
	}
	sup = gRandom->Gaus(1.0, reso);			
	*/

	if (isrc==0) {
          reso = sqrt(max(sf*sf - 1.0,0.0));
        } else if (isrc==1) {
          reso = sqrt(max(sf_up*sf_up - 1.0,0.0));;
        } else if (isrc==2) {
          reso = sqrt(max(sf_dn*sf_dn - 1.0,0.0));;
        }

        sup = 1+ (gRandom->Gaus(0, rp))*reso;
	}

#endif
	//cout << "Scale " << sup <<endl;
	jetptx[isrc].push_back(sup*pt);
	jetscl[isrc].push_back(sup);
	jetindx[isrc].push_back(ijet);
      }
    }

//#if defined(JETENERGY)||defined(JETRESO)    
    for (int isrc = 0; isrc < njecmx; isrc++) {
      for (unsigned int ij=0; ij<jetptx[isrc].size()-1; ij++) {
	for (unsigned int jk=ij+1; jk<jetptx[isrc].size(); jk++) {
	  if (jetptx[isrc][jk]>jetptx[isrc][ij]) {
	    double tmppt = jetptx[isrc][ij];
	    double tmpscl = jetscl[isrc][ij];
	    int tmpindx = jetindx[isrc][ij];
	    
	    jetptx[isrc][ij] = jetptx[isrc][jk];
	    jetscl[isrc][ij] = jetscl[isrc][jk];
	    jetindx[isrc][ij] = jetindx[isrc][jk];					
	    
	    jetptx[isrc][jk] = tmppt;
	    jetscl[isrc][jk] = tmpscl;
	    jetindx[isrc][jk] = tmpindx;
	  }
	}
      }
    }
//#endif
    
    for (int isrc = 0; isrc < njecmx; isrc++) {
      if (jetptx[isrc].size()>=2) {
	leadingptjec[isrc] = jetptx[isrc][0];
        //irecohtjec[isrc] = getbinid(leadingptjec[isrc], nHLTmx, leadingPtThreshold);
	irecohtjec[isrc] = getbinid(leadingptjec[isrc], ngenPT, genhtbins);
	//irecohtjec[isrc] = getbinid(leadingptjec[isrc], PTbins, recohtbins2D);
	//cout<<" JEC CORRECTED PT : "<<leadingptjec[isrc]<<endl;
      } else {
	irecohtjec[isrc] = -1;
      }
    }

    //GMA Need the corection on aveleadingpt
    if (ak4PFJets.isValid() && ak4PFJets->size() >=2) { //  && aveleadingpt >leadingPtThreshold[0]) { //GMA look on this
      
      for (int iet=0; iet<njetetamn; iet++) {
	for (int isrc = 0; isrc < njecmx; isrc++) {
	  //if (aveleadingptjec[isrc] >leadingPtThreshold[0]) {
	  if (leadingptjec[isrc] >leadingPtThreshold[0]) {
	    //int njets=0;
	    ncount=0;
	    //recterm=0;
	    //ithird=-1;
	    //double sup = 1;	
	    //px=0;
	    //py=0;
	    //ptxy=0;
	    tmpjt4v.clear();
	    //tmpcand4v.clear();
	    //tmpgen4v.clear();
	    
	    //if(abs((*ak4PFJets)[0].eta())<etarange[iet] && abs((*ak4PFJets)[1].eta())<etarange[iet]) {
	    //for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
	    
	    for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++) {
	      if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][0]].pt())>30.0 && abs((*ak4PFJets)[jetindx[isrc][1]].pt())>30.0) {
		//if (abs((*ak4PFJets)[jetindx[isrc][ijet]].eta())<etarange[iet]) {
	        if (dPhi(((*ak4PFJets)[jetindx[isrc][0]].phi()), ((*ak4PFJets)[jetindx[isrc][1]].phi()))<2.0) continue;
		if (dPT(((*ak4PFJets)[jetindx[isrc][0]].pt()), ((*ak4PFJets)[jetindx[isrc][1]].pt()))>0.3) continue;
	      	//int flavour = (*ak4PFJets)[ijet].partonFlavour();
        	//cout << "Flavour : "<<flavour<<endl;
		
		int ireorjt = jetindx[isrc][ijet];
#ifdef FLAV		
		int ParFlav = (*ak4PFJets)[ireorjt].partonFlavour();
		int HadFlav = (*ak4PFJets)[ireorjt].hadronFlavour();	
		//cout<<"Parton Flavor : "<<ParFlav<<" Hadron Flavor : "<<HadFlav<<endl;
#endif	
		double pt = jetptx[isrc][ijet];
		double sup = jetscl[isrc][ijet];
		double abseta = abs((*ak4PFJets)[ireorjt].eta());
	        if (pt<30.0 || abseta >etarange[iet]) continue;	
		//if (iet==0 && isrc==0) cout <<"pteta "<<pt<<" "<<abseta<<endl;
		//bool isEta = (abseta<2.5) ? true : false;
		bool isEta = (abseta<2.1) ? true : false;
		
		//if (isEta && pt>30.0) { njets++;}
		if (abseta>5.0) continue;
		bool isPt = (pt>30.0) ? true : false;
		if (isEta && isPt) {ncount++;}
		
		//cout<< "ncount = " << ncount << endl;
		//Ight Jet ID Recomendation
		double NHF = (*ak4PFJets)[ireorjt].neutralHadronEnergyFraction();
		double NEMF = (*ak4PFJets)[ireorjt].neutralEmEnergyFraction();
		double CHF = (*ak4PFJets)[ireorjt].chargedHadronEnergyFraction();
		double MUF = (*ak4PFJets)[ireorjt].muonEnergyFraction();
		double CEMF = (*ak4PFJets)[ireorjt].chargedEmEnergyFraction();
		int NumConst = (*ak4PFJets)[ireorjt].chargedMultiplicity()+(*ak4PFJets)[ireorjt].neutralMultiplicity();
		int NumNeutralParticles =(*ak4PFJets)[ireorjt].neutralMultiplicity();
		int CHM = (*ak4PFJets)[ireorjt].chargedMultiplicity();
                //cout<<"NHF== "<< NHF << "; NEF== " << NEMF <<" ; CHF==" <<CHF <<" ;cef==" << CEMF <<"; no= " << NumConst <<" ; nch==" << CHM <<" ; NO of part==" << NumNeutralParticles <<endl;
                bool passPUIDtight = bool((*ak4PFJets)[ireorjt].userInt("pileupJetId:fullId") & (1 << 0)) || ((*ak4PFJets)[ireorjt].pt() > 50.0);
		bool TightJetID =false;

                //if (abs((*ak4PFJets)[ireorjt].eta())<=2.6 && CEMF<0.8 && CHM>0 && CHF>0 && NumConst>1 && NEMF<0.9 && MUF <0.8 && NHF < 0.9 ) {TightJetID =true;}
      		//else {TightJetID =false;}
		/*
      		if(abs((*ak4PFJets)[ireorjt].eta())<=2.7){
                if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0 && abs((*ak4PFJets)[ireorjt].eta())<=2.6)  TightJetID =true;
                if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ireorjt].eta())>2.6)  TightJetID =true;}
                else {TightJetID =false;}
                if (abs((*ak4PFJets)[ireorjt].eta())>2.7) {TightJetID = false;}
                if ((*ak4PFJets)[ireorjt].pt()<30.0) {TightJetID = false;}
		*/
#ifdef SIXTEEN
		if(abs((*ak4PFJets)[ireorjt].eta())<=2.7){
                if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0 && abs((*ak4PFJets)[ireorjt].eta())<=2.4 && MUF <0.8 && CEMF<0.8)  TightJetID =true;
                if(NHF<0.90 && NEMF<0.99 && abs((*ak4PFJets)[ireorjt].eta())>2.4)  TightJetID =true;
                      } else {  TightJetID =false;  }
                if (abs((*ak4PFJets)[ireorjt].eta())>2.7) {TightJetID = false;}
                if ((*ak4PFJets)[ireorjt].pt()<30.0) {TightJetID = false;}
#elif defined(SEVENTEEN)
		if(abs((*ak4PFJets)[ireorjt].eta())<=2.6){
                if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0  && abs((*ak4PFJets)[ireorjt].eta())<=2.6 && CEMF<0.8 && MUF <0.8)  TightJetID =true;
                        }else{ TightJetID =false; }
                if (abs((*ak4PFJets)[ireorjt].eta())>2.6) {TightJetID = false;}
                if ((*ak4PFJets)[ireorjt].pt()<30.0) {TightJetID = false;}
#elif defined(EIGHTEEN)
		if(abs((*ak4PFJets)[ireorjt].eta())<=2.6){
                if(NHF<0.90 && NEMF<0.90 && NumConst>1 && CHF>0 && CHM>0  && abs((*ak4PFJets)[ireorjt].eta())<=2.6 && CEMF<0.8 && MUF <0.8)  TightJetID =true;
                	}else{ TightJetID =false; }
                if (abs((*ak4PFJets)[ireorjt].eta())>2.6) {TightJetID = false;}
                if ((*ak4PFJets)[ireorjt].pt()<30.0) {TightJetID = false;}
#endif
		if( ireorjt<=1 && !TightJetID) break;
		if (!TightJetID && !passPUIDtight) continue;
		//cout<<"ireorjt : "<<ireorjt<<endl;
		
		if(primaryVertices->empty() || !(primaryVertices->size()>0) || (*primaryVertices)[0].isFake() || !((*primaryVertices)[0].ndof()>4) || !(abs((*primaryVertices)[0].position().z())<24) || !((*primaryVertices)[0].position().rho()<2)) continue;	

#ifdef SIXTEEN
		if(!METFilterspas[0] && !METFilterspas[1] && !METFilterspas[2] && !METFilterspas[3] && !METFilterspas[4] && !METFilterspas[5] && !METFilterspas[6] && !METFilterspas[7] && !METFilterspas[8]) continue;
#elif defined(SEVENTEEN)
		if(!METFilterspas[0] && !METFilterspas[1] && !METFilterspas[2] && !METFilterspas[3] && !METFilterspas[4] && !METFilterspas[5] && !METFilterspas[6] && !METFilterspas[7] && !METFilterspas[8] && !METFilterspas[9]) continue;
#elif defined(EIGHTEEN)
		if(!METFilterspas[0] && !METFilterspas[1] && !METFilterspas[2] && !METFilterspas[3] && !METFilterspas[4] && !METFilterspas[5] && !METFilterspas[6] && !METFilterspas[7] && !METFilterspas[8] && !METFilterspas[9]) continue;
#endif

		HepLorentzVector tmp4v((*ak4PFJets)[ireorjt].px(), (*ak4PFJets)[ireorjt].py(), (*ak4PFJets)[ireorjt].pz(), (*ak4PFJets)[ireorjt].energy()); tmp4v *=sup;
                Hep3Vector tmp3v((*ak4PFJets)[ireorjt].px(), (*ak4PFJets)[ireorjt].py(), (*ak4PFJets)[ireorjt].pz()); tmp3v *=sup;
		
		if (isEta && isPt) { tmpjt4v.push_back(tmp4v);}
		//tmpjt4v.push_back(tmp4v);	  
		//if (isEta && isPt) {allrecojetmom.push_back(tmp4v);}
		//if (ncount<=2) {  //change for all jet 26th June
		  if (isEta && isPt) {recomom[isrc][0][iet].push_back(tmp4v);}
		  //}
		  //cout <<"ncount filled "<<ncount<<" "<<isrc<<" "<<iet<<" "<<recomom[isrc][0][iet].size()<<endl;
		  //px +=tmp4v.px();
		  //py +=tmp4v.py();
		  //ptxy +=tmp4v.perp();


///////////////////////	
//-----BTag Info-----//
///////////////////////

		//DeepCSV
		double deepCSV_probb = -999;
		double deepCSV_probbb = -999;

		//DeepJET
		double deepJET_probb = -999;
		double deepJET_probbb = -999;
		double deepJET_problepb = -999;

		double deepCSV = -999;
		double deepJET = -999;

                for( const std::string &bDiscr : bDiscriminators_ ){
                        if(bDiscr == "pfDeepCSVJetTags:probb"){
                                deepCSV_probb = (*ak4PFJets)[ireorjt].bDiscriminator(bDiscr);
                        }else if(bDiscr == "pfDeepCSVJetTags:probbb"){
                                deepCSV_probbb = (*ak4PFJets)[ireorjt].bDiscriminator(bDiscr);
                        }else if(bDiscr == "pfDeepFlavourJetTags:probb"){
                                deepJET_probb = (*ak4PFJets)[ireorjt].bDiscriminator(bDiscr);
                        }else if(bDiscr == "pfDeepFlavourJetTags:probbb"){
                                deepJET_probbb = (*ak4PFJets)[ireorjt].bDiscriminator(bDiscr);
                        }else if(bDiscr == "pfDeepFlavourJetTags:problepb"){
				deepJET_problepb = (*ak4PFJets)[ireorjt].bDiscriminator(bDiscr);
			}
                }

		//Total DeepCSV
		deepCSV = deepCSV_probb + deepCSV_probbb;  			//pfDeepCSVJetTags:probb + pfDeepCSVJetTags:probbb

		//Total DeepJET
		deepJET = deepJET_probb + deepJET_probbb + deepJET_problepb;    //pfDeepFlavourJetTags:probb + pfDeepFlavourJetTags:probbb + pfDeepFlavourJetTags:problepb

#ifdef SIXTEEN

//////////////////////////////////////////////////////////
//The light jet SFs (incl) have shown to lead to problems
//in some measurements. Please check if that is the case
//in your measurement. If that is the case, consult your
//PAG BTV contacts. The recommendation is to change the
//light jet SFs of 2016postVFP to 2016preVFP in this case.
//////////////////////////////////////////////////////////

#ifdef APV
                //DeepCSV Working Point; Loose-> L, Medium-> M, Tight->T
                double CSVL = 0.2027;
                double CSVM = 0.6001;
                double CSVT = 0.8819;

                double JETL = 0.0508;
                double JETM = 0.2598;
                double JETT = 0.6502;
#elif defined(NONAPV)
                //DeepJET Working Point; Loose-> L, Medium-> M, Tight->T
                double CSVL = 0.1918;
                double CSVM = 0.5847;
                double CSVT = 0.8767;

                double JETL = 0.0480;
                double JETM = 0.2489;
                double JETT = 0.6377;
#endif

#elif defined(SEVENTEEN)		
		//DeepCSV Working Point; Loose-> L, Medium-> M, Tight->T
                double CSVL = 0.1355;
                double CSVM = 0.4506;
                double CSVT = 0.7738;

                //DeepJET Working Point; Loose-> L, Medium-> M, Tight->T
                double JETL = 0.0532;
                double JETM = 0.3040;
                double JETT = 0.7476;
#elif defined(EIGHTEEN)
		//DeepCSV Working Point; Loose-> L, Medium-> M, Tight->T
		double CSVL = 0.1208;
		double CSVM = 0.4168;
		double CSVT = 0.7665;

		//DeepJET Working Point; Loose-> L, Medium-> M, Tight->T
		double JETL = 0.0490;
                double JETM = 0.2783;
                double JETT = 0.7100;
#endif

#ifdef FLAV		
		//Discriminant Vs. Jet PT
		if(HadFlav == 5){h_BTag_CSV->Fill(tmp4v.perp(),deepCSV,weighttrg);}
		if(HadFlav == 4){h_CTag_CSV->Fill(tmp4v.perp(),deepCSV,weighttrg);}
		if(HadFlav == 0){h_udsgTag_CSV->Fill(tmp4v.perp(),deepCSV,weighttrg);}

		if(HadFlav == 5){h_BTag_JET->Fill(tmp4v.perp(),deepJET,weighttrg);}
                if(HadFlav == 4){h_CTag_JET->Fill(tmp4v.perp(),deepJET,weighttrg);}
                if(HadFlav == 0){h_udsgTag_JET->Fill(tmp4v.perp(),deepJET,weighttrg);}
		
		//Input Efficiency histograms for evaluating SF - deepJET
		TH2D* DeepJET_LJetEff = (TH2D*)bTagEff_file->Get("Reco_JETT_ljet_eff_num");
		TH2D* DeepJET_CJetEff = (TH2D*)bTagEff_file->Get("Reco_JETT_cjet_eff_num");
		TH2D* DeepJET_BJetEff = (TH2D*)bTagEff_file->Get("Reco_JETT_bjet_eff_num");
		
		double bTagEffMap_PtRange = DeepJET_BJetEff->GetXaxis()->GetXmax();
	      	double bTagEffMap_Eta_high = DeepJET_BJetEff->GetYaxis()->GetXmax();
     	 	double bTagEffMap_Eta_low  = DeepJET_BJetEff->GetYaxis()->GetXmin();

      		double bTagEffMap_nPtBins = DeepJET_BJetEff->GetNbinsX();
      		double bTagEffMap_nEtaBins = DeepJET_BJetEff->GetNbinsY();

		int xbin = (int)(tmp4v.perp()*bTagEffMap_nPtBins/bTagEffMap_PtRange) + 1;
                int ybin = (int)((tmp4v.eta()-bTagEffMap_Eta_low)*bTagEffMap_nEtaBins/(bTagEffMap_Eta_high-bTagEffMap_Eta_low)) +1;


		//cout << "bTagEffMap_nPtBins/bTagEffMap_PtRange/bTagEffMap_Eta_low/bTagEffMap_nEtaBins/bTagEffMap_Eta_high:" <<bTagEffMap_nPtBins << "/"  <<bTagEffMap_PtRange << "/" <<bTagEffMap_Eta_low << "/" <<bTagEffMap_nEtaBins << "/" <<bTagEffMap_Eta_high <<endl;


		//B-tagging is done using deepJET Tight WP
		double BTagEffValue;
		double deepJetSF, deepJetSF_upCorr, deepJetSF_downCorr, deepJetSF_upUncorr, deepJetSF_downUncorr;

		double MC_tagged=1.0, MC_notTagged=1.0, data_tagged=1.0, data_notTagged=1.0; 
		double data_tagged_upCorr=1.0, data_notTagged_upCorr=1.0, data_tagged_upUncorr=1.0, data_notTagged_upUncorr=1.0;
		double data_tagged_downCorr=1.0, data_notTagged_downCorr=1.0, data_tagged_downUncorr=1.0, data_notTagged_downUncorr=1.0;

		//SF & Efficiency input for W_entry (weight) & uncertainty for deepJET Tight Working Point
		if(HadFlav==0){
                        BTagEffValue = DeepJET_LJetEff->GetBinContent(xbin,ybin);
                        deepJetSF = corrector_deepJet_lFlav->evaluate({"central", "T", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_upCorr = corrector_deepJet_lFlav->evaluate({"up_correlated", "T", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_downCorr = corrector_deepJet_lFlav->evaluate({"down_correlated", "T", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_upUncorr = corrector_deepJet_lFlav->evaluate({"up_uncorrelated", "T", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_downUncorr = corrector_deepJet_lFlav->evaluate({"down_uncorrelated", "T", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
			if(deepJET > JETT){
				MC_tagged *= BTagEffValue;
                                data_tagged *= deepJetSF*BTagEffValue;
                                data_tagged_upCorr *= deepJetSF_upCorr*BTagEffValue;
                                data_tagged_downCorr *= deepJetSF_downCorr*BTagEffValue;
                                data_tagged_upUncorr *= deepJetSF_upUncorr*BTagEffValue;
                                data_tagged_downUncorr *= deepJetSF_downUncorr*BTagEffValue;	
			}
			else{
				MC_notTagged *= (1 - BTagEffValue);
                                data_notTagged *= (1 - deepJetSF*BTagEffValue);
                                data_notTagged_upCorr *= (1 - deepJetSF_upCorr*BTagEffValue);
                                data_notTagged_downCorr *= (1 - deepJetSF_downCorr*BTagEffValue);
                                data_notTagged_upUncorr *= (1 - deepJetSF_upUncorr*BTagEffValue);
                                data_notTagged_downUncorr *= (1 - deepJetSF_downUncorr*BTagEffValue);		
			}
		}
		else if(HadFlav==4){
                        BTagEffValue = DeepJET_CJetEff->GetBinContent(xbin,ybin);
                        deepJetSF = corrector_deepJet_bcFlav->evaluate({"central", "T", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_upCorr = corrector_deepJet_bcFlav->evaluate({"up_correlated", "T", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_downCorr = corrector_deepJet_bcFlav->evaluate({"down_correlated", "T", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_upUncorr = corrector_deepJet_bcFlav->evaluate({"up_uncorrelated", "T", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_downUncorr = corrector_deepJet_bcFlav->evaluate({"down_uncorrelated", "T", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        if(deepJET > JETT){
                                MC_tagged *= BTagEffValue;
                                data_tagged *= deepJetSF*BTagEffValue;
                                data_tagged_upCorr *= deepJetSF_upCorr*BTagEffValue;
                                data_tagged_downCorr *= deepJetSF_downCorr*BTagEffValue;
                                data_tagged_upUncorr *= deepJetSF_upUncorr*BTagEffValue;
                                data_tagged_downUncorr *= deepJetSF_downUncorr*BTagEffValue;
                        }
                        else{
                                MC_notTagged *= (1 - BTagEffValue);
                                data_notTagged *= (1 - deepJetSF*BTagEffValue);
                                data_notTagged_upCorr *= (1 - deepJetSF_upCorr*BTagEffValue);
                                data_notTagged_downCorr *= (1 - deepJetSF_downCorr*BTagEffValue);
                                data_notTagged_upUncorr *= (1 - deepJetSF_upUncorr*BTagEffValue);
                                data_notTagged_downUncorr *= (1 - deepJetSF_downUncorr*BTagEffValue);
                        }
                }
		else if(HadFlav==5){
			BTagEffValue = DeepJET_BJetEff->GetBinContent(xbin,ybin);
			deepJetSF = corrector_deepJet_bcFlav->evaluate({"central", "T", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
			deepJetSF_upCorr = corrector_deepJet_bcFlav->evaluate({"up_correlated", "T", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
			deepJetSF_downCorr = corrector_deepJet_bcFlav->evaluate({"down_correlated", "T", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
			deepJetSF_upUncorr = corrector_deepJet_bcFlav->evaluate({"up_uncorrelated", "T", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJetSF_downUncorr = corrector_deepJet_bcFlav->evaluate({"down_uncorrelated", "T", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
			if(deepJET > JETT){
                                MC_tagged *= BTagEffValue;
				data_tagged *= deepJetSF*BTagEffValue;
                  		data_tagged_upCorr *= deepJetSF_upCorr*BTagEffValue;
                  		data_tagged_downCorr *= deepJetSF_downCorr*BTagEffValue;
				data_tagged_upUncorr *= deepJetSF_upUncorr*BTagEffValue;
                                data_tagged_downUncorr *= deepJetSF_downUncorr*BTagEffValue;
			}
			else{
				MC_notTagged *= (1 - BTagEffValue);
                                data_notTagged *= (1 - deepJetSF*BTagEffValue);
                                data_notTagged_upCorr *= (1 - deepJetSF_upCorr*BTagEffValue);
                                data_notTagged_downCorr *= (1 - deepJetSF_downCorr*BTagEffValue);
                                data_notTagged_upUncorr *= (1 - deepJetSF_upUncorr*BTagEffValue);
                                data_notTagged_downUncorr *= (1 - deepJetSF_downUncorr*BTagEffValue);
			}
		}

		/*
		double epsilon = 1e-12;
            	if((abs(MC_tagged)<epsilon )||(abs(MC_notTagged)<epsilon )||(abs(data_tagged)<epsilon )||(abs(data_notTagged)<epsilon )){
                	cout << "BTagEffValue/deepJetSF/MC_tagged/MC_notTagged/data_tagged/data_notTagged: " <<BTagEffValue<< " / " << deepJetSF<< " / " << MC_tagged<< " / " << MC_notTagged << " / " <<data_tagged << " / " << data_notTagged <<endl;
		}
		*/

		//BTag Event Weight & uncerainty calculation
		if(MC_tagged*MC_notTagged !=0){
                        BTagWt =  (data_tagged*data_notTagged) / (MC_tagged*MC_notTagged);
                 
		        //MC portion doesn't contain any scale factor portion, so there is no "up" or "down"
			BTagWt_upCorr  =  (data_tagged_upCorr*data_notTagged_upCorr) / (MC_tagged*MC_notTagged);
                        BTagWt_downCorr = (data_tagged_downCorr*data_notTagged_downCorr) / (MC_tagged*MC_notTagged);
                        BTagWt_upUncorr  =  (data_tagged_upUncorr*data_notTagged_upUncorr) / (MC_tagged*MC_notTagged);
                        BTagWt_downUncorr = (data_tagged_downUncorr*data_notTagged_downUncorr) / (MC_tagged*MC_notTagged);
                }
		
		/*
		cout<<"BTagWt : "<<BTagWt<<endl;
                if ((BTagWt != BTagWt) || (std::isinf(BTagWt)) || (BTagWt < 1e-9)){
                        cout << "data_tagged/data_notTagged/MC_tagged/MC_notTagged: " <<data_tagged << "/" <<data_notTagged << "/" << MC_notTagged<< "/" << MC_notTagged<<endl;
                }
		*/

		//SF Vs. Jet PT for deepCSV & deepJET for 3 WPs - No efficency applied - only Reco-level (like jets)
		double deepJETT_SF, deepJETM_SF, deepJETL_SF;
		double deepCSVT_SF, deepCSVM_SF, deepCSVL_SF;
		if(HadFlav==0){
			deepJETT_SF = corrector_deepJet_lFlav->evaluate({"central", "T", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJETM_SF = corrector_deepJet_lFlav->evaluate({"central", "M", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJETL_SF = corrector_deepJet_lFlav->evaluate({"central", "L", 0, std::abs(tmp4v.eta()), tmp4v.perp()});

			deepCSVT_SF = corrector_deepCSV_lFlav->evaluate({"central", "T", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
			deepCSVM_SF = corrector_deepCSV_lFlav->evaluate({"central", "M", 0, std::abs(tmp4v.eta()), tmp4v.perp()});
			deepCSVL_SF = corrector_deepCSV_lFlav->evaluate({"central", "L", 0, std::abs(tmp4v.eta()), tmp4v.perp()});			

			LdeepJETT_SF->Fill(tmp4v.perp(),deepJETT_SF,weighttrg); 
			LdeepJETM_SF->Fill(tmp4v.perp(),deepJETM_SF,weighttrg);
			LdeepJETL_SF->Fill(tmp4v.perp(),deepJETL_SF,weighttrg);

			LdeepCSVT_SF->Fill(tmp4v.perp(),deepCSVT_SF,weighttrg);
			LdeepCSVM_SF->Fill(tmp4v.perp(),deepCSVM_SF,weighttrg);
			LdeepCSVL_SF->Fill(tmp4v.perp(),deepCSVL_SF,weighttrg);
		}
		else if(HadFlav==4){
			deepJETT_SF = corrector_deepJet_bcFlav->evaluate({"central", "T", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJETM_SF = corrector_deepJet_bcFlav->evaluate({"central", "M", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJETL_SF = corrector_deepJet_bcFlav->evaluate({"central", "L", 4, std::abs(tmp4v.eta()), tmp4v.perp()});

                        deepCSVT_SF = corrector_deepCSV_bcFlav->evaluate({"central", "T", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepCSVM_SF = corrector_deepCSV_bcFlav->evaluate({"central", "M", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepCSVL_SF = corrector_deepCSV_bcFlav->evaluate({"central", "L", 4, std::abs(tmp4v.eta()), tmp4v.perp()});
	
			CdeepJETT_SF->Fill(tmp4v.perp(),deepJETT_SF,weighttrg);
			CdeepJETM_SF->Fill(tmp4v.perp(),deepJETM_SF,weighttrg);
			CdeepJETL_SF->Fill(tmp4v.perp(),deepJETL_SF,weighttrg);

			CdeepCSVT_SF->Fill(tmp4v.perp(),deepCSVT_SF,weighttrg);
			CdeepCSVM_SF->Fill(tmp4v.perp(),deepCSVM_SF,weighttrg);
			CdeepCSVL_SF->Fill(tmp4v.perp(),deepCSVL_SF,weighttrg);
		}
		else if(HadFlav==5){
			deepJETT_SF = corrector_deepJet_bcFlav->evaluate({"central", "T", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJETM_SF = corrector_deepJet_bcFlav->evaluate({"central", "M", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepJETL_SF = corrector_deepJet_bcFlav->evaluate({"central", "L", 5, std::abs(tmp4v.eta()), tmp4v.perp()});

                        deepCSVT_SF = corrector_deepCSV_bcFlav->evaluate({"central", "T", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepCSVM_SF = corrector_deepCSV_bcFlav->evaluate({"central", "M", 5, std::abs(tmp4v.eta()), tmp4v.perp()});
                        deepCSVL_SF = corrector_deepCSV_bcFlav->evaluate({"central", "L", 5, std::abs(tmp4v.eta()), tmp4v.perp()});

			BdeepJETT_SF->Fill(tmp4v.perp(),deepJETT_SF,weighttrg);
			BdeepJETM_SF->Fill(tmp4v.perp(),deepJETM_SF,weighttrg);
			BdeepJETL_SF->Fill(tmp4v.perp(),deepJETL_SF,weighttrg);

			BdeepCSVT_SF->Fill(tmp4v.perp(),deepCSVT_SF,weighttrg);
			BdeepCSVM_SF->Fill(tmp4v.perp(),deepCSVM_SF,weighttrg);
			BdeepCSVL_SF->Fill(tmp4v.perp(),deepCSVL_SF,weighttrg);
		}
#endif	
	
		if(isrc==0){
                        if(deepJET > JETT) {
				if ((isInEtaRange[iet])) {
					h_bjet_deepJETT_pt_NoSF[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg);
					h_bjet_deepJETT_pt[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg*BTagWt);
				}
                                if (isPt && iet==0) {
					h_bjet_deepJETT_eta_NoSF->Fill(tmp4v.eta(), weighttrg);
					h_bjet_deepJETT_eta->Fill(tmp4v.eta(), weighttrg*BTagWt);
				}
                                if (isEta && isPt) {
					h_bjet_deepJETT_phi_NoSF->Fill(tmp4v.phi(), weighttrg);
					h_bjet_deepJETT_phi->Fill(tmp4v.phi(), weighttrg*BTagWt);
				}
                        }else{
				if ((isInEtaRange[iet])) {
					h_nonbjet_deepJETT_pt_NoSF[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg);
					h_nonbjet_deepJETT_pt[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg*BTagWt);
				}
                                if (isPt && iet==0) {
					h_nonbjet_deepJETT_eta_NoSF->Fill(tmp4v.eta(), weighttrg);
					h_nonbjet_deepJETT_eta->Fill(tmp4v.eta(), weighttrg*BTagWt);
				}
                                if (isEta && isPt) {
					h_nonbjet_deepJETT_phi_NoSF->Fill(tmp4v.phi(), weighttrg);
					h_nonbjet_deepJETT_phi->Fill(tmp4v.phi(), weighttrg*BTagWt);
				}
                       	}

			if(ijet==0){
				if(deepJET > JETT) {
					if ((isInEtaRange[iet])) {
						h_bjet1_deepJETT_pt_NoSF[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg);
						h_bjet1_deepJETT_pt[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg*BTagWt);
					}
	                                if (isPt && iet==0) {
						h_bjet1_deepJETT_eta_NoSF->Fill(tmp4v.eta(), weighttrg);
						h_bjet1_deepJETT_eta->Fill(tmp4v.eta(), weighttrg*BTagWt);
					}
        	                        if (isEta && isPt) {
						h_bjet1_deepJETT_phi_NoSF->Fill(tmp4v.phi(), weighttrg);
						h_bjet1_deepJETT_phi->Fill(tmp4v.phi(), weighttrg*BTagWt);
					}
				}
				else{
					if ((isInEtaRange[iet])) {
						h_nonbjet1_deepJETT_pt_NoSF[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg);
						h_nonbjet1_deepJETT_pt[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg*BTagWt);
					}
                                	if (isPt && iet==0) {
						h_nonbjet1_deepJETT_eta_NoSF->Fill(tmp4v.eta(), weighttrg);
						h_nonbjet1_deepJETT_eta->Fill(tmp4v.eta(), weighttrg*BTagWt);
					}
                                	if (isEta && isPt) {
						h_nonbjet1_deepJETT_phi_NoSF->Fill(tmp4v.phi(), weighttrg);
						h_nonbjet1_deepJETT_phi->Fill(tmp4v.phi(), weighttrg*BTagWt);
					}
				}
			}//if(ijet==0){
			
			if(ijet==1){
                                if(deepJET > JETT) {
                                        if ((isInEtaRange[iet])) {
						h_bjet2_deepJETT_pt_NoSF[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg);
						h_bjet2_deepJETT_pt[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg*BTagWt);
					}
                                        if (isPt && iet==0) {
						h_bjet2_deepJETT_eta_NoSF->Fill(tmp4v.eta(), weighttrg);
						h_bjet2_deepJETT_eta->Fill(tmp4v.eta(), weighttrg*BTagWt);
					}
                                        if (isEta && isPt) {
						h_bjet2_deepJETT_phi_NoSF->Fill(tmp4v.phi(), weighttrg);
						h_bjet2_deepJETT_phi->Fill(tmp4v.phi(), weighttrg*BTagWt);
					}
                                }
                                else{
                                        if ((isInEtaRange[iet])) {
						h_nonbjet2_deepJETT_pt_NoSF[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg);
						h_nonbjet2_deepJETT_pt[iet]->Fill((*ak4PFJets)[ireorjt].pt(), weighttrg*BTagWt);
					}
                                        if (isPt && iet==0) {
						h_nonbjet2_deepJETT_eta_NoSF->Fill(tmp4v.eta(), weighttrg);
						h_nonbjet2_deepJETT_eta->Fill(tmp4v.eta(), weighttrg*BTagWt);
					}
                                        if (isEta && isPt) {
						h_nonbjet2_deepJETT_phi_NoSF->Fill(tmp4v.phi(), weighttrg);
						h_nonbjet2_deepJETT_phi->Fill(tmp4v.phi(), weighttrg*BTagWt);
					}
                                }
			}//if(ijet==1){
		}//if (isrc==0) {

//////////////////
//--BJet Stuff--//
//////////////////
			if(isrc==0){
				if(isEta && isPt){
					//Fraction
					Reco_bjet_fra_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
					Reco_bjet_fra->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
			
					if(deepCSV > CSVT){
						Reco_CSVT_bjet_fra_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
					        Reco_CSVT_bjet_fra->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
					}
                                        if(deepCSV > CSVM){
						Reco_CSVM_bjet_fra_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_bjet_fra->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
					}
					if(deepCSV > CSVL){
						Reco_CSVL_bjet_fra_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_bjet_fra->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
					}

					if(deepJET > JETT){
						Reco_JETT_bjet_fra_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_bjet_fra->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
					}
                                        if(deepJET > JETM){
						Reco_JETM_bjet_fra_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_bjet_fra->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
					}
                                        if(deepJET > JETL){
						Reco_JETL_bjet_fra_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_bjet_fra->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
					}

#ifdef FLAV
					//DeepCSV Tight Working Point
					//Efficiency
					if(HadFlav == 5){
						Reco_CSVT_bjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_bjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
						if(deepCSV > CSVT){
							Reco_CSVT_bjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_bjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
						}
					}
					if(HadFlav == 4){
                                                Reco_CSVT_cjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_cjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVT){
                                                        Reco_CSVT_cjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_cjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 0){
                                                Reco_CSVT_ljet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_ljet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVT){
                                                        Reco_CSVT_ljet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_ljet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//MisTag
					if(HadFlav == 4 || HadFlav == 0){
                                                Reco_CSVT_bjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_bjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVT){
                                                        Reco_CSVT_bjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_bjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 4){
						Reco_CSVT_cjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_cjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
						if(deepCSV > CSVT){
							Reco_CSVT_cjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_cjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
						}
					}
					if(HadFlav == 0){
                                                Reco_CSVT_ljet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_ljet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVT){
                                                        Reco_CSVT_ljet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_ljet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Purity
					if(deepCSV > CSVT){
						Reco_CSVT_bjet_pur_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_bjet_pur_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
						if(HadFlav == 5){
							Reco_CSVT_bjet_pur_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_bjet_pur_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
						}
					}
					//Contamination
					if(deepCSV > CSVT){
                                                Reco_CSVT_bjet_con_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVT_bjet_con_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 4 || HadFlav == 0){
                                                        Reco_CSVT_bjet_con_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVT_bjet_con_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }

					//DeepCSV Medium Working Point
					if(HadFlav == 5){
                                                Reco_CSVM_bjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_bjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVM){
                                                        Reco_CSVM_bjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_bjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 4){
                                                Reco_CSVM_cjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_cjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVM){
                                                        Reco_CSVM_cjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_cjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 0){
                                                Reco_CSVM_ljet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_ljet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVM){
                                                        Reco_CSVM_ljet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_ljet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//MisTag
					if(HadFlav == 4 || HadFlav == 0){
                                                Reco_CSVM_bjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_bjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVM){
                                                        Reco_CSVM_bjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_bjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 4){
                                                Reco_CSVM_cjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_cjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVM){
                                                        Reco_CSVM_cjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_cjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 0){
                                                Reco_CSVM_ljet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_ljet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVM){
                                                        Reco_CSVM_ljet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_ljet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Purity
					if(deepCSV > CSVM){
                                                Reco_CSVM_bjet_pur_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_bjet_pur_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 5){
                                                        Reco_CSVM_bjet_pur_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_bjet_pur_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Contamination
					 if(deepCSV > CSVM){
                                                Reco_CSVM_bjet_con_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVM_bjet_con_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 4 || HadFlav == 0){
                                                        Reco_CSVM_bjet_con_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVM_bjet_con_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }

					//DeepCSV Loose Working Point
					if(HadFlav == 5){
                                                Reco_CSVL_bjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_bjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVL){
                                                        Reco_CSVL_bjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_bjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 4){
                                                Reco_CSVL_cjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_cjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVL){
                                                        Reco_CSVL_cjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_cjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 0){
                                                Reco_CSVL_ljet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_ljet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVL){
                                                        Reco_CSVL_ljet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_ljet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//MisTag
					if(HadFlav == 4 || HadFlav == 0){
                                                Reco_CSVL_bjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_bjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVL){
                                                        Reco_CSVL_bjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_bjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 4){
                                                Reco_CSVL_cjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_cjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVL){
                                                        Reco_CSVL_cjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_cjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 0){
                                                Reco_CSVL_ljet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_ljet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepCSV > CSVL){
                                                        Reco_CSVL_ljet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_ljet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Purity
					if(deepCSV > CSVL){
                                                Reco_CSVL_bjet_pur_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_bjet_pur_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 5){
                                                        Reco_CSVL_bjet_pur_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_bjet_pur_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Contamination
					 if(deepCSV > CSVL){
                                                Reco_CSVL_bjet_con_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_CSVL_bjet_con_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 4 || HadFlav == 0){
                                                        Reco_CSVL_bjet_con_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_CSVL_bjet_con_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }

					//DeepJET Tight Working Point
					if(HadFlav == 5){
                                                Reco_JETT_bjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_bjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETT){
                                                        Reco_JETT_bjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_bjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 4){
                                                Reco_JETT_cjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_cjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETT){
                                                        Reco_JETT_cjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_cjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 0){
                                                Reco_JETT_ljet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_ljet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETT){
                                                        Reco_JETT_ljet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_ljet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//MisTag
					if(HadFlav == 4 || HadFlav == 0){
                                                Reco_JETT_bjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_bjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETT){
                                                        Reco_JETT_bjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_bjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 4){
                                                Reco_JETT_cjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_cjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETT){
                                                        Reco_JETT_cjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_cjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 0){
                                                Reco_JETT_ljet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_ljet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETT){
                                                        Reco_JETT_ljet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_ljet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Purity
					if(deepJET > JETT){
                                                Reco_JETT_bjet_pur_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_bjet_pur_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 5){
                                                        Reco_JETT_bjet_pur_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_bjet_pur_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Contamination
					if(deepJET > JETT){
                                                Reco_JETT_bjet_con_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETT_bjet_con_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 4 || HadFlav == 0){
                                                        Reco_JETT_bjet_con_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETT_bjet_con_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					
					//DeepJET Medium Working Point
					if(HadFlav == 5){
                                                Reco_JETM_bjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_bjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETM){
                                                        Reco_JETM_bjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_bjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 4){
                                                Reco_JETM_cjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_cjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETM){
                                                        Reco_JETM_cjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_cjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 0){
                                                Reco_JETM_ljet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_ljet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETM){
                                                        Reco_JETM_ljet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_ljet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//MisTag
					if(HadFlav == 4 || HadFlav == 0){
                                                Reco_JETM_bjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_bjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETM){
                                                        Reco_JETM_bjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_bjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 4){
                                                Reco_JETM_cjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_cjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETM){
                                                        Reco_JETM_cjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_cjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 0){
                                                Reco_JETM_ljet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_ljet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETM){
                                                        Reco_JETM_ljet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_ljet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Purity
					if(deepJET > JETM){
                                                Reco_JETM_bjet_pur_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_bjet_pur_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 5){
                                                        Reco_JETM_bjet_pur_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_bjet_pur_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Contamination
					if(deepJET > JETM){
                                                Reco_JETM_bjet_con_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETM_bjet_con_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 4 || HadFlav == 0){
                                                        Reco_JETM_bjet_con_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETM_bjet_con_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }

					//DeepJET Light Working Point
					if(HadFlav == 5){
                                                Reco_JETL_bjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_bjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETL){
                                                        Reco_JETL_bjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_bjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 4){
                                                Reco_JETL_cjet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_cjet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETL){
                                                        Reco_JETL_cjet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_cjet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
                                        if(HadFlav == 0){
                                                Reco_JETL_ljet_eff_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_ljet_eff_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETL){
                                                        Reco_JETL_ljet_eff_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_ljet_eff_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//MisTag
					if(HadFlav == 4 || HadFlav == 0){
                                                Reco_JETL_bjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_bjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETL){
                                                        Reco_JETL_bjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_bjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 4){
                                                Reco_JETL_cjet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_cjet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETL){
                                                        Reco_JETL_cjet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_cjet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					if(HadFlav == 0){
                                                Reco_JETL_ljet_miss_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_ljet_miss_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(deepJET > JETL){
                                                        Reco_JETL_ljet_miss_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_ljet_miss_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Purity
					if(deepJET >= JETL){
                                                Reco_JETL_bjet_pur_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_bjet_pur_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 5){
                                                        Reco_JETL_bjet_pur_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_bjet_pur_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
					//Contamination
					if(deepJET > JETL){
                                                Reco_JETL_bjet_con_den_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
						Reco_JETL_bjet_con_den->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                if(HadFlav == 4 || HadFlav == 0){
                                                        Reco_JETL_bjet_con_num_NoSF->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg);
							Reco_JETL_bjet_con_num->Fill(tmp4v.perp(),tmp4v.eta(),weighttrg*BTagWt);
                                                }
                                        }
#endif

				}
			}	
//#endif		

		  if (isrc==0) {

		    if ((isInEtaRange[iet])) {recojt_CHF->Fill(CHF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NHF->Fill(NHF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NEMF->Fill(NEMF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_CHM->Fill(CHM, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NumNeutralParticles->Fill(NumNeutralParticles, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_CEMF->Fill(CEMF, weighttrg);}
		    if ((isInEtaRange[iet])) {recojt_NumConst->Fill(NumConst, weighttrg);}
 
		    if ((isInEtaRange[iet])) {recojt_pt[iet]->Fill(tmp4v.perp(), weighttrg); recoJetpT = tmp4v.perp();}
		    if (isPt && iet==0) {recojt_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {recojt_phi->Fill(tmp4v.phi(), weighttrg);}
		    //if (isEta && ncount==1) {recoht2_pt[iet]->Fill(aveleadingpt,weighttrg);}
		    if (isEta && ncount==1) {recoht2_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()),weighttrg);}

#ifdef FLAV		
			if(abs(ParFlav==21 || ParFlav==9)){//gluon-jet
				if (isInEtaRange[iet]) {recojtg_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtg_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtg_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==2){//u-jet
				if (isInEtaRange[iet]) {recojtu_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtu_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtu_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-2){//ubar-jet
                                if (isInEtaRange[iet]) {recojtubar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojtubar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojtubar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==1){//d-jet
				if (isInEtaRange[iet]) {recojtd_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
	                        if (isPt && iet==0) {recojtd_eta->Fill(tmp4v.eta(), weighttrg);}
        	                if (isEta && isPt) {recojtd_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-1){//dbar-jet
                                if (isInEtaRange[iet]) {recojtdbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojtdbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojtdbar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==5){//b-jet
				if (isInEtaRange[iet]) {recojtb_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojtb_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojtb_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-5){//bbar-jet
                                if (isInEtaRange[iet]) {recojtbbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojtbbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojtbbar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else{//others
				if (isInEtaRange[iet]) {recojto_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojto_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojto_phi->Fill(tmp4v.phi(), weighttrg);}
			}
#endif
		  }//if (isrc==0) {
		
		if (isrc==0) { 
		  if(ijet==0) { 
		    if (isInEtaRange[iet]) {recojt1_pt[iet]->Fill(tmp4v.perp(), weighttrg); recojet1_pt = tmp4v.perp();} 
		    if (isPt && iet==0) {recojt1_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {recojt1_phi->Fill(tmp4v.phi(), weighttrg);}
	
			if(deepJET > JETT && isInEtaRange[iet]){recobjet1_pt_deepJETT = tmp4v.perp();};
#ifdef FLAV
		    	if(abs(ParFlav==21 || ParFlav==9)){//gluon-jet
		  	  	if (isInEtaRange[iet]) {recojt1g_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1g_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1g_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(ParFlav==2){//u-jet
				if (isInEtaRange[iet]) {recojt1u_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1u_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1u_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-2){//ubar-jet
                                if (isInEtaRange[iet]) {recojt1ubar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1ubar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1ubar_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(ParFlav==1){//d-jet
				if (isInEtaRange[iet]) {recojt1d_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1d_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1d_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-1){//dbar-jet
                                if (isInEtaRange[iet]) {recojt1dbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1dbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1dbar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==5){//b-jet
                                if (isInEtaRange[iet]) {recojt1b_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1b_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1b_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-5){//bbar-jet
                                if (isInEtaRange[iet]) {recojt1bbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1bbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1bbar_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{//others
				if (isInEtaRange[iet]) {recojt1o_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt1o_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt1o_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
#endif				
		  } else if(ijet==1){
		    if (isInEtaRange[iet]) {recojt2_pt[iet]->Fill(tmp4v.perp(), weighttrg); recojet2_pt = tmp4v.perp();}
		    if (isPt && iet==0) {recojt2_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {recojt2_phi->Fill(tmp4v.phi(), weighttrg);}

			if(deepJET > JETT && isInEtaRange[iet]){recobjet2_pt_deepJETT = tmp4v.perp();};

		    if (isInEtaRange[iet] && ncount==2) { 
		      if (irecoht>=0 && irecoht<nHLTmx) { 
			//recojtave_pt[iet][irecoht]->Fill(aveleadingpt, weighttrg);
			//recojtavewt1_pt[iet][irecoht]->Fill(aveleadingpt);
			recojtave_pt[iet][irecoht]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()), weighttrg);
                        recojtavewt1_pt[iet][irecoht]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()));
		      }
		      
		      //recojtallavewt1_pt[iet]->Fill(aveleadingpt);
		      //recojtallave_pt[iet]->Fill(aveleadingpt, weighttrg);
		      recojtallavewt1_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()));
                      recojtallave_pt[iet]->Fill(0.5*(tmpjt4v[0].perp()+tmpjt4v[1].perp()), weighttrg);
		    }
#ifdef FLAV
			if(abs(ParFlav==21 || ParFlav==9)){//gluon-jet
                                if (isInEtaRange[iet]) {recojt2g_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2g_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2g_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(ParFlav==2){//u-jet
                        	if (isInEtaRange[iet]) {recojt2u_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2u_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2u_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else if(ParFlav==-2){//ubar-jet
                                if (isInEtaRange[iet]) {recojt2ubar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2ubar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2ubar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==1){//d-jet
                        	if (isInEtaRange[iet]) {recojt2d_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2d_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2d_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-1){//dbar-jet
                                if (isInEtaRange[iet]) {recojt2dbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2dbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2dbar_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==5){//b-jet
                                if (isInEtaRange[iet]) {recojt2b_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2b_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2b_phi->Fill(tmp4v.phi(), weighttrg);}
			}else if(ParFlav==-5){//bbar-jet
                                if (isInEtaRange[iet]) {recojt2bbar_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2bbar_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2bbar_phi->Fill(tmp4v.phi(), weighttrg);}
                        }else{//others
                                if (isInEtaRange[iet]) {recojt2o_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
                                if (isPt && iet==0) {recojt2o_eta->Fill(tmp4v.eta(), weighttrg);}
                                if (isEta && isPt) {recojt2o_phi->Fill(tmp4v.phi(), weighttrg);}
                        }
#endif
		  } else if(ijet==2) {
		    if (isInEtaRange[iet]) {recojt3_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0 ) {recojt3_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {recojt3_phi->Fill(tmp4v.phi(), weighttrg);} 
		  }
		  
		  if (tmpjt4v.size()==2 && isInEtaRange[iet]) { 
		    double dphi = dPhi(tmpjt4v[0].phi(), tmpjt4v[1].phi());
		    double dpt = tmpjt4v[0].perp() - tmpjt4v[1].perp();
		    double dperp = fabs(tmpjt4v[1].perp()*sin(dphi))/tmpjt4v[0].perp();
		    hjetdphi[iet]->Fill(dphi, weighttrg);
		    hjetdpt[iet]->Fill(dpt, weighttrg);
		    hjetptbypl[iet]->Fill(dperp, weighttrg);
		    hjetpt2bypt1[iet]->Fill(tmpjt4v[1].perp()/tmpjt4v[0].perp(), weighttrg);
		  }
		  
		  if (tmpjt4v.size()==3) {hjetpt3bypt2[iet]->Fill(tmpjt4v[2].perp()/tmpjt4v[1].perp(), weighttrg);}
		  } //if (isrc==0) {
		
		//int nchg=0;
		nchg = 0, nchg1 = 0, nchg2 = 0, /*nchg1_bjet =0, nchg2_bjet =0,*/ nchg1_bjet_deepJETT =0, nchg2_bjet_deepJETT =0;
#ifdef FLAV
		nchg1_bjet =0, nchg2_bjet =0;
#endif
		std::vector<reco::CandidatePtr> daus((*ak4PFJets)[ireorjt].daughterPtrVector());           
		std::sort(daus.begin(), daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });               
      		                                                                   
		for (unsigned int i2 = 0; i2< daus.size(); ++i2) { //particle loop  
		  const pat::PackedCandidate &pfcand = dynamic_cast<const pat::PackedCandidate &>(*daus[i2]);
		  int charge = pfcand.charge();
		  HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
		  //tmpcand4v.push_back(cand4v);	
                  //nchg++;
		  if(charge !=0){nchg++;}
		  //if(ijet==0 && charge !=0){nchg1++;}
		  //if(ijet==1 && charge !=0){nchg2++;}	
                  //h_nchg[iet]->Fill(nchg, weighttrg);   // need to check
		  //if (cand4v.perp()<0.5) continue;
		  //if (ncount<=2 && isEta && isPt) { 
		  //recomom[isrc][1][iet].push_back(cand4v);
		    
		    if (charge !=0) {
		      recomom[isrc][1][iet].push_back(cand4v);
                      //if(cand4v.perp()>1.0){mom[isrc][iet].push_back(cand4v);}
#ifdef TRACKSYS
		      if (gRandom->Uniform() < 0.96) {recomom[isrc][2][iet].push_back(cand4v); }
#endif
		}
		  if (isrc==0) { 
		    //if (isEta && isPt) {
		      if (charge !=0) {
			recochg_phi->Fill(cand4v.phi(), weighttrg);
			recochg_pt->Fill(cand4v.perp(), weighttrg);
			recochg_eta->Fill(cand4v.eta(), weighttrg);
		      }
		    
		      if (ijet==0 && charge !=0) {
			if(i2==0){
				recoCandX1_J1 = cand4v.perp();			
				recojetchg1_cand1->Fill(cand4v.perp(),weighttrg);
				}
			if(i2==1){recoCandX2_J1 = cand4v.perp();}
			if(i2==2){recoCandX3_J1 = cand4v.perp();}

			//BJet Tagging Info used
			if(deepJET > JETT){
				nchg1_bjet_deepJETT++;
                                hchpt1_bjet_deepJETT->Fill(tmp4v.perp(), nchg1, weighttrg*BTagWt);
                                hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1->Fill(cand4v.perp(), nchg1, weighttrg*BTagWt);

				hchpt1_bjet_deepJETT_NoSF->Fill(tmp4v.perp(), nchg1, weighttrg);
                                hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J1_NoSF->Fill(cand4v.perp(), nchg1, weighttrg);

				if(i2==0){
					recoCandX1_bjet_deepJETT_J1 = cand4v.perp();
                                	recobjetchg1_deepJETT_cand1_NoSF->Fill(cand4v.perp(),weighttrg);
					recobjetchg1_deepJETT_cand1->Fill(cand4v.perp(),weighttrg*BTagWt);
				}	
				if(i2==1){recoCandX2_bjet_deepJETT_J1 = cand4v.perp();}
				if(i2==2){recoCandX3_bjet_deepJETT_J1 = cand4v.perp();}
			}
			
                        recochg1_phi->Fill(cand4v.phi(), weighttrg);
                        recochg1_pt->Fill(cand4v.perp(), weighttrg);
                        recochg1_eta->Fill(cand4v.eta(), weighttrg);

			nchg1++;
			hchpt1->Fill(tmp4v.perp(), nchg1, weighttrg);
			hprof_Reco_ntrack_vs_PTtrack_J1->Fill(cand4v.perp(), nchg1, weighttrg);
#ifdef FLAV
			if(abs(ParFlav==21 || ParFlav==9)){hchpt1_gjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
			if(ParFlav==2){hchpt1_ujet->Fill(tmp4v.perp(), nchg1, weighttrg);}
			if(ParFlav==-2){hchpt1_ubarjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
			if(ParFlav==1){hchpt1_djet->Fill(tmp4v.perp(), nchg1, weighttrg);}
			if(ParFlav==-1){hchpt1_dbarjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
			if(ParFlav==5){hchpt1_bjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
			if(ParFlav==-5){hchpt1_bbarjet->Fill(tmp4v.perp(), nchg1, weighttrg);}
			if(ParFlav==5 || ParFlav==-5){
				nchg1_bjet++;
                                hchpt1_bjet->Fill(tmp4v.perp(), nchg1, weighttrg);
                                hprof_Reco_ntrack_vs_PTtrack_bjet_J1->Fill(cand4v.perp(), nchg1, weighttrg);

                                if(i2==0){
                                        recoCandX1_bjet_J1 = cand4v.perp();
                                        recobjetchg1_cand1->Fill(cand4v.perp(),weighttrg);
                                }
                                if(i2==1){recoCandX2_bjet_J1 = cand4v.perp();}
                                if(i2==2){recoCandX3_bjet_J1 = cand4v.perp();}
			}
#endif
		      }
                      else if (ijet==1 && charge !=0) {
			if(i2==0){
				recoCandX1_J2 = cand4v.perp();
				recojetchg2_cand1->Fill(cand4v.perp(),weighttrg);
				}			
			if(i2==1){recoCandX2_J2 = cand4v.perp();}
                        if(i2==2){recoCandX3_J2 = cand4v.perp();}

			if(deepJET > JETT){
				nchg2_bjet_deepJETT++;
                                hchpt2_bjet_deepJETT->Fill(tmp4v.perp(), nchg2, weighttrg*BTagWt);
                                hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2->Fill(cand4v.perp(), nchg2, weighttrg*BTagWt);

				hchpt2_bjet_deepJETT_NoSF->Fill(tmp4v.perp(), nchg2, weighttrg);
                                hprof_Reco_ntrack_vs_PTtrack_bjet_deepJETT_J2_NoSF->Fill(cand4v.perp(), nchg2, weighttrg);
		
				if(i2==0){
					recoCandX1_bjet_deepJETT_J2 = cand4v.perp();
                                	recobjetchg2_deepJETT_cand1_NoSF->Fill(cand4v.perp(),weighttrg);
					recobjetchg2_deepJETT_cand1->Fill(cand4v.perp(),weighttrg*BTagWt);
				}
				if(i2==1){recoCandX2_bjet_deepJETT_J2 = cand4v.perp();}
                                if(i2==2){recoCandX3_bjet_deepJETT_J2 = cand4v.perp();}		
			}
			
                        recochg2_phi->Fill(cand4v.phi(), weighttrg);
                        recochg2_pt->Fill(cand4v.perp(), weighttrg);
                        recochg2_eta->Fill(cand4v.eta(), weighttrg);

			nchg2++;
			hchpt2->Fill(tmp4v.perp(), nchg2, weighttrg);
			hprof_Reco_ntrack_vs_PTtrack_J2->Fill(cand4v.perp(), nchg2, weighttrg);	
#ifdef FLAV
			if(abs(ParFlav==21 || ParFlav==9)){hchpt2_gjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(ParFlav==2){hchpt2_ujet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(ParFlav==-2){hchpt2_ubarjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(ParFlav==1){hchpt2_djet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(ParFlav==-1){hchpt2_dbarjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
			if(ParFlav==5){hchpt2_bjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
                        if(ParFlav==-5){hchpt2_bbarjet->Fill(tmp4v.perp(), nchg2, weighttrg);}
			if(ParFlav==5 || ParFlav==-5){
				nchg2_bjet++;
                                hchpt2_bjet->Fill(tmp4v.perp(), nchg2, weighttrg);
                                hprof_Reco_ntrack_vs_PTtrack_bjet_J2->Fill(cand4v.perp(), nchg2, weighttrg);

                                if(i2==0){
                                        recoCandX1_bjet_J2 = cand4v.perp();
                                        recobjetchg2_cand1->Fill(cand4v.perp(),weighttrg);
                                }
                                if(i2==1){recoCandX2_bjet_J2 = cand4v.perp();}
                                if(i2==2){recoCandX3_bjet_J2 = cand4v.perp();}
			}
#endif
                      }
                      else if (ijet==2 && charge !=0) {
                        recochg3_phi->Fill(cand4v.phi(), weighttrg);
                        recochg3_pt->Fill(cand4v.perp(), weighttrg);
                        recochg3_eta->Fill(cand4v.eta(), weighttrg);
                      }       
		    }//if (isrc==0) {
		     //}
	} //for (unsigned int i2 = 0; i2< daus.size(); ++i2
	//cout<<" Reco particle momentum : "<<ijet1candsmomk1<<" Jet pt : "<<recojet1_test<<" JCO : "<<ijet1candsmomk1/recojet1_test<<endl;
        //cout<<"-------------"<<endl;
        h_nchg[iet]->Fill(nchg, weighttrg);    

if(ijet==0){
        for (int ik=0; ik<10; ik++){
#ifdef MATCHING
	if(jet_matches){
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

        	for (unsigned int imatched = 0; imatched < matched_recoparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recocand = static_cast<const pat::PackedCandidate&>(*matched_recoparts[imatched]);

                if (recocand.charge() == matched_recocand.charge() && deltaR(recocand, matched_recocand) < 1e-4) {
			int charge = recocand.charge();
			Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
			if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

				ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
        	                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                	        ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                      		ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				
				//b-jet Tight Working point
				if(deepJET > JETT) {
                                        ijet1candsmom_num_bjet_deepJETT[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_bjet_deepJETT[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_bjet_deepJETT[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_bjet_deepJETT[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_bjet_deepJETT[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_bjet_deepJETT[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#ifdef FLAV
				//Flavor Tagging
				if(abs(ParFlav==21 || ParFlav==9)){//gluon-jet
                                        ijet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(ParFlav==2){//u-jet
                                        ijet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(ParFlav==-2){//ubar-jet
                                        ijet1candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(ParFlav==1){//d-jet
                                        ijet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(ParFlav==-1){//dbar-jet
                                        ijet1candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(ParFlav==5){//b-jet
                                        ijet1candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(ParFlav==-5){//bbar-jet
                                        ijet1candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{//others
                                        ijet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
			//cout<<"pt before kill : "<<cand3v.perp()<<endl;
			if(cand3v.perp()<20.0){
				if (gRandom->Uniform() < 0.977){
					ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                	ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                	ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					//cout<<"pt after kill : "<<cand3v.perp()<<endl;
					}
				}
			else{
				if (gRandom->Uniform() < 0.99){
					ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                	ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                	ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}
			}
			
			//BJet
			if(deepJET > JETT) {
				if(cand3v.perp()<20.0){
                                	if (gRandom->Uniform() < 0.977){
						ijet1candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                ijet1candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                                ijet1_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                ijet1_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                ijet1_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                ijet1_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					}
				}
				else{
					if (gRandom->Uniform() < 0.99){
						ijet1candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                ijet1candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                                ijet1_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                ijet1_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                ijet1_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                ijet1_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					}
				}
			}
#endif

#ifdef TRACKPTUP
				ijet1candsmom_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                ijet1_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet1candsmom_bjet_deepJETT_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                	ijet1candsmom_bjet_deepJETT_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                	ijet1_bjet_deepJETT_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                	ijet1_bjet_deepJETT_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));
				}
#endif

#ifdef TRACKPTDOWN
				ijet1candsmom_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                ijet1_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet1candsmom_bjet_deepJETT_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                	ijet1candsmom_bjet_deepJETT_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                	ijet1_bjet_deepJETT_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                	ijet1_bjet_deepJETT_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));
				}
#endif
				}
			}
		}
	}
	}else{
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
			int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
				
				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

				ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

				//b-jet Tight Working point
				if(deepJET > JETT) {
                                        ijet1candsmom_num_bjet_deepJETT[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_bjet_deepJETT[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_bjet_deepJETT[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_bjet_deepJETT[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_bjet_deepJETT[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_bjet_deepJETT[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#ifdef FLAV
				//Flavor Tagging
				if(abs(ParFlav==21 || ParFlav==9)){//gluon-jet
                                        ijet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(ParFlav==2){//u-jet
                                        ijet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(ParFlav==-2){//ubar-jet
                                        ijet1candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(ParFlav==1){//d-jet
                                        ijet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(ParFlav==-1){//dbar-jet
                                        ijet1candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				}else if(ParFlav==5){//b-jet
                                        ijet1candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else if(ParFlav==-5){//bbar-jet
                                        ijet1candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }else{//others
                                        ijet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
#endif

#ifdef TRACKEFF
	
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }

			//BJet
			if(deepJET > JETT) {
				if(cand3v.perp()<20.0){
                                	if (gRandom->Uniform() < 0.977){
						ijet1candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        	ijet1candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                        	ijet1_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet1_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        	ijet1_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet1_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
				else{
					if (gRandom->Uniform() < 0.99){
						ijet1candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                         	               	ijet1candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                	        ijet1_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet1_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        	ijet1_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet1_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}	
			}
#endif

#ifdef TRACKPTUP
				ijet1candsmom_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                ijet1_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet1candsmom_bjet_deepJETT_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                	ijet1candsmom_bjet_deepJETT_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                	ijet1_bjet_deepJETT_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                	ijet1_bjet_deepJETT_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));
				}
#endif

#ifdef TRACKPTDOWN
				ijet1candsmom_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                ijet1candsmom_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                ijet1_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet1_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                ijet1_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet1_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet1candsmom_bjet_deepJETT_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                	ijet1candsmom_bjet_deepJETT_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                	ijet1_bjet_deepJETT_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                	ijet1_bjet_deepJETT_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet1_bjet_deepJETT_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));
				}
#endif
				}
			}
		}

#else

	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet1candsmom_den[ik][isrc] += (cand3v.perp());

                                ijet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

				//b-jet Tight Working point
                                if(deepJET > JETT) {
                                        ijet1candsmom_num_bjet_deepJETT[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet1candsmom_den_bjet_deepJETT[ik][isrc] += (cand3v.perp());

                                        ijet1_long_num_bjet_deepJETT[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_long_den_bjet_deepJETT[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet1_tran_num_bjet_deepJETT[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet1_tran_den_bjet_deepJETT[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }
			}
		}
#endif
	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
				ijet1candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
			}
		}
	}
}


if(ijet==1){
	for (int ik=0; ik<10; ik++){
#ifdef MATCHING
	if(jet_matches){
                for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

                for (unsigned int imatched = 0; imatched < matched_recoparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recocand = static_cast<const pat::PackedCandidate&>(*matched_recoparts[imatched]);

                if (recocand.charge() == matched_recocand.charge() && deltaR(recocand, matched_recocand) < 1e-4) {
                        int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){

				ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				ijet2candsmom_den[ik][isrc] += (cand3v.perp());

				ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                	        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        	ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        	ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				
				//b-jet Tight Working point
				if(deepJET > JETT) {
                                        ijet2candsmom_num_bjet_deepJETT[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_bjet_deepJETT[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_bjet_deepJETT[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_bjet_deepJETT[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_bjet_deepJETT[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_bjet_deepJETT[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                }

#ifdef FLAV	
			//Flavor Tagging	
			if(abs(ParFlav==21 || ParFlav==9)){//gluon-jet
                                ijet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(ParFlav==2){//u-jet
                                ijet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(ParFlav==-2){//ubar-jet
                                ijet2candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(ParFlav==1){//d-jet
                                ijet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(ParFlav==-1){//dbar-jet
                                ijet2candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(ParFlav==5){//b-jet
                                ijet2candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(ParFlav==-5){//bbar-jet
                                ijet2candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else{//others
                                ijet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }
#endif

#ifdef TRACKEFF
	
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }

			//BJet
			if(deepJET > JETT) {
				if(cand3v.perp()<20.0){
                                	if (gRandom->Uniform() < 0.977){
						ijet2candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        	ijet2candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                        	ijet2_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        	ijet2_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
				else{
					if (gRandom->Uniform() < 0.99){
						ijet2candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        	ijet2candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                        	ijet2_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        	ijet2_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
			}
#endif

#ifdef TRACKPTUP
                                ijet2candsmom_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                ijet2_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet2candsmom_bjet_deepJETT_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                	ijet2candsmom_bjet_deepJETT_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                	ijet2_bjet_deepJETT_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                	ijet2_bjet_deepJETT_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));
				}
#endif

#ifdef TRACKPTDOWN
                                ijet2candsmom_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                ijet2_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet2candsmom_bjet_deepJETT_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                	ijet2candsmom_bjet_deepJETT_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                	ijet2_bjet_deepJETT_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                	ijet2_bjet_deepJETT_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));
				}
#endif
					}
				}
			}
		}
	}else{
		for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
		
			ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			ijet2candsmom_den[ik][isrc] += (cand3v.perp());

			ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

			//b-jet Tight Working point
			if(deepJET > JETT) {
                        	ijet2candsmom_num_bjet_deepJETT[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_bjet_deepJETT[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_bjet_deepJETT[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_bjet_deepJETT[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_bjet_deepJETT[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_bjet_deepJETT[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}
#ifdef FLAV
			//Flavor Tagging
			if(abs(ParFlav==21 || ParFlav==9)){//gluon-jet
                                ijet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(ParFlav==2){//u-jet
                                ijet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(ParFlav==-2){//ubar-jet
                                ijet2candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(ParFlav==1){//d-jet
                                ijet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(ParFlav==-1){//dbar-jet
                                ijet2candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
			}else if(ParFlav==5){//b-jet
                                ijet2candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else if(ParFlav==-5){//bbar-jet
                                ijet2candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }else{//others
                                ijet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                        }
#endif

#ifdef TRACKEFF
		
			if(cand3v.perp()<20.0){
                                if (gRandom->Uniform() < 0.977){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                                }
                        else{
                                if (gRandom->Uniform() < 0.99){
                                        ijet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        ijet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        ijet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        ijet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        ijet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
                        }

			//BJet
			if(deepJET > JETT) {
				if(cand3v.perp()<20.0){
                                	if (gRandom->Uniform() < 0.977){
						ijet2candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        	ijet2candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                        	ijet2_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        	ijet2_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
				else{
					if (gRandom->Uniform() < 0.99){
						ijet2candsmom_bjet_deepJETT_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                        	ijet2candsmom_bjet_deepJETT_den_trackeff[ik][isrc] += (cand3v.perp());

                                        	ijet2_bjet_deepJETT_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        	ijet2_bjet_deepJETT_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        	ijet2_bjet_deepJETT_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
				}
			}

#endif

#ifdef TRACKPTUP
				ijet2candsmom_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                ijet2_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet2candsmom_bjet_deepJETT_num_trackpt1[ik][isrc] += charge*(pow((cand3v*1.015).perp(), kappa[ik]));
                                	ijet2candsmom_bjet_deepJETT_den_trackpt1[ik][isrc] += ((cand3v*1.015).perp());

                                	ijet2_bjet_deepJETT_long_num_trackpt1[ik][isrc] += (charge*(dotProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_long_den_trackpt1[ik][isrc] += (dotProductPower((cand3v*1.015),tmp3v,kappa[ik]));

                                	ijet2_bjet_deepJETT_tran_num_trackpt1[ik][isrc] += (charge*(crossProductPower((cand3v*1.015),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_tran_den_trackpt1[ik][isrc] += (crossProductPower((cand3v*1.015),tmp3v,kappa[ik]));
				}
#endif

#ifdef TRACKPTDOWN
				ijet2candsmom_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                ijet2candsmom_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                ijet2_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet2_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                ijet2_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                ijet2_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));

				//BJet
				if(deepJET > JETT) {
					ijet2candsmom_bjet_deepJETT_num_trackpt2[ik][isrc] += charge*(pow((cand3v*0.985).perp(), kappa[ik]));
                                	ijet2candsmom_bjet_deepJETT_den_trackpt2[ik][isrc] += ((cand3v*0.985).perp());

                                	ijet2_bjet_deepJETT_long_num_trackpt2[ik][isrc] += (charge*(dotProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_long_den_trackpt2[ik][isrc] += (dotProductPower((cand3v*0.985),tmp3v,kappa[ik]));

                                	ijet2_bjet_deepJETT_tran_num_trackpt2[ik][isrc] += (charge*(crossProductPower((cand3v*0.985),tmp3v,kappa[ik])));
                                	ijet2_bjet_deepJETT_tran_den_trackpt2[ik][isrc] += (crossProductPower((cand3v*0.985),tmp3v,kappa[ik]));
				}
#endif
				}
			}
		}

#else

	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
               
			ijet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
			ijet2candsmom_den[ik][isrc] += (cand3v.perp());

                        ijet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

			//b-jet Tight Working point
                        if(deepJET > JETT) {
                        	ijet2candsmom_num_bjet_deepJETT[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_bjet_deepJETT[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_bjet_deepJETT[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_bjet_deepJETT[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_bjet_deepJETT[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_bjet_deepJETT[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
           		}
		}
	}
#endif
	for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
			ijet2candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
			}
		}
	}
}

/*
//Tracking Effciency using Matching
if(ijet==0){
        for (int ik=0; ik<10; ik++){
#ifdef TRACKEFFMATCHING
        if(TrackJet_matches){
                for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

                for (unsigned int imatched = 0; imatched < matched_recotrackparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recotrackcand = static_cast<const pat::PackedCandidate&>(*matched_recotrackparts[imatched]);

                if (recocand.charge() == matched_recotrackcand.charge() && deltaR(recocand, matched_recotrackcand) < 1e-4) {
                        int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
#ifdef TRACKEFFDEBUG
                                ijet1candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet1candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                                ijet1_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet1_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet1_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
                                        }
                                }
                        }
                }
        }else{
                for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
#ifdef TRACKEFFDEBUG
                        ijet1candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                        ijet1candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                        ijet1_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet1_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet1_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet1_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
                        }
                }
        }
#endif
	}
}

if(ijet==1){
        for (int ik=0; ik<10; ik++){
#ifdef TRACKEFFMATCHING
        if(TrackJet_matches){
                for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);

                for (unsigned int imatched = 0; imatched < matched_recotrackparts.size(); ++imatched) {
                const pat::PackedCandidate& matched_recotrackcand = static_cast<const pat::PackedCandidate&>(*matched_recotrackparts[imatched]);

                if (recocand.charge() == matched_recotrackcand.charge() && deltaR(recocand, matched_recotrackcand) < 1e-4) {
                        int charge = recocand.charge();
                        Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
#ifdef TRACKEFFDEBUG
                                ijet2candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                ijet2candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                                ijet2_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                ijet2_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                ijet2_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
                                        }
                                }
                        }
                }
        }else{
                for (unsigned int ireco = 0; ireco < daus.size(); ++ireco) {
                const pat::PackedCandidate& recocand = static_cast<const pat::PackedCandidate&>(*daus[ireco]);
                int charge = recocand.charge();
                Hep3Vector cand3v(recocand.px(), recocand.py(), recocand.pz());
                if(cand3v.perp()>1.0 && abs(cand3v.eta())<2.5 && recocand.charge()!=0){
#ifdef TRACKEFFDEBUG
                        ijet2candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                        ijet2candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                        ijet2_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        ijet2_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                        ijet2_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
                        }
                }
        }
#endif
	}
}
*/

		//  if(isEta && isPt) {ncount++;}
	   	//  }//if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet])
	  	//  }//for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++)
/*	    if (ithird>=0) {
	      
	      recomom[isrc][0][iet].push_back(tmp4v);
	      //					cout <<"recomom[isrc][0][iet] "<< isrc<<" "<<iet<<" "<<recomom[isrc][0][iet].size()<<endl;
	      // tmpjt4v.push_back(tmp4v);   
	      
	      std::vector<reco::CandidatePtr> daus((*ak4PFJets)[ithird].daughterPtrVector());
	      std::sort(daus.begin(), daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2 ->pt(); });
	      for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		const pat::PackedCandidate &pfcand = dynamic_cast<const pat::PackedCandidate &>(*daus[i2]);
		int charge = pfcand.charge();
		HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
		//      if (cand4v.perp()<0.5) continue;                                                             
		recomom[isrc][1][iet].push_back(cand4v);
		
		if (charge !=0) {
		  recomom[isrc][2][iet].push_back(cand4v);
#ifdef TRACKSYS
		  if (gRandom->Uniform() < 0.96) {recomom[isrc][4][iet].push_back(cand4v); }
#endif
		  
		}
		if (charge==0){
		  if (cand4v.perp()>1.0) {
		    recomom[isrc][3][iet].push_back(cand4v);
		  }
		} else{
		  if (cand4v.perp()>0.5) {
		    recomom[isrc][3][iet].push_back(cand4v);
		  }
		}
	      }
	    }*/ //if (ithird>=0) 
	    h_njets[iet]->Fill(ncount, weighttrg);
              } //if (abs((*ak4PFJets)[jetindx[isrc][0]].eta())<etarange[iet] && abs((*ak4PFJets)[jetindx[isrc][1]].eta())<etarange[iet])
            } // for(unsigned ijet = 0; ijet != ak4PFJets->size(); ijet++)
	  } //if (aveleadingptjec[isrc] >leadingPtThreshold[0])
	} // 	for (int isrc = 0; isrc < njecmx; isrc++)
      } //for (int iet=0; iet<njetetamn; iet++)	   
    } // if (ak4PFJets.isValid() && ak4PFJets->size()>=2 && (*ak4PFJets)[0].pt()>leadingPtThreshold[0])
  } // if (ak4PFJets.isValid())
#endif 
  //cout << "Write test 1 = ok " << endl;
  //==================================***GenJets*****=================================
  //cout<<"0 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
  //double leadgenpt =0;

//Gen level work starts
  //edm::Handle<reco::GenJetCollection> genjets;
  if(isMC) {
    //edm::Handle<reco::GenJetCollection> genjets;
    //iEvent.getByToken(genjetToken_,genjets);
    
    //double avegenpt =0;
    //double leadgenpt =0;
    //cout <<"HGebjet "<<endl;
    if(isMC && ((!genjets.isValid()) || genjets->size()<2)) return;

    if (genjets.isValid() && genjets->size()>=2) {
#ifdef DIJETAVE
	
      for (int iet=0; iet<njetetamn; iet++) {
	isInEtaRange[iet] = true;
      }
      
      for (int ij=0; ij<2; ij++) {
	for (int iet=0; iet<njetetamn; iet++) {
	  if (abs((*genjets)[ij].eta())>etarange[iet]) { isInEtaRange[iet] = false;}
	}
	
	//if (abs((*genjets)[ij].eta())<2.5 && (*genjets)[ij].pt()>30.0 ) {
/*	
	if (abs((*genjets)[ij].eta())<2.1 && (*genjets)[ij].pt()>30.0 ) { 
	  avegenpt +=(*genjets)[ij].pt();
          leadgenpt = (*genjets)[0].pt();
	} else {avegenpt -=100000;
		leadgenpt -=100000;}
*/	
	if (abs((*genjets)[ij].eta())>2.1 || (*genjets)[ij].pt()<30.0 ) continue;
	  //avegenpt +=(*genjets)[ij].pt();
          //leadgenpt = (*genjets)[ij].pt();
	//cout<<"Lead gen pt : "<<leadgenpt<<endl;
	//cout<<"Sub-Lead gen pt : "<<(*genjets)[1].pt()<<endl;
      }
        //avegenpt /=2.0;
#else 

#endif
    } 
    
    //igenht = getbinid(leadgenpt, njetptmn, leadingPtThreshold);
 
    //cout << "Write test 2 = ok " << endl;
    //cout << "Write test 321 = ok " << endl;
    vector<double> genjetptx[nGenReso];
    vector<double> genjetscl[nGenReso]; 
    vector<int> genjetindx[nGenReso];
   
  if(genjets.isValid()){
    for(unsigned ijet = 0; ijet != genjets->size(); ijet++) {
      double pt = (*genjets)[ijet].pt();
      for (int isrc = 0; isrc < nGenReso; isrc++) {
	double sup = 1.0;	
	genjetptx[isrc].push_back(sup*pt);
	genjetscl[isrc].push_back(sup);
	genjetindx[isrc].push_back(ijet);
      }
    }
  }
       //cout << "Write test 3 = ok " << endl;
       //cout << "Write test 322 = ok "<<nGenReso << endl;
//////#ifdef JETRESO
    for (int isrc = 0; isrc < nGenReso; isrc++) {
     //if(genjetptx[isrc].size()==0) break;
      for (unsigned int ij=0; ij<genjetptx[isrc].size()-1; ij++) {
	for (unsigned int jk=ij+1; jk<genjetptx[isrc].size(); jk++) {  
	  if (genjetptx[isrc][jk]>genjetptx[isrc][ij]){ 
	    double tmppt = genjetptx[isrc][ij];
	    double tmpscl = genjetscl[isrc][ij];
	    int tmpindx = genjetindx[isrc][ij];
	    
	    genjetptx[isrc][ij] = genjetptx[isrc][jk];
	    genjetscl[isrc][ij] = genjetscl[isrc][jk];
	    genjetindx[isrc][ij] = genjetindx[isrc][jk];			

	    genjetptx[isrc][jk] = tmppt;
	    genjetscl[isrc][jk] = tmpscl;
	    genjetindx[isrc][jk] = tmpindx;
	  }
	}
      }
    }
    //////#endif
    //cout << "Write test 4 = ok " << endl;
    //double avegenptres[nGenReso]={0};
    
    for (int isrc = 0; isrc < nGenReso; isrc++) {
      if (genjetptx[isrc].size()>=2) {
        leadgenptres[isrc] = (genjetptx[isrc][0]);
        //igenhtres[isrc] = getbinid(leadgenptres[isrc], njetptmn, leadingPtThreshold);
	igenhtres[isrc] = getbinid(leadgenptres[isrc], ngenPT, genhtbins);
	//igenhtres[isrc] = getbinid(leadgenptres[isrc], PTbins, recohtbins2D);
      } else {
	igenhtres[isrc] = -1;
      }
    }
     
    if(genjets.isValid() && genjets->size() >=2) { //  && avegenpt>leadingPtThreshold[0]) {
    
     for (int iet=0; iet<njetetamn; iet++) {
	for (int isrc=0; isrc<nGenReso; isrc++) { 
          if (leadgenptres[isrc] > leadingPtThreshold[0]) {
	    //double px =0;
	    //double py =0;
	    //double ptxy =0;
	    
	    ncount=0;
	    //int recterm=0;
	    //int ithird=-1;
	    tmpgen4v.clear(); 
	    for(unsigned ijet = 0; ijet != genjets->size(); ijet++) {
		if (abs((*genjets)[genjetindx[isrc][0]].eta())<etarange[iet] && abs((*genjets)[genjetindx[isrc][1]].eta())<etarange[iet] && abs((*genjets)[genjetindx[isrc][0]].pt())>30.0 && abs((*genjets)[genjetindx[isrc][1]].pt())>30.0) {
	     /* if ((*genjets)[igenjt].pt()>25.0) {
		cout<<"ievt "<<ievt<<" "<<ijet<<" "<<igenjt<<" "<<genjetptx[isrc][ijet]<<" "<<(*genjets)[igenjt].pt()<<" "<<(*genjets)[igenjt].eta()<<" "<<(*genjets)[igenjt].phi()<<endl;
	      }*/

	        //if (abs((*genjets)[genjetindx[isrc][ijet]].eta())<etarange[iet]) {
		if (dPhi(((*genjets)[genjetindx[isrc][0]].phi()), ((*genjets)[genjetindx[isrc][1]].phi()))<2.0) continue;
                if (dPT(((*genjets)[genjetindx[isrc][0]].pt()), ((*genjets)[genjetindx[isrc][1]].pt()))>0.3) continue; 
		int igenjt = genjetindx[isrc][ijet];

		//cout<<genjetindx[isrc][ijet]<<endl;
		double pt = genjetptx[isrc][ijet];
		double sup = genjetscl[isrc][ijet];
		double abseta = abs((*genjets)[igenjt].eta());
		if (pt<30.0 || abseta >etarange[iet]) continue;
		bool isEta = (abseta<2.1) ? true : false;
		
		//if (iet==0 && isrc==0) 
		//cout <<"MC:pteta "<<ijet<<" "<<pt<<" "<<abseta<<endl;
		if (abseta>5.0) continue;
		bool isPt = (pt>30.0) ? true : false;
		if (isEta && isPt) {ncount++;}	
		
		//if(igenjt<=1) continue;
		//cout<<"igenjt : "<<igenjt<<endl;
	
		HepLorentzVector tmp4v((*genjets)[igenjt].px(), (*genjets)[igenjt].py(), (*genjets)[igenjt].pz(), (*genjets)[igenjt].energy()); tmp4v *=sup;
		Hep3Vector tmp3v((*genjets)[igenjt].px(), (*genjets)[igenjt].py(), (*genjets)[igenjt].pz()); tmp3v *=sup;
		//cout<<"GenJet pt test : "<<tmp3v.perp()<<endl;

		if (isEta && isPt) { tmpgen4v.push_back(tmp4v);} 
		if (isEta && isPt) {genmom[isrc][0][iet].push_back(tmp4v);}

/////////////////////////
//--True Flavour Info--//
/////////////////////////

		//Generator-level Flavour Info
		int GenJetParFlav = -999;
		int GenJetHadFlav = -999;

		for (const reco::JetFlavourInfoMatching& jetFlavourInfoMatching : *genjetsFlavor){
			if(deltaR((*genjets)[igenjt].p4(),jetFlavourInfoMatching.first->p4()) < 0.01){
				GenJetParFlav = jetFlavourInfoMatching.second.getPartonFlavour();
				GenJetHadFlav = jetFlavourInfoMatching.second.getHadronFlavour();
			}
		}
		//cout<<"GenJet Flavour Info : "<<" Partonflavour : "<<GenJetParFlav<<" Hadronflavour : "<<GenJetHadFlav<<endl;

		  if (isrc==0) { 
		    if (isInEtaRange[iet]) {genjt_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0) {genjt_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {genjt_phi->Fill(tmp4v.phi(), weighttrg);}
			//cout<<"GenJet PT : "<<tmp4v.perp()<<endl;  
		  }
		
		if (isrc==0) { 
		  if(ijet==0) {
		    //cout<<"Gen Pt= " << avegenpt <<endl;
		    if (isInEtaRange[iet]) {genjt1_pt[iet]->Fill(tmp4v.perp(), weighttrg); genrecojet1_pt = tmp4v.perp();}
		    if (isPt && iet==0) {genjt1_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isEta && isPt) {genjt1_phi->Fill(tmp4v.phi(), weighttrg);}
			//cout<<"GenJet PT : "<<tmp4v.perp()<<endl;	
		  } else if(ijet==1){
		    //cout<<"okkkkkkkk" <<endl;
		    if (isInEtaRange[iet]) {genjt2_pt[iet]->Fill(tmp4v.perp(), weighttrg); genrecojet2_pt = tmp4v.perp();}
		    if (isPt && iet==0) {genjt2_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {genjt2_phi->Fill(tmp4v.phi(), weighttrg);}
		    if (isInEtaRange[iet] && ncount==2) {
		      //cout<<"Gen Pt 1= " << avegenpt <<endl;
		      genjtallave_pt[iet]->Fill(0.5*(tmpgen4v[0].perp()+tmpgen4v[1].perp()), weighttrg);
		    }
		  } else if(ijet==2) {
		    if (isInEtaRange[iet]) {genjt3_pt[iet]->Fill(tmp4v.perp(), weighttrg);}
		    if (isPt && iet==0 ) {genjt3_eta->Fill(tmp4v.eta(), weighttrg);}
		    if (isInEtaRange[iet] && isPt) {genjt3_phi->Fill(tmp4v.phi(), weighttrg);}
		  }
		  if (tmpgen4v.size()==2 && isInEtaRange[iet]) {
		    double dphi = dPhi(tmpgen4v[0].phi(), tmpgen4v[1].phi());
		    double dpt = tmpgen4v[0].perp() - tmpgen4v[1].perp();
		    double dperp = fabs(tmpgen4v[1].perp()*sin(dphi))/tmpgen4v[0].perp();
		    
		    genjetdphi[iet]->Fill(dphi, weighttrg);
		    genjetdpt[iet]->Fill(dpt, weighttrg);
		    genjetptbypl[iet]->Fill(dperp, weight);
		    genjetpt2bypt1[iet]->Fill(tmpgen4v[1].perp()/tmpgen4v[0].perp(), weight);
		  }
		  
		  if (tmpgen4v.size()==3) {genjetpt3bypt2[iet]->Fill(tmpgen4v[2].perp()/tmpgen4v[1].perp(), weight);}
		}

		//ngenchg1 = 0, ngenchg2 = 0, ngenchg1_bjet =0, ngenchg2_bjet =0;
#ifdef GENPART
		
		std::vector <const GenParticle*> daus ((*genjets)[igenjt].getGenConstituents ());
		std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });  //need to check 
		
		for (unsigned int i2 =0; i2< daus.size(); ++i2) {
		  const GenParticle* pfcand = daus[i2];
		  int charge = pfcand->charge();
		  HepLorentzVector cand4v(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
		  //int pdgid = pfcand->pdgId();
		 //std::cout<<"GENPART loop"<<endl; 
#else		
		
		  std::vector<reco::CandidatePtr> daus((*genjets)[igenjt].daughterPtrVector());
		  std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });                               
		  
		for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		    const pat::PackedCandidate &pfcand = static_cast<const pat::PackedCandidate &>(*daus[i2]);
		    int charge = pfcand.charge();
		    //int pdgid = pfcand.pdgId();
		    //if(pdgid==2){//cout<<"pdgid : "<<pdgid<<endl;
		    //cout<<"True"<<endl;}
		    //std::cout<<"ALL loop"<<endl;
		    HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
#endif
		    //	    if (cand4v.perp()<0.5) continue;
		    
		    //if (ncount<=2 && isEta && isPt) {
		      //genmom[isrc][1][iet].push_back(cand4v);
		      if (charge !=0) {
			genmom[isrc][1][iet].push_back(cand4v);
#ifdef TRACKSYS
			if (gRandom->Uniform() < 0.96) {genmom[isrc][2][iet].push_back(cand4v); }
#endif
	}
	if (isrc==0) { 
               	if (charge !=0) {
			genchg_phi->Fill(cand4v.phi(), weighttrg);
			genchg_pt->Fill(cand4v.perp(), weighttrg);
			genchg_eta->Fill(cand4v.eta(), weighttrg);
		  	}
		if (ijet==0 && charge !=0) {
			if(i2==0){genjetchg1_cand1->Fill(cand4v.perp(),weighttrg);}
			if(i2==0 && GenJetHadFlav==5){genbjetchg1_cand1->Fill(cand4v.perp(),weighttrg);}
	
			genchg1_phi->Fill(cand4v.phi(), weighttrg);
                        genchg1_pt->Fill(cand4v.perp(), weighttrg);
                        genchg1_eta->Fill(cand4v.eta(), weighttrg);
			}
		else if (ijet==1 && charge !=0) {
			if(i2==0){genjetchg2_cand1->Fill(cand4v.perp(),weighttrg);}
			if(i2==0 && GenJetHadFlav==5){genbjetchg2_cand1->Fill(cand4v.perp(),weighttrg);}

			genchg2_phi->Fill(cand4v.phi(), weighttrg);
                        genchg2_pt->Fill(cand4v.perp(), weighttrg);
                        genchg2_eta->Fill(cand4v.eta(), weighttrg);
			}
		else if (ijet==2 && charge !=0) {
                        genchg3_phi->Fill(cand4v.phi(), weighttrg);
                        genchg3_pt->Fill(cand4v.perp(), weighttrg);
                        genchg3_eta->Fill(cand4v.eta(), weighttrg);
                        }
		}//if (isrc==0)
		} //for (unsigned int i2 = 0; i2< daus.size(); ++i2)
		//cout<<" Gen particle momentum : "<<igenjet1candsmomk1<<" Jet pt : "<<genjet1_test<<" JCO : "<<igenjet1candsmomk1/genjet1_test<<endl;
		//cout<<"-------------"<<endl;

	if (ijet==0){
		for (int ik=0; ik<10; ik++){
#ifdef MATCHING
			if(jet_matches){	
				for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                		const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

	        		for (unsigned int imatched = 0; imatched < matched_genparts.size(); ++imatched) {
                		const pat::PackedCandidate& matched_gencand = static_cast<const pat::PackedCandidate&>(*matched_genparts[imatched]);

                		if (gencand.charge() == matched_gencand.charge() && deltaR(gencand, matched_gencand) < 1e-4) {

				int charge = gencand.charge();
                        	Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());

                        	if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
					
					igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                	igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
		
					igenjet1candsmom_matchedtracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));

					//GenJet b-jet for unfolding	
					if(GenJetHadFlav==5){
                                                igenjet1candsmom_num_BJet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_BJet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_BJet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_BJet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_BJet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_BJet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
				
					//GenJet Flavour Info
					if(GenJetParFlav==21){
						igenjet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
	                                        igenjet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                	                        igenjet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
        	                                igenjet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        	                igenjet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	        igenjet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==2){
						igenjet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==-2){
						igenjet1candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==1){
						igenjet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==-1){
						igenjet1candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
				 	}else if(GenJetParFlav==5){
                                                igenjet1candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));	
					}else if(GenJetParFlav==-5){
                                                igenjet1candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else{
						igenjet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}
#ifdef TRACKEFF
					if(cand3v.perp() < 20.0){		
						if (gRandom->Uniform() < 0.977){
							igenjet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                       	 		igenjet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                        		igenjet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                        		igenjet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                        		igenjet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        		igenjet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
						}
					}else{
						if (gRandom->Uniform() < 0.99){
							igenjet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        igenjet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        igenjet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        igenjet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
						}
					}

					//BJet
					if(GenJetHadFlav==5){
						if(cand3v.perp() < 20.0){
                                                	if (gRandom->Uniform() < 0.977){
								igenjet1candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        	igenjet1candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        	igenjet1_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet1_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        	igenjet1_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet1_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}
						}
						else{
							if (gRandom->Uniform() < 0.99){
								igenjet1candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                 	       	igenjet1candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        	igenjet1_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet1_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        	igenjet1_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet1_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}
						}
					}
#endif

						}
					}
				}
			}
			}else{
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);
				
                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				
				igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					//GenJet b-jet for unfolding
					if(GenJetHadFlav==5){
                                                igenjet1candsmom_num_BJet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_BJet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_BJet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_BJet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_BJet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_BJet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }

					//GenJet Flavour Info
					if(GenJetParFlav==21){
                                                igenjet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==2){
                                                igenjet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-2){
                                                igenjet1candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==1){
                                                igenjet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-1){
                                                igenjet1candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==5){
                                                igenjet1candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-5){
                                                igenjet1candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else{
                                                igenjet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }

#ifdef TRACKEFF
					if(cand3v.perp() < 20.0){
						if (gRandom->Uniform() < 0.977){
                                                	igenjet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                	igenjet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                                	igenjet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                	igenjet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                               	 	igenjet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                	igenjet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        	}
					}else{
						if (gRandom->Uniform() < 0.99){
                                                        igenjet1candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        igenjet1candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        igenjet1_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet1_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        igenjet1_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet1_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                                }	
					}

					//BJet
					if(GenJetHadFlav==5){
						if(cand3v.perp() < 20.0){
                                                	if (gRandom->Uniform() < 0.977){
								igenjet1candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
        	                                                igenjet1candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());
	
                        	                                igenjet1_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                	                                        igenjet1_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                	                        igenjet1_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                        	                igenjet1_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}	
						}
						else{
							if (gRandom->Uniform() < 0.99){
								igenjet1candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        	igenjet1candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        	igenjet1_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet1_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        	igenjet1_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet1_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}
						}
					}
#endif
					}
				}
			}
#else
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

				igenjet1candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet1candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					//GenJet b-jet for unfolding
					if(GenJetHadFlav==5){
                                                igenjet1candsmom_num_BJet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_BJet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_BJet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_BJet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_BJet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_BJet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
					
					//GenJet Flavour Info
					if(GenJetParFlav==21){
                                                igenjet1candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==2){
                                                igenjet1candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-2){
                                                igenjet1candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==1){
                                                igenjet1candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-1){
                                                igenjet1candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==5){
                                                igenjet1candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-5){
                                                igenjet1candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else{
                                                igenjet1candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet1candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                                igenjet1_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet1_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet1_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }
			}
		}
#endif
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				igenjet1candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
			}	
		}			
	}
}

	if(ijet==1){
		for (int ik=0; ik<10; ik++){
#ifdef MATCHING
			if(jet_matches){
                                for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                                const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                                for (unsigned int imatched = 0; imatched < matched_genparts.size(); ++imatched) {
                                const pat::PackedCandidate& matched_gencand = static_cast<const pat::PackedCandidate&>(*matched_genparts[imatched]);

                                if (gencand.charge() == matched_gencand.charge() && deltaR(gencand, matched_gencand) < 1e-4) {
                                int charge = gencand.charge();
                                Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                                if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){

					igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
					igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

        	                        igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                	                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                        	        igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                	igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					igenjet2candsmom_matchedtracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
					
					//GenJet b-jet for unfolding
					if(GenJetHadFlav==5){
                                                igenjet2candsmom_num_BJet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_BJet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_BJet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_BJet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_BJet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_BJet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }

					//GenJet Flavour Info
					if(GenJetParFlav==21){
                                                igenjet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==2){
                                                igenjet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-2){
                                                igenjet2candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==1){
                                                igenjet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-1){
                                                igenjet2candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==5){
                                                igenjet2candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-5){
                                                igenjet2candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else{
                                                igenjet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }

#ifdef TRACKEFF
					if(cand3v.perp() < 20.0){
						if (gRandom->Uniform() < 0.977){
                                                	igenjet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                	igenjet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                               	 	igenjet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                	igenjet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                	igenjet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                	igenjet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        	}
					}else{
						if (gRandom->Uniform() < 0.99){
                                                        igenjet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        igenjet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        igenjet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        igenjet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                                }
					}

					//BJet
					if(GenJetHadFlav==5){
						if(cand3v.perp() < 20.0){
                                                	if (gRandom->Uniform() < 0.977){
								igenjet2candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                       	 	igenjet2candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());	

                                                        	igenjet2_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        	igenjet2_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}
						}
						else{
							if (gRandom->Uniform() < 0.99){
								igenjet2candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        	igenjet2candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        	igenjet2_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        	igenjet2_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}
						}
					}
#endif

						}
					}
				}
			}
		}else{
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);
                                
                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
		
				igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					
					//GenJet b-jet for unfolding
					if(GenJetHadFlav==5){
                                                igenjet2candsmom_num_BJet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_BJet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_BJet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_BJet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_BJet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_BJet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }

					//GenJet Flavour Info
					if(GenJetParFlav==21){
                                                igenjet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==2){
                                                igenjet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-2){
                                                igenjet2candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==1){
                                                igenjet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-1){
                                                igenjet2candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==5){
                                                igenjet2candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-5){
                                                igenjet2candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else{
                                                igenjet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }

#ifdef TRACKEFF	
					if(cand3v.perp() < 20.0){
						if (gRandom->Uniform() < 0.977){
                                                	igenjet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                	igenjet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                                	igenjet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                	igenjet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                	igenjet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                	igenjet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        	}
					}else{
						if (gRandom->Uniform() < 0.99){
                                                        igenjet2candsmom_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        igenjet2candsmom_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        igenjet2_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet2_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        igenjet2_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        igenjet2_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                                }
					}

					//BJet
					if(GenJetHadFlav==5){
						if(cand3v.perp() < 20.0){
                                                	if (gRandom->Uniform() < 0.977){
								igenjet2candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        	igenjet2candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        	igenjet2_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        	igenjet2_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}
						}
						else{
							if (gRandom->Uniform() < 0.99){
								igenjet2candsmom_BJet_num_trackeff[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                        	igenjet2candsmom_BJet_den_trackeff[ik][isrc] += (cand3v.perp());

                                                        	igenjet2_BJet_long_num_trackeff[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_long_den_trackeff[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                        	igenjet2_BJet_tran_num_trackeff[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                        	igenjet2_BJet_tran_den_trackeff[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
							}
						}
					}
#endif
				}
			}
		}

#else
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				
				igenjet2candsmom_num[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
				igenjet2candsmom_den[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));

					//GenJet b-jet for unfolding	
					if(GenJetHadFlav==5){
                                                igenjet2candsmom_num_BJet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_BJet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_BJet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_BJet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_BJet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_BJet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }

					//GenJet Flavour Info
					if(GenJetParFlav==21){
                                                igenjet2candsmom_num_gjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_gjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_gjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_gjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_gjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_gjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==2){
                                                igenjet2candsmom_num_ujet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ujet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ujet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ujet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ujet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ujet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-2){
                                                igenjet2candsmom_num_ubarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ubarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ubarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ubarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ubarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ubarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==1){
                                                igenjet2candsmom_num_djet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_djet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_djet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_djet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_djet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_djet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-1){
                                                igenjet2candsmom_num_dbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_dbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_dbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_dbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_dbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_dbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
					}else if(GenJetParFlav==5){
                                                igenjet2candsmom_num_bjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_bjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_bjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_bjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_bjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_bjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else if(GenJetParFlav==-5){
                                                igenjet2candsmom_num_bbarjet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_bbarjet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_bbarjet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_bbarjet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_bbarjet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_bbarjet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }else{
                                                igenjet2candsmom_num_ojet[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                                igenjet2candsmom_den_ojet[ik][isrc] += (cand3v.perp());

                                                igenjet2_long_num_ojet[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_long_den_ojet[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                                igenjet2_tran_num_ojet[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                                igenjet2_tran_den_ojet[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
                                        }	
			}
		}
		
#endif
			for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
				igenjet2candsmom_alltracks[ik][isrc] += (pow(cand3v.perp(), kappa[ik]));
				}
			}
	}
}

/*
//Tracking Efficiency using Matching
if(ijet==0){
        for (int ik=0; ik<10; ik++){
#ifdef TRACKEFFMATCHING
		if(TrackJet_matches){
                	for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        for (unsigned int imatched = 0; imatched < matched_gentrackparts.size(); ++imatched) {
                        const pat::PackedCandidate& matched_gentrackcand = static_cast<const pat::PackedCandidate&>(*matched_gentrackparts[imatched]);

                        if (gencand.charge() == matched_gentrackcand.charge() && deltaR(gencand, matched_gentrackcand) < 1e-4) {

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
#ifdef TRACKEFFDEBUG
                        	igenjet1candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                               	igenjet1candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
					}
				}
			}
		}
	}else{
		for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
#ifdef TRACKEFFDEBUG
                                igenjet1candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                igenjet1candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                                igenjet1_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet1_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet1_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
			}
		}		
	}
#endif
	}
}

if(ijet==1){
        for (int ik=0; ik<10; ik++){
#ifdef TRACKEFFMATCHING
                if(TrackJet_matches){
                        for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        for (unsigned int imatched = 0; imatched < matched_gentrackparts.size(); ++imatched) {
                        const pat::PackedCandidate& matched_gentrackcand = static_cast<const pat::PackedCandidate&>(*matched_gentrackparts[imatched]);

                        if (gencand.charge() == matched_gentrackcand.charge() && deltaR(gencand, matched_gentrackcand) < 1e-4) {

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
#ifdef TRACKEFFDEBUG
                                igenjet2candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                igenjet2candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
                                        }
                                }
                        }
                }
        }else{
                for (unsigned int igen = 0; igen < daus.size(); ++igen) {
                        const pat::PackedCandidate& gencand = static_cast<const pat::PackedCandidate&>(*daus[igen]);

                        int charge = gencand.charge();
                        Hep3Vector cand3v(gencand.px(), gencand.py(), gencand.pz());
                        if(cand3v.perp()>1.0 && abs(cand3v.eta()<2.5) && gencand.charge()!=0){
#ifdef TRACKEFFDEBUG
                                igenjet2candsmom_num_trackeff_debug[ik][isrc] += charge*(pow(cand3v.perp(), kappa[ik]));
                                igenjet2candsmom_den_trackeff_debug[ik][isrc] += (cand3v.perp());

                                igenjet2_long_num_trackeff_debug[ik][isrc] += (charge*(dotProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_long_den_trackeff_debug[ik][isrc] += (dotProductPower(cand3v,tmp3v,kappa[ik]));

                                igenjet2_tran_num_trackeff_debug[ik][isrc] += (charge*(crossProductPower(cand3v,tmp3v,kappa[ik])));
                                igenjet2_tran_den_trackeff_debug[ik][isrc] += (crossProductPower(cand3v,tmp3v,kappa[ik]));
#endif
                        }
                }
        }
#endif
        }
}
*/

		  //  if (isEta && isPt) {ncount++;}
		} // if (abs((*genjets)[genjetindx[isrc][0]].eta())<etarange[iet] && 
		//								abs((*genjets)[genjetindx[isrc][1]].eta())<etarange[iet])
	      } //	for(unsigned ijet = 0; ijet != genjets->size(); ijet++) 
	      //cout << "Write test 324 = ok " << endl;
	     /* if (ithird>=0) {
		//							cout <<"ithird "<<isrc<<" "<< iet<<" "<< ithird<<endl;
		
		HepLorentzVector tmp4v((*genjets)[ithird].px(), (*genjets)[ithird].py(), (*genjets)[ithird].pz(), (*genjets)[ithird].energy());
		genmom[isrc][0][iet].push_back(tmp4v);
		//cout <<"thirdijxxx "<<isrc<<" "<<iet<<" "<< genmom[isrc][0][iet].size()<<" "<<genjets->size()<<" "<<ithird<<" "<<tmp4v.perp()<<" "<<tmp4v.eta()<<" "<<tmp4v.phi()<<" "<<setprecision(14)<<weighttrg<<endl;
#ifdef GENPART
		std::vector <const GenParticle*> daus ((*genjets)[ithird].getGenConstituents ());
		//								std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); }); 
		
		for (unsigned int i2 =0; i2< daus.size(); ++i2) {
		  const GenParticle* pfcand = daus[i2];
		  int charge = pfcand->charge();
		  HepLorentzVector cand4v(pfcand->px(), pfcand->py(), pfcand->pz(), pfcand->energy());
		  //								int pdgid = pfcand->pdgId();
		  
#else
		  std::vector<reco::CandidatePtr> daus((*genjets)[ithird].daughterPtrVector());
		  std::sort(daus.begin(),daus.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2) { return p1->pt() > p2->pt(); });    
		  
		  for (unsigned int i2 = 0; i2< daus.size(); ++i2) {
		    const pat::PackedCandidate &pfcand = static_cast<const pat::PackedCandidate &>(*daus[i2]);
		    
		    int charge = pfcand.charge();
		    HepLorentzVector cand4v(pfcand.px(), pfcand.py(), pfcand.pz(), pfcand.energy());
#endif
		    
		    
		    //      if (cand4v.perp()<0.5) continue;                                                                                                                     
		    genmom[isrc][1][iet].push_back(cand4v);
		    if (charge !=0) {
		      genmom[isrc][2][iet].push_back(cand4v);
#ifdef TRACKSYS
		      if (gRandom->Uniform() < 0.96) {genmom[isrc][4][iet].push_back(cand4v); }
#endif
		    }
		    
		    if(charge ==0) {
		      if (cand4v.perp()>1.0) {
			genmom[isrc][3][iet].push_back(cand4v);
		      }
		    } else {
		      if (cand4v.perp()>0.5) {
			genmom[isrc][3][iet].push_back(cand4v);
		      }
		    }
		  } //for (unsigned int i2 = 0; i2< daus.size(); ++i2) 
		}*/// if (ithird>=0)
		gen_njets[iet]->Fill(ncount,weighttrg); 
	      } // if (avegenptres[isrc] > leadingPtThreshold[0])
	    } //	for (int isrc=0; isrc<nGenReso; isrc++)
	  } //for (int iet=0; iet<njetetamn; iet++)
	} // if(genjets.isValid() && genjets->size()>=2 && (*genjets)[0].pt()>leadingPtThreshold[0])
	// } //if (genjets.isValid() &&  genjets->size()>=2) 
	//h_2ht->Fill(aveleadingpt,avegenpt, weighttrg);
	//h_2ht->Fill(leadingpt,leadgenpt, weighttrg);
	///////Response
      } //isMC
      //	cout<<"22 aveleadingpt "<<aveleadingpt<< " ; "<<ihltfill<<" "<<irecoht<<endl;
      // if(isMC) h_2ht->Fill(aveleadingpt,avegenpt, weighttrg);
      //cout << "Write test 325 = ok " << endl;
      //for(int rnum=0; rnum<10; rnum++) {
      /*double rand=gRandom->Uniform();
      int k = rand/0.1;
      //cout << "Rand Number " << k << endl;*/
 
//-----------------------------------------------Calculate And Fill Jet Charge Obserables------------------------------------

for (int ik=0; ik<nkappa; ik++){
	for (int isrc = 0; isrc < njecmx; isrc++) {
		RecoJCO[0][0][ik][isrc] = (ijet1candsmom_num[ik][isrc]/(pow(ijet1candsmom_den[ik][isrc],kappa[ik])));
                RecoJCO[0][1][ik][isrc] = (ijet2candsmom_num[ik][isrc]/(pow(ijet2candsmom_den[ik][isrc],kappa[ik])));

		RecoJCO[1][0][ik][isrc] = (ijet1_long_num[ik][isrc]/ijet1_long_den[ik][isrc]);
                RecoJCO[1][1][ik][isrc] = (ijet2_long_num[ik][isrc]/ijet2_long_den[ik][isrc]);

                RecoJCO[2][0][ik][isrc] = (ijet1_tran_num[ik][isrc]/ijet1_tran_den[ik][isrc]);
                RecoJCO[2][1][ik][isrc] = (ijet2_tran_num[ik][isrc]/ijet2_tran_den[ik][isrc]);


		recomomJCO[0][0][ik][isrc] = (pow(ijet1candsmom_den[ik][isrc],kappa[ik]));
                recomomJCO[0][1][ik][isrc] = (pow(ijet2candsmom_den[ik][isrc],kappa[ik]));

                recomomJCO[1][0][ik][isrc] = (ijet1_long_den[ik][isrc]);
                recomomJCO[1][1][ik][isrc] = (ijet2_long_den[ik][isrc]);

                recomomJCO[2][0][ik][isrc] = (ijet1_tran_den[ik][isrc]);
                recomomJCO[2][1][ik][isrc] = (ijet2_tran_den[ik][isrc]);

		//b-jet Tight Working point
		RecoJCO_bjet_deepJETT[0][0][ik][isrc] = (ijet1candsmom_num_bjet_deepJETT[ik][isrc]/(pow(ijet1candsmom_den_bjet_deepJETT[ik][isrc],kappa[ik])));
                RecoJCO_bjet_deepJETT[0][1][ik][isrc] = (ijet2candsmom_num_bjet_deepJETT[ik][isrc]/(pow(ijet2candsmom_den_bjet_deepJETT[ik][isrc],kappa[ik])));

                RecoJCO_bjet_deepJETT[1][0][ik][isrc] = (ijet1_long_num_bjet_deepJETT[ik][isrc]/ijet1_long_den_bjet_deepJETT[ik][isrc]);
                RecoJCO_bjet_deepJETT[1][1][ik][isrc] = (ijet2_long_num_bjet_deepJETT[ik][isrc]/ijet2_long_den_bjet_deepJETT[ik][isrc]);

                RecoJCO_bjet_deepJETT[2][0][ik][isrc] = (ijet1_tran_num_bjet_deepJETT[ik][isrc]/ijet1_tran_den_bjet_deepJETT[ik][isrc]);
                RecoJCO_bjet_deepJETT[2][1][ik][isrc] = (ijet2_tran_num_bjet_deepJETT[ik][isrc]/ijet2_tran_den_bjet_deepJETT[ik][isrc]);


                recomomJCO_bjet_deepJETT[0][0][ik][isrc] = (pow(ijet1candsmom_den_bjet_deepJETT[ik][isrc],kappa[ik]));
                recomomJCO_bjet_deepJETT[0][1][ik][isrc] = (pow(ijet2candsmom_den_bjet_deepJETT[ik][isrc],kappa[ik]));

                recomomJCO_bjet_deepJETT[1][0][ik][isrc] = (ijet1_long_den_bjet_deepJETT[ik][isrc]);
                recomomJCO_bjet_deepJETT[1][1][ik][isrc] = (ijet2_long_den_bjet_deepJETT[ik][isrc]);

                recomomJCO_bjet_deepJETT[2][0][ik][isrc] = (ijet1_tran_den_bjet_deepJETT[ik][isrc]);
                recomomJCO_bjet_deepJETT[2][1][ik][isrc] = (ijet2_tran_den_bjet_deepJETT[ik][isrc]);
#ifdef FLAV
		//g-jet
		RecoJCO_gjet[0][0][ik][isrc] = (ijet1candsmom_num_gjet[ik][isrc]/(pow(ijet1candsmom_den_gjet[ik][isrc],kappa[ik])));
                RecoJCO_gjet[0][1][ik][isrc] = (ijet2candsmom_num_gjet[ik][isrc]/(pow(ijet2candsmom_den_gjet[ik][isrc],kappa[ik])));

                RecoJCO_gjet[1][0][ik][isrc] = (ijet1_long_num_gjet[ik][isrc]/ijet1_long_den_gjet[ik][isrc]);
                RecoJCO_gjet[1][1][ik][isrc] = (ijet2_long_num_gjet[ik][isrc]/ijet2_long_den_gjet[ik][isrc]);

                RecoJCO_gjet[2][0][ik][isrc] = (ijet1_tran_num_gjet[ik][isrc]/ijet1_tran_den_gjet[ik][isrc]);
                RecoJCO_gjet[2][1][ik][isrc] = (ijet2_tran_num_gjet[ik][isrc]/ijet2_tran_den_gjet[ik][isrc]);

		recomomJCO_gjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_gjet[ik][isrc],kappa[ik]));
                recomomJCO_gjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_gjet[ik][isrc],kappa[ik]));

                recomomJCO_gjet[1][0][ik][isrc] = (ijet1_long_den_gjet[ik][isrc]);
                recomomJCO_gjet[1][1][ik][isrc] = (ijet2_long_den_gjet[ik][isrc]);

                recomomJCO_gjet[2][0][ik][isrc] = (ijet1_tran_den_gjet[ik][isrc]);
                recomomJCO_gjet[2][1][ik][isrc] = (ijet2_tran_den_gjet[ik][isrc]);

		//u-jet
		RecoJCO_ujet[0][0][ik][isrc] = (ijet1candsmom_num_ujet[ik][isrc]/(pow(ijet1candsmom_den_ujet[ik][isrc],kappa[ik])));
                RecoJCO_ujet[0][1][ik][isrc] = (ijet2candsmom_num_ujet[ik][isrc]/(pow(ijet2candsmom_den_ujet[ik][isrc],kappa[ik])));

                RecoJCO_ujet[1][0][ik][isrc] = (ijet1_long_num_ujet[ik][isrc]/ijet1_long_den_ujet[ik][isrc]);
                RecoJCO_ujet[1][1][ik][isrc] = (ijet2_long_num_ujet[ik][isrc]/ijet2_long_den_ujet[ik][isrc]);

                RecoJCO_ujet[2][0][ik][isrc] = (ijet1_tran_num_ujet[ik][isrc]/ijet1_tran_den_ujet[ik][isrc]);
                RecoJCO_ujet[2][1][ik][isrc] = (ijet2_tran_num_ujet[ik][isrc]/ijet2_tran_den_ujet[ik][isrc]);

		recomomJCO_ujet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ujet[ik][isrc],kappa[ik]));
                recomomJCO_ujet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ujet[ik][isrc],kappa[ik]));

                recomomJCO_ujet[1][0][ik][isrc] = (ijet1_long_den_ujet[ik][isrc]);
                recomomJCO_ujet[1][1][ik][isrc] = (ijet2_long_den_ujet[ik][isrc]);

                recomomJCO_ujet[2][0][ik][isrc] = (ijet1_tran_den_ujet[ik][isrc]);
                recomomJCO_ujet[2][1][ik][isrc] = (ijet2_tran_den_ujet[ik][isrc]);

		//ubar-jet
		RecoJCO_ubarjet[0][0][ik][isrc] = (ijet1candsmom_num_ubarjet[ik][isrc]/(pow(ijet1candsmom_den_ubarjet[ik][isrc],kappa[ik])));
                RecoJCO_ubarjet[0][1][ik][isrc] = (ijet2candsmom_num_ubarjet[ik][isrc]/(pow(ijet2candsmom_den_ubarjet[ik][isrc],kappa[ik])));

                RecoJCO_ubarjet[1][0][ik][isrc] = (ijet1_long_num_ubarjet[ik][isrc]/ijet1_long_den_ubarjet[ik][isrc]);
                RecoJCO_ubarjet[1][1][ik][isrc] = (ijet2_long_num_ubarjet[ik][isrc]/ijet2_long_den_ubarjet[ik][isrc]);

                RecoJCO_ubarjet[2][0][ik][isrc] = (ijet1_tran_num_ubarjet[ik][isrc]/ijet1_tran_den_ubarjet[ik][isrc]);
                RecoJCO_ubarjet[2][1][ik][isrc] = (ijet2_tran_num_ubarjet[ik][isrc]/ijet2_tran_den_ubarjet[ik][isrc]);

                recomomJCO_ubarjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ubarjet[ik][isrc],kappa[ik]));
                recomomJCO_ubarjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ubarjet[ik][isrc],kappa[ik]));

                recomomJCO_ubarjet[1][0][ik][isrc] = (ijet1_long_den_ubarjet[ik][isrc]);
                recomomJCO_ubarjet[1][1][ik][isrc] = (ijet2_long_den_ubarjet[ik][isrc]);

                recomomJCO_ubarjet[2][0][ik][isrc] = (ijet1_tran_den_ubarjet[ik][isrc]);
                recomomJCO_ubarjet[2][1][ik][isrc] = (ijet2_tran_den_ubarjet[ik][isrc]);

		//d-jet
		RecoJCO_djet[0][0][ik][isrc] = (ijet1candsmom_num_djet[ik][isrc]/(pow(ijet1candsmom_den_djet[ik][isrc],kappa[ik])));
                RecoJCO_djet[0][1][ik][isrc] = (ijet2candsmom_num_djet[ik][isrc]/(pow(ijet2candsmom_den_djet[ik][isrc],kappa[ik])));

                RecoJCO_djet[1][0][ik][isrc] = (ijet1_long_num_djet[ik][isrc]/ijet1_long_den_djet[ik][isrc]);
                RecoJCO_djet[1][1][ik][isrc] = (ijet2_long_num_djet[ik][isrc]/ijet2_long_den_djet[ik][isrc]);

                RecoJCO_djet[2][0][ik][isrc] = (ijet1_tran_num_djet[ik][isrc]/ijet1_tran_den_djet[ik][isrc]);
                RecoJCO_djet[2][1][ik][isrc] = (ijet2_tran_num_djet[ik][isrc]/ijet2_tran_den_djet[ik][isrc]);

		recomomJCO_djet[0][0][ik][isrc] = (pow(ijet1candsmom_den_djet[ik][isrc],kappa[ik]));
                recomomJCO_djet[0][1][ik][isrc] = (pow(ijet2candsmom_den_djet[ik][isrc],kappa[ik]));

                recomomJCO_djet[1][0][ik][isrc] = (ijet1_long_den_djet[ik][isrc]);
                recomomJCO_djet[1][1][ik][isrc] = (ijet2_long_den_djet[ik][isrc]);

                recomomJCO_djet[2][0][ik][isrc] = (ijet1_tran_den_djet[ik][isrc]);
                recomomJCO_djet[2][1][ik][isrc] = (ijet2_tran_den_djet[ik][isrc]);

		//dbar-jet
		RecoJCO_dbarjet[0][0][ik][isrc] = (ijet1candsmom_num_dbarjet[ik][isrc]/(pow(ijet1candsmom_den_dbarjet[ik][isrc],kappa[ik])));
                RecoJCO_dbarjet[0][1][ik][isrc] = (ijet2candsmom_num_dbarjet[ik][isrc]/(pow(ijet2candsmom_den_dbarjet[ik][isrc],kappa[ik])));

                RecoJCO_dbarjet[1][0][ik][isrc] = (ijet1_long_num_dbarjet[ik][isrc]/ijet1_long_den_dbarjet[ik][isrc]);
                RecoJCO_dbarjet[1][1][ik][isrc] = (ijet2_long_num_dbarjet[ik][isrc]/ijet2_long_den_dbarjet[ik][isrc]);

                RecoJCO_dbarjet[2][0][ik][isrc] = (ijet1_tran_num_dbarjet[ik][isrc]/ijet1_tran_den_dbarjet[ik][isrc]);
                RecoJCO_dbarjet[2][1][ik][isrc] = (ijet2_tran_num_dbarjet[ik][isrc]/ijet2_tran_den_dbarjet[ik][isrc]);

                recomomJCO_dbarjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_dbarjet[ik][isrc],kappa[ik]));
                recomomJCO_dbarjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_dbarjet[ik][isrc],kappa[ik]));

                recomomJCO_dbarjet[1][0][ik][isrc] = (ijet1_long_den_dbarjet[ik][isrc]);
                recomomJCO_dbarjet[1][1][ik][isrc] = (ijet2_long_den_dbarjet[ik][isrc]);

                recomomJCO_dbarjet[2][0][ik][isrc] = (ijet1_tran_den_dbarjet[ik][isrc]);
                recomomJCO_dbarjet[2][1][ik][isrc] = (ijet2_tran_den_dbarjet[ik][isrc]);

		//b-jet
		RecoJCO_bjet[0][0][ik][isrc] = (ijet1candsmom_num_bjet[ik][isrc]/(pow(ijet1candsmom_den_bjet[ik][isrc],kappa[ik])));
                RecoJCO_bjet[0][1][ik][isrc] = (ijet2candsmom_num_bjet[ik][isrc]/(pow(ijet2candsmom_den_bjet[ik][isrc],kappa[ik])));

                RecoJCO_bjet[1][0][ik][isrc] = (ijet1_long_num_bjet[ik][isrc]/ijet1_long_den_bjet[ik][isrc]);
                RecoJCO_bjet[1][1][ik][isrc] = (ijet2_long_num_bjet[ik][isrc]/ijet2_long_den_bjet[ik][isrc]);

                RecoJCO_bjet[2][0][ik][isrc] = (ijet1_tran_num_bjet[ik][isrc]/ijet1_tran_den_bjet[ik][isrc]);
                RecoJCO_bjet[2][1][ik][isrc] = (ijet2_tran_num_bjet[ik][isrc]/ijet2_tran_den_bjet[ik][isrc]);

                recomomJCO_bjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_bjet[ik][isrc],kappa[ik]));
                recomomJCO_bjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_bjet[ik][isrc],kappa[ik]));

                recomomJCO_bjet[1][0][ik][isrc] = (ijet1_long_den_bjet[ik][isrc]);
                recomomJCO_bjet[1][1][ik][isrc] = (ijet2_long_den_bjet[ik][isrc]);

                recomomJCO_bjet[2][0][ik][isrc] = (ijet1_tran_den_bjet[ik][isrc]);
                recomomJCO_bjet[2][1][ik][isrc] = (ijet2_tran_den_bjet[ik][isrc]);

		//bbar-jet
		RecoJCO_bbarjet[0][0][ik][isrc] = (ijet1candsmom_num_bbarjet[ik][isrc]/(pow(ijet1candsmom_den_bbarjet[ik][isrc],kappa[ik])));
                RecoJCO_bbarjet[0][1][ik][isrc] = (ijet2candsmom_num_bbarjet[ik][isrc]/(pow(ijet2candsmom_den_bbarjet[ik][isrc],kappa[ik])));

                RecoJCO_bbarjet[1][0][ik][isrc] = (ijet1_long_num_bbarjet[ik][isrc]/ijet1_long_den_bbarjet[ik][isrc]);
                RecoJCO_bbarjet[1][1][ik][isrc] = (ijet2_long_num_bbarjet[ik][isrc]/ijet2_long_den_bbarjet[ik][isrc]);

                RecoJCO_bbarjet[2][0][ik][isrc] = (ijet1_tran_num_bbarjet[ik][isrc]/ijet1_tran_den_bbarjet[ik][isrc]);
                RecoJCO_bbarjet[2][1][ik][isrc] = (ijet2_tran_num_bbarjet[ik][isrc]/ijet2_tran_den_bbarjet[ik][isrc]);

                recomomJCO_bbarjet[0][0][ik][isrc] = (pow(ijet1candsmom_den_bbarjet[ik][isrc],kappa[ik]));
                recomomJCO_bbarjet[0][1][ik][isrc] = (pow(ijet2candsmom_den_bbarjet[ik][isrc],kappa[ik]));

                recomomJCO_bbarjet[1][0][ik][isrc] = (ijet1_long_den_bbarjet[ik][isrc]);
                recomomJCO_bbarjet[1][1][ik][isrc] = (ijet2_long_den_bbarjet[ik][isrc]);

                recomomJCO_bbarjet[2][0][ik][isrc] = (ijet1_tran_den_bbarjet[ik][isrc]);
                recomomJCO_bbarjet[2][1][ik][isrc] = (ijet2_tran_den_bbarjet[ik][isrc]);

		//others
		RecoJCO_ojet[0][0][ik][isrc] = (ijet1candsmom_num_ojet[ik][isrc]/(pow(ijet1candsmom_den_ojet[ik][isrc],kappa[ik])));
                RecoJCO_ojet[0][1][ik][isrc] = (ijet2candsmom_num_ojet[ik][isrc]/(pow(ijet2candsmom_den_ojet[ik][isrc],kappa[ik])));

                RecoJCO_ojet[1][0][ik][isrc] = (ijet1_long_num_ojet[ik][isrc]/ijet1_long_den_ojet[ik][isrc]);
                RecoJCO_ojet[1][1][ik][isrc] = (ijet2_long_num_ojet[ik][isrc]/ijet2_long_den_ojet[ik][isrc]);

                RecoJCO_ojet[2][0][ik][isrc] = (ijet1_tran_num_ojet[ik][isrc]/ijet1_tran_den_ojet[ik][isrc]);
                RecoJCO_ojet[2][1][ik][isrc] = (ijet2_tran_num_ojet[ik][isrc]/ijet2_tran_den_ojet[ik][isrc]);

		recomomJCO_ojet[0][0][ik][isrc] = (pow(ijet1candsmom_den_ojet[ik][isrc],kappa[ik]));
                recomomJCO_ojet[0][1][ik][isrc] = (pow(ijet2candsmom_den_ojet[ik][isrc],kappa[ik]));

                recomomJCO_ojet[1][0][ik][isrc] = (ijet1_long_den_ojet[ik][isrc]);
                recomomJCO_ojet[1][1][ik][isrc] = (ijet2_long_den_ojet[ik][isrc]);

                recomomJCO_ojet[2][0][ik][isrc] = (ijet1_tran_den_ojet[ik][isrc]);
                recomomJCO_ojet[2][1][ik][isrc] = (ijet2_tran_den_ojet[ik][isrc]);
#endif
		
#ifdef TRACKEFF
		RecoJCO_trackeff[0][0][ik][isrc] = (ijet1candsmom_num_trackeff[ik][isrc]/(pow(ijet1candsmom_den_trackeff[ik][isrc],kappa[ik])));
                RecoJCO_trackeff[0][1][ik][isrc] = (ijet2candsmom_num_trackeff[ik][isrc]/(pow(ijet2candsmom_den_trackeff[ik][isrc],kappa[ik])));

                RecoJCO_trackeff[1][0][ik][isrc] = (ijet1_long_num_trackeff[ik][isrc]/ijet1_long_den_trackeff[ik][isrc]);
                RecoJCO_trackeff[1][1][ik][isrc] = (ijet2_long_num_trackeff[ik][isrc]/ijet2_long_den_trackeff[ik][isrc]);

                RecoJCO_trackeff[2][0][ik][isrc] = (ijet1_tran_num_trackeff[ik][isrc]/ijet1_tran_den_trackeff[ik][isrc]);
                RecoJCO_trackeff[2][1][ik][isrc] = (ijet2_tran_num_trackeff[ik][isrc]/ijet2_tran_den_trackeff[ik][isrc]);


                recomomJCO_trackeff[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackeff[ik][isrc],kappa[ik]));
                recomomJCO_trackeff[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackeff[ik][isrc],kappa[ik]));

                recomomJCO_trackeff[1][0][ik][isrc] = (ijet1_long_den_trackeff[ik][isrc]);
                recomomJCO_trackeff[1][1][ik][isrc] = (ijet2_long_den_trackeff[ik][isrc]);

                recomomJCO_trackeff[2][0][ik][isrc] = (ijet1_tran_den_trackeff[ik][isrc]);
                recomomJCO_trackeff[2][1][ik][isrc] = (ijet2_tran_den_trackeff[ik][isrc]);

		//BJet
		RecoJCO_bjet_deepJETT_trackeff[0][0][ik][isrc] = (ijet1candsmom_bjet_deepJETT_num_trackeff[ik][isrc]/(pow(ijet1candsmom_bjet_deepJETT_den_trackeff[ik][isrc],kappa[ik])));
                RecoJCO_bjet_deepJETT_trackeff[0][1][ik][isrc] = (ijet2candsmom_bjet_deepJETT_num_trackeff[ik][isrc]/(pow(ijet2candsmom_bjet_deepJETT_den_trackeff[ik][isrc],kappa[ik])));

                RecoJCO_bjet_deepJETT_trackeff[1][0][ik][isrc] = (ijet1_bjet_deepJETT_long_num_trackeff[ik][isrc]/ijet1_bjet_deepJETT_long_den_trackeff[ik][isrc]);
                RecoJCO_bjet_deepJETT_trackeff[1][1][ik][isrc] = (ijet2_bjet_deepJETT_long_num_trackeff[ik][isrc]/ijet2_bjet_deepJETT_long_den_trackeff[ik][isrc]);

                RecoJCO_bjet_deepJETT_trackeff[2][0][ik][isrc] = (ijet1_bjet_deepJETT_tran_num_trackeff[ik][isrc]/ijet1_bjet_deepJETT_tran_den_trackeff[ik][isrc]);
                RecoJCO_bjet_deepJETT_trackeff[2][1][ik][isrc] = (ijet2_bjet_deepJETT_tran_num_trackeff[ik][isrc]/ijet2_bjet_deepJETT_tran_den_trackeff[ik][isrc]);


                recomomJCO_bjet_deepJETT_trackeff[0][0][ik][isrc] = (pow(ijet1candsmom_bjet_deepJETT_den_trackeff[ik][isrc],kappa[ik]));
                recomomJCO_bjet_deepJETT_trackeff[0][1][ik][isrc] = (pow(ijet2candsmom_bjet_deepJETT_den_trackeff[ik][isrc],kappa[ik]));

                recomomJCO_bjet_deepJETT_trackeff[1][0][ik][isrc] = (ijet1_bjet_deepJETT_long_den_trackeff[ik][isrc]);
                recomomJCO_bjet_deepJETT_trackeff[1][1][ik][isrc] = (ijet2_bjet_deepJETT_long_den_trackeff[ik][isrc]);

                recomomJCO_bjet_deepJETT_trackeff[2][0][ik][isrc] = (ijet1_bjet_deepJETT_tran_den_trackeff[ik][isrc]);
                recomomJCO_bjet_deepJETT_trackeff[2][1][ik][isrc] = (ijet2_bjet_deepJETT_tran_den_trackeff[ik][isrc]);
#endif

/*
#ifdef TRACKEFFDEBUG
		//Debug using Matching TrackEff
		RecoJCO_trackeff_debug[0][0][ik][isrc] = (ijet1candsmom_num_trackeff_debug[ik][isrc]/(pow(ijet1candsmom_den_trackeff_debug[ik][isrc],kappa[ik])));
                RecoJCO_trackeff_debug[0][1][ik][isrc] = (ijet2candsmom_num_trackeff_debug[ik][isrc]/(pow(ijet2candsmom_den_trackeff_debug[ik][isrc],kappa[ik])));

                RecoJCO_trackeff_debug[1][0][ik][isrc] = (ijet1_long_num_trackeff_debug[ik][isrc]/ijet1_long_den_trackeff_debug[ik][isrc]);
                RecoJCO_trackeff_debug[1][1][ik][isrc] = (ijet2_long_num_trackeff_debug[ik][isrc]/ijet2_long_den_trackeff_debug[ik][isrc]);

                RecoJCO_trackeff_debug[2][0][ik][isrc] = (ijet1_tran_num_trackeff_debug[ik][isrc]/ijet1_tran_den_trackeff_debug[ik][isrc]);
                RecoJCO_trackeff_debug[2][1][ik][isrc] = (ijet2_tran_num_trackeff_debug[ik][isrc]/ijet2_tran_den_trackeff_debug[ik][isrc]);


                recomomJCO_trackeff_debug[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackeff_debug[ik][isrc],kappa[ik]));
                recomomJCO_trackeff_debug[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackeff_debug[ik][isrc],kappa[ik]));

                recomomJCO_trackeff_debug[1][0][ik][isrc] = (ijet1_long_den_trackeff_debug[ik][isrc]);
                recomomJCO_trackeff_debug[1][1][ik][isrc] = (ijet2_long_den_trackeff_debug[ik][isrc]);

                recomomJCO_trackeff_debug[2][0][ik][isrc] = (ijet1_tran_den_trackeff_debug[ik][isrc]);
                recomomJCO_trackeff_debug[2][1][ik][isrc] = (ijet2_tran_den_trackeff_debug[ik][isrc]);
#endif
*/

#ifdef TRACKPTUP
		RecoJCO_trackpt1[0][0][ik][isrc] = (ijet1candsmom_num_trackpt1[ik][isrc]/(pow(ijet1candsmom_den_trackpt1[ik][isrc],kappa[ik])));
                RecoJCO_trackpt1[0][1][ik][isrc] = (ijet2candsmom_num_trackpt1[ik][isrc]/(pow(ijet2candsmom_den_trackpt1[ik][isrc],kappa[ik])));

                RecoJCO_trackpt1[1][0][ik][isrc] = (ijet1_long_num_trackpt1[ik][isrc]/ijet1_long_den_trackpt1[ik][isrc]);
                RecoJCO_trackpt1[1][1][ik][isrc] = (ijet2_long_num_trackpt1[ik][isrc]/ijet2_long_den_trackpt1[ik][isrc]);

                RecoJCO_trackpt1[2][0][ik][isrc] = (ijet1_tran_num_trackpt1[ik][isrc]/ijet1_tran_den_trackpt1[ik][isrc]);
                RecoJCO_trackpt1[2][1][ik][isrc] = (ijet2_tran_num_trackpt1[ik][isrc]/ijet2_tran_den_trackpt1[ik][isrc]);


                recomomJCO_trackpt1[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackpt1[ik][isrc],kappa[ik]));
                recomomJCO_trackpt1[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackpt1[ik][isrc],kappa[ik]));

                recomomJCO_trackpt1[1][0][ik][isrc] = (ijet1_long_den_trackpt1[ik][isrc]);
                recomomJCO_trackpt1[1][1][ik][isrc] = (ijet2_long_den_trackpt1[ik][isrc]);

                recomomJCO_trackpt1[2][0][ik][isrc] = (ijet1_tran_den_trackpt1[ik][isrc]);
                recomomJCO_trackpt1[2][1][ik][isrc] = (ijet2_tran_den_trackpt1[ik][isrc]);

      		//BJet
      		RecoJCO_bjet_deepJETT_trackpt1[0][0][ik][isrc] = (ijet1candsmom_bjet_deepJETT_num_trackpt1[ik][isrc]/(pow(ijet1candsmom_bjet_deepJETT_den_trackpt1[ik][isrc],kappa[ik])));
                RecoJCO_bjet_deepJETT_trackpt1[0][1][ik][isrc] = (ijet2candsmom_bjet_deepJETT_num_trackpt1[ik][isrc]/(pow(ijet2candsmom_bjet_deepJETT_den_trackpt1[ik][isrc],kappa[ik])));

                RecoJCO_bjet_deepJETT_trackpt1[1][0][ik][isrc] = (ijet1_bjet_deepJETT_long_num_trackpt1[ik][isrc]/ijet1_bjet_deepJETT_long_den_trackpt1[ik][isrc]);
                RecoJCO_bjet_deepJETT_trackpt1[1][1][ik][isrc] = (ijet2_bjet_deepJETT_long_num_trackpt1[ik][isrc]/ijet2_bjet_deepJETT_long_den_trackpt1[ik][isrc]);

                RecoJCO_bjet_deepJETT_trackpt1[2][0][ik][isrc] = (ijet1_bjet_deepJETT_tran_num_trackpt1[ik][isrc]/ijet1_bjet_deepJETT_tran_den_trackpt1[ik][isrc]);
                RecoJCO_bjet_deepJETT_trackpt1[2][1][ik][isrc] = (ijet2_bjet_deepJETT_tran_num_trackpt1[ik][isrc]/ijet2_bjet_deepJETT_tran_den_trackpt1[ik][isrc]);


                recomomJCO_bjet_deepJETT_trackpt1[0][0][ik][isrc] = (pow(ijet1candsmom_bjet_deepJETT_den_trackpt1[ik][isrc],kappa[ik]));
                recomomJCO_bjet_deepJETT_trackpt1[0][1][ik][isrc] = (pow(ijet2candsmom_bjet_deepJETT_den_trackpt1[ik][isrc],kappa[ik]));

                recomomJCO_bjet_deepJETT_trackpt1[1][0][ik][isrc] = (ijet1_bjet_deepJETT_long_den_trackpt1[ik][isrc]);
                recomomJCO_bjet_deepJETT_trackpt1[1][1][ik][isrc] = (ijet2_bjet_deepJETT_long_den_trackpt1[ik][isrc]);

                recomomJCO_bjet_deepJETT_trackpt1[2][0][ik][isrc] = (ijet2_bjet_deepJETT_tran_den_trackpt1[ik][isrc]);
                recomomJCO_bjet_deepJETT_trackpt1[2][1][ik][isrc] = (ijet2_bjet_deepJETT_tran_den_trackpt1[ik][isrc]);
#endif

#ifdef TRACKPTDOWN
                RecoJCO_trackpt2[0][0][ik][isrc] = (ijet1candsmom_num_trackpt2[ik][isrc]/(pow(ijet1candsmom_den_trackpt2[ik][isrc],kappa[ik])));
                RecoJCO_trackpt2[0][1][ik][isrc] = (ijet2candsmom_num_trackpt2[ik][isrc]/(pow(ijet2candsmom_den_trackpt2[ik][isrc],kappa[ik])));

                RecoJCO_trackpt2[1][0][ik][isrc] = (ijet1_long_num_trackpt2[ik][isrc]/ijet1_long_den_trackpt2[ik][isrc]);
                RecoJCO_trackpt2[1][1][ik][isrc] = (ijet2_long_num_trackpt2[ik][isrc]/ijet2_long_den_trackpt2[ik][isrc]);

                RecoJCO_trackpt2[2][0][ik][isrc] = (ijet1_tran_num_trackpt2[ik][isrc]/ijet1_tran_den_trackpt2[ik][isrc]);
                RecoJCO_trackpt2[2][1][ik][isrc] = (ijet2_tran_num_trackpt2[ik][isrc]/ijet2_tran_den_trackpt2[ik][isrc]);


                recomomJCO_trackpt2[0][0][ik][isrc] = (pow(ijet1candsmom_den_trackpt2[ik][isrc],kappa[ik]));
                recomomJCO_trackpt2[0][1][ik][isrc] = (pow(ijet2candsmom_den_trackpt2[ik][isrc],kappa[ik]));

                recomomJCO_trackpt2[1][0][ik][isrc] = (ijet1_long_den_trackpt2[ik][isrc]);
                recomomJCO_trackpt2[1][1][ik][isrc] = (ijet2_long_den_trackpt2[ik][isrc]);

                recomomJCO_trackpt2[2][0][ik][isrc] = (ijet1_tran_den_trackpt2[ik][isrc]);
                recomomJCO_trackpt2[2][1][ik][isrc] = (ijet2_tran_den_trackpt2[ik][isrc]);


		//BJet
		RecoJCO_bjet_deepJETT_trackpt2[0][0][ik][isrc] = (ijet1candsmom_bjet_deepJETT_num_trackpt2[ik][isrc]/(pow(ijet1candsmom_bjet_deepJETT_den_trackpt2[ik][isrc],kappa[ik])));
                RecoJCO_bjet_deepJETT_trackpt2[0][1][ik][isrc] = (ijet2candsmom_bjet_deepJETT_num_trackpt2[ik][isrc]/(pow(ijet2candsmom_bjet_deepJETT_den_trackpt2[ik][isrc],kappa[ik])));

                RecoJCO_bjet_deepJETT_trackpt2[1][0][ik][isrc] = (ijet1_bjet_deepJETT_long_num_trackpt2[ik][isrc]/ijet1_bjet_deepJETT_long_den_trackpt2[ik][isrc]);
                RecoJCO_bjet_deepJETT_trackpt2[1][1][ik][isrc] = (ijet2_bjet_deepJETT_long_num_trackpt2[ik][isrc]/ijet2_bjet_deepJETT_long_den_trackpt2[ik][isrc]);

                RecoJCO_bjet_deepJETT_trackpt2[2][0][ik][isrc] = (ijet1_bjet_deepJETT_tran_num_trackpt2[ik][isrc]/ijet1_bjet_deepJETT_tran_den_trackpt2[ik][isrc]);
                RecoJCO_bjet_deepJETT_trackpt2[2][1][ik][isrc] = (ijet2_bjet_deepJETT_tran_num_trackpt2[ik][isrc]/ijet2_bjet_deepJETT_tran_den_trackpt2[ik][isrc]);


                recomomJCO_bjet_deepJETT_trackpt2[0][0][ik][isrc] = (pow(ijet1candsmom_bjet_deepJETT_den_trackpt2[ik][isrc],kappa[ik]));
                recomomJCO_bjet_deepJETT_trackpt2[0][1][ik][isrc] = (pow(ijet2candsmom_bjet_deepJETT_den_trackpt2[ik][isrc],kappa[ik]));

                recomomJCO_bjet_deepJETT_trackpt2[1][0][ik][isrc] = (ijet1_bjet_deepJETT_long_den_trackpt2[ik][isrc]);
                recomomJCO_bjet_deepJETT_trackpt2[1][1][ik][isrc] = (ijet2_bjet_deepJETT_long_den_trackpt2[ik][isrc]);

                recomomJCO_bjet_deepJETT_trackpt2[2][0][ik][isrc] = (ijet1_bjet_deepJETT_tran_den_trackpt2[ik][isrc]);
                recomomJCO_bjet_deepJETT_trackpt2[2][1][ik][isrc] = (ijet2_bjet_deepJETT_tran_den_trackpt2[ik][isrc]);
#endif
		}
	
	for (int isrc = 0; isrc < nGenReso; isrc++) {
		GenJCO[0][0][ik][isrc] = (igenjet1candsmom_num[ik][isrc]/(pow(igenjet1candsmom_den[ik][isrc],kappa[ik])));
                GenJCO[0][1][ik][isrc] = (igenjet2candsmom_num[ik][isrc]/(pow(igenjet2candsmom_den[ik][isrc],kappa[ik])));

		GenJCO[1][0][ik][isrc] = (igenjet1_long_num[ik][isrc]/igenjet1_long_den[ik][isrc]);
		GenJCO[1][1][ik][isrc] = (igenjet2_long_num[ik][isrc]/igenjet2_long_den[ik][isrc]);

		GenJCO[2][0][ik][isrc] = (igenjet1_tran_num[ik][isrc]/igenjet1_tran_den[ik][isrc]);
		GenJCO[2][1][ik][isrc] = (igenjet2_tran_num[ik][isrc]/igenjet2_tran_den[ik][isrc]);

		//b-jet for unfolding
		GenJCO_BJet[0][0][ik][isrc] = (igenjet1candsmom_num_BJet[ik][isrc]/(pow(igenjet1candsmom_den_BJet[ik][isrc],kappa[ik])));
                GenJCO_BJet[0][1][ik][isrc] = (igenjet2candsmom_num_BJet[ik][isrc]/(pow(igenjet2candsmom_den_BJet[ik][isrc],kappa[ik])));

                GenJCO_BJet[1][0][ik][isrc] = (igenjet1_long_num_BJet[ik][isrc]/igenjet1_long_den_BJet[ik][isrc]);
                GenJCO_BJet[1][1][ik][isrc] = (igenjet2_long_num_BJet[ik][isrc]/igenjet2_long_den_BJet[ik][isrc]);

                GenJCO_BJet[2][0][ik][isrc] = (igenjet1_tran_num_BJet[ik][isrc]/igenjet1_tran_den_BJet[ik][isrc]);
                GenJCO_BJet[2][1][ik][isrc] = (igenjet2_tran_num_BJet[ik][isrc]/igenjet2_tran_den_BJet[ik][isrc]);

#ifdef TRACKEFF
		GenJCO_trackeff[0][0][ik][isrc] = (igenjet1candsmom_num_trackeff[ik][isrc]/(pow(igenjet1candsmom_den_trackeff[ik][isrc],kappa[ik])));
                GenJCO_trackeff[0][1][ik][isrc] = (igenjet2candsmom_num_trackeff[ik][isrc]/(pow(igenjet2candsmom_den_trackeff[ik][isrc],kappa[ik])));

                GenJCO_trackeff[1][0][ik][isrc] = (igenjet1_long_num_trackeff[ik][isrc]/igenjet1_long_den_trackeff[ik][isrc]);
                GenJCO_trackeff[1][1][ik][isrc] = (igenjet2_long_num_trackeff[ik][isrc]/igenjet2_long_den_trackeff[ik][isrc]);

                GenJCO_trackeff[2][0][ik][isrc] = (igenjet1_tran_num_trackeff[ik][isrc]/igenjet1_tran_den_trackeff[ik][isrc]);
                GenJCO_trackeff[2][1][ik][isrc] = (igenjet2_tran_num_trackeff[ik][isrc]/igenjet2_tran_den_trackeff[ik][isrc]);

		//BJet
		GenJCO_BJet_trackeff[0][0][ik][isrc] = (igenjet1candsmom_BJet_num_trackeff[ik][isrc]/(pow(igenjet1candsmom_BJet_den_trackeff[ik][isrc],kappa[ik])));
                GenJCO_BJet_trackeff[0][1][ik][isrc] = (igenjet2candsmom_BJet_num_trackeff[ik][isrc]/(pow(igenjet2candsmom_BJet_den_trackeff[ik][isrc],kappa[ik])));

                GenJCO_BJet_trackeff[1][0][ik][isrc] = (igenjet1_BJet_long_num_trackeff[ik][isrc]/igenjet1_BJet_long_den_trackeff[ik][isrc]);
                GenJCO_BJet_trackeff[1][1][ik][isrc] = (igenjet2_BJet_long_num_trackeff[ik][isrc]/igenjet2_BJet_long_den_trackeff[ik][isrc]);

                GenJCO_BJet_trackeff[2][0][ik][isrc] = (igenjet1_BJet_tran_num_trackeff[ik][isrc]/igenjet1_BJet_tran_den_trackeff[ik][isrc]);
                GenJCO_BJet_trackeff[2][1][ik][isrc] = (igenjet2_BJet_tran_num_trackeff[ik][isrc]/igenjet2_BJet_tran_den_trackeff[ik][isrc]);
#endif

/*
#ifdef TRACKEFFDEBUG
		//Debug using Matching Trackeff
		GenJCO_trackeff_debug[0][0][ik][isrc] = (igenjet1candsmom_num_trackeff_debug[ik][isrc]/(pow(igenjet1candsmom_den_trackeff_debug[ik][isrc],kappa[ik])));
                GenJCO_trackeff_debug[0][1][ik][isrc] = (igenjet2candsmom_num_trackeff_debug[ik][isrc]/(pow(igenjet2candsmom_den_trackeff_debug[ik][isrc],kappa[ik])));

                GenJCO_trackeff_debug[1][0][ik][isrc] = (igenjet1_long_num_trackeff_debug[ik][isrc]/igenjet1_long_den_trackeff_debug[ik][isrc]);
                GenJCO_trackeff_debug[1][1][ik][isrc] = (igenjet2_long_num_trackeff_debug[ik][isrc]/igenjet2_long_den_trackeff_debug[ik][isrc]);

                GenJCO_trackeff_debug[2][0][ik][isrc] = (igenjet1_tran_num_trackeff_debug[ik][isrc]/igenjet1_tran_den_trackeff_debug[ik][isrc]);
                GenJCO_trackeff_debug[2][1][ik][isrc] = (igenjet2_tran_num_trackeff_debug[ik][isrc]/igenjet2_tran_den_trackeff_debug[ik][isrc]);
#endif
*/

#ifdef MATCHING

        	genmomJCO[0][0][ik][isrc] = (pow(igenjet1candsmom_den[ik][isrc],kappa[ik]));
                genmomJCO[0][1][ik][isrc] = (pow(igenjet2candsmom_den[ik][isrc],kappa[ik]));

                genmomJCO[1][0][ik][isrc] = (igenjet1_long_den[ik][isrc]);
                genmomJCO[1][1][ik][isrc] = (igenjet2_long_den[ik][isrc]);

                genmomJCO[2][0][ik][isrc] = (igenjet1_tran_den[ik][isrc]);
                genmomJCO[2][1][ik][isrc] = (igenjet2_tran_den[ik][isrc]);

                //b-jet for unfolding
                genmomJCO_BJet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_BJet[ik][isrc],kappa[ik]));
                genmomJCO_BJet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_BJet[ik][isrc],kappa[ik]));

                genmomJCO_BJet[1][0][ik][isrc] = (igenjet1_long_den_BJet[ik][isrc]);
                genmomJCO_BJet[1][1][ik][isrc] = (igenjet2_long_den_BJet[ik][isrc]);

                genmomJCO_BJet[2][0][ik][isrc] = (igenjet1_tran_den_BJet[ik][isrc]);
                genmomJCO_BJet[2][1][ik][isrc] = (igenjet2_tran_den_BJet[ik][isrc]);

#ifdef TRACKEFF			
		genmomJCO_trackeff[0][0][ik][isrc] = (pow(igenjet1candsmom_den_trackeff[ik][isrc],kappa[ik]));
                genmomJCO_trackeff[0][1][ik][isrc] = (pow(igenjet2candsmom_den_trackeff[ik][isrc],kappa[ik]));

                genmomJCO_trackeff[1][0][ik][isrc] = (igenjet1_long_den_trackeff[ik][isrc]);
                genmomJCO_trackeff[1][1][ik][isrc] = (igenjet2_long_den_trackeff[ik][isrc]);

                genmomJCO_trackeff[2][0][ik][isrc] = (igenjet1_tran_den_trackeff[ik][isrc]);
                genmomJCO_trackeff[2][1][ik][isrc] = (igenjet2_tran_den_trackeff[ik][isrc]);

		//BJet
		genmomJCO_BJet_trackeff[0][0][ik][isrc] = (pow(igenjet1candsmom_BJet_den_trackeff[ik][isrc],kappa[ik]));
                genmomJCO_BJet_trackeff[0][1][ik][isrc] = (pow(igenjet2candsmom_BJet_den_trackeff[ik][isrc],kappa[ik]));

                genmomJCO_BJet_trackeff[1][0][ik][isrc] = (igenjet1_BJet_long_den_trackeff[ik][isrc]);
                genmomJCO_BJet_trackeff[1][1][ik][isrc] = (igenjet2_BJet_long_den_trackeff[ik][isrc]);

                genmomJCO_BJet_trackeff[2][0][ik][isrc] = (igenjet1_BJet_tran_den_trackeff[ik][isrc]);
                genmomJCO_BJet_trackeff[2][1][ik][isrc] = (igenjet2_BJet_tran_den_trackeff[ik][isrc]);
#endif

		//GenJet Flavour Info
		//g-jet		
		GenJCO_gjet[0][0][ik][isrc] = (igenjet1candsmom_num_gjet[ik][isrc]/(pow(igenjet1candsmom_den_gjet[ik][isrc],kappa[ik])));
                GenJCO_gjet[0][1][ik][isrc] = (igenjet2candsmom_num_gjet[ik][isrc]/(pow(igenjet2candsmom_den_gjet[ik][isrc],kappa[ik])));

                GenJCO_gjet[1][0][ik][isrc] = (igenjet1_long_num_gjet[ik][isrc]/igenjet1_long_den_gjet[ik][isrc]);
                GenJCO_gjet[1][1][ik][isrc] = (igenjet2_long_num_gjet[ik][isrc]/igenjet2_long_den_gjet[ik][isrc]);

                GenJCO_gjet[2][0][ik][isrc] = (igenjet1_tran_num_gjet[ik][isrc]/igenjet1_tran_den_gjet[ik][isrc]);
                GenJCO_gjet[2][1][ik][isrc] = (igenjet2_tran_num_gjet[ik][isrc]/igenjet2_tran_den_gjet[ik][isrc]);

		genmomJCO_gjet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_gjet[ik][isrc],kappa[ik]));
                genmomJCO_gjet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_gjet[ik][isrc],kappa[ik]));

                genmomJCO_gjet[1][0][ik][isrc] = (igenjet1_long_den_gjet[ik][isrc]);
                genmomJCO_gjet[1][1][ik][isrc] = (igenjet2_long_den_gjet[ik][isrc]);

                genmomJCO_gjet[2][0][ik][isrc] = (igenjet1_tran_den_gjet[ik][isrc]);
                genmomJCO_gjet[2][1][ik][isrc] = (igenjet2_tran_den_gjet[ik][isrc]);

		//u-jet
		GenJCO_ujet[0][0][ik][isrc] = (igenjet1candsmom_num_ujet[ik][isrc]/(pow(igenjet1candsmom_den_ujet[ik][isrc],kappa[ik])));
                GenJCO_ujet[0][1][ik][isrc] = (igenjet2candsmom_num_ujet[ik][isrc]/(pow(igenjet2candsmom_den_ujet[ik][isrc],kappa[ik])));

                GenJCO_ujet[1][0][ik][isrc] = (igenjet1_long_num_ujet[ik][isrc]/igenjet1_long_den_ujet[ik][isrc]);
                GenJCO_ujet[1][1][ik][isrc] = (igenjet2_long_num_ujet[ik][isrc]/igenjet2_long_den_ujet[ik][isrc]);

                GenJCO_ujet[2][0][ik][isrc] = (igenjet1_tran_num_ujet[ik][isrc]/igenjet1_tran_den_ujet[ik][isrc]);
                GenJCO_ujet[2][1][ik][isrc] = (igenjet2_tran_num_ujet[ik][isrc]/igenjet2_tran_den_ujet[ik][isrc]);

		genmomJCO_ujet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_ujet[ik][isrc],kappa[ik]));
                genmomJCO_ujet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_ujet[ik][isrc],kappa[ik]));

                genmomJCO_ujet[1][0][ik][isrc] = (igenjet1_long_den_ujet[ik][isrc]);
                genmomJCO_ujet[1][1][ik][isrc] = (igenjet2_long_den_ujet[ik][isrc]);

                genmomJCO_ujet[2][0][ik][isrc] = (igenjet1_tran_den_ujet[ik][isrc]);
                genmomJCO_ujet[2][1][ik][isrc] = (igenjet2_tran_den_ujet[ik][isrc]);

		
		//ubar-jet
		GenJCO_ubarjet[0][0][ik][isrc] = (igenjet1candsmom_num_ubarjet[ik][isrc]/(pow(igenjet1candsmom_den_ubarjet[ik][isrc],kappa[ik])));
                GenJCO_ubarjet[0][1][ik][isrc] = (igenjet2candsmom_num_ubarjet[ik][isrc]/(pow(igenjet2candsmom_den_ubarjet[ik][isrc],kappa[ik])));

                GenJCO_ubarjet[1][0][ik][isrc] = (igenjet1_long_num_ubarjet[ik][isrc]/igenjet1_long_den_ubarjet[ik][isrc]);
                GenJCO_ubarjet[1][1][ik][isrc] = (igenjet2_long_num_ubarjet[ik][isrc]/igenjet2_long_den_ubarjet[ik][isrc]);

                GenJCO_ubarjet[2][0][ik][isrc] = (igenjet1_tran_num_ubarjet[ik][isrc]/igenjet1_tran_den_ubarjet[ik][isrc]);
                GenJCO_ubarjet[2][1][ik][isrc] = (igenjet2_tran_num_ubarjet[ik][isrc]/igenjet2_tran_den_ubarjet[ik][isrc]);

		genmomJCO_ubarjet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_ubarjet[ik][isrc],kappa[ik]));
                genmomJCO_ubarjet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_ubarjet[ik][isrc],kappa[ik]));

                genmomJCO_ubarjet[1][0][ik][isrc] = (igenjet1_long_den_ubarjet[ik][isrc]);
                genmomJCO_ubarjet[1][1][ik][isrc] = (igenjet2_long_den_ubarjet[ik][isrc]);

                genmomJCO_ubarjet[2][0][ik][isrc] = (igenjet1_tran_den_ubarjet[ik][isrc]);
                genmomJCO_ubarjet[2][1][ik][isrc] = (igenjet2_tran_den_ubarjet[ik][isrc]);
		
		//d-jet
		GenJCO_djet[0][0][ik][isrc] = (igenjet1candsmom_num_djet[ik][isrc]/(pow(igenjet1candsmom_den_djet[ik][isrc],kappa[ik])));
                GenJCO_djet[0][1][ik][isrc] = (igenjet2candsmom_num_djet[ik][isrc]/(pow(igenjet2candsmom_den_djet[ik][isrc],kappa[ik])));

                GenJCO_djet[1][0][ik][isrc] = (igenjet1_long_num_djet[ik][isrc]/igenjet1_long_den_djet[ik][isrc]);
                GenJCO_djet[1][1][ik][isrc] = (igenjet2_long_num_djet[ik][isrc]/igenjet2_long_den_djet[ik][isrc]);

                GenJCO_djet[2][0][ik][isrc] = (igenjet1_tran_num_djet[ik][isrc]/igenjet1_tran_den_djet[ik][isrc]);
                GenJCO_djet[2][1][ik][isrc] = (igenjet2_tran_num_djet[ik][isrc]/igenjet2_tran_den_djet[ik][isrc]);

		genmomJCO_djet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_djet[ik][isrc],kappa[ik]));
                genmomJCO_djet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_djet[ik][isrc],kappa[ik]));

                genmomJCO_djet[1][0][ik][isrc] = (igenjet1_long_den_djet[ik][isrc]);
                genmomJCO_djet[1][1][ik][isrc] = (igenjet2_long_den_djet[ik][isrc]);

                genmomJCO_djet[2][0][ik][isrc] = (igenjet1_tran_den_djet[ik][isrc]);
                genmomJCO_djet[2][1][ik][isrc] = (igenjet2_tran_den_djet[ik][isrc]);

		//dbar-jet
		GenJCO_dbarjet[0][0][ik][isrc] = (igenjet1candsmom_num_dbarjet[ik][isrc]/(pow(igenjet1candsmom_den_dbarjet[ik][isrc],kappa[ik])));
                GenJCO_dbarjet[0][1][ik][isrc] = (igenjet2candsmom_num_dbarjet[ik][isrc]/(pow(igenjet2candsmom_den_dbarjet[ik][isrc],kappa[ik])));

                GenJCO_dbarjet[1][0][ik][isrc] = (igenjet1_long_num_dbarjet[ik][isrc]/igenjet1_long_den_dbarjet[ik][isrc]);
                GenJCO_dbarjet[1][1][ik][isrc] = (igenjet2_long_num_dbarjet[ik][isrc]/igenjet2_long_den_dbarjet[ik][isrc]);

                GenJCO_dbarjet[2][0][ik][isrc] = (igenjet1_tran_num_dbarjet[ik][isrc]/igenjet1_tran_den_dbarjet[ik][isrc]);
                GenJCO_dbarjet[2][1][ik][isrc] = (igenjet2_tran_num_dbarjet[ik][isrc]/igenjet2_tran_den_dbarjet[ik][isrc]);

		genmomJCO_dbarjet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_dbarjet[ik][isrc],kappa[ik]));
                genmomJCO_dbarjet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_dbarjet[ik][isrc],kappa[ik]));

                genmomJCO_dbarjet[1][0][ik][isrc] = (igenjet1_long_den_dbarjet[ik][isrc]);
                genmomJCO_dbarjet[1][1][ik][isrc] = (igenjet2_long_den_dbarjet[ik][isrc]);

                genmomJCO_dbarjet[2][0][ik][isrc] = (igenjet1_tran_den_dbarjet[ik][isrc]);
                genmomJCO_dbarjet[2][1][ik][isrc] = (igenjet2_tran_den_dbarjet[ik][isrc]);

		//b-jet
		GenJCO_bjet[0][0][ik][isrc] = (igenjet1candsmom_num_bjet[ik][isrc]/(pow(igenjet1candsmom_den_bjet[ik][isrc],kappa[ik])));
                GenJCO_bjet[0][1][ik][isrc] = (igenjet2candsmom_num_bjet[ik][isrc]/(pow(igenjet2candsmom_den_bjet[ik][isrc],kappa[ik])));

                GenJCO_bjet[1][0][ik][isrc] = (igenjet1_long_num_bjet[ik][isrc]/igenjet1_long_den_bjet[ik][isrc]);
                GenJCO_bjet[1][1][ik][isrc] = (igenjet2_long_num_bjet[ik][isrc]/igenjet2_long_den_bjet[ik][isrc]);

                GenJCO_bjet[2][0][ik][isrc] = (igenjet1_tran_num_bjet[ik][isrc]/igenjet1_tran_den_bjet[ik][isrc]);
                GenJCO_bjet[2][1][ik][isrc] = (igenjet2_tran_num_bjet[ik][isrc]/igenjet2_tran_den_bjet[ik][isrc]);

                genmomJCO_bjet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_bjet[ik][isrc],kappa[ik]));
                genmomJCO_bjet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_bjet[ik][isrc],kappa[ik]));

                genmomJCO_bjet[1][0][ik][isrc] = (igenjet1_long_den_bjet[ik][isrc]);
                genmomJCO_bjet[1][1][ik][isrc] = (igenjet2_long_den_bjet[ik][isrc]);

                genmomJCO_bjet[2][0][ik][isrc] = (igenjet1_tran_den_bjet[ik][isrc]);
                genmomJCO_bjet[2][1][ik][isrc] = (igenjet2_tran_den_bjet[ik][isrc]);

      		//bbar-jet
      		GenJCO_bbarjet[0][0][ik][isrc] = (igenjet1candsmom_num_bbarjet[ik][isrc]/(pow(igenjet1candsmom_den_bbarjet[ik][isrc],kappa[ik])));
                GenJCO_bbarjet[0][1][ik][isrc] = (igenjet2candsmom_num_bbarjet[ik][isrc]/(pow(igenjet2candsmom_den_bbarjet[ik][isrc],kappa[ik])));

                GenJCO_bbarjet[1][0][ik][isrc] = (igenjet1_long_num_bbarjet[ik][isrc]/igenjet1_long_den_bbarjet[ik][isrc]);
                GenJCO_bbarjet[1][1][ik][isrc] = (igenjet2_long_num_bbarjet[ik][isrc]/igenjet2_long_den_bbarjet[ik][isrc]);

                GenJCO_bbarjet[2][0][ik][isrc] = (igenjet1_tran_num_bbarjet[ik][isrc]/igenjet1_tran_den_bbarjet[ik][isrc]);
                GenJCO_bbarjet[2][1][ik][isrc] = (igenjet2_tran_num_bbarjet[ik][isrc]/igenjet2_tran_den_bbarjet[ik][isrc]);

                genmomJCO_bbarjet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_bbarjet[ik][isrc],kappa[ik]));
                genmomJCO_bbarjet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_bbarjet[ik][isrc],kappa[ik]));

                genmomJCO_bbarjet[1][0][ik][isrc] = (igenjet1_long_den_bbarjet[ik][isrc]);
                genmomJCO_bbarjet[1][1][ik][isrc] = (igenjet2_long_den_bbarjet[ik][isrc]);

                genmomJCO_bbarjet[2][0][ik][isrc] = (igenjet1_tran_den_bbarjet[ik][isrc]);
                genmomJCO_bbarjet[2][1][ik][isrc] = (igenjet2_tran_den_bbarjet[ik][isrc]);

		//others
		GenJCO_ojet[0][0][ik][isrc] = (igenjet1candsmom_num_ojet[ik][isrc]/(pow(igenjet1candsmom_den_ojet[ik][isrc],kappa[ik])));
                GenJCO_ojet[0][1][ik][isrc] = (igenjet2candsmom_num_ojet[ik][isrc]/(pow(igenjet2candsmom_den_ojet[ik][isrc],kappa[ik])));

                GenJCO_ojet[1][0][ik][isrc] = (igenjet1_long_num_ojet[ik][isrc]/igenjet1_long_den_ojet[ik][isrc]);
                GenJCO_ojet[1][1][ik][isrc] = (igenjet2_long_num_ojet[ik][isrc]/igenjet2_long_den_ojet[ik][isrc]);

                GenJCO_ojet[2][0][ik][isrc] = (igenjet1_tran_num_ojet[ik][isrc]/igenjet1_tran_den_ojet[ik][isrc]);
                GenJCO_ojet[2][1][ik][isrc] = (igenjet2_tran_num_ojet[ik][isrc]/igenjet2_tran_den_ojet[ik][isrc]);

		genmomJCO_ojet[0][0][ik][isrc] = (pow(igenjet1candsmom_den_ojet[ik][isrc],kappa[ik]));
                genmomJCO_ojet[0][1][ik][isrc] = (pow(igenjet2candsmom_den_ojet[ik][isrc],kappa[ik]));

                genmomJCO_ojet[1][0][ik][isrc] = (igenjet1_long_den_ojet[ik][isrc]);
                genmomJCO_ojet[1][1][ik][isrc] = (igenjet2_long_den_ojet[ik][isrc]);

                genmomJCO_ojet[2][0][ik][isrc] = (igenjet1_tran_den_ojet[ik][isrc]);
                genmomJCO_ojet[2][1][ik][isrc] = (igenjet2_tran_den_ojet[ik][isrc]);

		imatched_all_pt[0][ik][isrc] = igenjet1candsmom_matchedtracks[ik][isrc]/igenjet1candsmom_alltracks[ik][isrc];
                imatched_all_pt[1][ik][isrc] = igenjet2candsmom_matchedtracks[ik][isrc]/igenjet2candsmom_alltracks[ik][isrc];
#endif	

/*
#ifdef TRACKEFFMATCHING
#ifdef TRACKEFFDEBUG
                genmomJCO_trackeff_debug[0][0][ik][isrc] = (pow(igenjet1candsmom_den_trackeff_debug[ik][isrc],kappa[ik]));
                genmomJCO_trackeff_debug[0][1][ik][isrc] = (pow(igenjet2candsmom_den_trackeff_debug[ik][isrc],kappa[ik]));

                genmomJCO_trackeff_debug[1][0][ik][isrc] = (igenjet1_long_den_trackeff_debug[ik][isrc]);
                genmomJCO_trackeff_debug[1][1][ik][isrc] = (igenjet2_long_den_trackeff_debug[ik][isrc]);

                genmomJCO_trackeff_debug[2][0][ik][isrc] = (igenjet1_tran_den_trackeff_debug[ik][isrc]);
                genmomJCO_trackeff_debug[2][1][ik][isrc] = (igenjet2_tran_den_trackeff_debug[ik][isrc]);
#endif
#endif
*/
		}
	}

double recojetpt[njet] = {0.0}, recobjetpt_deepJETT[njet] = {0.0};
double nTrack[njet] = {0.0}, nTrack_bjet_deepJETT[njet] = {0.0};

double RecoCandX1[njet] = {0.0}, RecoCandX1_bjet_deepJETT[njet] = {0.0};
double RecoCandX2[njet] = {0.0}, RecoCandX2_bjet_deepJETT[njet] = {0.0};
double RecoCandX3[njet] = {0.0}, RecoCandX3_bjet_deepJETT[njet] = {0.0};

#ifdef FLAV
double recobjetpt[njet] = {0.0};
double nTrack_bjet[njet] = {0.0};

double RecoCandX1_bjet[njet] = {0.0};
double RecoCandX2_bjet[njet] = {0.0};
double RecoCandX3_bjet[njet] = {0.0};
#endif

#ifdef MATCHING
double genjetpt[njet] = {0.0}, genbjetpt[njet] = {0.0};
#endif
for(int ij=0; ij<njet; ij++){
	recojetpt[0] = recojet1_pt, recojetpt[1] = recojet2_pt;
	recobjetpt_deepJETT[0] = recobjet1_pt_deepJETT, recobjetpt_deepJETT[1] = recobjet2_pt_deepJETT;

	nTrack[0] = nchg1, nTrack[1] = nchg2;
	nTrack_bjet_deepJETT[0] = nchg1_bjet_deepJETT, nTrack_bjet_deepJETT[1] = nchg2_bjet_deepJETT;
	
	RecoCandX1[0] = recoCandX1_J1, RecoCandX1[1] = recoCandX1_J2;
	RecoCandX2[0] = recoCandX2_J1, RecoCandX2[1] = recoCandX2_J2;
	RecoCandX3[0] = recoCandX3_J1, RecoCandX3[1] = recoCandX3_J2;

	RecoCandX1_bjet_deepJETT[0] = recoCandX1_bjet_deepJETT_J1, RecoCandX1_bjet_deepJETT[1] = recoCandX1_bjet_deepJETT_J2;
        RecoCandX2_bjet_deepJETT[0] = recoCandX2_bjet_deepJETT_J1, RecoCandX2_bjet_deepJETT[1] = recoCandX2_bjet_deepJETT_J2;
        RecoCandX3_bjet_deepJETT[0] = recoCandX3_bjet_deepJETT_J1, RecoCandX3_bjet_deepJETT[1] = recoCandX3_bjet_deepJETT_J2;

#ifdef FLAV
	recobjetpt[0] = recobjet1_pt, recobjetpt[1] = recobjet2_pt;

	nTrack_bjet[0] = nchg1_bjet, nTrack_bjet[1] = nchg2_bjet;

	RecoCandX1_bjet[0] = recoCandX1_bjet_J1, RecoCandX1_bjet[1] = recoCandX1_bjet_J2;
        RecoCandX2_bjet[0] = recoCandX2_bjet_J1, RecoCandX2_bjet[1] = recoCandX2_bjet_J2;
        RecoCandX3_bjet[0] = recoCandX3_bjet_J1, RecoCandX3_bjet[1] = recoCandX3_bjet_J2;
#endif

#ifdef MATCHING
	genjetpt[0] = genrecojet1_pt, genjetpt[1] = genrecojet2_pt;
	genbjetpt[0] = genrecobjet1_pt, genbjetpt[1] = genrecobjet2_pt;
#endif
	}	

//Dependence of Jet pT on JCO and flavor tagged JCO
for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
	if(isReconstruct){
	for (int isrc = 0; isrc < njecmx; isrc++) {
        	if(isrc==0){
			if(recomomJCO[id][ij][ik][isrc]>0){hprof_reco_jco_pt[id][ij][ik]->Fill(recojetpt[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO[id][ij][ik][isrc]>0){hprof_Reco_ntrack_vs_jco[id][ij][ik]->Fill(nTrack[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO[id][ij][ik][isrc]>0){hprof_Reco_X1_vs_jco[id][ij][ik]->Fill(RecoCandX1[ij]/recojetpt[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO[id][ij][ik][isrc]>0){hprof_Reco_X12_vs_jco[id][ij][ik]->Fill((RecoCandX1[ij]+RecoCandX2[ij])/recojetpt[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO[id][ij][ik][isrc]>0){hprof_Reco_X123_vs_jco[id][ij][ik]->Fill((RecoCandX1[ij]+RecoCandX2[ij]+RecoCandX3[ij])/recojetpt[ij],RecoJCO[id][ij][ik][isrc],weighttrg);}

			//b-jet Tight Working point
			if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_reco_jco_pt_bjet_deepJETT[id][ij][ik]->Fill(recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);}
			if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_ntrack_vs_jco_bjet_deepJETT[id][ij][ik]->Fill(nTrack_bjet_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);}
			if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_X1_vs_jco_bjet_deepJETT[id][ij][ik]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);}
			if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_X12_vs_jco_bjet_deepJETT[id][ij][ik]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);}
			if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_X123_vs_jco_bjet_deepJETT[id][ij][ik]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij]+RecoCandX3_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);}

			//No SF
			if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_reco_jco_pt_bjet_deepJETT_NoSF[id][ij][ik]->Fill(recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_ntrack_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Fill(nTrack_bjet_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_X1_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_X12_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]>0){hprof_Reco_X123_vs_jco_bjet_deepJETT_NoSF[id][ij][ik]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij]+RecoCandX3_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg);}
#ifdef FLAV
			//RecJet Flavour Information
			if(recomomJCO_gjet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_gjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_gjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_ujet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_ujet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ujet[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO_ubarjet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_ubarjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ubarjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_djet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_djet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_djet[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO_dbarjet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_dbarjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_dbarjet[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO_bjet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_bjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_bjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_bbarjet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_bbarjet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_bbarjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_ojet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_ojet[id][ij][ik]->Fill(recojetpt[ij],RecoJCO_ojet[id][ij][ik][isrc],weighttrg);}

			//b-jet True Flavour Information
			if(recomomJCO_bjet[id][ij][ik][isrc]>0){hprof_reco_jco_pt_bjetTag[id][ij][ik]->Fill(recobjetpt[ij],RecoJCO_bjet[id][ij][ik][isrc],weighttrg);}    //chnage histogram name
			if(recomomJCO_bjet[id][ij][ik][isrc]>0){hprof_Reco_ntrack_vs_jco_bjet[id][ij][ik]->Fill(nTrack_bjet[ij],RecoJCO_bjet[id][ij][ik][isrc],weighttrg);}
			if(recomomJCO_bjet[id][ij][ik][isrc]>0){hprof_Reco_X1_vs_jco_bjet[id][ij][ik]->Fill(RecoCandX1_bjet[ij]/recobjetpt[ij],RecoJCO_bjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_bjet[id][ij][ik][isrc]>0){hprof_Reco_X12_vs_jco_bjet[id][ij][ik]->Fill((RecoCandX1_bjet[ij]+RecoCandX2_bjet[ij])/recobjetpt[ij],RecoJCO_bjet[id][ij][ik][isrc],weighttrg);}
                        if(recomomJCO_bjet[id][ij][ik][isrc]>0){hprof_Reco_X123_vs_jco_bjet[id][ij][ik]->Fill((RecoCandX1_bjet[ij]+RecoCandX2_bjet[ij]+RecoCandX3_bjet[ij])/recobjetpt[ij],RecoJCO_bjet[id][ij][ik][isrc],weighttrg);}
#endif
				}
			}
		}
#ifdef MATCHING
	if(isMC){
	for (int isrc = 0; isrc < nGenReso; isrc++) {
		if(isrc==0){
			if(genmomJCO[id][ij][ik][isrc]>0){hprof_gen_jco_pt[id][ij][ik]->Fill(genjetpt[ij],GenJCO[id][ij][ik][isrc],weighttrg);}
			if(genmomJCO_bjet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_bjetTag[id][ij][ik]->Fill(genbjetpt[ij],GenJCO_bjet[id][ij][ik][isrc],weighttrg);}     //only for b-jet specific information
	
			//GenJet Flavour Information
			if(genmomJCO_gjet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_gjet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_gjet[id][ij][ik][isrc],weighttrg);}		
			if(genmomJCO_ujet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_ujet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_ujet[id][ij][ik][isrc],weighttrg);}
			if(genmomJCO_ubarjet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_ubarjet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_ubarjet[id][ij][ik][isrc],weighttrg);}
			if(genmomJCO_djet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_djet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_djet[id][ij][ik][isrc],weighttrg);}
			if(genmomJCO_dbarjet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_dbarjet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_dbarjet[id][ij][ik][isrc],weighttrg);}
			if(genmomJCO_bjet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_bjet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_bjet[id][ij][ik][isrc],weighttrg);}
                        if(genmomJCO_bbarjet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_bbarjet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_bbarjet[id][ij][ik][isrc],weighttrg);}
			if(genmomJCO_ojet[id][ij][ik][isrc]>0){hprof_gen_jco_pt_ojet[id][ij][ik]->Fill(recojetpt[ij],GenJCO_ojet[id][ij][ik][isrc],weighttrg);}
					}
				}
			}
#endif
		}
	}
}

for(int ij=0; ij<njet; ij++){
        if(isReconstruct){ 
        for (int isrc = 0; isrc < njecmx; isrc++) {
                if(isrc==0){
			Reco_X1[ij]->Fill(RecoCandX1[ij]/recojetpt[ij],weighttrg);
			Reco_X12[ij]->Fill((RecoCandX1[ij]+RecoCandX2[ij])/recojetpt[ij],weighttrg);
			Reco_X123[ij]->Fill((RecoCandX1[ij]+RecoCandX2[ij]+RecoCandX3[ij])/recojetpt[ij],weighttrg);

			Reco_X1_bjet_deepJETT[ij]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],weighttrg*BTagWt);
                        Reco_X12_bjet_deepJETT[ij]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],weighttrg*BTagWt);
                        Reco_X123_bjet_deepJETT[ij]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij]+RecoCandX3_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],weighttrg*BTagWt);

			//No SF
			Reco_X1_bjet_deepJETT_NoSF[ij]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],weighttrg);
                        Reco_X12_bjet_deepJETT_NoSF[ij]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],weighttrg);
                        Reco_X123_bjet_deepJETT_NoSF[ij]->Fill((RecoCandX1_bjet_deepJETT[ij]+RecoCandX2_bjet_deepJETT[ij]+RecoCandX3_bjet_deepJETT[ij])/recobjetpt_deepJETT[ij],weighttrg);
#ifdef FLAV
			Reco_X1_bjet[ij]->Fill(RecoCandX1_bjet[ij]/recobjetpt[ij],weighttrg);
                        Reco_X12_bjet[ij]->Fill((RecoCandX1_bjet[ij]+RecoCandX2_bjet[ij])/recobjetpt[ij],weighttrg);
                        Reco_X123_bjet[ij]->Fill((RecoCandX1_bjet[ij]+RecoCandX2_bjet[ij]+RecoCandX3_bjet[ij])/recobjetpt[ij],weighttrg);	
#endif

			//Scatter Plot
			Reco_X1_X2[ij]->Fill(RecoCandX1[ij]/recojetpt[ij],RecoCandX2[ij]/recojetpt[ij],weighttrg);
			Reco_X1_X3[ij]->Fill(RecoCandX1[ij]/recojetpt[ij],RecoCandX3[ij]/recojetpt[ij],weighttrg);

			Reco_X1_X2_bjet_deepJETT[ij]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],RecoCandX2_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],weighttrg*BTagWt);
                        Reco_X1_X3_bjet_deepJETT[ij]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],RecoCandX3_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],weighttrg*BTagWt);

			Reco_X1_X2_bjet_deepJETT_NoSF[ij]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],RecoCandX2_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],weighttrg);
                        Reco_X1_X3_bjet_deepJETT_NoSF[ij]->Fill(RecoCandX1_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],RecoCandX3_bjet_deepJETT[ij]/recobjetpt_deepJETT[ij],weighttrg);
			}
		}
	}
}

double recotrackpt[njet][nkappa][njecmx] = {{{0.0}}};
#ifdef MATCHING
double gentrackpt[njet][nkappa][njecmx] = {{{0.0}}};
#endif
for(int ik=0; ik<nkappa; ik++){
	for (int isrc = 0; isrc < njecmx; isrc++) {
                recotrackpt[0][ik][isrc] = ijet1candsmom_alltracks[ik][isrc];
                recotrackpt[1][ik][isrc] = ijet2candsmom_alltracks[ik][isrc];
        }
#ifdef MATCHING
        for (int isrc = 0; isrc < nGenReso; isrc++) {
		gentrackpt[0][ik][isrc] = igenjet1candsmom_alltracks[ik][isrc];
		gentrackpt[1][ik][isrc] = igenjet2candsmom_alltracks[ik][isrc];
	}
#endif
}

//Ration of Matched charged pT to All Charged pT vs particle Jet pT
//Ratio of track pT to Jet pT vs Jet pT 
//For both particle and detector level
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
	//Reco level
	if(isReconstruct){
		for (int isrc = 0; isrc < njecmx; isrc++) {
                	if(isrc==0){	
				if(pow(recojetpt[ij],kappa[ik])>0){
					hprof_reco_trackpt_R_jetpt_jetpt[ij][ik]->Fill((pow(recojetpt[ij],kappa[ik])),(recotrackpt[ij][ik][isrc]/(pow(recojetpt[ij],kappa[ik]))),weighttrg);
				}
			}	
		}
	}
	//Gen level
#ifdef MATCHING
	if(isMC){
	for (int isrc = 0; isrc < nGenReso; isrc++) {
                if(isrc==0){
			if(gentrackpt[ij][ik][isrc]>0){
				hprof_matchedChg_R_allChg_genjetpt[ij][ik]->Fill((pow(genjetpt[ij],kappa[ik])),imatched_all_pt[ij][ik][isrc],weighttrg);
				}
			if(pow(genjetpt[ij],kappa[ik])>0){
				hprof_gen_trackpt_R_jetpt_jetpt[ij][ik]->Fill((pow(genjetpt[ij],kappa[ik])),(gentrackpt[ij][ik][isrc]/(pow(genjetpt[ij],kappa[ik]))),weighttrg);
					}
				}
			}
		}
#endif
	}
}

//Charged particle multiplicity vs Jet pT (overall, lead & sub-lead)
hchpt->Fill(recoJetpT,nchg,weighttrg);
//hchpt1->Fill(recojet1_pt, nchg1, weighttrg);
//hchpt2->Fill(recojet2_pt, nchg2, weighttrg);

//cout<<"recojet1_pt : "<<recojet1_pt<<" nchg1 : "<<nchg1<<endl;
//cout<<"recojet2_pt : "<<recojet2_pt<<" nchg2 : "<<nchg2<<endl;

//////////////////////////////////////////////////////////////////////////////////////////////    
//Histograms are filled using array for all the kappa values
//1D
bool isRecoJCO1D[ndef][njet][nkappa][njetetamn];
bool isGenJCO1D[ndef][njet][nkappa][njetetamn];
#ifdef JETRESO
bool isRecoJCO_JER_1D[ndef][njet][nkappa][njetetamn][njecmx];
#endif

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
	if(recomomJCO[id][ij][ik][0]<=0 || recomomJCO[id][ij][ik][1]<=0 || recomomJCO[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif
                        if (isReconstruct) {
				for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
                                        if(recomomJCO[id][ij][ik][isrc]<=0) continue;
#endif
                                        if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
//#ifdef JETRESO
						//isRecoJCO_JER_1D[id][ij][ik][iet][isrc]=true;
//#endif
                                                if (isrc==0) {
                                                        if(ak4PFJets->size()>=2){
                                                        	isRecoJCO1D[id][ij][ik][iet]=true;
								h_recovar[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
								h_recovarIB[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#ifdef FLAV
								if(recomomJCO_gjet[id][ij][ik][isrc]>0){
									h_recovar_gjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_gjet[id][ij][ik][isrc],weighttrg);}
								if(recomomJCO_ujet[id][ij][ik][isrc]>0){
									h_recovar_ujet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ujet[id][ij][ik][isrc],weighttrg);}
								if(recomomJCO_ubarjet[id][ij][ik][isrc]>0){
                                                                	h_recovar_ubarjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ubarjet[id][ij][ik][isrc],weighttrg);}
								if(recomomJCO_djet[id][ij][ik][isrc]>0){
									h_recovar_djet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_djet[id][ij][ik][isrc],weighttrg);}
								if(recomomJCO_dbarjet[id][ij][ik][isrc]>0){
                                                                	h_recovar_dbarjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_dbarjet[id][ij][ik][isrc],weighttrg);}
								if(recomomJCO_bjet[id][ij][ik][isrc]>0){
                                                                        h_recovar_bjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet[id][ij][ik][isrc],weighttrg);}
                                                                if(recomomJCO_bbarjet[id][ij][ik][isrc]>0){
                                                                        h_recovar_bbarjet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bbarjet[id][ij][ik][isrc],weighttrg);}
								if(recomomJCO_ojet[id][ij][ik][isrc]>0){
									h_recovar_ojet[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_ojet[id][ij][ik][isrc],weighttrg);}
#endif
							
#ifdef PREFIRE
								h_recovar_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
								h_recovar_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1up);
								h_recovar_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1down);
#endif
                                                        }//if(ak4PFJets->size()>=2){
                                                }//if (isrc==0) {
                                                else{
#ifdef JETENERGY
                                                	if(ak4PFJets->size()>=2){
                                                                h_recovarjec[id][ij][ik][iet][irecohtjec[isrc]][isrc]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
#elif defined(JETRESO)
                                                        if(ak4PFJets->size()>=2){
								isRecoJCO_JER_1D[id][ij][ik][iet][isrc]=true;
                                                                h_recovarres[id][ij][ik][iet][irecohtjec[isrc]][isrc]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
#endif
                                                }//else{
                            		}//if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                }// for (int isrc=0; isrc<njecmx; isrc++) {
                       	}//if (isReconstruct) {
			if(isMC){
                                 for (int isrc=0; isrc<nGenReso; isrc++) {
                                        if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                                if(isrc==0){
                                                        if(genjets->size()>=2){
                                                        	isGenJCO1D[id][ij][ik][iet]=true;
                                                        	h_genvar[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
#ifdef MATCHING
								if(genmomJCO_gjet[id][ij][ik][isrc]>0){
                                                                	h_genvar_gjet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_gjet[id][ij][ik][isrc],weighttrg);}
								if(genmomJCO_ujet[id][ij][ik][isrc]>0){
                                                                	h_genvar_ujet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_ujet[id][ij][ik][isrc],weighttrg);}		
								if(genmomJCO_ubarjet[id][ij][ik][isrc]>0){
                                                                	h_genvar_ubarjet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_ubarjet[id][ij][ik][isrc],weighttrg);}
								if(genmomJCO_djet[id][ij][ik][isrc]>0){
                                                                	h_genvar_djet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_djet[id][ij][ik][isrc],weighttrg);}
								if(genmomJCO_dbarjet[id][ij][ik][isrc]>0){
                                                                	h_genvar_dbarjet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_dbarjet[id][ij][ik][isrc],weighttrg);}

								if(genmomJCO_bjet[id][ij][ik][isrc]>0){
                                                                        h_genvar_bjet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_bjet[id][ij][ik][isrc],weighttrg);}

                                                                if(genmomJCO_bbarjet[id][ij][ik][isrc]>0){
                                                                        h_genvar_bbarjet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_bbarjet[id][ij][ik][isrc],weighttrg);}

								if(genmomJCO_ojet[id][ij][ik][isrc]>0){
                                                                	h_genvar_ojet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_ojet[id][ij][ik][isrc],weighttrg);}
#endif

#ifdef PREFIRE
								h_genvar_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
								h_genvar_prefireup[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1up);
								h_genvar_prefiredown[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif
							}//if(genjets->size()>=2){
#ifdef LHAPDF
                                                        for (int ix=1; ix<nnnmx; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarpdf[id][ij][ik][iet][igenhtres[isrc]][ix]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*pdfwt[ix]);
                                                                }
                                                  	}

							for (int iy=0; iy<nmgscale; iy++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarmgscale[id][ij][ik][iet][igenhtres[isrc]][iy]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*mgscale[iy]);
                                                                }
                                                   	}
#endif

#ifdef SCALEUNC
							for (int ix=0; ix<nscale; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        h_genvarscaleunc[id][ij][ik][iet][igenhtres[isrc]][ix]->Fill(GenJCO[id][ij][ik][isrc], weighttrg*scalewt[ix]);
                                                                }
                                                    	}
#endif
                                                }//if(isrc==0){
                                        }//if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
					if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                                if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
						if( isRecoJCO1D[id][ij][ik][iet] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif

                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
							h_RM[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
#ifdef PREFIRE
							h_RM_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
							h_RM_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrgL1up);
							h_RM_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#ifdef PREFIRE
							h_recofake_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
							h_recofake_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1up);
							h_recofake_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1down);
#endif
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
#ifdef PREFIRE
							h_genmiss_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
							h_genmiss_prefireup[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1up);
							h_genmiss_prefiredown[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif
                                                        }
                                                }
						else{
                                                        if(isRecoJCO1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
#ifdef PREFIRE
								h_recofake_prefire[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrg);
								h_recofake_prefireup[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1up);
								h_recofake_prefiredown[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO[id][ij][ik][isrc],weighttrgL1down);
#endif
							}
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
#ifdef PREFIRE
								h_genmiss_prefire[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrg);
								h_genmiss_prefireup[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1up);
								h_genmiss_prefiredown[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO[id][ij][ik][isrc],weighttrgL1down);
#endif
                                                	}
						}//else{
					}//if (isrc==0 && isReconstruct){
#ifdef JETRESO
                        if(isrc==0 && isReconstruct){
                                for(int ijer=0 ; ijer < njecmx ; ijer++){
#ifdef MATCHING
                                        if( isRecoJCO_JER_1D[id][ij][ik][iet][ijer] && isGenJCO1D[id][ij][ik][iet] && irecohtjec[ijer]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && jet_matches){
#endif
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        h_RM_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc],GenJCO[id][ij][ik][isrc],weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        h_recofake_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        h_genmiss_JER[id][ij][ik][iet][igenhtres[isrc]][ijer]->Fill(GenJCO[id][ij][ik][isrc], weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_JER_1D[id][ij][ik][iet][ijer] && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && ak4PFJets->size()>=2){
                                                                h_recofake_JER[id][ij][ik][iet][irecohtjec[ijer]][ijer]->Fill(RecoJCO[id][ij][ik][isrc], weighttrg);
                                                                }
                                                        if(isGenJCO1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                h_genmiss_JER[id][ij][ik][iet][igenhtres[isrc]][ijer]->Fill(GenJCO[id][ij][ik][isrc], weighttrg);
                                                                }
                                                        }
                                                }//for(int ijer=0 ; ijer < njecmx ; ijer++){
                                        }//if(isrc==0 && isReconstruct){
#endif
					}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
			}//for (int ik=0; ik<nkappa; ik++){
		}//for(int ij=0; ij<njet; ij++){
	}//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){

//////////////////////////////////////////////////////////////////////////////////////////////
//2D
bool isRecoJCO2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO2D[ndef][njet][nkappa][njetetamn];
#ifdef JETRESO
bool isRecoJCO_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
#endif

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
	if(recomomJCO[id][ij][ik][0]<=0 || recomomJCO[id][ij][ik][1]<=0 || recomomJCO[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif
                        if (isReconstruct) {
                                for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
					if(recomomJCO[id][ij][ik][isrc]<=0) continue;
#endif
					if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
//#ifdef JETRESO
						//isRecoJCO_JER_2D[id][ij][ik][iet][isrc]=true;
//#endif
                                                if (isrc==0) {
							if(ak4PFJets->size()>=2){
								isRecoJCO2D[id][ij][ik][iet]=true;
								int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
								h_recovar2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
								int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
#ifdef FLAV
								//Flavor Tagging JCO
								if(recomomJCO_gjet[id][ij][ik][isrc]>0){
									int irecbin_gjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_gjet[id][ij][ik][isrc],leadingptjec[isrc]);
									h_recovar_gjet2D[id][ij][ik][iet]->Fill(irecbin_gjet,weighttrg);}
                                                        	if(recomomJCO_ujet[id][ij][ik][isrc]>0){
									int irecbin_ujet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ujet[id][ij][ik][isrc],leadingptjec[isrc]);
									h_recovar_ujet2D[id][ij][ik][iet]->Fill(irecbin_ujet,weighttrg);}
								if(recomomJCO_ubarjet[id][ij][ik][isrc]>0){
                                                                	int irecbin_ubarjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ubarjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                	h_recovar_ubarjet2D[id][ij][ik][iet]->Fill(irecbin_ubarjet,weighttrg);}
                                                        	if(recomomJCO_djet[id][ij][ik][isrc]>0){
									int irecbin_djet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_djet[id][ij][ik][isrc],leadingptjec[isrc]);
									h_recovar_djet2D[id][ij][ik][iet]->Fill(irecbin_djet,weighttrg);}
                                                        	if(recomomJCO_dbarjet[id][ij][ik][isrc]>0){
                                                                	int irecbin_dbarjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_dbarjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                	h_recovar_dbarjet2D[id][ij][ik][iet]->Fill(irecbin_dbarjet,weighttrg);}
								if(recomomJCO_bjet[id][ij][ik][isrc]>0){
                                                                        int irecbin_bjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                        h_recovar_bjet2D[id][ij][ik][iet]->Fill(irecbin_bjet,weighttrg);}
                                                                if(recomomJCO_bbarjet[id][ij][ik][isrc]>0){
                                                                        int irecbin_bbarjet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bbarjet[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                        h_recovar_bbarjet2D[id][ij][ik][iet]->Fill(irecbin_bbarjet,weighttrg);}
								if(recomomJCO_ojet[id][ij][ik][isrc]>0){
									int irecbin_ojet = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_ojet[id][ij][ik][isrc],leadingptjec[isrc]);
									h_recovar_ojet2D[id][ij][ik][iet]->Fill(irecbin_ojet,weighttrg);}
#endif

#ifdef PREFIRE
                                                     		h_recovar_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
								h_recovar_prefireup_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1up);
								h_recovar_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1down);

								h_recovar_prefire2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                                                h_recovar_prefireup_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrgL1up);
                                                                h_recovar_prefiredown_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrgL1down);
#endif

#ifdef LHAPDF
                                                        for (int ix=1; ix<nnnmx; ix++) {
                                                                if (ak4PFJets->size()>=2) {
                                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                        h_recovarpdf2D[id][ij][ik][iet][ix]->Fill(irecbin, weighttrg*pdfwt[ix]);
									int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                        h_recovarpdf2D_BJetBin[id][ij][ik][iet][ix]->Fill(irecbin_BJetBin, weighttrg*pdfwt[ix]);
                                                                }
                                                        }
#endif
							}//if(ak4PFJets->size()>=2){
						}//if (isrc==0) {
						else{
#ifdef JETENERGY
							if(ak4PFJets->size()>=2){
								int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        	h_recovarjec2D[id][ij][ik][iet][isrc]->Fill(irecbin, weighttrg);
								int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovarjec2D_BJetBin[id][ij][ik][iet][isrc]->Fill(irecbin_BJetBin, weighttrg);
							}
#elif defined(JETRESO)
							if(ak4PFJets->size()>=2){
								isRecoJCO_JER_2D[id][ij][ik][iet][isrc]=true;
                                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovarres2D[id][ij][ik][iet][isrc]->Fill(irecbin, weighttrg);
								int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovarres2D_BJetBin[id][ij][ik][iet][isrc]->Fill(irecbin_BJetBin, weighttrg);
                                                        }
#endif
						}
					}//if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
				}//for (int isrc=0; isrc<njecmx; isrc++) {
			}//if (isReconstruct) {
			if(isMC){
				 for (int isrc=0; isrc<nGenReso; isrc++) {
					if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
						if(isrc==0){
							if(genjets->size()>=2){
								isGenJCO2D[id][ij][ik][iet]=true;
								int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                        	                h_genvar2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
								int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genvar2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
#ifdef MATCHING
								//GenJet Flavour info
								if(genmomJCO_gjet[id][ij][ik][isrc]>0){
                                                                	int igenbin_gjet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_gjet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                	h_genvar_gjet2D[id][ij][ik][iet]->Fill(igenbin_gjet,weighttrg);}
								if(genmomJCO_ujet[id][ij][ik][isrc]>0){
                                                                	int igenbin_ujet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_ujet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                	h_genvar_ujet2D[id][ij][ik][iet]->Fill(igenbin_ujet,weighttrg);}
								if(genmomJCO_ubarjet[id][ij][ik][isrc]>0){
                                                                	int igenbin_ubarjet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_ubarjet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                	h_genvar_ubarjet2D[id][ij][ik][iet]->Fill(igenbin_ubarjet,weighttrg);}
								if(genmomJCO_djet[id][ij][ik][isrc]>0){
                                                                	int igenbin_djet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_djet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                	h_genvar_djet2D[id][ij][ik][iet]->Fill(igenbin_djet,weighttrg);}
								if(genmomJCO_dbarjet[id][ij][ik][isrc]>0){
                                                                	int igenbin_dbarjet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_dbarjet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                	h_genvar_dbarjet2D[id][ij][ik][iet]->Fill(igenbin_dbarjet,weighttrg);}
								if(genmomJCO_bjet[id][ij][ik][isrc]>0){
                                                                        int igenbin_bjet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_bjet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvar_bjet2D[id][ij][ik][iet]->Fill(igenbin_bjet,weighttrg);}
                                                                if(genmomJCO_bbarjet[id][ij][ik][isrc]>0){
                                                                        int igenbin_bbarjet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_bbarjet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvar_bbarjet2D[id][ij][ik][iet]->Fill(igenbin_bbarjet,weighttrg);}
								if(genmomJCO_ojet[id][ij][ik][isrc]>0){
                                                                	int igenbin_ojet = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_ojet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                	h_genvar_ojet2D[id][ij][ik][iet]->Fill(igenbin_ojet,weighttrg);}
#endif

#ifdef PREFIRE
                                                       	 	h_genvar_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
								h_genvar_prefireup_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1up);
								h_genvar_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1down);

								h_genvar_prefire2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                                                h_genvar_prefireup_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrgL1up);
                                                                h_genvar_prefiredown_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrgL1down);
#endif
							}//if(genjets->size()>=2){
#ifdef LHAPDF
                				        for (int ix=1; ix<nnnmx; ix++) {
		                        			if (genjets->size()>=2) {
                        						int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                        						h_genvarpdf2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*pdfwt[ix]);
									int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarpdf2D_BJetBin[id][ij][ik][iet][ix]->Fill(igenbin_BJetBin, weighttrg*pdfwt[ix]);
                                                                }
                        				}
							for (int iy=0; iy<nmgscale; iy++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarmgscale2D[id][ij][ik][iet][iy]->Fill(igenbin, weighttrg*mgscale[iy]);
									int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarmgscale2D_BJetBin[id][ij][ik][iet][iy]->Fill(igenbin_BJetBin, weighttrg*mgscale[iy]);
                                                        	}
                                                	}
#endif

#ifdef SCALEUNC
							for (int ix=0; ix<nscale; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarscaleunc2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*scalewt[ix]);
									int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvarscaleunc2D_BJetBin[id][ij][ik][iet][ix]->Fill(igenbin_BJetBin, weighttrg*scalewt[ix]);
                                                                }
                                                   	}
#endif
						}//if(isrc==0){
					}//if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
					if (isrc==0 && isReconstruct){
#ifdef MATCHING
						if( isRecoJCO2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
						if( isRecoJCO2D[id][ij][ik][iet] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
							int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
							int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_RM2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);

							int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrg);
#ifdef PREFIRE
							h_RM_prefire2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);
							h_RM_prefireup_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrgL1up);
							h_RM_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrgL1down);

							h_RM_prefire2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrg);
                                                        h_RM_prefireup_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrgL1up);
                                                        h_RM_prefiredown_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrgL1down);
#endif

#ifdef LHAPDF
						for (int ix=1; ix<nnnmx; ix++) {
							h_RMpdf2D[id][ij][ik][iet][ix]->Fill(irecbin, igenbin, weighttrg*pdfwt[ix]);
							h_RMpdf2D_BJetBin[id][ij][ik][iet][ix]->Fill(irecbin_BJetBin, igenbin_BJetBin, weighttrg*pdfwt[ix]);
						}
#endif
							}
						else if(ak4PFJets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
							int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recofake2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
#ifdef PREFIRE
							h_recofake_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
							h_recofake_prefireup_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1up);
							h_recofake_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1down);

							h_recofake_prefire2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                                        h_recofake_prefireup_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrgL1up);
                                                        h_recofake_prefiredown_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrgL1down);
#endif

#ifdef LHAPDF
						for (int ix=1; ix<nnnmx; ix++) {
                                                        h_recofakepdf2D[id][ij][ik][iet][ix]->Fill(irecbin, weighttrg*pdfwt[ix]);
							h_recofakepdf2D_BJetBin[id][ij][ik][iet][ix]->Fill(irecbin_BJetBin, weighttrg*pdfwt[ix]);
                                                }
#endif
							}
						else if(genjets->size()>=2){
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
							int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
#ifdef PREFIRE
							h_genmiss_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
							h_genmiss_prefireup_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1up);
							h_genmiss_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1down);

							h_genmiss_prefire2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                                        h_genmiss_prefireup_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrgL1up);
                                                        h_genmiss_prefiredown_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrgL1down);
#endif

#ifdef LHAPDF
						for (int ix=1; ix<nnnmx; ix++) {
                                                        h_genmisspdf2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*pdfwt[ix]);
							h_genmisspdf2D_BJetBin[id][ij][ik][iet][ix]->Fill(igenbin_BJetBin, weighttrg*pdfwt[ix]);
                                                }
#endif
							}
						}
						else{
							if(isRecoJCO2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
								int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        	h_recofake2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
								int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recofake2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
#ifdef PREFIRE
								h_recofake_prefire2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
								h_recofake_prefireup_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1up);
								h_recofake_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin, weighttrgL1down);

								h_recofake_prefire2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                                                h_recofake_prefireup_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrgL1up);
                                                                h_recofake_prefiredown_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrgL1down);
#endif

#ifdef LHAPDF
                                                for (int ix=1; ix<nnnmx; ix++) {
                                                        h_recofakepdf2D[id][ij][ik][iet][ix]->Fill(irecbin, weighttrg*pdfwt[ix]);
							h_recofakepdf2D_BJetBin[id][ij][ik][iet][ix]->Fill(irecbin_BJetBin, weighttrg*pdfwt[ix]);
                                                }
#endif
								}
							if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
								int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
	                                                        h_genmiss2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
								int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
#ifdef PREFIRE
								h_genmiss_prefire2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
								h_genmiss_prefireup_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1up);
								h_genmiss_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin, weighttrgL1down);

								h_genmiss_prefire2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                                                h_genmiss_prefireup_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrgL1up);
                                                                h_genmiss_prefiredown_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrgL1down);
#endif

#ifdef LHAPDF
                                                for (int ix=1; ix<nnnmx; ix++) {
                                                        h_genmisspdf2D[id][ij][ik][iet][ix]->Fill(igenbin, weighttrg*pdfwt[ix]);
							h_genmisspdf2D_BJetBin[id][ij][ik][iet][ix]->Fill(igenbin_BJetBin, weighttrg*pdfwt[ix]);
                                                }
#endif
								}												
							}//else{
						}//if (isrc==0 && isReconstruct){
#ifdef JETRESO
			if(isrc==0 && isReconstruct){
				for(int ijer=0 ; ijer < njecmx ; ijer++){
#ifdef MATCHING
					if( isRecoJCO_JER_2D[id][ij][ik][iet][ijer] && isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && jet_matches){
#endif
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][ijer],leadingptjec[ijer]);
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_RM_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin,igenbin,weighttrg);
							int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][ijer],leadingptjec[ijer]);
                                                        int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_JER_2D_BJetBin[id][ij][ik][iet][ijer]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrg);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][ijer],leadingptjec[ijer]);
							h_recofake_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin, weighttrg);
							int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][ijer],leadingptjec[ijer]);
                                                        h_recofake_JER_2D_BJetBin[id][ij][ik][iet][ijer]->Fill(irecbin_BJetBin, weighttrg);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
							h_genmiss_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin, weighttrg);
							int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_JER_2D_BJetBin[id][ij][ik][iet][ijer]->Fill(igenbin_BJetBin, weighttrg);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_JER_2D[id][ij][ik][iet][ijer] && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][ijer],leadingptjec[ijer]);
								h_recofake_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin, weighttrg);
								int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO[id][ij][ik][ijer],leadingptjec[ijer]);
                                                                h_recofake_JER_2D_BJetBin[id][ij][ik][iet][ijer]->Fill(irecbin_BJetBin, weighttrg);
                                                                }
                                                        if(isGenJCO2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
								h_genmiss_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin, weighttrg);
								int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_JER_2D_BJetBin[id][ij][ik][iet][ijer]->Fill(igenbin_BJetBin, weighttrg);
                                                                }
                                                        }
						}//for(int ijer=0 ; ijer < njecmx ; ijer++){
					}//if(isrc==0 && isReconstruct){
#endif
					}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
			}//for (int ik=0; ik<nkappa; ik++){
		}//for(int ij=0; ij<njet; ij++){
	}//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){

////////////////////////////////////////////////////////////////////////////
//For Track Efficiency
#ifdef TRACKEFF
bool isRecoJCO_TrackEff2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_TrackEff2D[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
        if(recomomJCO_trackeff[id][ij][ik][0]<=0 || recomomJCO_trackeff[id][ij][ik][1]<=0 || recomomJCO_trackeff[id][ij][ik][2]<=0 || genmomJCO_trackeff[id][ij][ik][0]<=0) continue;
#endif
		if (isReconstruct) {
			for (int isrc=0; isrc<njecmx; isrc++) {
				if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                        if (isrc==0) {
						if(ak4PFJets->size()>=2){
                                			isRecoJCO_TrackEff2D[id][ij][ik][iet]=true;
                                        		int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                        		h_recovar_trackeff2D[id][ij][ik][iet]->Fill(irecbin,weighttrg);
							int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackeff2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,weighttrg);
                                        		}
						}
					}
				}
			}
		if(isMC){
                        for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
                                                	isGenJCO_TrackEff2D[id][ij][ik][iet]=true;
							int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
							h_genvar_trackeff2D[id][ij][ik][iet]->Fill(igenbin,weighttrg);
							int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genvar_trackeff2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin,weighttrg);
                                                	}
                                        	}
                                	}
				if(isrc==0 && isReconstruct){
#ifdef MATCHING
				if(isRecoJCO_TrackEff2D[id][ij][ik][iet] && isGenJCO_TrackEff2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#endif
					if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                        	int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_trackeff2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_trackeff2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrg);
                                        }
					else if(ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackeff2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackeff2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                        }
					else if(genjets->size()>=2){
						int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackeff2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
						int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackeff2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
					}
				}
				else{
					if(isRecoJCO_TrackEff2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackeff2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackeff2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                        }
                                        if(isGenJCO_TrackEff2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                        	int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackeff2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
						int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackeff2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                		}
                 			}
				}
			}
		}
			}
		}
	}	
}
#endif

/*
//Tracking Efficiency using Matching
#ifdef TRACKEFFDEBUG
bool isRecoJCO_TrackEff2D_debug[ndef][njet][nkappa][njetetamn];
bool isGenJCO_TrackEff2D_debug[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef TRACKEFFMATCHING
        if(recomomJCO_trackeff_debug[id][ij][ik][0]<=0 || recomomJCO_trackeff_debug[id][ij][ik][1]<=0 || recomomJCO_trackeff_debug[id][ij][ik][2]<=0 || genmomJCO_trackeff_debug[id][ij][ik][0]<=0) continue;
#endif
                if (isReconstruct) {
                        for (int isrc=0; isrc<njecmx; isrc++) {
                                if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                        if (isrc==0) {
                                                if(ak4PFJets->size()>=2){
                                                        isRecoJCO_TrackEff2D_debug[id][ij][ik][iet]=true;
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff_debug[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackeff2D_debug[id][ij][ik][iet]->Fill(irecbin,weighttrg);
                                                        }
                                                }
                                        }
                                }
                        }
                if(isMC){
                        for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
                                                        isGenJCO_TrackEff2D_debug[id][ij][ik][iet]=true;
                                                        int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff_debug[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genvar_trackeff2D_debug[id][ij][ik][iet]->Fill(igenbin,weighttrg);
                                                        }
                                                }
                                        }
                                if(isrc==0 && isReconstruct){
#ifdef TRACKEFFMATCHING
                                if(isRecoJCO_TrackEff2D_debug[id][ij][ik][iet] && isGenJCO_TrackEff2D_debug[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && TrackJet_matches){
#endif
                                        if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff_debug[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff_debug[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_trackeff2D_debug[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);
                                        }
                                        else if(ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff_debug[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackeff2D_debug[id][ij][ik][iet]->Fill(irecbin, weighttrg);
                                        }
                                        else if(genjets->size()>=2){
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff_debug[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackeff2D_debug[id][ij][ik][iet]->Fill(igenbin, weighttrg);
                                        }
                                }
                                else{
                                        if(isRecoJCO_TrackEff2D_debug[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackeff_debug[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackeff2D_debug[id][ij][ik][iet]->Fill(irecbin, weighttrg);
                                        }
                                        if(isGenJCO_TrackEff2D_debug[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_trackeff_debug[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackeff2D_debug[id][ij][ik][iet]->Fill(igenbin, weighttrg);
                                                }
                                        }
                                }
                        }
                }
                        }
                }
        }
}
#endif
*/

#ifdef TRACKPTUP
//Trackpt up
bool isRecoJCO_TrackPT1_2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_TrackPT1_2D[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
        if(recomomJCO_trackpt1[id][ij][ik][0]<=0 || recomomJCO_trackpt1[id][ij][ik][1]<=0 || recomomJCO_trackpt1[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif
                if (isReconstruct) {
                        for (int isrc=0; isrc<njecmx; isrc++) {
                                if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
					if (isrc==0) {
                                                if(ak4PFJets->size()>=2){
                                                        isRecoJCO_TrackPT1_2D[id][ij][ik][iet]=true;
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin,weighttrg);
							int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt1_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,weighttrg);
                                                        }
                                                }
                                        }
                                }
                        }
                if(isMC){
			for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
                                                isGenJCO_TrackPT1_2D[id][ij][ik][iet]=true;
                                                }
                                        }
                                }
                                if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                if(isRecoJCO_TrackPT1_2D[id][ij][ik][iet] && isGenJCO_TrackPT1_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#endif
					if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_trackpt1_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrg);
                                        }
                                        else if(ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt1_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                        }
                                        else if(genjets->size()>=2){
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
						int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt1_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                        }
                                }
				else{
					if(isRecoJCO_TrackPT1_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt1_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                        }
                                        if(isGenJCO_TrackPT1_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
						int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt1_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                                }
					}
                                }
                        }
                }
                        }
                }
        }
}
#endif

#ifdef TRACKPTDOWN
//Trackpt Down
bool isRecoJCO_TrackPT2_2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_TrackPT2_2D[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
        if(recomomJCO_trackpt2[id][ij][ik][0]<=0 || recomomJCO_trackpt2[id][ij][ik][1]<=0 || recomomJCO_trackpt2[id][ij][ik][2]<=0 || genmomJCO[id][ij][ik][0]<=0) continue;
#endif
                if (isReconstruct) {
			for (int isrc=0; isrc<njecmx; isrc++) {
				if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                        if (isrc==0) {
                                                if(ak4PFJets->size()>=2){
							isRecoJCO_TrackPT2_2D[id][ij][ik][iet]=true;
                                                        int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin,weighttrg);
							int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_trackpt2_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,weighttrg);
							}
                                                }
                                        }
                                }
                        }
		if(isMC){
                        for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
						isGenJCO_TrackPT2_2D[id][ij][ik][iet]=true;
						}
                                        }
                           	}
                                if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                if(isRecoJCO_TrackPT2_2D[id][ij][ik][iet] && isGenJCO_TrackPT2_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#endif
                                        if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_trackpt2_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin,igenbin_BJetBin,weighttrg);
                                        }
                                        else if(ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt2_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                        }
                                        else if(genjets->size()>=2){
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
						int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt2_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                        }
                                }
                                else{
                                        if(isRecoJCO_TrackPT2_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                int irecbin = RecoBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg);
						int irecbin_BJetBin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_trackpt2_2D_BJetBin[id][ij][ik][iet]->Fill(irecbin_BJetBin, weighttrg);
                                        }
                                        if(isGenJCO_TrackPT2_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                int igenbin = GenBinning2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg);
						int igenbin_BJetBin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_trackpt2_2D_BJetBin[id][ij][ik][iet]->Fill(igenbin_BJetBin, weighttrg);
                                                }
                                        }
                                }
                        }
                }
                        }
                }
        }
}
#endif

//////////////////////////////////////////////////////////////////////////////////////////////
//Histograms are filled using array for all the kappa values
//1D bJetJCO

bool isRecoJCO_bjet_1D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_bjet_1D[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
	if(recomomJCO_bjet_deepJETT[id][ij][ik][0]<=0 || recomomJCO_bjet_deepJETT[id][ij][ik][1]<=0 || recomomJCO_bjet_deepJETT[id][ij][ik][2]<=0 || genmomJCO_BJet[id][ij][ik][0]<=0) continue;
#endif
		if (isReconstruct) {
			for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
                        	if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]<=0) continue;
#endif
				if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
					if (isrc==0) {
                                        	if(ak4PFJets->size()>=2){
                                                isRecoJCO_bjet_1D[id][ij][ik][iet]=true;
                                                h_recovar_bjet_deepJETT[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);
						h_recovar_bjet_deepJETT_NoSF[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg);
						h_recovarIB_bjet_deepJETT[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);
						h_recovarIB_bjet_deepJETT_NoSF[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg);
							}
						}
					}
				}
			}//if (isReconstruct) {
		 if(isMC){
                 	for (int isrc=0; isrc<nGenReso; isrc++) {
                        	if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                	if(isrc==0){
                                        	if(genjets->size()>=2){
                                                isGenJCO_bjet_1D[id][ij][ik][iet]=true;
                                                h_genvar_BJet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_BJet[id][ij][ik][isrc],weighttrg*BTagWt);
						}
					}
				}

					if (isrc==0 && isReconstruct){
#ifdef MATCHING
						if( isRecoJCO_bjet_1D[id][ij][ik][iet] && isGenJCO_bjet_1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
						if( isRecoJCO_bjet_1D[id][ij][ik][iet] && isGenJCO_bjet_1D[id][ij][ik][iet] && irecohtjec[isrc]==igenhtres[isrc] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif
						if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                			h_RM_bjet_deepJETT[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],GenJCO_BJet[id][ij][ik][isrc],weighttrg*BTagWt);
						}
						else if(ak4PFJets->size()>=2){
                                			h_recofake_bjet_deepJETT[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);
							}
						else if(genjets->size()>=2){
                                			h_genmiss_BJet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_BJet[id][ij][ik][isrc],weighttrg*BTagWt);
							}
						}
						else{
							if(isRecoJCO_bjet_1D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                        			h_recofake_bjet_deepJETT[id][ij][ik][iet][irecohtjec[isrc]]->Fill(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],weighttrg*BTagWt);
							}
							if(isGenJCO_bjet_1D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                        			h_genmiss_BJet[id][ij][ik][iet][igenhtres[isrc]]->Fill(GenJCO_BJet[id][ij][ik][isrc],weighttrg*BTagWt);
								}
							}//else{
						}//if (isrc==0 && isReconstruct){		
					}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
			}//for (int ik=0; ik<nkappa; ik++){
		}//for(int ij=0; ij<njet; ij++){
	}//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){

//////////////////////////////////////////////////////////////////////////////////////////////
//Histograms are filled using array for all the kappa values
//2D bJetJCO

bool isRecoJCO_bjet_2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_bjet_2D[ndef][njet][nkappa][njetetamn];
#ifdef JETRESO
bool isRecoJCO_bjet_JER_2D[ndef][njet][nkappa][njetetamn][njecmx];
#endif

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
        if(recomomJCO_bjet_deepJETT[id][ij][ik][0]<=0 || recomomJCO_bjet_deepJETT[id][ij][ik][1]<=0 || recomomJCO_bjet_deepJETT[id][ij][ik][2]<=0 || genmomJCO_BJet[id][ij][ik][0]<=0) continue;
#endif
		if (isReconstruct) {
                	for (int isrc=0; isrc<njecmx; isrc++) {
#ifndef MATCHING
                        	if(recomomJCO_bjet_deepJETT[id][ij][ik][isrc]<=0) continue;
#endif
                                if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                        if (isrc==0) {
                                                if(ak4PFJets->size()>=2){
                                                isRecoJCO_bjet_2D[id][ij][ik][iet]=true;
						int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recovar_bjet2D_deepJETT[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt);
						h_recovar_bjet2D_deepJETT_NoSF[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg);
						//cout<<"BTagWt : "<<BTagWt<<" weighttrg : "<<weighttrg<<" Total wt : "<<weighttrg*BTagWt<<endl;
#ifdef PREFIRE
                                                h_recovar_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt);
                                                h_recovar_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrgL1up*BTagWt);
                                                h_recovar_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrgL1down*BTagWt);
#endif

#ifdef BTAGUNC
                                                h_recovar_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_upCorr);
                                                h_recovar_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_downCorr);
                                                h_recovar_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_upUncorr);
                                                h_recovar_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_downUncorr);
						/*
						cout<<"BTagWt_upCorr : "<<BTagWt_upCorr<<" weighttrg : "<<weighttrg<<" Total BTagWt_upCorr : "<<weighttrg*BTagWt_upCorr<<endl;
						cout<<"BTagWt_downCorr : "<<BTagWt_downCorr<<" weighttrg : "<<weighttrg<<" Total BTagWt_downCorr : "<<weighttrg*BTagWt_downCorr<<endl;
						cout<<"BTagWt_upUncorr : "<<BTagWt_upUncorr<<" weighttrg : "<<weighttrg<<" Total BTagWt_upUncorr : "<<weighttrg*BTagWt_upUncorr<<endl;
						cout<<"BTagWt_downUncorr : "<<BTagWt_downUncorr<<" weighttrg : "<<weighttrg<<" Total BTagWt_downUncorr : "<<weighttrg*BTagWt_downUncorr<<endl;
						*/
#endif

#ifdef LHAPDF
                                                        for (int ix=1; ix<nnnmx; ix++) {
                                                                if (ak4PFJets->size()>=2) {
                                                                        int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                        h_recovar_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Fill(irecbin_bjet, weighttrg*BTagWt*pdfwt[ix]);
                                                                }
                                                        }
#endif
                                                        }//if(ak4PFJets->size()>=2){
                                                }//if (isrc==0) {
						else{
#ifdef JETENERGY
                                                        if(ak4PFJets->size()>=2){
                                                                int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_bjet_deepJETT_jec2D[id][ij][ik][iet][isrc]->Fill(irecbin_bjet, weighttrg);
                                                        }

#elif defined(JETRESO)
                                                        if(ak4PFJets->size()>=2){
                                                                isRecoJCO_bjet_JER_2D[id][ij][ik][iet][isrc]=true;
                                                                int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],leadingptjec[isrc]);
                                                                h_recovar_bjet_deepJETT_res2D[id][ij][ik][iet][isrc]->Fill(irecbin_bjet, weighttrg*BTagWt);
                                                        }

#endif
						}
                                        }//if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                }//for (int isrc=0; isrc<njecmx; isrc++) {
                        }//if (isReconstruct) {
		if(isMC){
                        for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
                                                isGenJCO_bjet_2D[id][ij][ik][iet]=true;
						int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genvar_BJet2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt);

#ifdef PREFIRE
                                                h_genvar_BJet_prefire2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt);
                                                h_genvar_BJet_prefireup_2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrgL1up*BTagWt);
                                                h_genvar_BJet_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrgL1down*BTagWt);
#endif

#ifdef BTAGUNC
                                                h_genvar_BJet_BTagWt_upCorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_upCorr);
                                                h_genvar_BJet_BTagWt_downCorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_downCorr);
                                                h_genvar_BJet_BTagWt_upUncorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_upUncorr);
                                                h_genvar_BJet_BTagWt_downUncorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_downUncorr);
#endif

                                                }//if(genjets->size()>=2){
#ifdef LHAPDF
                                                        for (int ix=1; ix<nnnmx; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvar_BJet_pdf2D[id][ij][ik][iet][ix]->Fill(igenbin_bjet, weighttrg*BTagWt*pdfwt[ix]);
                                                                }
                                                        }
                                                        for (int iy=0; iy<nmgscale; iy++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvar_BJet_mgscale2D[id][ij][ik][iet][iy]->Fill(igenbin_bjet, weighttrg*BTagWt*mgscale[iy]);
                                                                }
                                                        }
#endif

#ifdef SCALEUNC
                                                        for (int ix=0; ix<nscale; ix++) {
                                                                if (genjets->size()>=2) {
                                                                        int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                        h_genvar_BJet_scaleunc2D[id][ij][ik][iet][ix]->Fill(igenbin_bjet, weighttrg*BTagWt*scalewt[ix]);
                                                                }
                                                        }
#endif
                                        }//if(isrc==0){
                                }//if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                                if( isRecoJCO_bjet_2D[id][ij][ik][iet] && isGenJCO_bjet_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#else
                                                if( isRecoJCO_bjet_2D[id][ij][ik][iet] && isGenJCO_bjet_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
#endif
                                		if(ak4PFJets->size()>=2 && genjets->size()>=2){
							int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],leadingptjec[isrc]);
                                        		int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                        		h_RM_bjet2D_deepJETT[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrg*BTagWt);

#ifdef PREFIRE
                                                        h_RM_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrg*BTagWt);
                                                        h_RM_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrgL1up*BTagWt);
                                                        h_RM_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrgL1down*BTagWt);
#endif

#ifdef BTAGUNC
                                                        h_RM_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrg*BTagWt_upCorr);
                                                        h_RM_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrg*BTagWt_downCorr);
                                                        h_RM_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrg*BTagWt_upUncorr);
                                                        h_RM_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet,igenbin_bjet,weighttrg*BTagWt_downUncorr);
#endif

#ifdef LHAPDF
                                                for (int ix=1; ix<nnnmx; ix++) {
                                                        h_RM_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Fill(irecbin_bjet, igenbin_bjet, weighttrg*BTagWt*pdfwt[ix]);
                                                }
#endif
                                		}else if(ak4PFJets->size()>=2){
							int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],leadingptjec[isrc]);
                                        		h_recofake_bjet2D_deepJETT[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt);

#ifdef PREFIRE
                                                        h_recofake_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt);
                                                        h_recofake_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrgL1up*BTagWt);
                                                        h_recofake_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrgL1down*BTagWt);
#endif

#ifdef BTAGUNC
                                                        h_recofake_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_upCorr);
                                                        h_recofake_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_downCorr);
                                                        h_recofake_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_upUncorr);
                                                        h_recofake_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_downUncorr);
#endif

#ifdef LHAPDF
                                                for (int ix=1; ix<nnnmx; ix++) {
                                                        h_recofake_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Fill(irecbin_bjet, weighttrg*BTagWt*pdfwt[ix]);
                                                }
#endif
                                		}else if(genjets->size()>=2){
							int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                        		h_genmiss_BJet2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt);

#ifdef PREFIRE
                                                        h_genmiss_BJet_prefire2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt);
                                                        h_genmiss_BJet_prefireup_2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrgL1up*BTagWt);
                                                        h_genmiss_BJet_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrgL1down*BTagWt);
#endif

#ifdef BTAGUNC
                                                        h_genmiss_BJet_BTagWt_upCorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_upCorr);
                                                        h_genmiss_BJet_BTagWt_downCorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_downCorr);
                                                        h_genmiss_BJet_BTagWt_upUncorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_upUncorr);
                                                        h_genmiss_BJet_BTagWt_downUncorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_downUncorr);
#endif

#ifdef LHAPDF
                                                for (int ix=1; ix<nnnmx; ix++) {
                                                        h_genmiss_BJet_pdf2D[id][ij][ik][iet][ix]->Fill(igenbin_bjet, weighttrg*BTagWt*pdfwt[ix]);
                                                }
#endif
                                			}
						}
						else{
                                        		if(isRecoJCO_bjet_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                		int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][isrc],leadingptjec[isrc]);
                                        			h_recofake_bjet2D_deepJETT[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt);

#ifdef PREFIRE
                                                                h_recofake_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt);
                                                                h_recofake_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrgL1up*BTagWt);
                                                                h_recofake_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrgL1down*BTagWt);
#endif

#ifdef BTAGUNC
                                                        h_recofake_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_upCorr);
                                                        h_recofake_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_downCorr);
                                                        h_recofake_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_upUncorr);
                                                        h_recofake_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Fill(irecbin_bjet, weighttrg*BTagWt_downUncorr);
#endif

#ifdef LHAPDF
                                                for (int ix=1; ix<nnnmx; ix++) {
                                                        h_recofake_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Fill(irecbin_bjet, weighttrg*BTagWt*pdfwt[ix]);
                                                }
#endif
                                        		}
                                        		if(isGenJCO_bjet_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                		int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                        			h_genmiss_BJet2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt);


#ifdef PREFIRE
                                                                h_genmiss_BJet_prefire2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt);
                                                                h_genmiss_BJet_prefireup_2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrgL1up*BTagWt);
                                                                h_genmiss_BJet_prefiredown_2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrgL1down*BTagWt);
#endif

#ifdef BTAGUNC
                                                        h_genmiss_BJet_BTagWt_upCorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_upCorr);
                                                        h_genmiss_BJet_BTagWt_downCorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_downCorr);
                                                        h_genmiss_BJet_BTagWt_upUncorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_upUncorr);
                                                        h_genmiss_BJet_BTagWt_downUncorr2D[id][ij][ik][iet]->Fill(igenbin_bjet, weighttrg*BTagWt_downUncorr);
#endif

#ifdef LHAPDF
                                                for (int ix=1; ix<nnnmx; ix++) {
                                                        h_genmiss_BJet_pdf2D[id][ij][ik][iet][ix]->Fill(igenbin_bjet, weighttrg*BTagWt*pdfwt[ix]);
                                                }
#endif
                        	                		}
                                			}//else{
						}//if (isrc==0 && isReconstruct){               

#ifdef JETRESO
                        if(isrc==0 && isReconstruct){
                                for(int ijer=0 ; ijer < njecmx ; ijer++){
#ifdef MATCHING
                                        if( isRecoJCO_bjet_JER_2D[id][ij][ik][iet][ijer] && isGenJCO_bjet_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && jet_matches){
#endif
                                                if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                        int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][ijer],leadingptjec[ijer]);
                                                        int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_RM_bjet_deepJETT_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin_bjet,igenbin_bjet,weighttrg*BTagWt);
                                                        }
                                                else if(ak4PFJets->size()>=2){
                                                        int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][ijer],leadingptjec[ijer]);
                                                        h_recofake_bjet_deepJETT_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin_bjet, weighttrg*BTagWt);
                                                        }
                                                else if(genjets->size()>=2){
                                                        int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genmiss_BJet_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin_bjet, weighttrg*BTagWt);
                                                        }
                                                }
                                                else{
                                                        if(isRecoJCO_bjet_JER_2D[id][ij][ik][iet][ijer] && irecohtjec[ijer]>=0 && irecohtjec[ijer]<njetptmn && ak4PFJets->size()>=2){
                                                                int irecbin_bjet = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT[id][ij][ik][ijer],leadingptjec[ijer]);
                                                                h_recofake_bjet_deepJETT_JER_2D[id][ij][ik][iet][ijer]->Fill(irecbin_bjet, weighttrg*BTagWt);
                                                                }
                                                        if(isGenJCO_bjet_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                                int igenbin_bjet = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                                h_genmiss_BJet_JER_2D[id][ij][ik][iet][ijer]->Fill(igenbin_bjet, weighttrg*BTagWt);
                                                                }
                                                        }
                                                }//for(int ijer=0 ; ijer < njecmx ; ijer++){
					 }//if(isrc==0 && isReconstruct){
#endif
                        		}//for (int isrc=0; isrc<nGenReso; isrc++) {
				}//if(isMC){
                        }//for (int ik=0; ik<nkappa; ik++){
                }//for(int ij=0; ij<njet; ij++){
        }//for(int id=0; id<ndef; id++){
}//for (int iet=0; iet<njetetamn; iet++){


#ifdef TRACKEFF
bool isRecoJCO_BJet_TrackEff2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_BJet_TrackEff2D[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
        if(recomomJCO_bjet_deepJETT_trackeff[id][ij][ik][0]<=0 || recomomJCO_bjet_deepJETT_trackeff[id][ij][ik][1]<=0 || recomomJCO_bjet_deepJETT_trackeff[id][ij][ik][2]<=0 || genmomJCO_BJet_trackeff[id][ij][ik][0]<=0) continue;
#endif
                if (isReconstruct) {
                        for (int isrc=0; isrc<njecmx; isrc++) {
                                if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                        if (isrc==0) {
                                                if(ak4PFJets->size()>=2){
                                                        isRecoJCO_BJet_TrackEff2D[id][ij][ik][iet]=true;
                                                        int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Fill(irecbin,weighttrg*BTagWt);
                                                        }
                                                }
                                        }
                                }
                        }
                if(isMC){
                        for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
                                                        isGenJCO_BJet_TrackEff2D[id][ij][ik][iet]=true;
                                                        int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                        h_genvar_BJet_trackeff2D[id][ij][ik][iet]->Fill(igenbin,weighttrg*BTagWt);
                                                        }
                                                }
                                        }
                                if(isrc==0 && isReconstruct){
#ifdef MATCHING
                                if(isRecoJCO_BJet_TrackEff2D[id][ij][ik][iet] && isGenJCO_BJet_TrackEff2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#endif
                                        if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg*BTagWt);
                                        }
                                        else if(ak4PFJets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Fill(irecbin, weighttrg*BTagWt);
                                        }
                                        else if(genjets->size()>=2){
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_BJet_trackeff2D[id][ij][ik][iet]->Fill(igenbin, weighttrg*BTagWt);
                                        }
                                }
                                else{
                                        if(isRecoJCO_BJet_TrackEff2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackeff[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Fill(irecbin, weighttrg*BTagWt);
                                        }
                                        if(isGenJCO_BJet_TrackEff2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet_trackeff[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_BJet_trackeff2D[id][ij][ik][iet]->Fill(igenbin, weighttrg*BTagWt);
                                                }
                                        }
                                }
                        }
                }
                        }
                }
        }
}
#endif

#ifdef TRACKPTUP
//Trackpt UP
bool isRecoJCO_bjet_deepJETT_TrackPT1_2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_bjet_deepJETT_TrackPT1_2D[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
        if(recomomJCO_bjet_deepJETT_trackpt1[id][ij][ik][0]<=0 || recomomJCO_bjet_deepJETT_trackpt1[id][ij][ik][1]<=0 || recomomJCO_bjet_deepJETT_trackpt1[id][ij][ik][2]<=0 || genmomJCO_BJet[id][ij][ik][0]<=0) continue;
#endif
                if (isReconstruct) {
                        for (int isrc=0; isrc<njecmx; isrc++) {
                                if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                        if (isrc==0) {
                                                if(ak4PFJets->size()>=2){
                                                        isRecoJCO_bjet_deepJETT_TrackPT1_2D[id][ij][ik][iet]=true;
                                                        int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin,weighttrg*BTagWt);
                                                        }
                                                }
                                        }
                                }
                        }
                if(isMC){
                        for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
                                                isGenJCO_bjet_deepJETT_TrackPT1_2D[id][ij][ik][iet]=true;
                                                }
                                        }
                                }
                                if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                if(isRecoJCO_bjet_deepJETT_TrackPT1_2D[id][ij][ik][iet] && isGenJCO_bjet_deepJETT_TrackPT1_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#endif
                                        if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg*BTagWt);
                                        }
                                        else if(ak4PFJets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg*BTagWt);
                                        }
                                        else if(genjets->size()>=2){
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_BJet_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg*BTagWt);
                                        }
                                }
                                else{
                                        if(isRecoJCO_bjet_deepJETT_TrackPT1_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt1[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg*BTagWt);
                                        }
                                        if(isGenJCO_bjet_deepJETT_TrackPT1_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_BJet_trackpt1_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg*BTagWt);
                                                }
                                        }
                                }
                        }
                }
                        }
                }
        }
}
#endif

#ifdef TRACKPTDOWN
//Trackpt Down
bool isRecoJCO_bjet_deepJETT_TrackPT2_2D[ndef][njet][nkappa][njetetamn];
bool isGenJCO_bjet_deepJETT_TrackPT2_2D[ndef][njet][nkappa][njetetamn];

for(int id=0; id<ndef; id++){
for(int ij=0; ij<njet; ij++){
for(int ik=0; ik<nkappa; ik++){
for(int iet=0; iet<njetetamn; iet++){

#ifdef MATCHING
        if(recomomJCO_bjet_deepJETT_trackpt2[id][ij][ik][0]<=0 || recomomJCO_bjet_deepJETT_trackpt2[id][ij][ik][1]<=0 || recomomJCO_bjet_deepJETT_trackpt2[id][ij][ik][2]<=0 || genmomJCO_BJet[id][ij][ik][0]<=0) continue;
#endif
                if (isReconstruct) {
                        for (int isrc=0; isrc<njecmx; isrc++) {
                                if (irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn){
                                        if (isrc==0) {
                                                if(ak4PFJets->size()>=2){
                                                        isRecoJCO_bjet_deepJETT_TrackPT2_2D[id][ij][ik][iet]=true;
                                                        int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                        h_recovar_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin,weighttrg*BTagWt);
                                                        }
                                                }
                                        }
                                }
                        }
                if(isMC){
                        for (int isrc=0; isrc<nGenReso; isrc++) {
                                if (isMC && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn){
                                        if(isrc==0){
                                                if(genjets->size()>=2){
                                                isGenJCO_bjet_deepJETT_TrackPT2_2D[id][ij][ik][iet]=true;
                                                }
                                        }
                                }
                                if (isrc==0 && isReconstruct){
#ifdef MATCHING
                                if(isRecoJCO_bjet_deepJETT_TrackPT2_2D[id][ij][ik][iet] && isGenJCO_bjet_deepJETT_TrackPT2_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && jet_matches){
#endif
                                        if(ak4PFJets->size()>=2 && genjets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_RM_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin,igenbin,weighttrg*BTagWt);
                                        }
                                        else if(ak4PFJets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg*BTagWt);
                                        }
                                        else if(genjets->size()>=2){
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_BJet_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg*BTagWt);
                                        }
                                }
                                else{
                                        if(isRecoJCO_bjet_deepJETT_TrackPT2_2D[id][ij][ik][iet] && irecohtjec[isrc]>=0 && irecohtjec[isrc]<njetptmn && ak4PFJets->size()>=2){
                                                int irecbin = RecoBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(RecoJCO_bjet_deepJETT_trackpt2[id][ij][ik][isrc],leadingptjec[isrc]);
                                                h_recofake_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Fill(irecbin, weighttrg*BTagWt);
                                        }
                                        if(isGenJCO_bjet_deepJETT_TrackPT2_2D[id][ij][ik][iet] && igenhtres[isrc]>=0 && igenhtres[isrc]<njetptmn && genjets->size()>=2){
                                                int igenbin = GenBinningbjet2D[id][ij][ik][iet]->GetGlobalBinNumber(GenJCO_BJet[id][ij][ik][isrc],leadgenptres[isrc]);
                                                h_genmiss_BJet_trackpt2_2D[id][ij][ik][iet]->Fill(igenbin, weighttrg*BTagWt);
                                                }
                                        }
                                }
                        }
                }
                        }
                }
        }
}
#endif

//cout <<"-------------"<<endl;
//cout<<"Event wt : "<<weighttrg<<endl;
	//if (nevt%1000==1) { std::cout <<"nevt "<<nevt<<" naa "<<naa<<" nbb "<<nbb<<" ncc "<<ncc<< std::endl;}
      	//if (nevt%1000==1) { std::cout <<"Reco "<< Reco << " Gen " <<Gen<< " RM " <<RM <<std::endl;}
      	//if(nevt==100){cout <<igenht <<endl;}
      	}//cout <<"END EVENT"<< endl;

// ------------ method called once each job just before starting event loop  ------------
void 
MiniAODAnalyzer::beginJob() {
//t1=clock();
  nevt = 0;
  if (isMC) {
    double dattot[nHLTmx]={0};
    double mctot=0;
    for (int ij=0; ij<npileupmx; ij++) {
      for (int jk=0; jk<nHLTmx; jk++) {
	 dattot[jk] +=datpileup[jk][ij];
	}
         mctot +=mcpileup[ij];
        }

      for (int ij=0; ij<npileupmx; ij++) {
        mcpileup[ij] /=max(1.e-6,mctot);
           for (int jk=0; jk<nHLTmx; jk++) {
                datpileup[jk][ij] /=max(1.e-6,dattot[jk]);
                rat_pileup[jk][ij] =  datpileup[jk][ij]/mcpileup[ij];
                }
        }
  }

#ifdef JETENERGY
  for (int isrc = 0; isrc < nsrc; isrc++) {
    const char *name = srcnames[isrc];
#ifdef SIXTEEN
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16APV_RunBCD_V7_DATA_UncertaintySources_AK4PFchs.txt", name); // DATA chnage eras for different era
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16APV_RunEF_V7_DATA_UncertaintySources_AK4PFchs.txt", name);  // DATA chnage eras for different era
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16_RunFGH_V7_DATA_UncertaintySources_AK4PFchs.txt", name);    // DATA chnage eras for different era
    JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16APV_V7_MC_UncertaintySources_AK4PFchs.txt", name);          // MC APV
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL16_V7_MC_UncertaintySources_AK4PFchs.txt", name);             // MC
#elif defined(SEVENTEEN)
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL17_RunF_V5_DATA_UncertaintySources_AK4PFchs.txt", name);      // data chnage eras for different era
    JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL17_V5_MC_UncertaintySources_AK4PFchs.txt", name);   	    // for mc
#elif defined(EIGHTEEN)
    //JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL18_RunD_V5_DATA_UncertaintySources_AK4PFchs.txt", name);      // DATA chnage eras for different era
    JetCorrectorParameters *p = new JetCorrectorParameters("Summer19UL18_V5_MC_UncertaintySources_AK4PFchs.txt", name);             // MC
#endif
    JetCorrectionUncertainty *unc = new JetCorrectionUncertainty(*p);
    //vsrc[isrc] = unc;vsrc.push_back(unc);
    vsrc.push_back(unc);
    }
#endif  

//cout << "Write test 34 = ok " << endl;
}

// ------------ method called once each job just after ending the event loop  ------------
void 
MiniAODAnalyzer::endJob() 
{
//cout<<"naa: "<<naa<<endl;
   TUnfoldBinng2D->cd(); 
  //TUnfoldBinning Jet Charge
	for(int id=0; id<ndef; id++){
		for(int ij=0; ij<njet; ij++){
			for(int ik=0; ik<nkappa; ik++){
				for (int iet=0; iet<njetetamn; iet++) {
					h_recovar2D[id][ij][ik][iet]->Write();
					h_genvar2D[id][ij][ik][iet]->Write();
					h_recofake2D[id][ij][ik][iet]->Write();
					h_genmiss2D[id][ij][ik][iet]->Write();
					h_RM2D[id][ij][ik][iet]->Write();

					h_recovar2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genvar2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_recofake2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genmiss2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_RM2D_BJetBin[id][ij][ik][iet]->Write();

					//b-jet
					h_recovar_bjet2D_deepJETT[id][ij][ik][iet]->Write();
					h_recovar_bjet2D_deepJETT_NoSF[id][ij][ik][iet]->Write();
                                        h_genvar_BJet2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet2D_deepJETT[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet2D_deepJETT[id][ij][ik][iet]->Write();

#ifdef FLAV
					h_recovar_gjet2D[id][ij][ik][iet]->Write();
					h_recovar_ujet2D[id][ij][ik][iet]->Write();
					h_recovar_ubarjet2D[id][ij][ik][iet]->Write();
					h_recovar_djet2D[id][ij][ik][iet]->Write();
					h_recovar_dbarjet2D[id][ij][ik][iet]->Write();
					h_recovar_bjet2D[id][ij][ik][iet]->Write();
                                        h_recovar_bbarjet2D[id][ij][ik][iet]->Write();
					h_recovar_ojet2D[id][ij][ik][iet]->Write();
#endif

					//GenJet Flavour Info
					h_genvar_gjet2D[id][ij][ik][iet]->Write();
                                        h_genvar_ujet2D[id][ij][ik][iet]->Write();
                                        h_genvar_ubarjet2D[id][ij][ik][iet]->Write();
                                        h_genvar_djet2D[id][ij][ik][iet]->Write();
                                        h_genvar_dbarjet2D[id][ij][ik][iet]->Write();
					h_genvar_bjet2D[id][ij][ik][iet]->Write();
                                        h_genvar_bbarjet2D[id][ij][ik][iet]->Write();
                                        h_genvar_ojet2D[id][ij][ik][iet]->Write();	
#ifdef  LHAPDF
            				for (int ix=1; ix<nnnmx; ix++) {
						h_genvarpdf2D[id][ij][ik][iet][ix]->Write();
						h_recovarpdf2D[id][ij][ik][iet][ix]->Write();
						h_recofakepdf2D[id][ij][ik][iet][ix]->Write();
						h_genmisspdf2D[id][ij][ik][iet][ix]->Write();
						h_RMpdf2D[id][ij][ik][iet][ix]->Write();

						h_genvarpdf2D_BJetBin[id][ij][ik][iet][ix]->Write();
                                                h_recovarpdf2D_BJetBin[id][ij][ik][iet][ix]->Write();
                                                h_recofakepdf2D_BJetBin[id][ij][ik][iet][ix]->Write();
                                                h_genmisspdf2D_BJetBin[id][ij][ik][iet][ix]->Write();
                                                h_RMpdf2D_BJetBin[id][ij][ik][iet][ix]->Write();

						//BJet
						h_genvar_BJet_pdf2D[id][ij][ik][iet][ix]->Write();
                                                h_recovar_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Write();
                                                h_recofake_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Write();
                                                h_genmiss_BJet_pdf2D[id][ij][ik][iet][ix]->Write();
                                                h_RM_bjet_deepJETT_pdf2D[id][ij][ik][iet][ix]->Write();
					}
					for (int iy=0; iy<nmgscale; iy++) {
						h_genvarmgscale2D[id][ij][ik][iet][iy]->Write();
						h_genvarmgscale2D_BJetBin[id][ij][ik][iet][iy]->Write();
					}
					//BJet
					for (int iy=0; iy<nmgscale; iy++) {h_genvar_BJet_mgscale2D[id][ij][ik][iet][iy]->Write();}
#endif

#ifdef  SCALEUNC
                                        for (int ix=0; ix<nscale; ix++) {
						h_genvarscaleunc2D[id][ij][ik][iet][ix]->Write();
						h_genvarscaleunc2D_BJetBin[id][ij][ik][iet][ix]->Write();
					}
					//BJet
					for (int ix=0; ix<nscale; ix++) {h_genvar_BJet_scaleunc2D[id][ij][ik][iet][ix]->Write();}
#endif

#ifdef  JETENERGY
            				for (int ix=1; ix<njecmx; ix++) {
						h_recovarjec2D[id][ij][ik][iet][ix]->Write();
						h_recovarjec2D_BJetBin[id][ij][ik][iet][ix]->Write();
					}
					//BJet
					for (int ix=1; ix<njecmx; ix++) {h_recovar_bjet_deepJETT_jec2D[id][ij][ik][iet][ix]->Write();}
#elif defined(JETRESO)
            				for (int ix=0; ix<njecmx; ix++ ) {
             					h_recovarres2D[id][ij][ik][iet][ix]->Write();
             					h_RM_JER_2D[id][ij][ik][iet][ix]->Write();
             					h_recofake_JER_2D[id][ij][ik][iet][ix]->Write();
             					h_genmiss_JER_2D[id][ij][ik][iet][ix]->Write();

						h_recovarres2D_BJetBin[id][ij][ik][iet][ix]->Write();
                                                h_RM_JER_2D_BJetBin[id][ij][ik][iet][ix]->Write();
                                                h_recofake_JER_2D_BJetBin[id][ij][ik][iet][ix]->Write();
                                                h_genmiss_JER_2D_BJetBin[id][ij][ik][iet][ix]->Write();

						//BJet
						h_recovar_bjet_deepJETT_res2D[id][ij][ik][iet][ix]->Write();
                                                h_RM_bjet_deepJETT_JER_2D[id][ij][ik][iet][ix]->Write();
                                                h_recofake_bjet_deepJETT_JER_2D[id][ij][ik][iet][ix]->Write();
                                                h_genmiss_BJet_JER_2D[id][ij][ik][iet][ix]->Write();
         					}
#endif

#ifdef PREFIRE
					h_recovar_prefire2D[id][ij][ik][iet]->Write();
                                        h_genvar_prefire2D[id][ij][ik][iet]->Write();
                                        h_recofake_prefire2D[id][ij][ik][iet]->Write();
                                        h_genmiss_prefire2D[id][ij][ik][iet]->Write();
                                        h_RM_prefire2D[id][ij][ik][iet]->Write();

					h_recovar_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_genvar_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_recofake_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_RM_prefireup_2D[id][ij][ik][iet]->Write();

					h_recovar_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_genvar_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_recofake_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_RM_prefiredown_2D[id][ij][ik][iet]->Write();


					h_recovar_prefire2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genvar_prefire2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_recofake_prefire2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genmiss_prefire2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_RM_prefire2D_BJetBin[id][ij][ik][iet]->Write();

					h_recovar_prefireup_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genvar_prefireup_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_recofake_prefireup_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genmiss_prefireup_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_RM_prefireup_2D_BJetBin[id][ij][ik][iet]->Write();

					h_recovar_prefiredown_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genvar_prefiredown_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_recofake_prefiredown_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genmiss_prefiredown_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_RM_prefiredown_2D_BJetBin[id][ij][ik][iet]->Write();

					//BJet
					h_recovar_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Write();
                                        h_genvar_BJet_prefire2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_prefire2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_prefire2D[id][ij][ik][iet]->Write();

                                        h_recovar_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_genvar_BJet_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_prefireup_2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_prefireup_2D[id][ij][ik][iet]->Write();

                                        h_recovar_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_genvar_BJet_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_prefiredown_2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_prefiredown_2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKEFF
					h_recovar_trackeff2D[id][ij][ik][iet]->Write();
					h_genvar_trackeff2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackeff2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackeff2D[id][ij][ik][iet]->Write();
                                        h_RM_trackeff2D[id][ij][ik][iet]->Write();

					h_recovar_trackeff2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genvar_trackeff2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_recofake_trackeff2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genmiss_trackeff2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_RM_trackeff2D_BJetBin[id][ij][ik][iet]->Write();

					//BJet
					h_recovar_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Write();
                                        h_genvar_BJet_trackeff2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_trackeff2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_trackeff2D[id][ij][ik][iet]->Write();
#endif

/*
#ifdef TRACKEFFDEBUG
					h_recovar_trackeff2D_debug[id][ij][ik][iet]->Write();
                                        h_genvar_trackeff2D_debug[id][ij][ik][iet]->Write();
                                        h_recofake_trackeff2D_debug[id][ij][ik][iet]->Write();
                                        h_genmiss_trackeff2D_debug[id][ij][ik][iet]->Write();
                                        h_RM_trackeff2D_debug[id][ij][ik][iet]->Write();
#endif
*/

#ifdef TRACKPTUP
					h_recovar_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_RM_trackpt1_2D[id][ij][ik][iet]->Write();

					h_recovar_trackpt1_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt1_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt1_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_RM_trackpt1_2D_BJetBin[id][ij][ik][iet]->Write();

					//BJet
					h_recovar_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_trackpt1_2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_trackpt1_2D[id][ij][ik][iet]->Write();
#endif

#ifdef TRACKPTDOWN
					h_recovar_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_RM_trackpt2_2D[id][ij][ik][iet]->Write();

					h_recovar_trackpt2_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_recofake_trackpt2_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_genmiss_trackpt2_2D_BJetBin[id][ij][ik][iet]->Write();
                                        h_RM_trackpt2_2D_BJetBin[id][ij][ik][iet]->Write();

					//BJet
					h_recovar_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_trackpt2_2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_trackpt2_2D[id][ij][ik][iet]->Write();
#endif

#ifdef BTAGUNC
					h_recovar_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Write();
					h_recovar_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Write();
					h_recovar_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Write();
					h_recovar_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Write();

					h_genvar_BJet_BTagWt_upCorr2D[id][ij][ik][iet]->Write();
                                        h_genvar_BJet_BTagWt_downCorr2D[id][ij][ik][iet]->Write();
                                        h_genvar_BJet_BTagWt_upUncorr2D[id][ij][ik][iet]->Write();
                                        h_genvar_BJet_BTagWt_downUncorr2D[id][ij][ik][iet]->Write();

					h_recofake_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Write();
                                        h_recofake_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Write();

					h_genmiss_BJet_BTagWt_upCorr2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_BTagWt_downCorr2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_BTagWt_upUncorr2D[id][ij][ik][iet]->Write();
                                        h_genmiss_BJet_BTagWt_downUncorr2D[id][ij][ik][iet]->Write();

					h_RM_bjet_deepJETT_BTagWt_upCorr2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_BTagWt_downCorr2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_BTagWt_upUncorr2D[id][ij][ik][iet]->Write();
                                        h_RM_bjet_deepJETT_BTagWt_downUncorr2D[id][ij][ik][iet]->Write();
#endif
					}
				}
			}
		}
}

// ------------ method called when starting to processes a run  ------------

void 
MiniAODAnalyzer::beginRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
// Initialize hltConfig

#ifdef TRIGGER

// cout << "Write test 4 = ok " << endl;
  bool changed(true);
  if (hltPrescaleProvider_.init(iRun,iSetup,theHLTTag.c_str(),changed)) {
  HLTConfigProvider const&  hltConfig = hltPrescaleProvider_.hltConfigProvider();
  hltConfig.dump("Triggers");
  hltConfig.dump("PrescaleTable");

    for (unsigned int ij=0; ij<nHLTmx; ij++) {
      l1pres[ij] = hltpres[ij]=-7;
      }
	} 
	else {
         	}

#endif
 
  std::cout<<" End of MiniAODAnalyzer::beginRun"<<std::endl; //"nevt "<<nevt<<" naa "<<naa<<" nbb "<<nbb<<" ncc "<<ncc<< std::endl;
}


// ------------ method called when ending the processing of a run  ------------
/*
void 
MiniAODAnalyzer::endRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
std::cout<<" End of MiniAODAnalyzer::beginRun"<<std::endl;
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void 
MiniAODAnalyzer::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{


}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void 
MiniAODAnalyzer::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
MiniAODAnalyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  //Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

double PhiInRange(const double& phi) {
      double phiout = phi;
      
      if( phiout > 2*M_PI || phiout < -2*M_PI) {
	phiout = fmod( phiout, 2*M_PI);
      }
      if (phiout <= -M_PI) phiout += 2*M_PI;
      else if (phiout >  M_PI) phiout -= 2*M_PI;
      
      return phiout;
}

template <class T, class U>
double deltaR(const T& t, const U& u) {
return sqrt(pow(t.eta()-u.eta(),2) +pow(PhiInRange(t.phi()-u.phi()),2));
}

// Default jet charge observable NOT USED
double JetCharge1(int charge, double candspt, double jpt, double k) {
	double Q1 = 0.0;
	//double j1 = 0.0;
	Q1 +=1.0*( charge*(pow(candspt,k)));
	//j1 = Q1/pow(jpt,k);
	return Q1/pow(jpt,k);
	//return j1;
}

// For default definition Q
double candsmom(int charge, double candspt, double k){	
	//double q = 0.0;
	double q = ( charge*(pow(candspt,k)));
	return q;
}
/*
double candsmom2(double p, double k) {
    double result = pow(p, k);
    	if (p > 0 && !isnan(result) && !isinf(result)) {
    		return result;
    	          } else {continue;}
}
*/ 
// For longitudinal definition Q(L)
double dotproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k) {
	double dot = 0.0;
	//double dotresult =0.0;
	dot = (pow((((candspx*jpx) + (candspy*jpy) + (candspz*jpz))/jpt),k));
	//dotresult = (charge*(pow(dot,k)));
	return dot;
	//return dotresult;
}

// For transverse definition Q(T)
double crossproduct(double candspx, double candspy, double candspz, double jpx, double jpy, double jpz, double jpt, double k){
	double cross = 0.0;
	//double crossresult =0.0;
	cross = (pow(((sqrt((pow(((candspy*jpz) - (candspz*jpy)),2)) + (pow(((candspz*jpx) - (candspx*jpz)),2)) + (pow(((candspx*jpy) - (candspy*jpx)),2))))/jpt),k));
	//crossreult = (charge*(pow(cross,k)));
	return cross;
	//return crossresult;
}

double dotProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k) {
    double dotProduct = v1.dot(v2);
    double magV2 = v2.mag();
    double dotOverMag = dotProduct / magV2;
    double result = std::pow(dotOverMag, k);
    return result;
}

double crossProductPower(const Hep3Vector& v1, const Hep3Vector& v2, double k) {
    Hep3Vector crossProduct = v1.cross(v2);
    double magV2 = v2.mag();
    double crossOverMag = crossProduct.mag() / magV2;
    double result = std::pow(crossOverMag, k);
    return result;
}

//define this as a plug-in
DEFINE_FWK_MODULE(MiniAODAnalyzer);
